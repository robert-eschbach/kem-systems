
init

log
/usr/users/eschbach/specs/natlist2/natlist2
option
undo
noundo



ADD
[null: NATLIST]
[cons: NAT, NATLIST -> NATLIST]
[append: NATLIST, NATLIST -> NATLIST]
[delete: NAT, NATLIST -> NATLIST]
[member: NAT, NATLIST -> bool]
[perm: NATLIST, NATLIST -> bool]
[0: NAT]
[succ: NAT -> NAT]
[+: NAT, NAT -> NAT]
[*: NAT, NAT -> NAT]
[-: NAT, NAT -> NAT]
[<: NAT, NAT -> bool]
[>=: NAT, NAT -> bool]
[rev: NATLIST -> NATLIST]
[length: NATLIST -> NAT]
[is_equal_set: NATLIST, NATLIST -> bool]
[is_subset: NATLIST, NATLIST -> bool]
append(null, xnl1) := xnl1
append(cons(x, xnl1), xnl2) := cons(x, append(xnl1, xnl2))
delete(x, null) := null
delete(x, cons(x, xnl1)) := xnl1
delete(x, cons(y, xnl1)) := cons(y, delete(x, xnl1)) if not ((y = x))
member(x, null) := false
member(x, cons(x, xnl1)) := true
member(x, cons(y, xnl1)) := member(x, xnl1) if not ((x = y))
perm(null, null) := true
perm(null, cons(x, xnl1)) := false
perm(cons(x, xnl1), null) := false
perm(cons(x, xnl1), xnl2) := (member(x, xnl2) and perm(xnl1, delete(x, xnl2)))
(x + 0) := x
(x + succ(y)) := succ((x + y))
(0 - x) := 0
(x - 0) := x
(succ(x) - succ(y)) := (x - y)
(x * 0) := 0
(x * succ(y)) := (x + (x * y))
(x < 0) := false
(0 < succ(x)) := true
(succ(x) < succ(y)) := (x < y)
(x >= x) := true
(0 >= succ(y)) := false
(succ(x) >= y) := (x >= y) if not ((succ(x) = y))
rev(null) := null
rev(cons(x, u)) := append(rev(u), cons(x, null))
length(null) := 0
length(cons(x, u)) := succ(length(u))
is_subset(null, u) := true
is_subset(cons(x, u), v) := (member(x, v) and is_subset(u, v))
is_equal_set(u, v) := (is_subset(u, v) and is_subset(u, v))
]



operator
constructor
null
 

operator
constructor
cons
yes

operator
constructor
0
 

operator
constructor
succ
yes

operator
order
l

operator
precedence
perm member 

operator
precedence
perm delete 

operator
precedence
* + 

operator
precedence
rev append 

operator
precedence
is_subset member 

operator
precedence
is_equal_set is_subset 

operator
status
perm
rl



makerule

option
prove
e

cover

add
member(x, cons(y, u)) == true if member(x, u)
]

makerule

prove
rev(rev(u)) == u

prove
member(x, append(u, v)) == true if member(x, u)

prove
member(x, append(u, v)) == true if member(x, u)

prove
member(x, cons(y, u)) == true if member(x, u)

prove
is_subset(cons(x, u), rev(cons(x, u))) == true if is_subset(u, rev(u))

prove
is_subset(u, rev(v)) == true if (u = v)

prove
is_subset(rev(v), u) == true if (u = v)

prove
is_equal_set(u, rev(u)) == true



write
spec-write
/usr/users/eschbach/specs/natlist2/natlist2.spec
