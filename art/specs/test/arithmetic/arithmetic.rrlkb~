
init

log
/usr/users/eschbach/specs/arithmetic/arithmetic


ADD
[0: NAT]
[succ: NAT -> NAT]
[+: NAT, NAT -> NAT]
[*: NAT, NAT -> NAT]
[-: NAT, NAT -> NAT]
[<: NAT, NAT -> bool]
[>=: NAT, NAT -> bool]
[div: NAT, NAT -> NAT]
[rem: NAT, NAT -> NAT]
[divides: NAT, NAT -> bool]
[gcd: NAT, NAT -> NAT]
[sub1: NAT -> NAT]
(x + 0) == x
(x + succ(y)) == succ((x + y))
(0 - x) == 0
(x - 0) == x
(succ(x) - succ(y)) == (x - y)
(x * 0) == 0
(x * succ(y)) == (x + (x * y))
(x < 0) == false
(0 < succ(x)) == true
(succ(x) < succ(y)) == (x < y)
(x >= x) == true
(0 >= succ(y)) == false
(succ(x) >= y) == (x >= y) if not ((succ(x) = y))
div(x, 0) == 0
div(x, y) == 0 if (x < y)
div((y + x), y) == succ(div(x, y)) if not ((0 = y))
rem(x, 0) == x
rem(x, y) == x if (x < y)
rem((y + x), y) == rem(x, y)
divides(x, y) == (rem(y, x) = 0)
gcd(x, 0) == x
gcd(0, y) == y
gcd((x + y), y) == gcd(x, y)
gcd(x, (x + y)) == gcd(x, y)
sub1(x) == 0
sub1(succ(x)) == x
]




operator
constructor
0
 

operator
constructor
succ
yes

operator
acoperator
+ 

operator
order
l

operator
precedence
* + 

operator
precedence
>= < 

operator
status
*
rl



kb

suff
option
prove
s




write
spec-write
/usr/users/eschbach/specs/arithmetic/arithmetic.spec