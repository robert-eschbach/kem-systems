OPTION
HISTORY
NO-HISTORY
ADD
(X + 0) == X
(X + SUCC(Y)) == SUCC((X + Y))
(0 - X) == 0
(X - 0) == X
(SUCC(X) - SUCC(Y)) == (X - Y)
(X * 0) == 0
(X * SUCC(Y)) == (X + (X * Y))
(X < 0) == FALSE
(0 < SUCC(X))
(SUCC(X) < SUCC(Y)) == (X < Y)
(X >= X)
(0 >= SUCC(Y)) == FALSE
(SUCC(X) >= Y) == (X >= Y) if NOT((SUCC(X) = Y))
DIV(X, 0) == 0
DIV(X, Y) == 0 if (X < Y)
DIV((Y + X), Y) == SUCC(DIV(X, Y)) if NOT((0 = Y))
REM(X, 0) == X
REM(X, Y) == X if (X < Y)
REM((Y + X), Y) == REM(X, Y)
DIVIDES(X, Y) == (REM(Y, X) = 0)
GCD(X, 0) == X
GCD(0, Y) == Y
GCD((X + Y), Y) == GCD(X, Y)
GCD(X, (X + Y)) == GCD(X, Y)
SUB1(0) == 0
SUB1(SUCC(X)) == X
APPEND(NULL, XNL1) == XNL1
APPEND(CONS(X, XNL1), XNL2) == CONS(X, APPEND(XNL1, XNL2))
DELETE(X, NULL) == NULL
DELETE(X, CONS(X, XNL1)) == XNL1
DELETE(X, CONS(Y, XNL1)) == CONS(Y, DELETE(X, XNL1)) if NOT((Y = X))
MEMBER(X, NULL) == FALSE
MEMBER(X, CONS(X, XNL1))
MEMBER(X, CONS(Y, XNL1)) == MEMBER(X, XNL1) if NOT((X = Y))
PERM(NULL, NULL)
PERM(NULL, CONS(X, XNL1)) == FALSE
PERM(CONS(X, XNL1), NULL) == FALSE
PERM(CONS(X, XNL1), XNL2) == (MEMBER(X, XNL2) AND PERM(XNL1, DELETE(X, XNL2)))
PRIME(0) == FALSE
PRIME(SUCC(X)) == PRIME1(SUCC(X), X)
PRIMELIST(NULL)
PRIMELIST(CONS(X, XNL)) == (PRIME(X) AND PRIMELIST(XNL))
TIMELIST(NULL) == SUCC(0)
TIMELIST(CONS(X, XNL)) == (X * TIMELIST(XNL))
PRIMEFAC(0) == NULL
PRIMEFAC(SUCC(0)) == NULL
PRIMEFAC((X * Y)) == APPEND(PRIMEFAC(X), PRIMEFAC(Y)) if (NOT((X = 0)) AND NOT((Y = 0)))
PRIME1(X, 0) == FALSE
PRIME1(X, SUCC(0))
PRIME1(X, SUCC(Y)) == (NOT(DIVIDES(SUCC(Y), X)) AND PRIME1(X, Y)) if NOT((Y = 0))
]
OPERATOR
CONSTRUCTOR
0 
OPERATOR
CONSTRUCTOR
SUCC 
YES
OPERATOR
CONSTRUCTOR
NULL 
OPERATOR
CONSTRUCTOR
CONS 
YES
OPERATOR
ACOPERATOR
+ * 
OPERATOR
COMMUTATIVE
GCD 
OPERATOR
PRECEDENCE
* + 
OPERATOR
PRECEDENCE
>= < 
OPERATOR
PRECEDENCE
DIVIDES REM 
OPERATOR
PRECEDENCE
GCD * 
OPERATOR
PRECEDENCE
SUB1 < 
OPERATOR
PRECEDENCE
DIV * 
OPERATOR
PRECEDENCE
PERM MEMBER 
OPERATOR
PRECEDENCE
PERM DELETE 
OPERATOR
PRECEDENCE
PRIMELIST PRIME 
OPERATOR
PRECEDENCE
TIMELIST * 
OPERATOR
PRECEDENCE
PRIMEFAC APPEND 
OPERATOR
PRECEDENCE
PRIME PRIME1 
OPERATOR
PRECEDENCE
PRIME1 REM 
OPERATOR
STATUS
*
OPERATOR
STATUS
<
LR
OPERATOR
STATUS
PERM
LR
MAKERULE
SUFFICE
OPTION
PROVE
E
ADD
LIST
ADD
ADD
(X + Y) == (Y + X)
(X * (Y + Z)) == ((X * Y) + (X * Z))
(X < SUCC(0)) == (X = 0)
((X + Y) = 0) == ((X = 0) AND (Y = 0))
((X + Y) = Y) == (X = 0)
((X + Z) = (Y + Z)) == (X = Y)
((X * Y) = 0) == ((X = 0) OR (Y = 0))
((X * Y) = X) == (Y = SUCC(0)) if NOT((X = 0))
((X * Y) = X) == ((Y = SUCC(0)) OR (X = 0))
((X * Y) = SUCC(0)) == ((X = SUCC(0)) AND (Y = SUCC(0)))
(Y < SUCC(Y))
(0 >= U) == (U = 0)
(SUCC(X) < Y) == TRUE if ((X < Y) AND NOT((SUCC(X) = Y)))
(SUCC(X) < Y) == TRUE if ((X < Y) AND NOT((SUCC(X) = Y)))
(U >= Z) == NOT((U < Z))
((U * Y) < SUCC(Y)) == FALSE if (NOT((U = 0)) AND (NOT((U = SUCC(0))) AND NOT((Y = 0))))
REM(Y, Y) == 0
REM(SUCC((Y + X)), Y) == REM(SUCC(X), Y)
DIV(Y, Y) == SUCC(0) if NOT((0 = Y))
DIV(0, Y) == 0
REM(0, Y) == 0
(Y * DIV((Y + X), Y)) == (Y * SUCC(DIV(X, Y)))
(REM(X, Y) + (Y * DIV(X, Y))) == X
(Y * DIV(X, Y)) == X if DIVIDES(Y, X)
(X * Y) == (Y * X)
(X * (Y * Z)) == ((X * Y) * Z)
]
ADD
LIST
LIST
QUIT
