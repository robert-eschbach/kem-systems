
option
art
on

init

log
/usr/progress/art/specs/test/nat1/nat1.impl_1/nat1.impl_1.prop_1/nat1.impl_1.prop_1

option
history
no-history



ADD
[0 : NAT]
[succ : NAT -> NAT]
[+ : NAT, NAT -> NAT]
[* : NAT, NAT -> NAT]
[- : NAT, NAT -> NAT]
[< : NAT, NAT -> bool]
[>= : NAT, NAT -> bool]
(x + 0) := x
(x + succ(y)) := succ((x + y))
(0 - x) := 0
(x - 0) := x
(succ(x) - succ(y)) := (x - y)
(x * 0) := 0
(x * succ(y)) := (x + (x * y))
(x < 0) := false
(0 < succ(x)) := true
(succ(x) < succ(y)) := (x < y)
(x >= x) := true
(0 >= succ(y)) := false
(succ(x) >= y) := (x >= y) if not ((succ(x) = y))
]



operator
constructor
0
 

operator
constructor
succ
yes

operator
acoperator
+ 

option
order
l

operator
precedence
* + 

operator
precedence
>= < 

operator
status
*
rl



makerule

suffice

option
prove
e

cover

add
(0 + x) == x
(succ(y) + x) == succ((y + x))
(x + (z + z1)) == (z + (x + z1))
(x < succ(0)) == (0 = x)
((x + y) = 0) == false if not((0 = x))
((x + y) = y) == (0 = x)
((y + z) = (x + z)) == (y = x)
(0 * y) == 0
((x * y) = 0) == (0 = y) if not((0 = x))
((x * y) = x) == (succ(0) = y) if not((0 = x))
((x + z) = succ(0)) == false if not((succ(0) = z)) & not((succ(0) = x))
((x * y) = succ(0)) == false if not((succ(0) = x))
(0 >= u) == (0 = u)
(0 < x) == true if not((0 = x))
not((u < u)) == true
(succ(x) < z) == (x < z) if not((succ(x) = z))
((u * y) < succ(y)) == false if not((0 = u)) & not((0 = y)) & not((succ(0) = u))
]

makerule



write
spec-write
/usr/progress/art/specs/test/nat1/nat1.impl_1/nat1.impl_1.prop_1/nat1.impl_1.prop_1

unlog

option
art
off
