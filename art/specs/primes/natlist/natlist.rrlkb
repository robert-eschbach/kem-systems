
option
art
on

init

log
/usr/progress/art/specs/primes/natlist/natlist

option
history
no-history



ADD
[0 : NAT]
[suc : NAT -> NAT]
[+ : NAT, NAT -> NAT]
[* : NAT, NAT -> NAT]
[- : NAT, NAT -> NAT]
[< : NAT, NAT -> bool]
[>= : NAT, NAT -> bool]
[null : NATLIST]
[cons : NAT, NATLIST -> NATLIST]
[append : NATLIST, NATLIST -> NATLIST]
[delete : NAT, NATLIST -> NATLIST]
[member : NAT, NATLIST -> bool]
[perm : NATLIST, NATLIST -> bool]
(x + 0) == x
(x + suc(y)) == suc((x + y))
(0 - x) == 0
(x - 0) == x
(suc(x) - suc(y)) == (x - y)
(x * 0) == 0
(x * suc(y)) == (x + (x * y))
(x < 0) == false
(0 < suc(x)) == true
(suc(x) < suc(y)) == (x < y)
(x >= x) == true
(0 >= suc(y)) == false
(suc(x) >= y) == (x >= y) if not ((suc(x) = y))
append(null, u) == u
append(cons(x, u), v) == cons(x, append(u, v))
delete(x, null) == null
delete(x, cons(y, u)) == cond((x = y), u, cons(y, delete(x, u)))
member(x, null) == false
member(x, cons(y, u)) == cond((x = y), true, member(x, u))
perm(null, null) == true
perm(null, cons(x, u)) == false
perm(cons(x, u), null) == false
perm(cons(x, u), v) == cond(member(x, v), perm(u, delete(x, v)), false)
]




operator
constructor
0
 

operator
constructor
suc
yes

operator
constructor
null
 

operator
constructor
cons
yes

operator
acoperator
+ 

option
order
l

operator
precedence
* + 

operator
precedence
>= < 

operator
precedence
perm delete 

operator
precedence
perm member 

operator
status
*
rl

operator
status
perm
lr



kb

suff
option
prove
s


prove
delete(x, u) == u if not(member(x, u))



write
spec-write
/usr/progress/art/specs/primes/natlist/natlist

unlog

option
art
off
