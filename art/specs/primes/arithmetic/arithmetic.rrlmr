
option
art
on

init

log
/usr/progress/art/specs/primes/arithmetic/arithmetic

option
history
no-history



ADD
[0 : NAT]
[suc : NAT -> NAT]
[+ : NAT, NAT -> NAT]
[* : NAT, NAT -> NAT]
[- : NAT, NAT -> NAT]
[< : NAT, NAT -> bool]
[>= : NAT, NAT -> bool]
[div : NAT, NAT -> NAT]
[rem : NAT, NAT -> NAT]
[divides : NAT, NAT -> bool]
[gcd : NAT, NAT -> NAT]
[sub1 : NAT -> NAT]
(x + 0) := x
(x + suc(y)) := suc((x + y))
(0 - x) := 0
(x - 0) := x
(suc(x) - suc(y)) := (x - y)
(x * 0) := 0
(x * suc(y)) := (x + (x * y))
(x < 0) := false
(0 < suc(x)) := true
(suc(x) < suc(y)) := (x < y)
(x >= x) := true
(0 >= suc(y)) := false
(suc(x) >= y) := (x >= y) if not ((suc(x) = y))
div(x, 0) := 0
div(x, y) := 0 if (x < y)
div((y + x), y) := suc(div(x, y)) if not ((0 = y))
rem(x, 0) := x
rem(x, y) := x if (x < y)
rem((y + x), y) := rem(x, y)
divides(x, y) := (rem(y, x) = 0)
gcd(x, 0) := x
gcd(0, y) := y
gcd((x + y), y) := gcd(x, y)
gcd(x, (x + y)) := gcd(x, y)
sub1(0) := 0
sub1(suc(x)) := x
]



operator
constructor
0
 

operator
constructor
suc
yes

operator
acoperator
+ 

option
order
l

operator
precedence
* + 

operator
precedence
>= < 

operator
precedence
divides rem 

operator
status
*
rl



makerule

suffice

option
prove
e

cover

add
(x + y) == (y + x)
((x + y) + z) == (x + (y + z))
(x * (y + z)) == ((x * y) + (x * z))
(0 < x) == not((x = 0))
(x < suc(0)) == (x = 0)
((x + y) = 0) == cond((x = 0), (y = 0), false)
((x + y) = y) == (x = 0)
((x + z) = (y + z)) == (x = y)
((x * y) = 0) == cond((x = 0), true, (y = 0))
((x * y) = x) == (y = suc(0)) if not((x = 0))
((x * y) = x) == cond((y = suc(0)), true, (x = 0))
((x * y) = suc(0)) == cond((x = suc(0)), (y = suc(0)), false)
(suc(0) < y) == true if (not((y = 0)) and not((y = suc(0))))
(y < suc(y)) == true
(0 >= u) == (u = 0)
not((x < suc(y))) == true if (y < x)
(suc(x) < y) == true if (x < y) & not((suc(x) = y))
(suc(x) < y) == true if ((x < y) and not((suc(x) = y)))
((u * y) < suc(y)) == false if (not((u = 0)) and (not((u = suc(0))) and not((y = 0))))
rem(y, y) == 0
rem(suc((y + x)), y) == rem(suc(x), y)
div(y, y) == suc(0) if not((0 = y))
]

makerule

prove
div(0, y) == 0

prove
rem(0, y) == 0

prove
(y * div((y + x), y)) == (y * suc(div(x, y)))

prove
(rem(x, y) + (y * div(x, y))) == x

prove
(y * div(x, y)) == x if divides(y, x)

prove
div((x * y), x) == y if not((x = 0))

prove
rem((y * x), x) == 0

prove
rem((y * z), x) == 0 if (divides(x, z) and not((x = 0)))

prove
rem((x + y), z) == rem(x, z) if divides(z, y)

prove
(div(x, y) < x) == true if (not((x = 0)) and (not((y = 0)) and not((y = suc(0)))))

prove
div((z + y), x) == (div(z, x) + div(y, x)) if (divides(x, z) and not((x = 0)))

prove
div((z * y), x) == (y * div(z, x)) if (divides(x, z) and not((x = 0)))

prove
rem(suc(0), x) == suc(0) if not((x = suc(0)))

prove
(sub1(x) < y) == (x < suc(y)) if not((x = 0))

prove
gcd(x, y) == gcd(y, x)

prove
gcd((x * z), (y * z)) == (z * gcd(x, y))

prove
(gcd((x * y), z) = y) == false if ((rem(z, x) = 0) and not((rem(y, x) = 0)))

prove
(rem((y * z), x) = 0) == false if ((gcd((x * y), (y * z)) = y) and (not((y = 0)) and not((rem(y, x) = 0))))

prove
gcd(x, suc(0)) == suc(0) if not((x = 0))

prove
rem(x, gcd(x, y)) == 0

prove
(gcd(x, y) = x) == false if not((rem(y, x) = 0))



write
spec-write
/usr/progress/art/specs/primes/arithmetic/arithmetic

unlog

option
art
off
