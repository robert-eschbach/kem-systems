
option
art
on

init

log
/usr/progress/art/specs/primes/arithmetic/arithmetic.impl_1/arithmetic.impl_1

option
history
no-history



ADD
[0 : NAT]
[suc : NAT -> NAT]
[+ : NAT, NAT -> NAT]
[* : NAT, NAT -> NAT]
[- : NAT, NAT -> NAT]
[< : NAT, NAT -> bool]
[>= : NAT, NAT -> bool]
[div : NAT, NAT -> NAT]
[rem : NAT, NAT -> NAT]
[divides : NAT, NAT -> bool]
[gcd : NAT, NAT -> NAT]
[sub1 : NAT -> NAT]
(x + 0) == x
(x + suc(y)) == suc((x + y))
(0 - x) == 0
(x - 0) == x
(suc(x) - suc(y)) == (x - y)
(x * 0) == 0
(x * suc(y)) == (x + (x * y))
(x < 0) == false
(0 < suc(x)) == true
(suc(x) < suc(y)) == (x < y)
(x >= x) == true
(0 >= suc(y)) == false
(suc(x) >= y) == (x >= y) if not ((suc(x) = y))
div(x, 0) == 0
div(x, y) == 0 if (x < y)
div((y + x), y) == suc(div(x, y)) if not ((0 = y))
rem(x, 0) == x
rem(x, y) == x if (x < y)
rem((y + x), y) == rem(x, y)
divides(x, y) == (rem(y, x) = 0)
gcd(x, 0) == x
gcd(0, y) == y
gcd((x + y), y) == gcd(x, y)
gcd(x, (x + y)) == gcd(x, y)
sub1(0) == 0
sub1(suc(x)) == x
]




operator
constructor
0
 

operator
constructor
suc
yes

operator
acoperator
+ 

operator
commutativ
gcd * 

option
order
l

operator
precedence
* + 

operator
precedence
>= < 

operator
precedence
divides rem 

operator
precedence
gcd * 

operator
precedence
div * 

operator
status
*
rl

operator
status
<
lr



kb

suff
option
prove
s




write
spec-write
/usr/progress/art/specs/primes/arithmetic/arithmetic.impl_1/arithmetic.impl_1

unlog

option
art
off
