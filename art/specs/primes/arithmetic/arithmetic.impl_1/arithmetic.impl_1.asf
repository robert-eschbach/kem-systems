specification arithmetic
begin

  variables
    x1 : -> NAT

  properties
  begin
    c-operators gcd * 
    ordering 
      precedence gcd *, div *
      status < : l   
    theorems
      div(0, y) == 0 [ o, e ] ;
      rem(0, y) == 0 [ o, e ] ;
      (y * div((y + x), y)) == (y * suc(div(x, y))) [ o, e ] ;
      (rem(x, y) + (y * div(x, y))) == x [ o, e ] ;
      (y * div(x, y)) == x when divides(y, x) == true [ o, e ] ;
      div((x * y), x) == y when not((x = 0)) == true [ o, e ] ;
      rem((y * x), x) == 0 [ o, e ] ;
      rem((y * z), x) == 0 when and(divides(x, z), not((x = 0))) == true [ o, e ] ;
      rem((x + y), z) == rem(x, z) when divides(z, y) == true [ o, e ] ;
      (div(x, y) < x) == true when and(not((x = 0)), and(not((y = 0)), not((y = suc(0))))) == true [ o, e ] ;
      div((z + y), x) == (div(z, x) + div(y, x)) when and(divides(x, z), not((x = 0))) == true [ o, e ] ;
      div((z * y), x) == (y * div(z, x)) when and(divides(x, z), not((x = 0))) == true [ o, e ] ;
      rem(suc(0), x) == suc(0) when not((x = suc(0))) == true [ o, e ] ;
      (sub1(x) < y) == (x < suc(y)) when not((x = 0)) == true [ o, e ] ;
      gcd(x, y) == gcd(y, x) [ o, e ] ;
      gcd((x * z), (y * z)) == (z * gcd(x, y)) [ o, e ] ;
      (gcd((x * y), z) = y) == false when and((rem(z, x) = 0), not((rem(y, x) = 0))) == true [ o, e ] ;
      (rem((y * z), x) = 0) == false when and((gcd((x * y), (y * z)) = y), and(not((y = 0)), not((rem(y, x) = 0)))) == true [ o, e ] ;
      gcd(x, suc(0)) == suc(0) when not((x = 0)) == true [ o, e ] ;
      rem(x, gcd(x, y)) == 0 [ o, e ] ;
      (gcd(x, y) = x) == false when not((rem(y, x) = 0)) == true [ o, e ] ;
      (y * div((x + y), y)) == (y + (y * div(x, y))) [ o ] ;
      ((y * div(x, y)) + rem(x, y)) == x [ o ] ;
      div((x * y), x) == y when not((0 = x)) == true [ o ] ;
      rem((z + (y * x)), x) == 0 when not((0 = x)) == true , (rem(z, x) = 0) == true [ o ] ;
      rem((z + (y * x)), x) == 0 when not((0 = x)) == true , (rem(z, x) = 0) == true , (rem(x1, x) = 0) == true [ o ] ;
      rem((y * z), x) == 0 when not((0 = x)) == true , (rem(z, x) = 0) == true [ o ] ;
      rem((suc(x) * z), suc(x)) == 0 [ o ] ;
      rem((x + y), z) == rem(x, z) when (rem(y, z) = 0) == true [ o ] ;
      (suc(z) < (x + y)) == true when (z < x) == true , not((0 = y)) == true , not((suc(0) = y)) == true [ o ] ;
      (div(x, y) < x) == true when not((0 = x)) == true , not((0 = y)) == true , not((suc(0) = y)) == true [ o ] ;
      div((y + (x * z)), x) == (z + div(y, x)) when not((0 = x)) == true [ o ] ;
      div(((x + x1) * y), x) == (y + div((x1 * y), x)) when not((0 = x)) == true , (rem(x1, x) = 0) == true [ o ] ;
      div((z * y), x) == (y * div(z, x)) when not((0 = x)) == true , (rem(z, x) = 0) == true [ o ] ;
      rem(suc(0), x) == suc(0) when not((suc(0) = x)) == true [ o ] ;
      (sub1(x) < y) == (x < suc(y)) when not((0 = x)) == true [ o ] ;
      (suc(y) * x) == (x + (y * x)) [ o ] ;
      (x * z) == (z * x) [ o ] ;
      gcd(x, suc(0)) == suc(0) when not((0 = x)) == true [ o ] ;

  end
end
