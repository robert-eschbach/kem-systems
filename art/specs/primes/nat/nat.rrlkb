
option
art
on

init

log
/usr/progress/art/specs/primes/nat/nat

option
history
no-history



ADD
[0 : NAT]
[suc : NAT -> NAT]
[+ : NAT, NAT -> NAT]
[* : NAT, NAT -> NAT]
[- : NAT, NAT -> NAT]
[< : NAT, NAT -> bool]
[>= : NAT, NAT -> bool]
(x + 0) == x
(x + suc(y)) == suc((x + y))
(0 - x) == 0
(x - 0) == x
(suc(x) - suc(y)) == (x - y)
(x * 0) == 0
(x * suc(y)) == (x + (x * y))
(x < 0) == false
(0 < suc(x)) == true
(suc(x) < suc(y)) == (x < y)
(x >= x) == true
(0 >= suc(y)) == false
(suc(x) >= y) == (x >= y) if not ((suc(x) = y))
]




operator
constructor
0
 

operator
constructor
suc
yes

option
order
l

operator
precedence
* + 

operator
precedence
>= < 

operator
status
*
rl



kb

suff
option
prove
s


prove
(x + y) == (y + x)

prove
((x + y) + z) == (x + (y + z))

prove
(x * (y + z)) == ((x * y) + (x * z))

prove
(0 < x) == not((x = 0))

prove
(x < suc(0)) == (x = 0)

prove
((x + y) = 0) == cond((x = 0), (y = 0), false)

prove
((x + y) = y) == (x = 0)

prove
((x + z) = (y + z)) == (x = y)

prove
((x * y) = 0) == cond((x = 0), true, (y = 0))

prove
((x * y) = x) == (y = suc(0)) if not((x = 0))

prove
((x * y) = x) == cond((y = suc(0)), true, (x = 0))

prove
((x * y) = suc(0)) == cond((x = suc(0)), (y = suc(0)), false)

prove
(suc(0) < y) == true if (not((y = 0)) and not((y = suc(0))))

prove
(y < suc(y)) == true

prove
(0 >= u) == (u = 0)

prove
not((x < suc(y))) == true if (y < x)

prove
(suc(x) < y) == true if ((x < y) and not((suc(x) = y)))

prove
((u * y) < suc(y)) == false if (not((u = 0)) and (not((u = suc(0))) and not((y = 0))))



write
spec-write
/usr/progress/art/specs/primes/nat/nat

unlog

option
art
off
