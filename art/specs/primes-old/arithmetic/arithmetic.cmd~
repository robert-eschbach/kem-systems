add

The arities of the operators are:
      [succ : NAT -> NAT ]
      [+ : NAT, NAT -> NAT ]
      [* : NAT, NAT -> NAT ]
      [- : NAT, NAT -> NAT ]
      [< : NAT, NAT -> bool ]
      [>= : NAT, NAT -> bool ]
      [div : NAT, NAT -> NAT ]
      [rem : NAT, NAT -> NAT ]
      [divides : NAT, NAT -> bool ]
      [gcd : NAT, NAT -> NAT ]
      [sub1 : NAT -> NAT ]
      [0 : -> NAT ]


(x + 0) == x
(x + succ(y)) == succ((x + y))
(0 - x) == 0
(x - 0) == x
(succ(x) - succ(y)) == (x - y)
(x * 0) == 0
(x * succ(y)) == (x + (x * y))
(x < 0) == false
(0 < succ(x))
(succ(x) < succ(y)) == (x < y)
(x >= x)
(0 >= succ(y)) == false
(succ(x) >= y) == (x >= y) if not((succ(x) = y))
div(x, 0) == 0
div(x, y) == 0 if (x < y)
div((y + x), y) == succ(div(x, y)) if not((0 = y))
rem(x, 0) == x
rem(x, y) == x if (x < y)
rem((y + x), y) == rem(x, y)
divides(x, y) == (rem(y, x) = 0)
gcd(x, 0) == x
gcd(0, y) == y
gcd((x + y), y) == gcd(x, y)
gcd(x, (x + y)) == gcd(x, y)
((un * yn) < succ(yn)) == false if (not((un = 0)) and (not((un = succ(0))) and not((yn = 0))))
(un >= zn) == not((un < zn))
(succ(xn) < yn) == true if ((xn < yn) and not((succ(xn) = yn)))
(0 >= un) == (un = 0)
(yn < succ(yn))
((xn * yn) = succ(0)) == ((xn = succ(0)) and (yn = succ(0)))
((xn * yn) = xn) == ((yn = succ(0)) or (xn = 0))
((xn * yn) = xn) == (yn = succ(0)) if not((xn = 0))
((xn * yn) = 0) == ((xn = 0) or (yn = 0))
((xn + zn) = (yn + zn)) == (xn = yn)
((xn + yn) = yn) == (xn = 0)
((xn + yn) = 0) == ((xn = 0) and (yn = 0))
(xn < succ(0)) == (xn = 0)
(0 < xn) == not((xn = 0))
(xn * yn) == (yn * xn)
((xn * yn) * zn) == (xn * (yn * zn))
(xn * (yn + zn)) == ((xn * yn) + (xn * zn))
(xn + yn) == (yn + xn)
]
operator
constructor
0 
operator
constructor
succ 
yes
operator
acoperator
+ * 
operator
order
l
operator
precedence
* + 
operator
precedence
>= < 
operator
status
*
makerule
1 
option
prove
e
write
spec-write
/usr/users/madprak1/specs/arithmetic/arithmetic.spec
yes
quit
