
The arities of the operators are:
      [succ : NAT -> NAT ]
      [+ : NAT, NAT -> NAT ]
      [* : NAT, NAT -> NAT ]
      [- : NAT, NAT -> NAT ]
      [< : NAT, NAT -> bool ]
      [>= : NAT, NAT -> bool ]
      [div : NAT, NAT -> NAT ]
      [rem : NAT, NAT -> NAT ]
      [divides : NAT, NAT -> bool ]
      [gcd : NAT, NAT -> NAT ]
      [sub1 : NAT -> NAT ]
      [0 : -> NAT ]


The system has the following constructors:
     Type 'NAT': { 0, succ }

There are no equivalent operators.

Precedence relation now is: 
   * > + 
   >= > < 
   divides > rem 

There are no operators with status.

Associative & commutative operator set = { *, + }


(x + 0) ---> x
(x + succ(y)) ---> succ((x + y))
(0 - x) ---> 0
(x - 0) ---> x
(succ(x) - succ(y)) ---> (x - y)
(x * 0) ---> 0
(x * succ(y)) ---> (x + (x * y))
(x < 0) ---> false
(0 < succ(x)) ---> true
(succ(x) < succ(y)) ---> (x < y)
(x >= x) ---> true
(0 >= succ(y)) ---> false
(succ(x) >= y) ---> (x >= y) if  { (succ(x) = y) <=> false } 
div(x, 0) ---> 0
div(x, y) ---> 0 if  { (x < y) } 
div((x + y), y) ---> succ(div(x, y)) if  { (0 = y) <=> false } 
rem(x, 0) ---> x
rem(x, y) ---> x if  { (x < y) } 
rem((x + y), y) ---> rem(x, y)
divides(x, y) ---> (rem(y, x) = 0)
gcd(x, 0) ---> x
gcd(0, y) ---> y
gcd((x + y), y) ---> gcd(x, y)
gcd(x, (x + y)) ---> gcd(x, y)
((un * yn) < succ(yn)) ---> false if  { (0 = un) & (0 = yn) & (succ(0) = un) <=> ((0 = un) + (0 = yn) + (succ(0) = un) + (0 = un) & (0 = yn) + (0 = un) & (succ(0) = un) + (0 = yn) & (succ(0) = un)) } 
(un >= zn) ---> (true xor (un < zn))
(succ(xn) < yn) ---> true if  { (xn < yn) & (succ(xn) = yn) <=> (true + (xn < yn)) } 
(0 < un) ---> (true xor (0 = un))
(yn < succ(yn)) ---> true
((xn * yn) = succ(0)) ---> ((succ(0) = xn) and (succ(0) = yn))
((xn * yn) = xn) ---> ((0 = xn) xor (succ(0) = yn) xor ((0 = xn) and (succ(0) = yn)))
((xn * yn) = 0) ---> ((0 = xn) xor (0 = yn) xor ((0 = xn) and (0 = yn)))
((yn + zn) = (xn + zn)) ---> (yn = xn)
((xn + yn) = yn) ---> (0 = xn)
((xn + yn) = 0) ---> ((0 = xn) and (0 = yn))
(xn < succ(0)) ---> (0 = xn)
(xn * (yn + zn)) ---> ((xn * yn) + (xn * zn))
