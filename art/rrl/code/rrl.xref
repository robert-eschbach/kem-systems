(clear-tables)
(setf (source-file 'R2E) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'MY-PROBEF) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MAKE-RULE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'EXT-WEIGHT) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'SET-NO-REDUCTION-MARK) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'DIVISIBLE-NONAC-CHECK) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'REPEAT-SLOOP-MACRO) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'BRT) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'WAIT-RETURN) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'BIG-PRE-INFO) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'OR-ARGS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'NEXT-CHOICE) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'EQUIV) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (source-file 'CHANGE-RHS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SPLIT-LHS-OR) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'ASK-A-CHOICE) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'TIMES) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'SET-SKOLEM) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CONSTANT?) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'FOPC-STRA) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'GET-DEF-DOMAIN) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'VAR?) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'NEXT-TOKEN) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'RELEASE-PREMISES) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'INDUC-ADD-RULE) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'POSTPONE-OR-UNDO) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'REMOVE-IRRELEVANT4) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'TRY-TO-ORIENT) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'ORDER-ASS) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'QUASI-REDUCIBLE) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'X_INDUC) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'GROUNDP) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'INPUT-CHECK) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'COVER-UNCONDI-NORM) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'MATCH-POSS) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'ADD-ASSOCIATE-LIST) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PRIME-ACU-CHOICE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'REDUCE-BY-ONE-RULE) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'COVER-NORMALIZE) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'TRACE-DROPPED-PREMISES) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'SPLIT-RHS-OR) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'SYMMETRY-NON-DELETABLE) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'BAD-TYPED) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'READ-OP-DECLARATION) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'GET-VARLIST) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'MINUS) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'COMPARE-ITEM) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'COVER-NORM-ORDER) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'HELP-FILE) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'UNIFY-WITH-AC) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'PRE-INIT) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'CON-NUMS) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'PROPER-PRODUCT-LISTS) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'END-AUTO-ORDER) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'MAKE-RRL-IMAGE) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'TOKEN-EOLN) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'MAKE-ONE-BUILD) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'X_ONE_RULE) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'INSERT-TERM-AT-LEFT) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'IS-POLY) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ELIMINATE-SUB) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'GET-ATOM) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'FIND-BASIS-VECTORS) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'REM-ARITY2) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'HAS-NONLINEAR-VARS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'ACO-RPOSTATUS>) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'PURE-MATCH) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'IN-CAREFULLY-SLOOP-FOR) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'M-AND-P) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'MANY-ARGS2) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'SUB-OR-EQ-TERM) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'REDUCE-BY-PREMISES-AT-ROOT) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'ADD1-MODULO-N) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'TRUEP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PRINT-NORMALIZED-EQN) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'EQ-JOIN) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'HYPO-SUBSUME-EQN) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'DELETE-SYS) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'DIVISIBLE-AC-CHECK) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'BUILD-EQUATION-FROM-PREMS) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'ADD-RULE3) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'WRITE-COMMENT-RHS) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'SIMP-XOR-SIMP) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'CTX-BAD-LUCK) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'BIGT-TWO-KILL-ONE) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'SUMYMAX) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'COMP-EQN) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'REVERSE-PREMISE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'ADD-FROM-DATA) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'INC) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CONDI-FROM-CLAUSE) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'IM-DEL-RULES) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'READ-THIS-EQN) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'REWRITE-ONCE-BY-HYPO) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'FLAT-SORT-ARGS) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'EQ-IN-MONOMIAL) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'INSERT-TERM-AT-RIGHT) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'MATCH) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'SEARCH_BY_ID) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'GET-SKELETON2) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'PARTITION-TERM-BY-TYPE) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'ASET) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'BLOAD) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'POLY-MATCH-*) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'APPLYSUBST-EQN) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'ACTUAL-UNIFY-ACTION) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'AC-ROOT) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'TWO-UNIFIER) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'TR-TERM) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'IN-FRINGE-SLOOP-MAP) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'WRITE-F-RHS) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'HAS-ACOP) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'PRE-PROCESS-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'UNDO1) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'ASSERTIONP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'NOT-ARG) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'SHOW-TREE-INFO) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'IS-P-COMMUT-PAIR) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'SET-UNIFICATION) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'START-HISTORY-MANUAL) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'ACM-POLY-*) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'QUASI-CHECK) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'ASK-USER) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'RESTORE-PROPERTIES) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'COMPARE-TERM) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'AC-MEMBER) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'CLOAD) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'MAKE-PRE-XOR-ARGS) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'VARIABLEP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'DESTROYABLE) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'LHS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SIMPLIFY-ALL-PREMISES) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'START-HISTORY) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'BA-SIMPLIFY) '(#P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (source-file 'CLEAN-OPS) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (source-file 'DOMAIN-RULEP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ABSTRACT-PROOF) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'INSERT-AND-REMOVE-PAIRS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'COLLATE-SLOOP-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'NEW-FIRST-CTX-TRANS) '(#P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (source-file 'X_NAME) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'COMMU-EXCHANGE) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'SAME-PNAME) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'EQN-SUB-NONVARS) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (source-file 'NONVARP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'REPORT-CURRENT-TIME) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'TOKEN-PORT) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'RENAME-VARY) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'INITIALIZE) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'INDUCTIBLE) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'IS-PROP-EQN) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ONE-PREMISE-IS-TRUE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'WRITE-F-RULE) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'SUBS-ARE-PRIMITIVE) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'REAL-COLLECT-PRODUCTS) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'X_GENERAL) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'ACCEPTABLE-PAIR) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file '*-CANONICALIZE) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'PRE-PROCESS-PRE-ASS) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'XIN-MENU) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'P-+-P) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'FLATTEN-RULE) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'SIMPLIFY-ONE-PRE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'ENABLE-RULES) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'SET-CRIT-MARK) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MAKESYM) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'REDUCE-BY-RULES) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'DELETE0) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'HAVE-COMMON) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'POLY-SIZE) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'ONE-PRESENTATIVE) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'SLOOP-SWAP) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'APPLY-TO2) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (source-file 'MOVE-MONOS) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'LOCAL-FINISH) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'IS-SYMMETRY-RULE) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'WRITE-NODE) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'GRT-PREC) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'POLISH-PREMISES) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'COMPOSE1) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (source-file 'INDUC-SUP-TERM) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'RRL-AUX) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'CAR-LESSP) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'IS-GENERAL-RULE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'TRANSLATE-NAME) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'X_AUTO_INDUC) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'NORM-STRATEGY) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'ADD-ONE-DEPTH) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'IS-VALID-RULE) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'RENAME-VAR) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'CRITPAIRS) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'TYPE-COHERE) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'X_REMOVE_HYP) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'GET-LOW-OPS) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'COVER-SET-SCHEME) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'COMPLETE-TEST) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'HALF-CANONICALIZE-AND-EXPAND-EQ) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'TOTAL-ORDER) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'X_SPLIT) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'NEGATE-ONE-PRE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'REMOVE-RIGHT-ARG2) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'CYCLE-REDUCE-AT-ROOT-1) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'POSTPONE-IT) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'COMPACT-LAST-ELEMENTS) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'ORDER-EQNS) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'ADD-STATUS) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'BREAK-AT-OR) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'IS-SYMMETRY-EQN) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'LOOK-AT-PAIR-AND) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'REDUCE-EQ-TERM) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'LOOP-PEEK) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'INIT-BOOL-OPS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'TRACE-SUCC-PROVE) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'REM-STATUS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SUBST-VAR-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'PLAUSIBLE) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'HAVE-MANY-RECURSIVE-EQNS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'PRIMITIVE-SUBST) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'MAKE-FLAT) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'NTHSUBT) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CYCLE-NORM-TERM) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'SHOW-NODE) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'GET-CLAUSE) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'EXT-AC) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'DEMULT-FORM) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'RHS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'GET-SUBTYPES) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'MARK) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'CAR-LOWER) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (source-file 'RIGHT-ARG) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'COLLECT-CDR-WITH-SAME-CAR) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'UNICOMPOUND) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'PURE-REDUCE-BY-ONE-RULE) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'MAKE-NEW-VARIABLE) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'RELATED-VARS2) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'IS-VALID-VAR) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'IS-PURE-INPUT) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'PRINT-WARNING) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'APPLY-TO) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (source-file 'EQN-SOURCE-TYPE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'IS-CONSTANT-TERM) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'CLEAN-RIGHT-BRACKET) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'START-TIMER) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'PUSH-HISTORY) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'NORMALIZE-ONE-EQN) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'ADD-CONDI-DOMINATE-RULE) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'IS-EMPTY-LINE) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'SET-CONSTRUCTOR) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'TRY-SUGG-PREC) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'DEPENDED-OP) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'X_REAL_VARS) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'MATCH-SET-NONAC) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'SLOOP-SLOOP-MACRO) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'MATCH-SET) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'CAPITALIZE) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'CHECKEQ-NORMAL) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'CROSS-PRODUCT) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'DEFINING-POSITIONS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'REWONCE-AT-ROOT) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'CON1-NUMS) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'OUTRED1) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'PURE-NORM-WITH-BIN) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'FLATTEN-RULES) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'EQ-MATCH) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'CYCLE-CHECK) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'QUASI-EQUIVALENT) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'C-MATCH) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ENSURE-PREDICATE) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'PREC-CONSISTENT) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'AC-COMPRESS) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'FILLARRAY) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'PICK-ONE-UNMARKED) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'REDUCIBLE) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'EXT-OPERATOR) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'MAKE-ASS-COM-OP) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'QUERY-ADD-EQN) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'CUR-VAL) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MINI-EXPAND-EQ) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'MENU_FOR_MANUAL_REDUCE) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'EQN2ASS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MAKE-TERM) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'IS-ASSOC-PAIR) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'REST-ELEMENTS) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'EACH) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'DOWN-HILL-ONE) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'COMPARE-ITEM-RESULT) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'BUILD-PREMISES-FROM-BOOL-TERM) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'INSERT-LIST) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'PROCESS-ASS-SIMPLE) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'HEAD-LESS-PRE) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'POST-ASS-LIST) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'PROCESS-ASS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'ARITY-EQ-STRATEGY) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'PRED-FUNC-SUP) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (source-file 'RENAME-OP-RULES) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'ACO-LRPO=) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'SUBST0) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'ART?) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'AUTO-OPERATOR) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'NORM-RHS) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'NOT-IN-SET) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (source-file '*CATCH) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'MULT-SORT-INSERT) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'SUBST-QUANT-FORM) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'SET-DEPEND-SCORES) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'SUBST-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'AUTO-MAKE-EQUI) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'GET-ALL-RULE-NUMS) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (source-file 'PRODUCT-LISTS) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'LHSIZE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'TOTAL-ORDER-PC-RES) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'IS-SUBTYPE) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'CLEAR-OPERATORS) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (source-file 'WRITE-COMMENT-PREMISES) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'IS-BOOL-OP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'GET-TERM-TYPE) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'IS-TYPE-PREDICATE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'REMOVE-PAIRS-WITH) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'NEQUAL) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'STATUS-CANDIDATES) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file '*THROW) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'RELATED-VARS) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'PURE-NORM-MIXED) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'CLOAD2) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'TWO-KILL-ONE) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'GOOD-LUCK-CONDI) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'BUILD-PREMISES-FROM-COND-TERM) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'SET-EXTRA-PRE-VARIABLES) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'INSERT-SORT-ARG) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'NORM-MULT-MONOS) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'EXT-PRECEDENCE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'RESOLVE) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (source-file 'REMOVE-LEFT-ARG2) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'CLEARSCREEN) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'ORDER-PC-SEQ) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'GET-CONSTANTS) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (source-file 'IS-SKOLEM-OP) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'LINEAR) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (source-file 'WRITE-EQN) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'PURE-ORIENT-AN-EQN) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'MY-COPYLIST2) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'MULT-UNION) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'LR-RL-STRATEGY) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'CDR-GREAT) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'X_AUTO_NORMAL) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'PRINC0) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'WRITE-TERM-BOOL) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'P-*-M) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'LOOP-UN-POP) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'CAR-LENGTH-CDDR) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'CYCLE-REWRITE-RULE) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'HALF-CANONICALIZE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'RESET-KB) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'CUTTREE) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'IS-SUB-NONVAR-TERM) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'RULES-WITH-OP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'AUTO-ADD-STATUS) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'BRT-IF) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'NORM-OR-ARGS) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (source-file 'SET-DIFF2) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'ACM-POLY-ONE-TO-MANY) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'GET-LCM-SOLNS) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'IS-LINEAR) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'WRITE-SEQ-NUM) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'ORDER-PC-RES) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'X_CLEAN-RULE) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'TRY-TO-ORIENT2) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'X_PROVER) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'WRITE-TERM-SIMPLE) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'EXT-TRANSITIVE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'LESSP-SIZE-BINDINGS) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (source-file 'LIST-ASSERTIONS) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'LHS-VARS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ARGUMENTS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'AC-SUP-TERM) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'AVERAGE) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'MULT-DIFF2) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'TRY-TO-ORIENT-CONDI) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'IS-SUBTERM) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'WRITE-GOAL-EQN) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'PUSH-END) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PARSE-LOOP-DO) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'REM-SKOLEM) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MAXIMIZE-SLOOP-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'DESETQ1) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'ADD-SIMPLIFY-OTHERS) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'LONGEST-LIST) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'BUILD-EQN-FROM-PRES) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'FASTKB-CHOICES) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'L-EQUAL) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'WRITE-GOAL-RULE) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'RPLAT-IN-BY) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'MULT-INSERT) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'INSTANTIATE-LHS) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'BLOCK-CHECK) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'INIT) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'DIVISIBLE-LEFT-CHECK) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'BOOLEAN-OPP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SIZE-DEPTH-STR) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'PROCESS-EQUATION) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'GOAL-RULE-SIZE) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (source-file 'GET-TERM) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'ACO-LEXICO-COMP-RL) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'SIMP-FIRST-TRANS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'ONE-EXTENSIBLE-POINT) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'OPERATOR-OPTIONS) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'PICK-UNMARKED-RULE-DUMMY) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'WRITE-DISJUNCTIONS) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'NORM-POLY) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'COMP-TERMS) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'FIRST-PROCESS-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'NRM-TIME) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'GUIDE-REDUCIBLE) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'SUBST-EQN) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (source-file 'MEMBER-EQUAL) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'X_READ_TERM) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'PROCESS-NEW-AC-CP) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'ARRANGE-EQ-ARGS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MAKE-PRE-ASS) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'MATCH-BOOL-XOR) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'REM-PREDICATE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'REDUCE-COND-TERM) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'SELECTQ) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'EQUAL-TERM) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SYMMETRY-CHOICE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'REDUCE-POST-ASS) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'SIMPLIFY-FLAT) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'WHEN-ART-WITH-INPUT-FROM-TERMINAL) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'WRITE-RHS) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'START-TEST) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'MERGEBLE-TERMS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'MAKE-NEW-RULE) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'M-+-M) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'PRINT-CHOICE-MESSAGE) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'EQ-TR-MEMBER) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'NEGATE-EQN) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'AUTO-ADD-PREC) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'ONE-KILL-ONE) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'PARTITION-OPS-BY-TYPE) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'FLATTEN-TESTSET) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'COVER-ORIENT-EQN) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'NARGS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'DIVIDED-BY) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'PRE-OPS) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'ACUNI) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'M-XOR-P) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'BRAKE-CHOICE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'ASSERTION2EQUATION) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'PURE-MIXED-REDUCE) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'LETTERP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'REM-DUPS) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'EQN2ASSERTION) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'REDUCIBLE-TIME) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ADD-PREMISE-END) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'SAME-OP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ACO-LRPO>) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'BODY-PREMISES-SIZE) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'SUPERTERM-COVER) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'PAIRSWITH) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'STRONG-SUBGOAL-PROOFS) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'IS-CYCLE-EQN) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'MAKE-CYCLE-RULE) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'X_ADD-RULE3) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'IS-ELIM-TERM) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'WRITE-RULE) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'CONSISTENT-CHECK-TESTSET) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (source-file 'MULT-SORT-MERGE) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'DECIDE-DEFIN-MODE) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'OVER-REWRITE-PREMISES) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'SORT-OF) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'COMPATIBLE-PATTERN) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'PREDICATEP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SKOLEMP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'NON-DECREASING-SEQ) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'ONE-ARG) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CONSTRUCTORS-CHECK) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'HANDLE-AND) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'M-XOR-M) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'NORM-ONE-PRE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'PICK-UNMARKED-RULE) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'QUANTIFIERP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'FORM-PATTERNS-SINGLE) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'INDUC-REDUCE-OTHERS-AUX) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'CANONICALIZE) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'REF-SYMMETRY-TERMS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MINI-HALF-CANONICALIZE-AND-EXPAND-EQ) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'THEREIS-SLOOP-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'NEGATE-XOR-ARGS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'EXPECTING-FUNCTIONS) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'SUGG-PREC) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'PURE-CRITPAIRS) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'SAME-NONVAR) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'INDUC-PROVE) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'INSTANCE-DELETE-CONDITION) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'PNTLEN) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'NORM-BUT-ROOT) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'RENAME-PAIR-RULE) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'ADD-OLD-VARS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'POLY-MAKE-PAIRS) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'INIT-PROVE-GLOBALS) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'MAKE-BETTER-PRE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'POLY-CHOICE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'RENAME-VARS) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'IS-CHARACTER-RULE) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'GET-REST-GLOBALS) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'STR-CHOOSE-ONE-SCHEME) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (source-file 'FULL-DIO) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'DIFF) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'ADD-POSITIVE) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'ADD-RULE) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'DEF-DOMAIN-POINTS) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'IS-USED-PRE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'TRY-MAKE-EQUI) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'ANS-MEMBER) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (source-file 'PURE-NORM-OUTERMOST) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'DEF-LOOP-FOR) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'MERGE-TWO-TUPLES) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'CHOOSE-STR) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'LOOSE-SYM-SEQUENCE) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'EQN-AS-RULE-INFO) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'FIRST-SPEC-TERM) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'DETACHMENT-CRITICAL) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (source-file 'CHECK-ARITY) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'PURE-REWRITE-AT-ROOT) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'DISPLAY-ARITY2) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'RUN-KB) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'MR) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (source-file 'PRED-SUPERPOSITION) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (source-file 'CRIT-MARKED) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'IDEM-SUPERPOSITION) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (source-file 'SUPPORT-EQN) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'MAKE-ONE-SCHEME) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'PURE-SUP-TERM) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'AC-KB-CHOICE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'FREE-VARS) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'RULE-DESTROYABLE) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'ADD-CRIT-RULE) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'SEARCH_BY_EQN) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'REDUCE-BY-HOMO-RULES) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'LEFT-ARG2) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'VAR-CONSISTENCY) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'START-RRL) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'COMPRESS-FLAT) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'PRES-SIZE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'REMOVE0) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'ADD-OPERATOR) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'IS-CROSS-OP) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'ORIENT-RULE) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'IS-FREE-TERM) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'GET-BASIC-TYPE-TERMS) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'LOOP-ADD-TEMPS) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'IS-CONSTANT) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PRED-RULEP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'EXPECT-ARITY) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'LESS-VECTOR) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'NORM-BOOL-INNERMOST) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (source-file 'AC-EQUAL) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MERGE-AND-REMOVE-PAIRS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'DRAIN) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'IS-ROOTED-+) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'IS-BLOCKED) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'IS-HYPO-PRE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CHANGE-RULENO) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'NULL-CTX) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PURE-OUTRED1) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'NEW-RULE-FROM-ASSOC) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'IS-NORMAL) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'NONAC-UNIFY) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'ACO-HARDER) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'X_GET_INDUC_TERM) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'IS-FAILED-INDUC-EQN) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'COMMUE-EXCHANGE) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'COVER-NORM-TERM) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'NCONS) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'X_CHOOSE_ONE_RULE) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'OUTFILE) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'CYCLE-REDUCE-OTHERS) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'CLEAN-INDHYP) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'LRPO-RESULT) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'ENABLE-RULE) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'EQ-FIND) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'NORM-AND-ARGS) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (source-file 'REDUCE-+-TERM) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'REMOVE-QUAN-ARGS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'DEF-LOOP-MACRO) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'ADD-TO-ARGS) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'SMALLER-PRE-CAR) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'LAST-CONSISTENCY-CHECK) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'WRITE-SEQ-EQN) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'TYIPEEK-SPA-CR) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'IS-VALID-OP) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'ENTER-OP) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'LIST-DIFF) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'REMAKE-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'LAST-CHECK-2ND-RULE) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'IS-PREMISE-SET) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'POST-FOR-WHILE) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'CAN-HAVE-NEW-OP) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'DIVISIBLE-CHECK) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'ASK-FOR-OPERATOR) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'PURE-REDUCE-BY-ONE-AT-ROOT) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'SYMMETRY-TERMS) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'DECANON-AND) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'DETACHMENT-RULE) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (source-file 'IS-VALID-CONDI-RULE) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'POLY-REDUCE-AT-ROOT) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'BA-SIMP-NOT) '(#P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (source-file 'MAKE-EQN) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ADD-EQU) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'GET-RULES-WITH-OP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'EQUIV-LIST) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (source-file 'NORM-CTX) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (source-file 'X_MATH_IND) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'MAKE-BUFFER) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'MAKERULES) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (source-file 'FAIL-END-INDUC) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'COPYLIST) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'GET-INSTANCE-TERMS2) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'REDUCE-AT-ROOT-BOOL) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (source-file 'BLOCK-CHOICE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'PRE-VARS) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'ACLRPO) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'OPEN-READ-FILE) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'INTRO-RULE) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'DISPLAY-OPS) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'PICK-MAX-SCORE-OP) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'DISABLE-RULE) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'MAKE-TERM-1ARG) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'NORM-PROVE-ALL-EQNS) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'GET-RHS) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'WRITE-COMMENT-EQN) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'OR-CONDI-EQN) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'INCREMENT-POS) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'CODE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'GET-TERM-ARGS) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'AC-C-ROOT) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'COVER-MULTI-TERM-INDUC) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'CARDINALITY) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'MAKE-PAIRS) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'ONE-COMPOSITION) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'ALWAYS-SLOOP-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'IS-ASSOC-UNDER-C) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'POLY-MATCH-+) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'WELL-TYPED2) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'PRED-SUPER) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (source-file 'PROCESS-ASSERTION) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'DISPLAY-KB-STAT) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'ACM-AND-EQ) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'LOOP-DECLARE-BINDING) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'REMOVE-SUGG) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'WRITE-ASSERTION) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'CONSISTENT-CHECK) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (source-file 'TOTAL-ORDER-RES) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'LIST_TREE) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'INDUC-REDUCE-OTHER-RULES) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'MAX-DEPEND-GAP) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'ASSOC0) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'PARSE-LOOP1) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'SPECIAL-SIZE) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'BASE-DEPTH) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'ASK-A-NUMBER) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'GET-NONCONS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'NORM-WITH-BIN) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'PROOF-UNDER-NEW-PREMISES) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'M-*-M) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'ORIENT-INDUC-HYPO) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'RIGHT-ARG2) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'DEPTH) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'TR-FIND) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'DIVISIBLE-CHECK2) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'AND-LHS-TRUE-RHS) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'GET-SYMMETRY-TERMS) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'VAR1-LIST) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'SPECIAL-SUBST) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'SLOOP) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'RPOMULT) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (source-file 'NORMALIZE-BY-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'EQUIV-OPS) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'KNUTH-BENDIX1) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'PURE-NORM-INN) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'ARGS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'READC) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'CHANGE-CTX) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'WRITE-F-PREMISES) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'ADD-END) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'REDUCE-AT-ROOT-ONE-RULE) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'EXTEND-DOM-ARGS) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'LOOP-PARSE-ADDITIONAL-COLLECTIONS) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'WRITE-VARIABLE) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'EXPECT-ARITY12) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'MULTI-COM) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'TOKEN-TEXT) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'GET-INDUC-VARS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'TEST-RRL) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'GUIDE-REDUCIBLE-TIME) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'REWRITE-AT-ROOT) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'ADD-SUGG-TYPE1) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'MANUAL-OPTIONS) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'PRINT-CURRENT-PREMISES) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'TRACE-GENERATED-RESULT) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'IS-SUBSEQ-LIST) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'SAME-LIST) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'CLEAN-LINE) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'GET-DEFINING-DOMAINS) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'COVER-AUTO-LEVEL) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'FLAT-TERM-FUNC) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'IS-BIG-ENOUGH-RULE) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'RPOST) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (source-file 'LOOP-RETURN) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'BIGT-ONE-KILL-ONE) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'EQN-SOURCE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'GREATER-ARITY) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'FORM-PREMISES-FROM-CONJ) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'ADD-SUGG-TYPE) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'PROCESS-AC-CRITICAL-PAIR) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'TYPE-ERROR) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'ALWAYS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PARA-SUP-TERM2) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'IS-ASSERTION) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ADD-BIND-TO-SUB) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'SET-COMMUTATIVE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SIMPLIFY-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'DECANON-XOR) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'DISP_STRINGS) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'SET-EQN-MARK) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'NTIMES) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'REMOVE-RIGHT-ARG) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'ASK-NUMBER) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'TRACE-CRIT) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'CURSOR_DOWN) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'RENAME-TERM) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'ADD_CHILD) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'CYCLE-REWRITE-AT-ROOT) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'FLATTEN-EQN) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'REF-SYMMETRY-VARS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CTX-GT-LHS) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'SET-SYMMETRY-MARK) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'LOOK-AT-PAIRS) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'SUB-QUASI-REDUCIBLE) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'REDUCE-EQN-BY-ONE-RULE) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'PRE-BIGGER-THAN-EQN) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'PUSH-HISTORY-MANUAL) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'CONTINUE-MAPPING) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'RUN-KB-OPTIONS) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'TRACE-AC-SUPERPOSITION) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'COMPOSE) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (source-file 'COVER-NORM-UNCONDI-EQN) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'CASEQ) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'POLY-LRPO) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'COMMUNE-TERMS) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'POLY-SUPER-DISTRIBUTION) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'POST-POSI-STRA) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'SIMPLIFY-MY-EQ-TERM) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'NO-SUBSUMPTION) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'FACTORIZATION) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'TOTAL-ORDER-ATOM) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'COPYSYMBOL) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'ELIM-BIN) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'SYMEVAL) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'GET-ARITY2) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'NORM-TERM) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'X_INITIAL) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'REMOVE-EQ-OP) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'PRINT-NODE) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'PARSE-NO-BODY) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'CHECK-MISMATCH) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'STR-FORMULATE-SCHEME) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (source-file 'SIMP-AND) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'FIRST-N-ELEMENTS) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'SIZE-UNI) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (source-file 'DEFINING-DOMAIN) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'DELETE-RULE) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'PAIR-INFO) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'RULE-SUBSUMED-PREMISES) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'REDUCE-BY-P-COMMUT) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'DISPLAY-ONE-ARITY2) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'FUNC-SUPERPOSITION) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'PP) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'OBJ-NAME) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'SET-INFIX) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'NAME2RULENUM) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'MINIMIZE-SLOOP-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'CRRL) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'EXT-STATUS) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'COMPATIBLE-PATTERNS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'FREE-SUBTERMS) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'IS-PRIMITIVE) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'IN-TABLE-SLOOP-MAP) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'BREADTH-SEARCH) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'NEW-ARGS) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'C-PERMU) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PARSE-LOOP-FOR) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'NEW-TOP-TERMS) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'FLATTEN-WITNESS) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'SUP-TERM2) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'THE-TYPE) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'X_FAILURE_HANDLER) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'NIL) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'SAME-ARITY) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (source-file 'MATCH-BOOL-NEW) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'POST-LIMIT-STRA) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'IS-CONDI-DOMINATE-RULE) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'FCLOAD) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'AUTO-OPTIONS) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'BOTH-ADD-PREDICATE) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (source-file 'ALL-PLAUS) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'NEGATE-LITERAL) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'WRITE-DETAIL-RULE) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'PROOF-METHODS) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'SET-UNIFY) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'HANDLE-CONDITIONS) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'GET-SCHEMES) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'NAME-LAST-RULE) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'INCONSISTENT-EQN) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (source-file 'CHAR-HANDLER) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'FIRST-BOOLEAN-CONSTANT) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'BOOL-MATCH-STR) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'SIMP-XOR) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'IS-SUBT) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'TOTAL-ORDER-PC) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'COUNT-SLOOP-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'W-SIZE) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'RESUME-RRL) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'PARSE-LOOP-MAP) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'NEGATE-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'AC-DISTRI) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'N-TUPLES) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'SUB-NONVARS) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (source-file 'LIST-EQUATIONS) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'CHANGE-RULE-SOURCE-TYPE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'COVER-CONDI-NORM) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'WELL-TYPED-VAR) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'EXT-COMMUTATIVE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'QUOTIENT) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'ADD-TIME) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'LESSP) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'PREMISE-INSTANCE) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'COVER-SET-INDUC-STRA) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'ACM-VARIABLE) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'BIN-IS-CURRENT) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'CHOOSE-MAX-SCORE) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'INT-RULE-STRAT) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'DISABLE-RULES-AUX) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'COVER-OF) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'HAVE-INDUCTIVE-VARS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'GET-DOMAIN-TYPE) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'LESS-SIZE-CAR) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'INFIXP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MERGE-AND-REMOVE-DUPS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'DEF-LOOP-MAP) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'ALL-NONVARS) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'BASIC-TERM) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'COMP1) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (source-file 'POLY-MATCH-ONE-TO-*) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'GREATERP) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'INFILE) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'CHOOSE-BEST-SCHEMES) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'FLATTEN-POST-ASS) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'BA-SIMP-AND) '(#P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (source-file 'READ-T-TERM) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'LIST-PAIRS) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'TRACE-INCONSISTENCY) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (source-file 'INDUC-SUBS-OF-EQN) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'CTX-DOMINANT-RULE) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'SUB-NONVARS2) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (source-file 'SET-UP-ARITY2) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'LAST-LETTER) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CYCLE-REDUCE-TERM) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'SYS-FLAG-INIT) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'INDUC-AC-SUBS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'DIO-INITIALIZE) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'REMONCE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'RENAME-PATTERN) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'WRITE-ASSERTIONS) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'X_AUGMENT) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'IS-PREVIOUS-INDUC-EQN) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'NOT-AUTO-PREV-RULES) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'WRITE-ONE-PRE) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'MAKE-VALUE) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'WITH-STRATEGY) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'OPS-IN-PRES-OF-RULES) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'SECOND-ARG) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PRE-CRIT-CHECKEQ) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'REDUCE-XOR-TERM) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (source-file 'IS-SUBSET) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'ACO-PULL-OUT-BIG-EQ-SUBS) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'TRACE-BUILDING) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'BREAK-ASS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'GET-INTERSECTION-RANGE) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'TOP-TERM) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'PURE-CHECKEQ-NORMAL) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'GET-PREMISES) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MAKE-P-COMMUT-RULE) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'POLY-REDUCE-AT-ROOT-ONE-RULE) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'PROOF-BY-HINT-TERM) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'NEW-FIRST-TRANS) '(#P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (source-file 'LCASE) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'CYCLE-PAIRS) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'RUN-TIME) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'HAS-HINT-TERM) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'MENU_FOR_NORMAL) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'FIND-MERGE-SIGMA) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'TRY-ONE-CONDI-RULE) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file '=-SLOOP-FOR) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'KNUTH-BENDIX2) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'PURE-SUP-TERM2) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'CLEAN-HISTORY) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'GET-ARITY) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (source-file 'REM-ARGS) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'ADD-RULE-LINEAR) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'IS-RULE-SOURCE-TYPE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'INDUC-SUBS-TERM) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'LITERAL-NUM) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'PRINT-ATOMS) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'MERGE-TWO-PATTERNS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'POINTER-FOR-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'OPERATOR-STRA) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'LEFT-ARG) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'PARSE-LOOP-WITH) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'PROCESS-AC-UNIFIER) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'IS-EXIST-TYPE-NAME) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'POLY-SIMPLIFY) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'TRACE-PARA) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'SLOOP::LOOP-FINISH) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'REDUCE-*-TERM) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'OPEN-WRITE-FILE) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'REDUCE-BY-P-COMMUT2) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'PRINT-SUGG-INFO) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'PARTI-BY-VARS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'TIME-IN-SEC) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'TRACE-ADD-TESTSET) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'HIGH-OP-POSI) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'REPVARSIN) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'IS-BOOL-ROOT) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'DISPLAY-TYPE-ARITY) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'SEARCH-TREE) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'REDUCTION-PROOF) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'SUBTAT) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'CHANGE-LHS-RHS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'M-+-P) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'HEAD_OF_FRI) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'IS-REDUCTION) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'POLY-SUPER-AT-*-0) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'CHECK_AND_ADD) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'INIT-COVER-PROVE) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'IF*) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'NEW-RULE-STRA) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'EXT-TYPE-RELATION) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'POLY-SIGMA) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'SAVE-WORD-END) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'FIXUP-QUANTIFIED-FORMULA) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'DESETQ) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'WRITE-F-EQN) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'TYI) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'GET-ATOM2) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'UNKNOWN-SIZE) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'INDUC-ORIENT-AN-EQN) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'SUCC-END-INDUC) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file '+-CANONICALIZE) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'MOVE-LHS-ARGS) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'OPERATOR-ORDERING) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'MAKE-PRE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'FOUND-WITNESS) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'TAKE-OUT) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'DEFAULT-FLAG) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'DECOMPOSE-TERMS) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'PROCESS-PRE-ASS) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'IS-LIMITED) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'GET-ALL-PROPERTIES) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'SUBSTVARFOR) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'TRY-ONE-RULE) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'DISPLAY-OP-STATS) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'LIST_NODE) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'PURE-SUPERPOSITION) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'MAKE-BETTER-PRES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'GET_PNAME) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'REMOVE-ONE-ARG) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'REM-ARITY) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CYCLE-REDUCE-AT-ROOT-2) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'MAN-PICK-2ND-RULE) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'SUB-TEST) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (source-file 'LOAD-RRL) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'AVOID-COMMON-TERM) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'GET-PRE-RHS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PUTPROP) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'ELIGIBLE-INDUC-TERMS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'MANUAL-PICK) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'GET-COVER-SETS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'ORDER-STR) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'UNDO-STRATEGY) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'X_COVER-PROOF-PROCESS2) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'IS-COMMUT-PAIR) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'ADD-EXTRA-PREMISE) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'SET-PREDICATE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CLEAN-RULE) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'EXPECT-ARITY21) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'GET-RECURSIVE-RETURN-OP) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'IS-EQ-TRUE-PRE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'NEQ) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'PICK-GOAL) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (source-file 'REF-INSTANCE-SEEDS2) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'INDUC-IDEM-SUPERPOSITION) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'SKOLEMIZE) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'GET-SKO-FUNC) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'SUBSUMED-PREMISES) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'AVOIDABLE) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'SPLIT-RHS-AND) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'UNDO) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'READTEQNS) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'QUIT-RRL) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'DIO2) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'ADD-RULE-COMPLETE) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'WRITE-RULES) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'LOOP-COLLECT-KEYWORD-P) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'SHOW-TREE) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'WELL-TYPED) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'AND-OF-MONOMIALS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'EQ-PRE-STRAT) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'DISPLAY-CONSTRUCTORS) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (source-file 'RESTORE-REST-GLOBALS) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'COVER-SETS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'ACO-LPRO>=) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'TRACE-DIVISIBLE) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'CHANGE-MONO-SIGN) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'FIND-SPECIAL-TERM) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'M-*-P) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'ONE-PATTERN) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'ACO-HARD>) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'GET-EQUATION) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'HEAD-LESS-THAN-PRES) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'NON-LINEAR-VARS) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'TERM-SIZE-ORDER) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'SET-ART-MODE) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'SIMPLIFY-*) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'NORMAL-PROVE) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'PROVE-ALL-EQNS) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'READ-ARGS) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'AC-OP-P) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ORDER-ONE-NORM-OTHERS) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'GET-VAR-SUBSTITUTION) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'LOOP-POP) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'SEE) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'ORDER-CTX) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'RESTRICT-CRIT-STRA) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'IN-PACKAGE-SLOOP-MAP) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'ACO-LEXICO-COMP-LR) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'JUSTIFY-EQN) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'EQOPS) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'EXCHANGE-LR) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MAKE-RULE-FROM-ASS) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'NEWVARSIN) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'GET-PRES-OPS) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'INSERT) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'CHOOSE-HIGHEST-TERM) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'RESTORE-EQUATION) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'PROCESS-ASS1) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'EXIST-OP) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (source-file 'PROVE-SPLIT-BOOL) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'RPL-BY-TERMS2) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'SUPERPOSITION) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'COMM-ROOT) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'IS-CONDI-EQN) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'READ-TYPE-RELATION) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'SIMPLIFY-ALMOST-FLAT) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'CONSISTENT-PAIR) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (source-file 'SKIP-EOLN) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'SIMPLIFY) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'PICK-STRATEGY) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'PURE-PROCESS-EQUATION) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'FIND-OUT-BIG-EQ-SUBS) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'TR-ADD) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'UNIFY) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'AVERAGING-SLOOP-MACRO) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'UNITP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ADD-PAIRS) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'INDUC-SUPERPOSITION) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'MEMBER-TERM) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'RES1) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'SUBPAIR) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'MERGE-LIST) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'STRUCTURE-INDUC-ON) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'SAME-ROOT) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'HALF-ONES) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'MULT-FORM) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'START) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'ACO-EQUIV-LIST) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'COMMUNE-TERMS2) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'OK-TO-CONTINUE) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'QUASI-REMOVER) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'REMOVE-IRRELEVANT2) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'NEGATE-PREDICATE) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'COLLECT-IF) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ACO-BIGT-PARTITION) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'CRIT-STRATEGY-OPTIONS) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'CONSTRUCTORP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'NORM-EQ-ARGS) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (source-file 'NON-CONSTANTS) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (source-file 'NEW-TERM) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'IS-AN-INSTANCE) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'OR-COUNT) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'FORM-SUBGOALS-FROM-PATTERNS) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'MAKE-PRE-EQN) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'USER-SELECTQ) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PURE-KNUTH-BENDIX2) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'ORDER-VARS) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'PRE-SUB-NONVARS) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (source-file 'GET-FREE-CONSTRUCTORS) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (source-file 'TOKEN-TYPE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'BOOL-REWRITE-AT-ROOT) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (source-file 'SET-HANDLE-AND) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'REMOVE-IRRELEVANT3) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'INDUC-PICK-UNMARK) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'X_NORMAL) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'REDUCE-BY-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'FIND-IN-ORDERED-LIST) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'ABSTRACTION) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (source-file 'PARAMODULATE) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'TYPE-ALL-VARS) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'DATE) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'DEBUG-MSG) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'SPLIT-PREMISES) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'RUNTIME-MAX-WARNING) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'REF-INSTANCE-SEEDS) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'RULE-NUMS-FROM-SOURCE) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (source-file 'REDUCE-REVERSE-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'PP2) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'LISTARRAY) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'X_PREPARE_RULES) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'ALL-PRE-VARS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'REFUTE-RULE-INSTANCES) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'COMMUTATIVEP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SUP-TERM) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'READ-EQNS) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'COMPOSE2) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (source-file 'GET-POSITION) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'LEXICO-COMP) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (source-file 'SUM-SLOOP-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'GET-RECURSIVE-DEF-TERM) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'PARSE-LOOP-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'PRINT-HEAD) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'ALL-VARS) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'REF-PRES-VARS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'LRPO-PREMISES) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'AC-CRITICAL-SOURCE) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'GET-TESTSET) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'REDUCE-OTHER-RULES) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'IS-SORTED) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'PRINT-NAME) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ADD-REST-ARGS) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'COPY) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'PURE-ADD-RULE) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'FLOAD) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'TYIPEEK) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'REFUTE-EQN) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'ADD-SUGG) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'NOFALSE-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'ACO-COMPUTE-SIZES) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'UNIFIER) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'APPLYSUBST-PRE) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'TRACE-TESTSET) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'READ-INPUT) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'APPLYSUBST-RULE) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'LRPO) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (source-file 'ORIENT-AN-EQN) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'GET-SKELETON) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'CONSISTENT-CHECK-QUASI) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (source-file 'INITIALIZE-MANUAL-ORDERING) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'IS-SUBSEQUENCE) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'WRITE-TREE) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'SWITCH_RULE_LR) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'CYCLE-CHOICE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'COMPARE-SYMBOL) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'EQN-CTX) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'READFEQNS) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'MEMBER0) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'HAVE-BOOLEAN-CONSTANT) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'ENCOURAGE) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'SET-ARITY2) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SIMILAR-EQN) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'SUBSTITUTE-SLOOP-BODY) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'PARSE-LOOP-INITIALLY) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'ACM-AC-ROOT) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'GET-SCHEME-VARS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'START-UP) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'SAVE-RRL) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'COMBINATE) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'WRITEF-SYS) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'FLATTEN-PREMISES) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'MARK-USED-PRE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'ELES-MORE-THAN-1) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'MY-TYIPEEK) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PARSE-LOOP-WHEN) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'NORM-XOR-TERM) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (source-file 'CHOOSE-CONSTRUCTORS) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'FIRST-PROCESS-EQN) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'NAIL-QUASI-REDUCIBLE) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'ELEMENT-COMBINATION) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'FILE-DATE) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'DEFAULT-PRECEDENCE) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'REMOVE-SUBSUMED-PATTERNS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'PC-GRT-PREC) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'GET-PRE-LHS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'FLATTEN-RULES2) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'CHOOSE-OFF-CLOSE) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'UNIT-RULE) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'CHOOSE-BY-HAND) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'OK-PREV-RULES) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'CRIT-PAIR-PROCESS) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'REF-EXTRA-PRE-VARIABLES) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PURE-NORM-INNERMOST) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'PROVE_EQN) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'CHANGE-VARS) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'EQ-ADD) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'GENERAL-BASIS-VECTORS) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'LIST-RULES) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'DRAIN-IT) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'OCCUR-NUM) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'IS-GROUND) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'COVER-NORMAL-PROOF) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'BUILDING) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'CLOSE-LOG) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'APPLIES) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'WELL-TYPED-EQN) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'INITSYM) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'INSERT-POLY-SIGMA) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'EXTEND-DEF-DOMAIN) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'MAKE-EQ) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'PREMISES-ARE-TRUE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'EMPTY-SUB) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (source-file 'TRACE-FACTOR) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'EXPECTED) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'EXTEND-SCHEMES) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'MANUAL-GOAL) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (source-file 'IS-REL-PREC) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'FLAT-TERM) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'HEAD_OF_MANUAL_INDUC) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'INFIX-LETTER) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file '(NODE (:PRINT-FUNCTION PRINT-NODE))) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'SYMMETRY-VARS) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'READ-ATOM) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'SIMPLIFY-COND-TERM) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'RESET) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'MY-COPYLIST) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'REDUCE-BY-CHARACTER) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'EXPECTING-PREDICATES) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'DEF-LOOP-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'PICK-OUT-RULE) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (source-file 'START-KB) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'ONE-ELIM-SUBTERM) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'HAS-INDUCTIVE-VAR) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'NORM-INN) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'MAKE-TERMS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ALLSYM) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'PICK-AN-ARG) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'NOT-FALSEP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'POLY-MATCH-FIND-REST-*-ARGS) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'INDUC-SUBSUMED-BY) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'AC-MATCH) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'COVER-CASE-COND-FLAG) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'DISPLAY) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'MY-FIRST-CTX-TRANS) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'IS-CONSTANT-OP) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (source-file 'P-AND-P) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'ORDER-ONLY) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'DELETE-EQN) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'START-PUSH-HISTORY) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'PEQNS) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'FIRST-CTX-TRANS) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'M-AND-M) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'FIRST-VAR-PRE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'IDEM-SUPER-COMMU) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (source-file 'DISABLE-RULES) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'POLY-SUPER-AT-*-1) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'NEW-AC-SUPER-SAME) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'LOOP-ADD-BINDING) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'ELIMINABLE-TERMS) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'MULT-LENGTH) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'NEWSYM) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'DIO) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'X_HYPOTHESIS) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'UNIFIERS) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'MERGE-DUPLICATE) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'CURSOR_UP) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (source-file 'EXT-CONSTRUCTOR) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'MENU_FOR_CURSOR) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'REM-INFIX) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'LOGXOR-SLOOP-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'IS-SUBLIST) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'AUTO-KB) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'MULT-MERGE) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'TRACE-HYPOTHESE) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'ASS2EQN) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SIZE) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'SEPARATE-XOR-ARGS) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'DECIDE-MERGE-CONJ) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'MATCH-SET-AC) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'SUBS-OF-SAME-ROOT) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'SET-DIFF) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'WARN-STAT) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'ADD-AT-END) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'COVER-PROOF-PROCESS2) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'KEEP-RULE-STRATEGY) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'REDUCE-BY-PREMISE-AT-ROOT) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'IS-HIGHER-TERM) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (source-file 'TOTAL-ORDER-2) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'GET-INSTANCE-SEEDS) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'QUERY-INSERT) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'XOR-OF-MONOMIALS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'NORM-SUB) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (source-file 'SIMP-AND-SIMP) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'NTHELEM) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'NORM-BY-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'DISPLAY-UNIFY) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (source-file 'C-PERMUTATION) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'IS-INFIX-OP) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'IS-EQ-FALSE-PRE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'REM-DUP-VARS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'REMAINDER) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'COVER-CASE-BOOL-FLAG) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'IS-ONEWAY) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SOURCE-NAME) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'GET-STATUS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MANUAL-ORIENT) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'CHECK-HEAD-ROLE) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'FIRST-TRANS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'P-*-P) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'CHAR-ASCII) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'SIZE-COMPARE) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'CHECK-WITNESS) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (source-file 'SUPER-ITSELF-PRE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'HANDLE-AND?) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (source-file 'INSERT1) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'EQN2PRE) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'MAKE-RULE-SIZE-ORDER) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'WRITE-TERM) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'HASQUANT) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'ACM-ONE-VAR) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'HEAD_OF_FAILURE_HANDLER) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'REMQ) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'LRRL) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (source-file 'PICK-AC-PAIR) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'ACO-COLLECT-BIGT) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'ACO-NOBIGT-PARTITION) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'SAME-OP?) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'IS-BAD-SUGG) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'MY-UNTYI) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'ACO-RPOMULT>) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'INPUT-TYPE-CHECK) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (source-file 'VARS-ONLY) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'COMM-OP-P) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'P-XOR-P) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'ARGS-OF) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'IS-HOMOGENEOUS-RULE) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'COMBINATE2) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'MAKE-CRIT-RULE) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'REDUCE-ARGS-BY-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'TYIPEEK-SPACE) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'ONE-EXTENSIBLE-TYPE-POINT) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'WELL-TYPED3) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'REFUTED-RESULT) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'CYCLE-REDUCE-AT-ROOT-3) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'TRACE-REMOVE-IRRELEVANT4) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'SKOLEMIZE-AWAY-QUANTS) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'COMPARE-TERM-RESULT) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'APPLYSUBST) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'X_MANUAL_INDUC) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'WRITE-SIGMA) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'PROCESS-NEW-AC-CP2) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'TRANS-STATUS) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'RPLNTHSUBT-IN-BY) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'HANDLE-FACTOR) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'SET-ARITY) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CAR-NUM-ORDER) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'COVER-PROOF-PROCESS) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'ASK-CHOICE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'COMPLETE-WELL-TYPED) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'IS-PARTIAL-OP) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'NONDO-CRIT) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'IS-INCONSI-PAIR) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (source-file 'ADD-SUGG1) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'FLATTEN) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'SUB1-MODULO-N) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'OP-LIST) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'MERGE-PREMISES) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'ATTACH) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'BREAK-ASS-STR) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'IS-CONDI-RULE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CYCLE-REDUCE-AT-ROOT-4) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'CNTH) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'CHANGE-LHS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'MORE-VARS-PREMISE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'SKOLEM-TERMS) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'AC-CRITPAIRS) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'COVER-GENE-INDUC-EQN) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'PROVE) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'FIRST-ARG) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'DEF-LOOP-INTERNAL) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'PURE-RWONCE-OUTERMOST) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'MARK-SUPERPOSED) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (source-file 'PRED-FUNC-SUPERPOSITION) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (source-file 'MAKE-RULE-INSTANCES) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'NORM-CTX-AND) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (source-file 'ADD-DEFIN-DEPEND) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'CONDENSE-SEQUENCE) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'TEST-ONE-OP) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'OCCURS-IN-RULE) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'OPS-EQUIV-TO) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'APPEND1) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'ONE-TYPE-VAR-LIST) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'ONE-RULE-ITERATION) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'COVER-INDUC-PROVE) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'DETACHMENT-SUPER) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (source-file 'RETURN-SLOOP-MACRO) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'REMOVE-VAR-PRES) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'PRINT_STR) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'ONE-TYPE-ALL-VARS) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'HANDLE-COMMU-HYPO) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'IS-FREE-CONSTRUCTOR) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'IS-VALUE-TERM) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'SIMILAR-TERM) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'FACTORIBLE) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'OCCURS-IN) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'PURE-PROCESS-CRITPAIR) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'TAB) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'OPS-OF-RULE) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'EXT-DIVISIBLE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'GET-SOLUTIONS) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'RULE-SOURCE-TYPE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'COMP-RULE) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (source-file 'REMOVE-DUP-VARS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'MAKE-EQ-PRE) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (source-file 'X_REDUCE-BY-ONE-RULE) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'DIVISIBLE-RIGHT-CHECK) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'P-COMMUT-REDUCE-OTHERS) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'MAKE-TUPLES) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'PARSE-ONE-WHEN-CLAUSE) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'IS-HOMOGENEOUS-TERM) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'PICK-SMALL-GOAL) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (source-file 'VAR-LIST) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'REDUCE-BY-ONE-AT-ROOT) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'IN-ARRAY-SLOOP-FOR) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'MULT-DIFF) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'REMOVE-LEFT-ARG) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (source-file 'DISTR-AC-ORDER) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'PARSE-LOOP) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'SPLIT-LHS-AND) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'MAKE-ONE-DOWN-HILL) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'REDUCE-EQ-EXACTLY) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'TR-CLOSURE) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'SET-STATUS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'SUBSUMED-TUPLE) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'THEREIS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'INSTANT-CHOICE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'NONLINEAR-VARS-UNDER-*) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'RENAME-VAR1) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'GET-INSTANCE-TERMS) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'EQ-TR) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'SPLIT-ALIST) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'PROCESS-DEL-RULE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'WRITE-PREMISES) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'EQN-INSTANCE) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'ALPHALESSP) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'INS-LIS) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'CHECK-BUILD-RULE) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (source-file 'ACO-DELETE-EQUIV) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'GET-TESTSET-QUASI) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'GET-ITEM) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'SIMPLIFY-+) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'MY-TYI) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'EXT-EQUIVALENCE) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'TYPE-VAR-LIST) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'RULE-SOURCE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'COVER-STRONG-INDUC-HYPO) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'SHOW-MESSAGE) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'REDUCE-AT-ROOT) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'NORMALIZE) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'FIRST-USE-SLOOP-FOR) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'PICKOUT) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'CHANGE-LHS-RHS-CTX) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'AC-SUPERPOSITION) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'PARSE-LOOP-MACRO) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'RULENO) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'LOOP-LET-BINDINGS) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'ORDER-PC) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'RESET-RRL) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'MATCH-PREMISES) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'ACO-RPOMULT>=) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'ELIMCOM) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'RULE-NAME) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'GOOD-UNIT-CLAUSE) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'ONE-EXTENSIBLE) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'SMALLER-SIZE) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'ALL-ONES) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'NORM-SIGN-CHANGED-MONOS) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'NORMAL-FORM-SUB) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'TIMES-CDR) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'UCONCAT) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (source-file 'SAVE-WORDS) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'NEVER-SLOOP-COLLECT) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'INDUC-SUBGOAL-PROOFS) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (source-file 'ACO-RPOSTATUS>=) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'GET-RULE-LEVEL) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'SINGLE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'PURE-NORM) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'TIME-LIMIT-STRA) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'ADD-SOLN) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'REMOVE-IRRELEVANT) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'ADD-PATTERNS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'ALL-OPS) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'NEW-AC-SUPER-AT-ROOTS) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'MY-TYO) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'TRY-ONE-EXTRA-VAR-RULE) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'OP-OF) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'CONSISTENT-RULE) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (source-file 'CAR-LRPO<) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (source-file 'ASS-RULE-BOUND) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'POLY-INITIALIZE) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'RPL-BY-TERMS) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'REDUCE-MONO) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'ACM-NONAC) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'GIVE-STAT) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'GET-CODOMAIN-TYPES) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (source-file 'PARA-SUP-TERM) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'IS-SOURCE-TYPE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'GET-RULE) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'CHOOSE-LEAST-COVER) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'SYM-ARG-POSITIONS) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'GENNEWSYM) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (source-file 'MAP-FRINGE) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'PSEUDO-TERM-ORDERING) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (source-file 'GET-TESTSET2) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'EXPAND-EQ) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (source-file 'MANUAL_REDUCE) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (source-file 'PRED-CRITICAL-PAIR) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (source-file 'PREMISES-INSTANCES) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (source-file 'WRITE-EQNS) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (source-file 'PICK-OUT-PREMISE) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (source-file 'CTX) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'FALSEP) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'RWONCE-OUTERMOST) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'MATCH-PREMISE) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'UPDATE-BY-EQ) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (source-file 'RESUME_AUTO) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'SEPARATED) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'IS-INPUT-ASS) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'NORMALIZE-BOUND) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'SORT-OP-ARGS) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (source-file 'POLY-MATCH-TEST-REST-*-ARGS) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'POLY-CYCLE-LUCK) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'MERGE-SORT-ARGS) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'PARSE-LOOP-DECLARE) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (source-file 'PURE-LRPO) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (source-file 'INVALID-INPUT-WARNING) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'MOVE_CURSOR) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'PROCESS-CRITPAIR) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (source-file 'POLY-SUPER-AT-*) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'PROCESS-ASS2) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'POLY-ADD-HOMO-RULES) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (source-file 'CAR-LENGTH-GREAT) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'WASH-DEF-RULES) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (source-file 'READ-ARITY) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (source-file 'ACM-NO-ARG) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (source-file 'RENAME-EQN-RULE) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (source-file 'BA-SIMP-OR) '(#P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (source-file 'SYNERR) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'TRIVIAL-SIMPLIFY) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (source-file 'GET-DOWN) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (source-file 'TRACE-OPTIONS) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'UNCONDI-PROVE) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (source-file 'CHANGE-SOURCE) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (source-file 'INVALID-RULE) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (source-file 'PARAMOD-STR) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'COMMON-ELEMENTS) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (source-file 'REDUCE-AND-TERM) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (source-file 'NORM-OUTERMOST) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (source-file 'CYCLE-OUT-RED) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (source-file 'RRL) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (source-file 'DISP_TREE) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (source-file 'REDUCE-SYSTEM-STR) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (source-file 'SET-RIGHT-HYPO-ARGS) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (source-file 'NEW-TRANS-SIMP) '(#P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (source-file 'IDEM-EQ-CRITICAL) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (source-file 'AUTO-ORIENT) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (source-file 'OP-POSITION) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'MY-PROBEF :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#\Newline :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'MAKE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#\Return :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21803 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21209 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'DIVISIBLE-NONAC-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '$EQ-ARITY :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL23634 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:COLL20332 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21959 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#\Space :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS20526 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'F :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#\( :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#\) :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'OP-RULES :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS20987 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#\, :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS22331 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:COLL22525 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23162 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21428 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:VAL21688 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:VAL21725 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#\; :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'XARG :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL21853 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21889 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:COLL23187 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'PARENTS :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '$CYCLE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'RELEASE-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL20920 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'COLLECT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'ALL-PRE-VARS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS22861 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:COLL22003 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#\] :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'RNUM :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL21953 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'MATCH-POSS :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22896 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22588 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL21788 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL21102 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '$CONFLUENT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:POIN23130 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22178 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS23745 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22231 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS22516 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'ADD-ASSOCIATE-LIST :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23767 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20351 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'EVAL-WHEN :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:VAL21589 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '$NUM-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'TRACE-DROPPED-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '$NARROW :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22636 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'GET-VARLIST :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'RENAME-VAR1 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:POIN22948 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN22218 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS23363 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'UNIFY-WITH-AC :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS22499 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22030 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:POIN22138 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL21489 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:VAL20801 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'PICK-ONE-UNMARKED :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS22112 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS20851 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'NVCOLS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL22202 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'CON1-NUMS :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21878 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:COLL20349 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21574 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21922 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:POIN20675 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL23728 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:COLL20819 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20727 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'SUBTYPE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS20201 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'CADDR :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'DECLARE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:COLL21491 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'NOT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'SUBLIS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:COLL20531 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21176 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'DONE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS21272 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL22718 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS20951 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'EXPR :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:COLL20990 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'D1 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'READ-TYPE-RELATION :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'CDAR :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:COLL21638 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'REST-OF-AND-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL22899 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'CONDI-FROM-CLAUSE :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'ADD-FROM-DATA :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'INC :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:POIN20486 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'C :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN21502 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS20703 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'ONE :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'EQ-IN-MONOMIAL :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21181 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIM22534 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN20651 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL23317 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'ASS-WO-$ANS :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'ASET :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22293 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:POIN20571 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL23037 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SUMXK :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21670 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'AVOID :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIS20875 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'NONDO-CRIT :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'AC-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'NUM-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'TE :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS21635 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'POLY-MATCH-* :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'APPLYSUBST-EQN :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21076 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'ARG-ELEMENTS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20251 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PRE-PROCESS-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22114 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22432 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:POIN23215 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'MAKE-PRE-XOR-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL20275 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20609 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22234 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'END-TEST :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'ASK-USER :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'QUASI-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22278 :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:VAL20382 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'X_SPLIT :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIS22748 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'OPR :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'COMPARE-TERM :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:VAL20375 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN22917 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23761 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:COLL23157 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ARROW1 :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:VAL20584 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL20925 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL22735 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'X_NAME :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20685 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:POIN22541 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'R1 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'TU2 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'NONVARP :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'UNIFY-SUB :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL20411 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'TOP :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:VAL20552 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN23014 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22315 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:COLL20316 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21471 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21506 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'COMPARE-TERM-RESULT :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS21486 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS20954 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'SIMPLIFY-ONE-PRE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'VARL :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS23423 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list ':UNNAMED-LAMBDA :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:COLL20730 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21277 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'HAVE-COMMON :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list '#:VAL22519 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '$POST-SET :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23512 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '*LOOP-EPILOGUE* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:COLL21643 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS22338 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:COLL20846 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'POLISH-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS20420 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'MAPCAR :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CAR-LESSP :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23404 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIM20387 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'EXPORT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS21905 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'TRANSLATE-NAME :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN22994 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ADD-ONE-DEPTH :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22921 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21255 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'CRITPAIRS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '$MAX-HISTORY :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL22923 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22937 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'VAR-POSI :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'A1 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL21796 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'COVER-SET-SCHEME :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22271 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS22567 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'TOTAL-ORDER :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list 'CYCLE-REDUCE-AT-ROOT-1 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'STRUCTURE-INDUC-ON :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'ID :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'NRECONC :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list ':COLLECT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL23038 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21405 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN23510 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'TRACE-SUCC-PROVE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'P-+-P :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20581 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'PLAUSIBLE :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21198 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL23622 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:COLL21841 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'SUBST-VAR-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS23064 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'EXT-AC :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:COLL20704 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL23703 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:COLL20583 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21359 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:COLL20922 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL22882 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'RUL1 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL21897 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20756 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL22448 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:POIN21341 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'SEPARATED :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS22152 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL21883 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL21658 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:POIN22164 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:LIS23265 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23294 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN20909 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL20913 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '+ :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS20241 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PRINT-WARNING :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:VAL23239 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22410 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'VARC :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'RRL :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '$GUEST-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'NV-COLS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20780 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL21583 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'CONSTANTS :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21158 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22550 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22070 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'PROOF-METHODS :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:POIN23371 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20637 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'DEFINING-POSITIONS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '*PRODUCT-FOR* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'IS-P-COMMUT-PAIR :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:VAL22066 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL20407 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'FLATTEN-RULES :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$NRULES :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22910 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'TWO-KILL-ONE :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'NTIMES :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$X_INDEQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL21008 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:POIN22734 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL21509 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:COLL22072 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS23113 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20973 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'TER :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22642 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'MAKE-TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL23246 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '$DEFIN-DEPEND :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22741 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'UNTIL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN22866 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '$TIME-WHEN-LAST-CALL :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22472 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22364 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'DOWN-HILL-ONE :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL20235 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'STRING :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS22383 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS22495 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL21020 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS23667 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22834 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL20745 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:POIN23203 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS21956 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20898 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'I :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN21508 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:VAL22712 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS20643 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN22584 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL23180 :file) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (callers-list 'AUTO-OPERATOR :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'NORM-RHS :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22012 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'OP-POSITION :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'BAD :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SUBST-QUANT-FORM :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21036 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL20471 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23671 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL22964 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN20880 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'TOTAL-ORDER-PC-RES :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:VAL20454 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22069 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '$SYMBNUM :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'STATUS-CANDIDATES :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'PURE-NORM-MIXED :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL23640 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL23366 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22443 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'GOOD-LUCK-CONDI :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21237 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'FAST-FLAG :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'EXT-PRECEDENCE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS23466 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:COLL22021 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:LIS21546 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:POIN22767 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS20804 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22798 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL22098 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS20653 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'REST-COLLECTION :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21967 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL22513 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'FIRST :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LR-RL-STRATEGY :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL23497 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'X_AUTO_NORMAL :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'P-*-M :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL23606 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIM22607 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'LOOP-UN-POP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'VB :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22694 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:LIS22462 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS23710 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL21641 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'CUTTREE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:VAL20204 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS22639 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL23004 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21380 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL20700 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS22409 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'LIST-ASSERTIONS :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'WRITE-TERM-SIMPLE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'TRY-TO-ORIENT2 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'EXT-TRANSITIVE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL21684 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:VAL21924 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21163 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL22825 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL20975 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'TRY-TO-ORIENT-CONDI :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'IS-SUBSEQ-LIST :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CC :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'LBINDS :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS23632 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'LONGEST-LIST :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL21773 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'TR-CLOSURE :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS23134 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'BLOCK-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'NULL-COLS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'L_LIST :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21088 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'RESULT :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL21784 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21692 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'SET :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21849 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:COLL22749 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'GET-TERM :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'GOAL-RULE-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:VAL20491 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'BMAX :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'NEW-LEVEL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'NEWS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS23128 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22715 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'NEXT :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL23244 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:VAL21515 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21855 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS20587 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'PROCESS-NEW-AC-CP :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'EACHTIME :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN23644 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '$RULE-SET :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'NOT-SET-FLAG :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS21779 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIM21821 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'MAKE-PRE-ASS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'EXTRA-CVARS :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL23502 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL22867 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL22890 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'EQ-FIND :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '$X_SUB_ROOT :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIS20281 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'H1 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'RULE-SOURCE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'COVER-NORM-TERM :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'IN-PORT :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21104 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21188 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'WHEN-ART-WITH-INPUT-FROM-TERMINAL :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'OUTPUT :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22726 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'MERGEBLE-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '*LOOP-BODY* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS20771 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'EQ-TR-MEMBER :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21389 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'LAST-CASE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'COVER-ORIENT-EQN :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL23062 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PEEK-CHAR :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS21990 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL20690 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'OPTION-LIST :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:LIS21602 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:POIN20503 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL23045 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21374 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL21714 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:POIN22252 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'COVER-PROOF-PROCESS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'M-XOR-P :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIM20292 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20786 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'NUMBER :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:LIS22346 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:COLL21429 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:POIN23047 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ADD-PREMISE-END :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL21708 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:POIN22034 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list 'PRED-FUNC-SUP :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'SAME-OP :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIS22246 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL21485 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21118 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL23107 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23525 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'CONSP :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'R :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'IS-CYCLE-EQN :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:LIS23737 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:POIN22548 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL20488 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23433 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL21776 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN23658 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22868 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22644 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'ARG2 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'LLHS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'SUBSUMED-TUPLE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$NEW-AC :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL22752 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:COLL21552 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'HANDLE-AND :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL20705 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:COLL23505 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22142 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'M-XOR-M :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'AVOIDABLE :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:COLL21333 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:VAL20379 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21300 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS21760 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:COLL22820 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS23031 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20823 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21432 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '$DEL-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'PURE-CRITPAIRS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:COLL23519 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22102 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'RENAME-PAIR-RULE :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'GCD :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20719 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'POLY-MAKE-PAIRS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'MAKE-BETTER-PRE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'RENAME-VARS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'O :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS20475 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SUB-TEST :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list 'CONS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'DIFF :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'COMMON :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'INDICES :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS21850 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'GET-REST-GLOBALS :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS20774 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'CHAR :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:VAL22133 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:COLL21918 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'IS-USED-PRE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL22962 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21790 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'PURE-NORM-OUTERMOST :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS21200 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL23447 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'CHOOSE-STR :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS20308 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CHECK-ARITY :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'DETACHMENT-CRITICAL :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN20300 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PRED-SUPERPOSITION :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS20683 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS22428 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:COLL23562 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22334 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'MAKE-NODE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:COLL20340 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN20406 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22343 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'ADD-CRIT-RULE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'NORM-BUT-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:COLL21233 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'LHS-VARS :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:COLL23378 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22545 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'PICK-MAX-SCORE-OP :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PROG :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS23230 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'RWONCE-OUTERMOST :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL21480 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:POIN22131 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL20689 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIM22531 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'NEW-ASS-1 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN20660 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL20433 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LOOP-ADD-TEMPS :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL20542 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'ANSWER :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL21577 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21290 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS20314 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21815 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS23003 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'NULL :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS22445 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:COLL22186 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'IS-ROOTED-+ :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21386 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS20530 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'S1 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'NULL-CTX :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'M1 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23451 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL22837 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:POIN20742 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS20226 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'L1 :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21443 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIM21871 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL22827 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '$SUPPORT :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'CYCLE-REDUCE-OTHERS :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'COMMAND :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS21355 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21629 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21805 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS23771 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '$RL-FIRST :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'NEW-ASS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '$POSSI-NUM :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'TOP-TERM :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22017 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:VAL21035 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'VARTERM :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23193 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'TYIPEEK-SPA-CR :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS23164 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'LVEC :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '*LOOP-PROLOGUE* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'WRITE-SEQ-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'IS-VALID-OP :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'A-LIST :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:LIS23418 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'PROGN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'FILE-WRITE-DATE :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:COLL23356 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'PURE-REDUCE-BY-ONE-AT-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'SYMMETRY-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS23339 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23463 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20817 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL20441 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21194 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'CVARS :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'BA-SIMP-NOT :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list 'MAKE-BUFFER :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21232 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL20357 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ORDER-FUNCTION :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN22083 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN23117 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22500 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'ACM-AC-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL21974 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'LARGS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL21758 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'FIND :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS23473 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:LIS21338 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'SUGG :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL21487 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:COLL21391 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL23384 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL22191 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:POIN20245 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23579 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS21144 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'BODY :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL23015 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21652 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS23482 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'PAIR2 :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIS20537 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list ':NO-BODY :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN21420 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'CARDINALITY :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'AUTO-ADD-PREC :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS20721 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'EQN2 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN21430 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:VAL22660 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'LOOP-DECLARE-BINDING :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'ACM-AND-EQ :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '$SYMMETRY-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'WRITE-ASSERTION :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21309 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS21642 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS21154 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS21250 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21534 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'NEW-RHS1 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS20894 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'NEWRHS :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'INDUC-REDUCE-OTHER-RULES :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL22008 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20863 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL21072 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'NARGSX :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20323 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20344 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PI1 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'IS-INPUT-ASS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'DEFSTRUCT :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list 'XAINFO :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL20607 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL23407 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN21724 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'WRITE-VARIABLE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL23616 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'DEPTH :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'TR-FIND :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21556 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS22489 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'SLOOP :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'SPECIAL-SUBST :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20873 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'TOPS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN21908 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:COLL22870 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL21130 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'ACO-LPRO>= :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'COL :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'EXPECT-ARITY12 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'LOOP-PARSE-ADDITIONAL-COLLECTIONS :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:COLL22887 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'EQ-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'DISP_STRINGS :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIS22604 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22368 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:POIN20890 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL20239 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20755 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS22378 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:VAL23085 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'TY2 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'GET-INDUC-VARS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$HISTORY :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:POIN23515 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'CLEAN-LINE :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'TRACE-GENERATED-RESULT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23071 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22897 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SUFFIX :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'INSERT-LIST :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'COMPATIBLE-PATTERNS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22415 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:POIN23002 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ANS1 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'RULE1 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'X_CLEAN-RULE :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIM22461 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS23270 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL21331 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS23581 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:POIN22161 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'DECANON-XOR :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS23260 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'CL1 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22405 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:COLL23042 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20214 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:COLL21575 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS20348 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'WANT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'X_INITIAL :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS22169 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'ARGS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23110 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21041 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'TRACE-CRIT :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21747 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'APPLY :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'CONDI2 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:COLL21923 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20808 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21051 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'RPLACD :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22073 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN20350 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22084 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'ARGS1 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:COLL22935 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ATOM :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'REF-SYMMETRY-VARS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'EQLIST :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS22057 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'FORMAT :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL20978 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'STOCK2 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'NB-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:COLL22563 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'CONSISTENT-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:VAL21519 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:POIN22225 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS21173 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN20272 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'POLY-LRPO :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL20995 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '(UPFROM FROM) :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN22759 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL21065 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'COPYSYMBOL :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'EQNS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'ALL-NONVARS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS20266 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22157 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'LOOP :file) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL20710 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'PAIRS :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL22835 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL23552 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'W :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:COLL20752 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS21315 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIM21831 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN20299 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20497 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'I1 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL23254 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'NEW-LHS2 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN20468 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21890 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'SIMP-AND :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20597 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'ASSOC0 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'USERIN :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:VAL21505 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:COLL21127 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20560 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'BIGT :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS23342 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'FUNC-SUPERPOSITION :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS23302 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '$INSTANT :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'HEAD_OF_MANUAL_INDUC :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIM22538 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'SS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL22980 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'DATA :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL22521 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL22126 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '$TESTSET :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'IS-PRIMITIVE :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'CTX-GT-LHS :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:VAL23373 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23143 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL21881 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21299 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:VAL21704 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:VAL20330 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22720 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'TYPE :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:LIS21399 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS20696 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21114 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'POST-LIMIT-STRA :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'AUTO-OPTIONS :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL21262 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'READC :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'SAME-ARITY :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS23425 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23155 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21108 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL21264 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21568 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'SET-UNIFY :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL20511 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SPN :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS22356 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'GET-SCHEMES :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20317 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'IS-SUBT :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'V2 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'OP-LIST :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:COLL23633 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'ACO-DELETE-EQUIV :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SAVE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'AC-DISTRI :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS23021 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN22458 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:VAL21666 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:COLL22518 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22058 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '*LOOP-MAP-DECLARES* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22328 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'ADD-TIME :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS22654 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'WELL-TYPED-VAR :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'WELL-TYPED2 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:COLL22830 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS21081 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '*LOOP-MAP* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '$NORM_TIME :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'CHOOSE-MAX-SCORE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23458 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'BIN-IS-CURRENT :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:LIS20465 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'INT-RULE-STRAT :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'UNI2 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'SET-STATUS :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'XOR-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'NTH9 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS21210 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'LEQNS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS20565 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL22985 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20363 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20573 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21840 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS20833 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL23509 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22683 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'HASQUANT :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL20260 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'DRAIN-IT :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'STATE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:COLL20757 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS23707 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22135 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL22872 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL20508 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'INDUC-SUBS-OF-EQN :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL21808 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'CYCLE-REDUCE-TERM :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:VAL22259 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL22909 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21111 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22172 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'QUASI-REMOVER :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20735 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'STRING-EQUAL :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:LIS21717 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS22129 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'MAKE-VALUE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:COLL22307 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:POIN20310 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'TRUNCATE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PRE-CRIT-CHECKEQ :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS23305 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'REDUCE-XOR-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:LIS20764 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'SECOND-ARG :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22455 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'IS-SUBSET :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20212 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS21280 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22652 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'READ-PRESERVING-WHITESPACE :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'NEW-FIRST-TRANS :file) '(#P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list '#:COLL23499 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS23526 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:COLL21743 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS23220 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS21996 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22803 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS21191 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '$GOOD-SYMMETRY-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'INVALID-RULE :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '$X_AVOID-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'GET-ARITY :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'VALIDSOLNS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL23714 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22353 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS21571 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'LITERAL :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:COLL22096 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL20887 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22555 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'LEFT-ARG :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:VAL20312 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'TRACE-PARA :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'OLDS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'FUNC-EXPR :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:VAL20426 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21245 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'L__2 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '$USER-ASSISTANCE :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'POST-FOR-WHILE :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL20616 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL21029 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'PARTI-BY-VARS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21138 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:VAL22927 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22586 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIM22025 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:LIS21932 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL20860 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'RULE-NUMS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'REPVARSIN :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS22931 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'MTERM :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'IS-REDUCTION :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN20962 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21819 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL21219 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL23189 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:VAL22857 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'RPLNTHSUBT-IN-BY :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS22108 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'AS-IS :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL22617 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL21417 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'PSETQ :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'WRITE-F-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL21851 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'VART1 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'SLOOP::DESETQ :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL22433 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS23074 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22892 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL20262 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN20232 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23028 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SIMPLIFY :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'SWITCH_RULE_LR :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIS20591 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS20930 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'BAD-TYPED :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'EXPR1 :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN20515 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL23229 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS21332 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS22601 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20901 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN23500 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS21885 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS23053 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'MAN-PICK-2ND-RULE :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'REM-ARITY :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS21862 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS20790 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'PUTPROP :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'SHOW-TREE-INFO :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'XL :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22400 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL23592 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'MANUAL-PICK :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:COLL21100 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '<= :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'E1 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:POIN21150 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'LOOP-RETURN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS20614 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'DEF-DOM :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL21744 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'ORDER-STR :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'UNDO-STRATEGY :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:COLL20903 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'HCM2 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'NEWBIND :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:COLL22632 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'MSET :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL21648 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'GET-SKO-FUNC :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22087 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22791 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIM22014 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'SUB2 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN23726 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '$ADD-CRIT-RULE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'EQUIV-OPS :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'FUNC :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21018 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'WRITE-RULES :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS22776 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS22060 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN20815 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN22952 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ACO-RPOSTATUS>= :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS20713 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:COLL22902 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22485 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'DISPLAY-CONSTRUCTORS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS22824 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL22051 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL23323 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL22787 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS22250 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'FIND-SPECIAL-TERM :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS22393 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:POIN22151 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL21450 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'SIMPLIFY-* :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'SET-ART-MODE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '*LOOP-NAME* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'SMALL :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'PROVE-ALL-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL20533 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'ORDER :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'SIZE-UNI :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS22374 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'ORDER-ONE-NORM-OTHERS :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'ASSQ :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ORDER-VARS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:POIN21818 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL20992 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '*THROW :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS22027 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:COLL23025 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22618 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN20431 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23201 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS21730 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:COLL23296 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22419 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIM20417 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN21914 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'VARGSY :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20219 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:POIN23179 :file) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (callers-list '#:VAL20645 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'MAKE-RULE-FROM-ASS :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS22002 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$EXAMPLE-DIRECTORY :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS23186 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'HCM1 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20888 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21216 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS20429 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL22960 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23677 :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:VAL23190 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'CHOOSE-HIGHEST-TERM :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '(NCONC APPEND) :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL23427 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'SUPERPOSITION :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN21045 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIM21944 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22928 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'DEFPARAMETER :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN23688 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:POIN21988 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22572 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23680 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS21531 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS23476 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'PURE-PROCESS-EQUATION :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN21719 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS21227 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL23460 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22704 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL22945 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN20763 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'ACO-EQUIV-LIST :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'DOMRULE :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS22175 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS22663 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:LIS22629 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL20732 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL22184 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:POIN23752 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'X_INDUC :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:COLL21384 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '$F-WEIGHTS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'NEGATE-PREDICATE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS21143 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:COLL22190 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS22684 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:VAL21461 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'ACO-BIGT-PARTITION :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'NON-CONSTANTS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'NEW-TERM :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'SUM :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PRELHS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL20944 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21949 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'MAKE-PRE-EQN :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:POIN21149 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:POIN22257 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS20248 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'TOKEN-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21792 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'SAME-LIST :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'INDUC-PICK-UNMARK :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS20536 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SECOND :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REDUCE-BY-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS21765 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL23358 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '$BEGIN-TIME :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '$INDUC-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'MENU_FOR_MANUAL_REDUCE :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '*MACROEXPAND-HOOK-FOR-NO-COPY* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'REF-INSTANCE-SEEDS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'SPLIT-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:POIN23326 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21139 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:VAL21798 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22427 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list ':SLOOP-FOR :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22886 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22707 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'SUP-TERM :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN23406 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN22879 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'LAST-CONSISTENCY-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'IS-EQ-FALSE-PRE :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS22306 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'SUMX :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22971 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'GET-POSITION :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'LEXICO-COMP :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:LIS21060 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'SPLIT-LHS-AND :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN22755 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL21735 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS23308 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'RECUR-TERM :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22321 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'WARN-STAT :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS23709 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL21614 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'HEAD :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'NAMED :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'AC-CRITICAL-SOURCE :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL23224 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS23655 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'COPY :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'PURE-ADD-RULE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:VAL21843 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN22208 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'FLOAD :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:LIS22120 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:COLL23590 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'ADD-SUGG :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS23772 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'SIGMAS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'ONE-PRESENTATIVE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'NEW-ARG :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'RNS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL22942 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'TRACE-TESTSET :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20667 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL20341 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22020 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:VAL23223 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS21464 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS23755 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'X_GENERAL :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:POIN22454 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:VAL22900 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'T9 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'CYCLE-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'ONE-PREMISE-IS-TRUE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS20941 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIM20463 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$NEWRULE-NUM :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'L__CTR :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21142 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS21295 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS21593 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL20795 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22459 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'TT :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'GET-SCHEME-VARS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ZEROP :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS23653 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '$ORDERING :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'START-UP :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:LIS23341 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'COMPAREFN :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'PARSE-LOOP-WHEN :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'MARK-USED-PRE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS21660 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:POIN20665 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL23159 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23027 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23621 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'FIRST-PROCESS-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21540 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '$FALSE-RHS :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20569 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'LOOSE-SYM-SEQUENCE :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PC-GRT-PREC :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '$GOAL-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS20865 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21697 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:LIS20335 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN21768 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL22889 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN20267 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21166 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '$EQN-POOL :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23257 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22422 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:POIN22156 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'PEEK :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'CLOSE-LOG :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL20392 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$X_FAIL :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS22974 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'BUILDING :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'NORM-BY-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'OR-COUNT :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'INSERT-POLY-SIGMA :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL20265 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN22750 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:POIN23005 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PREMISES-ARE-TRUE :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'EXPECTED :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '*READTABLE* :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'MAKE-EQ :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'OTHERS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL21136 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'EXTEND-SCHEMES :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23080 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'REMOVE-RIGHT-ARG2 :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list 'OR-EQL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'INFIX-LETTER :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:COLL23543 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22104 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22623 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'WHOLE-ASS :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21510 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'SYMMETRY-VARS :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'MY-COPYLIST :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:COLL22947 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIM23504 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS23281 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '$POST-MAX :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'RESET :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'CURSOR_UP :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'ARRAY :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:VAL20662 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'START-KB :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:POIN20440 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20738 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'DEF-LOOP-COLLECT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'HAS-INDUCTIVE-VAR :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23156 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23650 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'ACO-RPOSTATUS> :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'AMAX :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN22551 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21596 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL22137 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'NUMBERP :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'GET-SUBTYPES :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL23364 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22723 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'TRUENAME :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'REMPROP :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN23422 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'TERMINAL :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'AC-MATCH :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21390 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'MOD :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'FIRST-CTX-TRANS :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list 'FIRSTN :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS21367 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'TIME :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23520 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'NEW-ARGSY :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20199 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIM20466 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'POLY-SUPER-AT-*-1 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL20306 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'DISABLE-RULES :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:LIS20252 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN21469 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS20768 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS20946 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'OPERATOR :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'UNIFIERS :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21837 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'CTX :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'NEWVAR :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'ELIST1 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21463 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS22371 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:POIN20762 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'ASS2EQN :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS22386 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL20997 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:COLL20974 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21192 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS23288 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23078 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22502 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'KEEP-RULE-STRATEGY :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21663 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'GO :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'GET-INSTANCE-SEEDS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL21343 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'THROW :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'COPY-SYMBOL :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'ONE-KILL-ONE :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN22729 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'BONESS :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:COLL21507 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'SIMP-AND-SIMP :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS23652 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'IS-INFIX-OP :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:POIN22291 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS21249 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL22853 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '$EQN-SET :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REMAINDER :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22227 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'IS-ONEWAY :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'SOURCE-NAME :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:LIM22029 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list 'LEVEL :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'P-*-P :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'CHAR-ASCII :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'CHECK-WITNESS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'RENAME-TERM :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'SIZE-COMPARE :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'FILE :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:COLL20309 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'HANDLE-AND? :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL23185 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:VAL23109 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23743 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS21995 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL20827 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'ANS :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'INSERT1 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PIPORT :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS20811 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL21976 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'PRE-SUB-NONVARS :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS23429 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'OBJ-NAME :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:VAL21014 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:POIN22552 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN22989 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PICK-AC-PAIR :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'REMQ :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL20889 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'SAME-OP? :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22976 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22506 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL21706 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:LIM22028 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:LIS21193 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21048 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20460 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20661 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'XA2 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22681 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'LET* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21462 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '$PROVE-METHOD :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'SUBST-EQN :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS23705 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23588 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'MAKE-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'SKOLEMIZE-AWAY-QUANTS :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20947 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'IS-PROP-EQN :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'PREVARS :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'WRITE-SIGMA :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'APPLYSUBST :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:COLL23231 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'NODE-SEQNO :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS21662 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL21868 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$UNBLOCKED :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '$PREMISES-SET :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS20618 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22170 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL20731 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL20737 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'MEMORY :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL23531 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'HYPO-SUBSUME-EQN :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'ADD-SUGG1 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'INSTANT-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'ORDERP :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS23279 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23307 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22651 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL22978 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22283 :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:LIS21591 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'MERGE-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL20892 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'PROVIDE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '$MANY-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIS22274 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'CHANGE-LHS :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS22708 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:COLL20627 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '$INVALID-RULES :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'CYCLE-REDUCE-AT-ROOT-4 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'CNTH :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:VAL21916 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS23738 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS21791 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'POINTER :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIM22530 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '*TYPE-CHECK* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL22052 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN21514 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'NORM-CTX-AND :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22509 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'BOUNDP :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'MARK-SUPERPOSED :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'NREVERSE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22624 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'M-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'PPRINT :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'RUNTIME-MAX-WARNING :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:POIN22150 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'SYM1 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'AUTO-SUGG :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL21460 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'TERM-SCORES :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL21678 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:LIS22424 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS23051 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN21814 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS20743 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21532 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'PRINT_STR :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS20998 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'ADNS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21630 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21416 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS23250 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'XI :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22625 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN21898 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL22188 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:VAL20218 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:VAL23615 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL23536 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL22305 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:POIN21439 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'SYMBOL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS21052 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'INCF :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS23050 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22425 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS21337 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'GET-SOLUTIONS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21061 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL23626 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL23587 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'TEST :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'MAKE-EQ-PRE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'TRACE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS21590 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'L__3 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL22979 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22773 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'PUSHNEW :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS21931 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS23542 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL22053 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL21019 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'FOR-LOOP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS23106 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22253 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL21741 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:POIN22207 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:COLL21053 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL22903 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN20830 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22075 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'LIST-RULES :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS20590 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '$FREE-CONSTRUCTORS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'COMP1 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'MAKE-ONE-DOWN-HILL :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS22136 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL22179 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIM21945 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'FUN :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'EQ-TR :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21539 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'SUBS :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'GET-INSTANCE-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23023 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$SEQ-NO :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIS23089 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ELEMENT :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:LIS22377 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:COLL23730 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:COLL22619 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23024 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'GET-TESTSET-QUASI :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'INS-LIS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'GET-ITEM :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'ADD1-MODULO-N :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'MY-TYI :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:POIN22005 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL20482 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22486 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23304 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22280 :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:VAL23228 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'RULE2 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'REVERSE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL23572 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'K1 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIM20413 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$NEWOP-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL21501 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'RULENO :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22701 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'NL-VARS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'LOOP-LET-BINDINGS :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'OLD-ARITY :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:COLL20824 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'IS-ASSOC-PAIR :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'A3 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23685 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '*CODE-DIRECTORY* :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:COLL20485 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'EOF :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'USED-SUBS :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:VAL23174 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ALL-ONES :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21215 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21549 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:POIN21440 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'THIS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '$NORM_STR :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21748 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'TIMES-CDR :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'UCONCAT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL20709 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21993 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'SYMVARS :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'SAVE-WORDS :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'CHK :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'GET-RULE-LEVEL :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:POIN20673 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21536 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21410 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'NORM-CTX :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL21856 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:COLL21533 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21864 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22109 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'STR :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'ARGS2 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL20469 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN22124 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'BELOW :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL22287 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS23225 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:COLL20684 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'VALUES :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL23484 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'CONSISTENT-RULE :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS23105 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN22204 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:VAL21538 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:COLL23137 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'X_COVER-PROOF-PROCESS2 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'GET-SKELETON2 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN23291 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22281 :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:COLL22742 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS22081 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN22004 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'LEMMAS :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'GENNEWSYM :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL22999 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'LAST-ARG :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL20829 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '$TYPE-TESTSET :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:POIN23273 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL23535 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'POLY-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'GET-TESTSET2 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'PATTERN :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIM22026 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:POIN23757 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '$DEFAULTS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22176 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:COLL22810 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22483 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL23733 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:POIN22526 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'GET-NONCONS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23627 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'RESUME_AUTO :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS23301 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'REDUCE-SYSTEM-STR :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'NO-DETROY :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'RETURN-FROM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'POLY-MATCH-TEST-REST-*-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20509 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'TYPE-OPS :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS22228 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'LIST* :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22574 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22337 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:COLL23574 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL20333 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22372 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'PROCESS-ASS2 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL20680 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'SEC :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS20343 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ROOT :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS22429 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:POIN20717 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '$IMMEDIATE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS20592 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN23402 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21736 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '< :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'HANDLE-COMMU-HYPO :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'SYNERR :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:LIS20933 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL22828 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS20813 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20869 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'NEWPATTERNS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'COMMUNE-TERMS2 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS21997 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20339 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PARAMOD-STR :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'WITH :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL22885 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'DISPLAY :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'PRERHS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20868 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL20286 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CANDICATES :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23086 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'R2E :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21737 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:POIN20436 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23170 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIM20412 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23377 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23287 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN21239 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL20481 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'GETF :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS21861 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21252 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL20615 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21617 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'AUTO-ADD-STATUS :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS22089 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL22303 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS20338 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CHANGE-RHS :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SPLIT-LHS-OR :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS20948 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS20812 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'SET-SKOLEM :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN21969 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'FOPC-STRA :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'DEFVAR :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'BONES :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'ACM-NO-ARG :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'DROPS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '$NEWOP-FIRST :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS23022 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PARSE-LOOP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'VAR? :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL23102 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'NEXT-TOKEN :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:COLL23614 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22775 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS22373 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS22173 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:LIS23391 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23063 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'QUASI-REDUCIBLE :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS23735 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22859 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22682 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'POLY :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS23100 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22547 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL21261 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'SIG2 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '$X_SUB_NODE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'SETF :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS23706 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL21263 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS20336 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23424 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL22063 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL22571 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'EQN0 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'VS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'PORT-BUFFER :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21082 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'SPLIT-RHS-OR :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'DIS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'FLATTEN-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22901 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21544 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21794 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'HELP-FILE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS20610 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21543 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'PRE-INIT :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'IS-SOURCE-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:POIN23389 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN20472 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20866 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20791 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL21907 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'IS-AN-INSTANCE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS20225 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REM-ARITY2 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:COLL22865 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'PROG1 :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS23083 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'X_ONE_RULE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'DUP-PREC :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'MAKE-TERM-1ARG :file) '(#P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list '#:POIN23206 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'COPY-TREE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS22107 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:COLL23066 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22421 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'OPEN-WRITE-FILE :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'SUB-OR-EQ-TERM :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22503 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23775 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'MANY-ARGS2 :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:VAL22627 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN22439 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:COLL21886 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'COPYLIST :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'NODE-SOURCE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:POIN22898 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23508 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '$COMBINATION :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PRINT-NORMALIZED-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'ADD-RULE3 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL21135 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'DIVISIBLE-AC-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:POIN22155 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'ELT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS21229 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'PRINT-CURRENT-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'RIGHT-ARG :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIS20261 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23573 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'NODE-LABEL :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'REDUCIBLE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS20931 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'CHOOSE-LEAST-COVER :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'S2 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS23282 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL23746 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL23253 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:COLL23596 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL20546 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN23237 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:VAL20796 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'CDR-GREAT :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'IS-GENERAL-RULE :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'BIG :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'LVARS :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL20541 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS20749 :file) '(#P"/usr/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL20617 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21742 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'SMALLER-PRE-CAR :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '(TO BELOW ABOVE) :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'PARSE-ONE-WHEN-CLAUSE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'NEWVEC :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21999 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20857 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'WRITE-F-RHS :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:COLL22262 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL21218 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'TYPE-ALL-VARS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS23019 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21572 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL20623 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SYM-INDEXES :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ELEMENT-COMBINATION :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL23659 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL22770 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'FILENAME2 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'PRE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIM21940 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:COLL20302 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'RULENO-C :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21283 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21595 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL20853 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'X_NORMAL :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIS21934 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'RULNO :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'START-HISTORY :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'L4 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21170 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'BA-SIMPLIFY :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS23218 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:VAL22822 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'CLEAN-OPS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'G_OBJECT :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL21812 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL23507 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL23393 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23741 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'COMMU-EXCHANGE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20945 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'EQN-AS-RULE-INFO :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS20598 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS20939 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'ORDER-PC :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'WRITE-F-RULE :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS20535 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS20663 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'NEW-ATOM2 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21681 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:LIS20994 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:POIN21562 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'SUBS-ARE-PRIMITIVE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'CURRENT :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:LIS21197 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'LS2 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:POIN20847 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS23171 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL23682 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'MAKESYM :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'ENABLE-RULES :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL20394 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'APPLYSUBST-PRE :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'POLY-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS22972 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21705 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'MOVE-MONOS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20192 :file) '(#P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:POIN22756 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'LOCAL-FINISH :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'GENSYM :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS23337 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23774 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23481 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:VAL23450 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21131 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'INDUC-SUP-TERM :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'GRT-PREC :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22222 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:COLL22194 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS23456 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20342 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN21092 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIM20416 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22852 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'IS-VALID-RULE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'DEF-DOMAIN :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20746 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'TYPE-COHERE :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:LIS22543 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'GET-LOW-OPS :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL20304 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'X_REMOVE_HYP :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL23689 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:POIN23158 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL23483 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'NEGATE-ONE-PRE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'RSET :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'PROOF-BY-HINT-TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23140 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23656 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'BREAK-AT-OR :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21707 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'ADD-STATUS :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'COMPACT-LAST-ELEMENTS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL22139 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL21858 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'REDUCE-EQ-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'A2 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL22309 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'NTHSUBT :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'MAKE-FLAT :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'HAVE-MANY-RECURSIVE-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL21482 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'MOST-POSITIVE-FIXNUM :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22653 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL23214 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS21141 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:COLL20506 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21371 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'DEMULT-FORM :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'RARGS :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'EX1 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21339 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:VAL22813 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL23704 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'TOTAL-TIME :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS20942 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN21961 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'SOLN :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23598 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'PURE-REDUCE-BY-ONE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIM20377 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'IN :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'POSS :file) '(#P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list 'RELATED-VARS2 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN22200 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'IS-VALID-VAR :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'ECASE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'ODD-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL23489 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:COLL23702 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'IS-EMPTY-LINE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL20976 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN23091 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PUSH-HISTORY :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'X_AUTO_INDUC :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22390 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS21795 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '$MARK_RULE_STR :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'X_REAL_VARS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'MATCH-SET-NONAC :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:COLL20378 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21545 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:POIN22675 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:VAL21535 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS23255 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS20650 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:COLL21217 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'MATCH-RES :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '$TRACE-PROOF :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'PURE-NORM-WITH-BIN :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '$REDUCE-TIMES :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:POIN22782 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:POIN23000 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN23200 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22101 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'TY1 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'LRPO-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'ENSURE-PREDICATE :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '*MACROEXPAND-HOOK* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS21025 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'TUP :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'HALF :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CDDR :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'BREADTH-SEARCH :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list 'DO :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '$DEL-RULE-NUMS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:COLL23547 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22100 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL23549 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL21349 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:POIN22475 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22706 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS21224 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21348 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:COLL22148 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:LIS23309 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'COMPARE-ITEM-RESULT :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:VAL21734 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:COLL21016 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS20451 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$EQ-LENGTH :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'PROCESS-ASS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '$CONDI-DOMINATE-RULES :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'ACO-LRPO= :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'ART? :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN23001 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20547 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SUBST0 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '$IRREDU-NUM :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:POIN20445 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23103 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20331 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'COM :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS23081 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22452 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:COLL21057 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'UNCONDI :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'STRING-LIST :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIM20345 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'BASIC-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL22481 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'PRODUCT-LISTS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'CLEAR-OPERATORS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'PUSH-END :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'ENDP :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:COLL20688 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'NEW-INFO :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20733 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'IS-BOOL-OP :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN21234 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN22716 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:POIN21893 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'XB :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL22050 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS23417 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23333 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'RELATED-VARS :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'L2 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CLOAD2 :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:LIS22932 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22593 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'REMOVE-LEFT-ARG2 :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list 'ACM-POLY-ONE-TO-MANY :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'THIS-CASE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'RESET-KB :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS21146 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS21548 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'GET-CONSTANTS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL23501 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'NODE-PARENT :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22018 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:VAL20425 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'VAR2 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL21824 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:COLL23539 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'PURE-ORIENT-AN-EQN :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS22399 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL21900 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL21866 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS23018 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$INDUC-VARS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '*RRL-READTABLE* :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS23486 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'WRITE-TERM-BOOL :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:COLL23145 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22778 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS23280 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'NTERM :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'X_EQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'IS-SUB-NONVAR-TERM :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:VAL23061 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23617 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS23177 :file) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (callers-list '#:POIN23388 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22289 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:VAL21336 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'NUM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN23188 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'INDUC-ORIENT-AN-EQN :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS22854 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22702 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:POIN23403 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL21137 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'WRITE-SEQ-NUM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS23770 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL22614 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN21128 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20229 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REM-INFIX :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'X_PROVER :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21303 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'INTERSECTION :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'FIRST-BOOLEAN-CONSTANT :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS23176 :file) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (callers-list '#:LIS23686 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'MESSAGE :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'AVERAGE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '= :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'E2 :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS22779 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS22105 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'STRONG :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'CSET :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'NODECLARE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '$EX1 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21573 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS20902 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20864 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22703 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIM22086 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL20706 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21427 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21541 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'NEW-NULL-COLS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20624 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22219 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS22088 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22210 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'L3 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:COLL20619 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21024 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22055 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'FIRST-HALF :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'XC :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'COMP-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS20748 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS20548 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'EQN1 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN21449 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'REM-PREDICATE :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'ARRANGE-EQ-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL22251 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL23610 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:COLL20798 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22792 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL23700 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:POIN20246 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SELECTQ :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21147 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'IS-BAD-SUGG :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS23534 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'SIMPLIFY-FLAT :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'WRITE-RHS :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS22141 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'RESULT1 :file) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS23058 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'M-+-M :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL21859 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'RHS2 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS23734 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'SYMBOL-VALUE :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'YMAX :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20210 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'SUBSUMED-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22341 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS23538 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS23258 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'PRE-OPS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN22159 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'ACUNI :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL23749 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'PURE-MIXED-REDUCE :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN21921 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$COVER-AUTO-LEVEL :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'BOOL :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL23635 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'REDUCIBLE-TIME :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'VAR-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'FUNCALL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'RU :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:POIN20499 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'MAX :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL21537 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '$GOAL-REDUCE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'BODY-PREMISES-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'TYPE-KEY :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'LOAD :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list 'SAVED_SUB :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:POIN20842 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN21070 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN20699 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '$INSTANCE-SUBST-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS21598 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'PAIRSWITH :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIM21937 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL23684 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'WRITE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN21581 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL23454 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21213 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'RHS-ROOT2 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN21920 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'NON-DECREASING-SEQ :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21212 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'MOVE-LHS-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'NCONC :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIM20305 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20480 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'POSITION :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21599 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'OR-CONDI-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN21097 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL22736 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'REF-SYMMETRY-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21683 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'LUCID-RUNTIME-SUPPORT:BQ-LIST* :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'SUGG-PREC :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'EXPECTING-FUNCTIONS :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:VAL20707 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '$POLY-HOMO-RULES :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22656 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21089 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22177 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS22340 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '$FRI-OPS :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:VAL20507 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'AT-TOP :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'FULL-DIO :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '$X_INDHYPS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20822 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS23259 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIM22864 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:COLL20814 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL20211 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS22738 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'DEF-LOOP-FOR :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS20553 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '(INITIALLY FINALLY) :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'NEW-ASS-2 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'X_EXIT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'WELL-TYPED :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'FIRST-SPEC-TERM :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'CLAUSES :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'MERGE-TWO-TUPLES :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21770 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'MR :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list 'DISPLAY-ARITY2 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'DEFMACRO :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL20855 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21066 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL22266 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'IDEM-SUPERPOSITION :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL23413 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'FORCE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'SEARCH_BY_EQN :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:POIN20402 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL21797 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'LEFT-ARG2 :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:POIN20957 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'VAR-CONSISTENCY :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22054 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL20613 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '*COLLATE-ORDER* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'STOCK1 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23541 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL22622 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20773 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIM21822 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '$XNX :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'GET-BASIC-TYPE-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'PROOF-UNDER-NEW-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:VAL23537 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS21370 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS23465 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:LIS20282 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ELSESEEN :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'H2 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS21106 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20935 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN21834 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'NORM-BOOL-INNERMOST :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'AC-EQUAL :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL21458 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS20283 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23057 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'MERGE-AND-REMOVE-PAIRS :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20934 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL23732 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIM21823 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'CRIT :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS20772 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'TAKE-OUT :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL22300 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:VAL23540 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:COLL20740 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21307 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS21411 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:COLL21423 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'ACO-HARDER :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'NCONS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'CHAR-CODE :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'MON :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20708 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'OUTFILE :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL23056 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21107 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21611 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL23068 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'LIM :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'INTRO-RULE :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'DEF-LOOP-MACRO :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL22659 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'CHARACTER :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23136 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22013 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL21771 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'ADD-TO-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'NEWEQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'LL1 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '$CHECK-SYMMETRY :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:VAL20399 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22539 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22739 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'CT :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:LIS22998 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'IS-PREMISE-SET :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL20612 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL20668 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIM22537 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22255 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:COLL22596 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22905 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'DIVISIBLE-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'DECANON-AND :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'DETACHMENT-RULE :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22413 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'MS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS23336 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'DESIRED :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'IS-VALID-CONDI-RULE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'POLY-REDUCE-AT-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'ADD-EQU :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL20414 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL23570 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'X_MATH_IND :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'YES :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'LOW-ARG :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS20224 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'EQUIV-LIST :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:LIS22068 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS21903 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21979 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'DISP-RULES :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:POIN21986 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL23414 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'BLOCK-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS20220 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS20626 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21253 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL22815 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS23262 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23289 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN22163 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL21425 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL21884 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'NEGATE-XOR-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'OPEN-READ-FILE :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'LRPO-RESULT :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'ASK-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'DUP :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23212 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:VAL22590 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'CAR :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'ATOM1-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21992 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'INCREMENT-POS :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN20448 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22011 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'NIL :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'REMOVE-SUBSUMED-PATTERNS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'MAKE-PAIRS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN23232 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22417 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL23485 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'PREV-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL21909 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL21259 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'REDUCE-BY-PREMISE-AT-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:COLL23251 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'FINALLY :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'REMOVE-SUGG :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'FAILED :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'DISPLAY-KB-STAT :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'DESTROYABLE :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'CLAUSE :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'TOTAL-ORDER-RES :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'PARSE-LOOP1 :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'OP-TERM :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '$X_STATE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:VAL22700 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'SPECIAL-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'BASE-DEPTH :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL21058 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN22162 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL21424 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS23263 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23219 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '$GLOB_PREC :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIM22264 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'CON1 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '- :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS21732 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '$BOOL-OPS :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'AND-LHS-TRUE-RHS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL23657 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22416 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'PSETF :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21902 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'VARIABLE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS21087 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'GET-SYMMETRY-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'DIVISIBLE-CHECK2 :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIS22376 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS20427 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PURE-NORM-INN :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'T2 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS21228 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS23088 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22591 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'VA :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:COLL23628 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'WRITE-F-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'D-OPS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'EXTEND-DOM-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'ADDITION :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:POIN20555 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL23748 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS21654 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'PROPS :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'REWRITE-AT-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'IN-PACKAGE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL20943 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'ADD-SUGG-TYPE1 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22487 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21178 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'LOWER-CASE-P :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:COLL21618 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'DELETE-SYS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'BLOCK :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'DEFCONSTANT :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:LIS22774 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'COVER-AUTO-LEVEL :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '*USE-LOCATIVES* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'RPOST :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'EQN-SOURCE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:COLL20611 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21650 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL23217 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'CHOOSE-OFF-CLOSE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SLOOP::TYPE-ERROR :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'FORM-PREMISES-FROM-CONJ :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20972 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIM20457 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'FINISH-LOOP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'IS-ASSERTION :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'COMMENT :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS23390 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS20423 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN21644 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL22302 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '*STARTING-CL-READTABLE* :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'N-OP :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS21906 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS23661 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22214 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:VAL20629 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN23115 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21860 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN23098 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23613 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL23286 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIM22260 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21381 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '$TEST-EXAMPLES :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:VAL21620 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:COLL23325 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL20777 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'ARRAY-DIMENSIONS :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'TUPLE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'MATCH-BOOL-RES :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'OPS2 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:POIN22836 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'REDUCE-BY-ONE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'RANGE :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'NUM2 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20826 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'SET-SYMMETRY-MARK :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '$CONS-OF-TS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'REDUCE-EQN-BY-ONE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:VAL20628 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'HELP :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22468 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22215 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:COLL21938 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:COLL22977 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23191 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22669 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:COLL23054 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'OLD :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'SIMPLIFY-MY-EQ-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:COLL23452 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '$RESUME-RULE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:POIN21445 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'TMP :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LIST2 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'MULT-FORM :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SYMEVAL :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIM22261 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL23548 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL23216 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS21208 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL20435 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'FLOAT :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:POIN22167 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'VARS-LIST :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22284 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS23266 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23300 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL22065 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS20622 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '*TYPE-TEST-LIMIT* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'COMMUNE-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'COEF :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS23346 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22796 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'DELETE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL22192 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'RULE-SUBSUMED-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22664 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:POIN20672 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21709 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS22575 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL23016 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN20550 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'EXT-STATUS :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:COLL20216 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS21651 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'FREE-SUBTERMS :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'TYPEP :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CRRL :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list 'MAKE-SYNONYM-STREAM :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:VAL21605 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'LHSIZE :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:VAL23612 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL22907 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIM20395 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN21007 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:POIN21711 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:COLL23375 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'FLATTEN-WITNESS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21282 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22747 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'SUP-TERM2 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21935 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'SURPLUS :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS23618 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'MERGE-DUPLICATE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'MATCH-BOOL-NEW :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21221 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS23469 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:LIS21594 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL21267 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21775 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS23348 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23264 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL21659 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:POIN22165 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL21882 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'NEGATE-LITERAL :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'HANDLE-CONDITIONS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS23468 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'LAST :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'ABOVE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL20906 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21613 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:COLL22855 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:COLL22198 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:VAL21398 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'ASK-FOR-OPERATOR :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'W-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:COLL20744 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21179 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL23544 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22411 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'PARSE-LOOP-MAP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS23595 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL21854 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'P2 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '* :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL21612 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS22336 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'MO :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '>= :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'COVER-CONDI-NORM :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22881 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22420 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'DIO-INITIALIZE :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SPLIT-RHS-AND :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'PREMISE-INSTANCE :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'HALF-ONES :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CH :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'CADAR :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL20596 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'COVER-SET-INDUC-STRA :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'ACM-VARIABLE :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN22438 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:POIN22154 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'FIXNUM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS23065 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$IN-FOPC :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'TYPES :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL21256 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'TERPRI :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'BASIS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21083 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21904 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'IS-HYPO-PRE :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'BASIC-TERM :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (callers-list '#:LIM22532 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN20835 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20421 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL20659 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'INFILE :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL23459 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN20365 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22597 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23149 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'POLY-MATCH-ONE-TO-* :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21481 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21254 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '$ROOT :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'LIST-LIST :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22546 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL23101 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'FOUND-WITNESS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'POLY2 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20505 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL21379 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL22812 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'IS-PREVIOUS-INDUC-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'WRITE-ASSERTIONS :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'RENAME-PATTERN :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'X_AUGMENT :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:VAL20288 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21656 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'IS-CONSTANT :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '$INSTANT-SEEDS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'IS-FREE-TERM :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'WITH-STRATEGY :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21466 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'BREAK-ASS :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22144 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '$NON-COMM-COVER-SETS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22195 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:COLL21395 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN22097 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'PURE-CHECKEQ-NORMAL :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS23396 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'HAS-HINT-TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'RUN-TIME :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS22059 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS20907 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'PRE2 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS23141 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20484 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22212 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'INCR :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL20455 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21500 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'CLEAN-HISTORY :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL20859 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'INDUC-SUBS-TERM :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23332 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22799 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL20682 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'PRINT-ATOMS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'POINTER-FOR-COLLECT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'REDUCE-EQ-EXACTLY :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS23467 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'NODE-STATUS :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIS23340 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'MERGE-TWO-PATTERNS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21703 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:LIS22093 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL20483 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'INITIAL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN21074 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22973 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'REDUCE-BY-P-COMMUT2 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'CONS-OPS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22535 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL23172 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PRINT-SUGG-INFO :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:LIM23399 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23666 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:POIN23740 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:COLL21749 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '$VAR-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS22223 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS23197 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'M-+-P :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'APPLIES :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN22296 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS22143 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'ARGLIST :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'IF* :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS22269 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS23668 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS20938 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL23367 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'REST-OF-XOR-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'EQN-ID :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS20599 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:COLL20346 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21701 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'POLY-SIGMA :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN20270 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL23578 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22345 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS21171 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL20778 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS21457 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS22814 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'NEW-LHS1-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'FORCE-NEW-VALUE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN21809 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21196 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL20970 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'UNKNOWN-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:COLL21665 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS20222 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'MAKE-PRE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL22686 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'IS-LIMITED :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'TABLE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'T2IN :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS20657 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:COLL20467 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PROCESS-PRE-ASS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS23530 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'PURE-SUPERPOSITION :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'FIRST-N :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'SAME-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21055 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL20881 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'STRINGP :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'MAKE-BETTER-PRES :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '$PRE-FIRST :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:POIN22449 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:VAL21375 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'AVOID-COMMON-TERM :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:COLL23226 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22661 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:LIS23199 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'GET-PRE-RHS :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL21484 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'DECOMPOSE-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN22569 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22067 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:COLL23420 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIM22863 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL20620 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SYM-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LIST :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL23545 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '$BLOCK_TIME :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'REST :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22347 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:POIN20678 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:COLL20418 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21225 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21579 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'SET-PREDICATE :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'GET-RECURSIVE-RETURN-OP :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SKOLEMIZE :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'LENGTH :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'PICK-GOAL :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'REMOVE-RIGHT-ARG :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list 'SYMBOL-FUNCTION :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS21975 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20687 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'ADD-RULE-COMPLETE :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'UNDO :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL22611 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20256 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ELIM-BIN :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL22731 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL20971 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'EQ-PRE-STRAT :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21288 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21623 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'STONES :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL22610 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN20758 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'ACO-HARD> :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'OPERATOR-STRA :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'ONE-PATTERN :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL20594 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:COLL21946 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'READ-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS23462 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '*LOOP-COLLECT-POINTERS* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN20723 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:POIN20759 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS21422 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21622 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'TERM1 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21778 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:COLL21091 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL23594 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS20257 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LEFT-*-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23198 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22592 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN23167 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'EXT-WEIGHT :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'EQOPS :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22146 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL20701 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:POIN23247 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:VAL21054 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'FAST-MATCH :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'MON2 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22797 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22391 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'NODUPS :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'INCREMENT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL20621 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS23669 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'RPL-BY-TERMS2 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:POIN22893 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20883 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'STRONG-SUBGOAL-PROOFS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20259 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23398 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL23059 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22062 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22544 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL20625 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL20303 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22395 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS22793 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'ARGS22 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:COLL22456 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS23011 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'FIND-OUT-BIG-EQ-SUBS :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL21456 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'Z1 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS21426 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'FORMULA :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'MT :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21624 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'MEMBER-TERM :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'GOOD-ONLY :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'BIG-INFO :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'BINDINGS :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS20253 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20782 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'SUBPAIR :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:COLL22781 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS22464 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'HALF-CANONICALIZE-AND-EXPAND-EQ :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:POIN20321 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REMOVE-IRRELEVANT2 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'OK-TO-CONTINUE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22616 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL22938 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22132 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:COLL21148 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS20775 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL22818 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS23012 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN21385 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'REDUCE-OTHER-RULES :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS21220 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS20655 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:COLL21068 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL22598 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL23196 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '$QUASIS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22640 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20285 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22939 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21021 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20228 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SET-HANDLE-AND :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL22615 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'ARGS-2 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN22697 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS21971 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21301 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:COLL20397 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22412 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS20654 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'ABSTRACTION :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'BIN :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'ACO-LEXICO-COMP-LR :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS20574 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:COLL21133 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS22732 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'ASSES :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22933 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'LISTARRAY :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ELIST :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'EXT-OPERATOR :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'NEWARGS :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '$PEEK :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:COLL22657 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23416 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL22577 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22394 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS23256 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN22841 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '$VAR-TYPE-LIST :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'COMMUTATIVEP :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'VARLIST :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS22465 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22665 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'GOOD :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:VAL23327 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL23624 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22019 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:COLL23178 :file) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (callers-list 'SETS :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'PRINT-HEAD :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:POIN22961 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ALL-VARS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIS21204 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '$GOAL-SET :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:VAL23639 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL22817 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'PRINT-NAME :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:LIS23268 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23010 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23069 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'IS-SORTED :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:VAL23532 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL23438 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN21401 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL21329 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:POIN23297 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22690 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:POIN23591 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'ORDER-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'READ-INPUT :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21175 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN20274 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22667 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'P1 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ORIENT-AN-EQN :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS23599 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'IS-SUBSEQUENCE :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '$MAX-ARITY :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'GET :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'INITIALIZE-MANUAL-ORDERING :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS23144 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'EQN-CTX :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIM20422 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'MEMBER0 :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'ENCOURAGE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL23487 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'READFEQNS :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21223 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL20664 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'NODE-INFO :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'SUB-NONVARS2 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:COLL23457 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23395 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21984 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL20376 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'WRITEF-SYS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '$ASSOCIATIVE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:COLL23687 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:VAL20487 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL21011 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'SUBST-LIST :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL21503 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS23344 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22991 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SET-ARITY :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'ELES-MORE-THAN-1 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'STRING= :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'MES :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL20686 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL23692 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'DEF-RULE-OPS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PATTERNS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23516 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'DEFAULT-PRECEDENCE :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:LIS23464 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:LIS23345 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'GET-PRE-LHS :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL21578 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'FLATTEN-RULES2 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CHOOSE-BY-HAND :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '$X_LEMMAS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:VAL21352 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN20918 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'LHSS :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS21022 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'FN :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'AS-RULE :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'OCCUR-NUM :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22466 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21685 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'COVER-NORMAL-PROOF :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22491 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'CHANGE-LHS-RHS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23533 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:COLL20549 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21308 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS22360 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'INITSYM :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:COLL21816 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'CONTINUE-WITH-CURRENT-T2 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS20501 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:COLL22878 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23718 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23213 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22397 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS21174 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN23096 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'IS-REL-PREC :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'FLAT-TERM :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'PRES-VARS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21086 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN21002 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'PUSH :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:COLL22906 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21287 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21750 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'REDUCE-BY-CHARACTER :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN20677 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL23331 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN20477 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN23365 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'INDUC-ADD-RULE :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '$X_RESTART_SEQNO :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS22762 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '$NO-RULE-DEL :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22795 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:POIN21928 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'MAKE-NEW-VARIABLE :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:COLL22256 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'LHS1 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'GET-DEF-DOMAIN :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:COLL20761 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'INDUC-SUBSUMED-BY :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '$DETACHMENT-OPS :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:COLL22850 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'BREAK-ASS-STR :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '$X_OP_SAVE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'NORM-WITH-BIN :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL22744 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS23623 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'IS-CONSTANT-OP :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS20729 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS20255 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '*EMPTY-SUB* :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21529 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS22348 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '*LOOP-BINDINGS* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22862 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'NEW-AC-SUPER-SAME :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'LOOP-ADD-BINDING :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'OP2 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL23284 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL23084 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '*PRINT-CASE* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'NEW :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:COLL23370 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'NEW-M :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20989 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'NONGROUND :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:VAL20532 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'NUM-TRANS :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22332 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'POSI :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$MANUAL-HISTORY-NUMBER :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'PORT :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'UNMARKED :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS22349 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'SUBJ :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'GUIDE-REDUCIBLE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22168 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:LIS21621 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:POIN22647 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23338 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'SIZE :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS23546 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '1ST-PART-OF-POLY :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'SET-POINTER :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'SUBS-OF-SAME-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL21845 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:COLL21413 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL22613 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22333 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'POLY-ADD-HOMO-RULES :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'REM-DUP-VARS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21777 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22594 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21132 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS22819 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS20489 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22339 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS20828 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21286 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL22745 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS23410 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN20676 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'GET-STATUS :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS20809 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21671 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'MANUAL-ORIENT :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:LIS21891 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'CHECK-HEAD-ROLE :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22418 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL22241 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS20852 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIM20383 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21655 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:COLL20298 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23148 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN20674 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'REST-*-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'TOTAL :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL22823 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL22196 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'LRRL :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:LIS20850 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21273 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL20633 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21109 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL20734 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'LHS2 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL23523 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:COLL21467 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS22685 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'EQ-ADD :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN23584 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22710 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS21284 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'ARGS-OF :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'INTERNAL-TIME-UNITS-PER-SECOND :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS22941 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22637 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22695 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIM22265 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'ONE-EXTENSIBLE-TYPE-POINT :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'MACROLET :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'POLY1 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21059 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'NODE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list 'TRACE-REMOVE-IRRELEVANT4 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'PRE1 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS23142 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22505 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'FIRST-TRANS :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS23744 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL21103 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22174 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'POINT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL20681 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL21973 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL21488 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:VAL21829 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'SHARP-BACKSLASH-END :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:VAL21759 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22211 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS22737 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS23303 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20456 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23577 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIM22442 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:VAL20861 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'JUNK :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'FLATTEN :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20371 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL21689 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:LIS22010 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$RULE-NAMES :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'UNIFY-SUBST-LIST :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS22536 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'MTERMS-SETS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22330 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS22997 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20577 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'LI :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'USE-PACKAGE :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:POIN22589 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '$REDUCE-RIGHT :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'MORE-VARS-PREMISE :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'POS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'SKOLEM-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22436 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS23708 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22860 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS23665 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'MAKE-ONE-BUILD :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'NON-VARS-ARGSX :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23343 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN22564 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL21258 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21504 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'SUBTYPEP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS20221 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'DEF-LOOP-INTERNAL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS21180 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL20821 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'PRULE :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:POIN20923 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'ADD-DEFIN-DEPEND :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'OPTIONS :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'APPEND1 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21085 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL21340 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:VAL22140 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS21628 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21958 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$SPEC-PORT :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'TLIST :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'MAP-FRINGE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'SO :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'NMAP :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS20955 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '$TEST :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'IS-FREE-CONSTRUCTOR :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS21172 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'SIMILAR-TERM :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21470 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21826 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'IS-VALUE-TERM :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20459 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22645 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23480 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'OPS-OF-RULE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN21478 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'EXT-DIVISIBLE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21281 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL21438 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS20205 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:VAL23611 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '$FAST-MATCH :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:POIN20671 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21056 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'O2 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '$OP_RULES :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21570 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'ASK-NUMBER :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:LIS21376 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN20854 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21686 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:COLL22206 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'DEBUG-MSG :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:POIN22540 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22128 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'P-COMMUT-REDUCE-OTHERS :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'TMP2 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22668 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'ARG :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL21830 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'INDUC-SUBGOAL-PROOFS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS21291 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'IS-FAILED-INDUC-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '$X_HINT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:COLL23609 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'TRLIST :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'ONE-TYPE-ALL-VARS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'IS-HOMOGENEOUS-TERM :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS23267 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'VAR-LIST :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '1- :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN22166 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'ASK :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL21700 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:LIS22134 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'RIGHT-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL20905 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'DATE :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'PARSE-LOOP-DO :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22235 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '*LOOP-INCREMENT* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL20608 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '$PAIR-SET :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21177 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'INITIALLY :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22398 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'CADDDR :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PROCESS-DEL-RULE :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS23440 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'EQN-INSTANCE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS22469 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'WRITE-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'OPS :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22965 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22308 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:COLL23183 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'IF :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS22992 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21857 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL21518 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'CHECK-BUILD-RULE :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'MIN :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21530 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:VAL20234 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REDUCE-BY-HOMO-RULES :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22103 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22335 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:COLL20966 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'EXT-EQUIVALENCE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL20572 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS20561 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN21305 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'AC-CRITPAIRS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'AC-FLAG :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'TYPE-BASES :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21653 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'PRES21 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'CHANGE-LHS-RHS-CTX :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '$AC :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list ':SLOOP-MACRO :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'TRIPLES :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'RULE-NAME :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS21314 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'ACO-RPOMULT>= :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'FINISH :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS20658 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:COLL21739 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:COLL21345 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:LIS20702 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'NONLINEARVARS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'IS-CONSTANT-TERM :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'GUIDE :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL22761 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS21080 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21318 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:COLL21561 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'HYPO :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'ERROR :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIM22533 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22790 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIM22015 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL22258 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL21745 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:POIN22203 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:POIN21977 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'PURE-NORM :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS20760 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'NODE-CHDLST :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:POIN22953 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21753 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN22676 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:LIS22317 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS22777 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'IM-DEL-RULES :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'NEW-AC-SUPER-AT-ROOTS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL23426 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22061 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'IS-HOMOGENEOUS-RULE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'FLATTEN-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL20544 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL21397 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'ACM-NONAC :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL21325 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS20900 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'OPS1 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'SYM-ARG-POSITIONS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'EQN2PRE :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'LHS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS23763 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:COLL20244 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21603 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'LAMBDA :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS21863 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS20776 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIM20289 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20250 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'EXPAND-EQ :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:COLL20793 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'AND-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL23593 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '$FALSED-PRE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'UPDATE-BY-EQ :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'PICK-OUT-PREMISE :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20747 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:POIN21446 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS22056 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'TAGBODY :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL20430 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL23551 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22116 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'POLY-CYCLE-LUCK :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21668 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:COLL20575 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '$DIVISIBLE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list 'INVALID-INPUT-WARNING :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS20877 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21302 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS20937 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL20968 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'PROCESS-CRITPAIR :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22746 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS21728 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'RES-SUBST :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS20602 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'CAR-LENGTH-GREAT :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23070 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22285 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'HIGHEST :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23608 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22576 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23349 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'REDUCE-AND-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL21774 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'OPTION :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'IS-SUBTERM :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:VAL20886 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20327 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22621 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN23146 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'MIN2 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22930 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23717 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20238 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$NEWRULE-MAX :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS23415 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'NEW-TRANS-SIMP :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL21028 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL22848 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'SET-NO-REDUCTION-MARK :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'EXT-CONSTRUCTOR :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '$DEL_RULE_STR :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:VAL20779 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '$CASE-BOOL :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22344 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS22662 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'BRT :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:POIN22846 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS23701 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23017 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'BIG-PRE-INFO :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'MONOS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'ASK-A-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'NEWREST :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'SKOLEMP :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:LIS22193 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS23361 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'SSIZE :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list 'NARGSY :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL21526 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:COLL21702 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:POIN21044 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'RHS1 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:VAL23147 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN21989 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'REMOVE-IRRELEVANT4 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'TRY-TO-ORIENT :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'ELE :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'LEFT :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:COLL23329 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21040 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL22944 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22783 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS21991 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL22958 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22768 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'DONT-MAKE-EQ :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:VAL23461 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'COVER-UNCONDI-NORM :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21226 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'COVER-NORMALIZE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL22288 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'NEWEQ :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21731 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'VARGSX :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL21733 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'TERM2 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:VAL23660 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'CON-NUMS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'INDUC-TERM :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'END-AUTO-ORDER :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS20985 :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list 'TESTSET :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL20391 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22579 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN21553 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS20428 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'TOKEN-EOLN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'FIND-BASIS-VECTORS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'IS-POLY :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL21347 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:LIS23675 :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'DOLIST :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'HAS-NONLINEAR-VARS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21801 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'RESULT2 :file) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL21451 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'INSERT-SORT-ARG :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '$CONDI-DOMINATE :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'MON1 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22484 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22392 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIM21875 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$P-COMMUT-RULES :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20993 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:VAL22833 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22145 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'EQ-JOIN :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS22375 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS22463 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'SLOOP::VALS :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL20578 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'T1 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'REDUCE-BY-PREMISES-AT-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '$BLOCKING-ON :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'AVOID-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'BIGT-TWO-KILL-ONE :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SUMYMAX :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL22182 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS22247 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:COLL23600 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'SIMPLIFY-+ :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23306 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23472 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:VAL21925 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20940 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN22035 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:LIS23334 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIM23642 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'GET-ATOM :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL21584 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'VALS :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'NOTRACE :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'FLAT-SORT-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21465 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:COLL20258 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20856 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'WASH-DEF-RULES :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$SYMMETRY-DELS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL20908 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN22549 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL21609 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21394 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '$RULE-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'OR-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'BUILD-EQN-FROM-PRES :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20670 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:COLL21657 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'TR-TERM :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:COLL22082 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'LISTP :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL23431 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '$AVOID-RULES :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21388 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'NODELIST :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:POIN21639 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL21013 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'DIVISIBLE-RIGHT-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIS23654 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS20568 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'U_COMPAREFN :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20787 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS21005 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS21105 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL23742 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20666 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21122 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'RESTORE-PROPERTIES :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'MLIS :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL23044 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23443 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'SIMPLIFY-ALL-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'LUCID-RUNTIME-SUPPORT:BQ-LIST :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL20439 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'VARIABLEP :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '$DEF-DOMAINS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'INSERT-AND-REMOVE-PAIRS :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20586 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'TUPLES :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'UNI :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS20770 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'ABSTRACT-PROOF :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS22220 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:VAL21799 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21189 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'POLY-INITIALIZE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'K :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'MAKE-ARRAY :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23455 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'REPORT-CURRENT-TIME :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'TOKEN-PORT :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21954 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20280 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'TAIL :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'INDUCTIBLE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'VARS-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS22970 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20277 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REAL-COLLECT-PRODUCTS :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIM21820 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'YEA :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'NOT-FIRST :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23035 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ACCEPTABLE-PAIR :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN20294 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'FLATTEN-RULE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21195 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21304 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:COLL20539 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'XIN-MENU :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '$PRIME-ACU :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22740 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'REDUCE-BY-RULES :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:COLL23320 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL21183 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'MON-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'DELETE0 :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LABEL :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:LIS21738 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'REMOVE-DUPLICATES :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:VAL23629 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL22435 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:COLL23401 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '$LEAF :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:VAL21785 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS23135 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'HELPER :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL21772 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21664 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'DEPENDED-OP :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIM20396 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20669 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL22254 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'X1 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21936 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'NORM-STRATEGY :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'MAXOP-POSI :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21597 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL21387 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN23043 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'BS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '$COMMUTATIVE :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS22342 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS22444 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'NEGS :file) '(#P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list '#:VAL20203 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS21266 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'BIOP :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'SOME :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'NEW-ARGSX :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LOOP-PEEK :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'COMPILE-FILE :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:VAL22904 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20585 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'TERM1PRIME :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN22806 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:COLL20447 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21000 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS20315 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'FLAT-TERM-FUNC :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '$SEPARATORS :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'YARG :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'POSTPONE-IT :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL22918 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'COVER :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'GET-CLAUSE :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'LOCAL-MACROS :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'CADR :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL22634 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'NEW-M-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'RESULTS :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:COLL23387 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'DEFAULT-FLAG :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'GET-CODOMAIN-TYPES :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN22620 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL21610 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'LAST-CHECK-2ND-RULE :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS22772 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:COLL21033 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL22894 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'COLLECT-CDR-WITH-SAME-CAR :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'N :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS21693 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'REDUCED :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL20595 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'APPLY-TO :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'EQN-SOURCE-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '$FUNC-NAME :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21162 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21201 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'CASE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21407 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'SET-CONSTRUCTOR :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL22963 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'START-TIMER :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:POIN21073 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20372 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'TYPE-CONS :file) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (callers-list '#:LIM20400 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL21640 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'MATCH-SET :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS22239 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS22423 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL20604 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN23138 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN23558 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL20264 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21067 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'RHS-ROOT1 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL23620 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'EX2 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'NODE-STATE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'RES-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'OUTRED1 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22869 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'AUTO :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'VAR :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN21098 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN22996 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PREC-CONSISTENT :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22969 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23030 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23736 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22678 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'MAKE-ASS-COM-OP :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL21680 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'VAR-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:POIN21421 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS22189 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'YA :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN23242 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS20950 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21145 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:COLL20502 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN20904 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL23299 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'LLS :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:COLL21827 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'PROCESS-ASS-SIMPLE :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'BUILD-PREMISES-FROM-BOOL-TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:VAL23568 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:POIN21867 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21155 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'GET-DOMAIN-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL21377 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN23412 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '$HISTORY1 :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL22180 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'XA :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '$STEP-DEEP :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'PURE-SUP-TERM :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'RENAME-OP-RULES :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'TIME-IN-SEC :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '$NO-HISTORY :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS21119 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20593 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL23524 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'REDUCE-*-TERM :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22677 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'GET-INTERNAL-RUN-TIME :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:VAL20816 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '*LOOP-FORM* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'DOTIMES :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'PROCLAIM :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'IS-EXIST-TYPE-NAME :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'EQN :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'NOT-IN-SET :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS23374 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL22733 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS23445 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL21235 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21167 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21982 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'ORIENT-INDUC-HYPO :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'SHORT :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22501 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '$ANS-RULE :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'GET-TERM-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'RETURN-OP :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$STRONG-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'PROVE_EQN :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:POIN23116 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20450 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL21588 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL21034 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN22924 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23673 :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIS23165 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22758 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:COLL22983 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23192 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'BUILD-PREMISES-FROM-COND-TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'X_REDUCE-BY-ONE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIS23182 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22016 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:LIS22006 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:COLL23441 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20641 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'LIST1 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'REM :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22473 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23175 :file) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (callers-list 'MY-COPYLIST2 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21442 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS21354 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'WRITE-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '> :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL22993 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22224 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS23419 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'OCCURS-IN :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIM21870 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20227 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'HEAD_OF_FAILURE_HANDLER :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS20200 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'RULES-WITH-OP :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'HALF-CANONICALIZE :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '$LOG-PORT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '$OP_GOAL_RULES :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'KEY :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21344 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'SET-INFIX :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'IS-LINEAR :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN20753 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS21804 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21452 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '$COMPLETE-OPS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:COLL21687 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '$AUX-RSET :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'LEN :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'LESSP-SIZE-BINDINGS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'RUL :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'CAADR :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS20977 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL23380 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21756 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'MULT-DIFF2 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL23111 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL20841 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN21985 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$COVER-SETS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CAAR :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'THIRD :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'DESETQ1 :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'L-EQUAL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL22085 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN21524 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:VAL23453 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN21962 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'FASTKB-CHOICES :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS20359 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$NEWOPS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '$SUBS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS23271 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'BOOLEAN-OPP :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'INSTANTIATE-LHS :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:LIS21746 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS21050 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'DIVISIBLE-LEFT-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list 'PROCESS-EQUATION :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'SIMP-FIRST-TRANS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22408 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'OPERATOR-OPTIONS :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'FIRST-PROCESS-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:POIN23715 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22404 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'S11 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22414 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIM23503 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'TERM-SCORE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SEEDS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '/ :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'PORT2 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL22130 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:COLL22626 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23261 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL21330 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS22113 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN22160 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'EQUAL-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'AVOIDS :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22689 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'MATCH-BOOL-XOR :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL20437 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'V_BINDS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:VAL20754 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:POIN22821 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'RIGHT-*-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL23428 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22369 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIM22460 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'START-TEST :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:POIN22480 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'REDUCE-POST-ASS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'RESPONSE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:VAL21627 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS22829 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:COLL22437 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'MAKE-NEW-RULE :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIS22488 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'PRINT-CHOICE-MESSAGE :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'NEGATE-EQN :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22839 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22379 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'DIVIDED-BY :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN23202 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22498 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23087 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PARA-SUP-TERM2 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN22831 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'PURE-LRPO :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS20862 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL22009 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:POIN21919 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'REST-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS20895 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21547 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:COLL21782 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'EQN2ASSERTION :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL22565 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20872 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'ACO-LRPO> :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21251 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'FOURTH :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:COLL21063 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21557 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21901 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$ABSTRACT-PROOF :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'NORM-OR-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL21265 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'OVER-REWRITE-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:POIN21101 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'REDUCE-AT-ROOT-ONE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'PREDICATEP :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL21563 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21369 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'TYPE-BASE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN23055 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'LIS2 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'PICK-UNMARKED-RULE :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'SJ :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'FORM-PATTERNS-SINGLE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'QUANTIFIERP :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'HYP :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'LEQNS2 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'FAIL :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23048 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'NEXT-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'CANONICALIZE :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN23330 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22031 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:LIS22451 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:POIN21496 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21032 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20797 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21929 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22804 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:POIN23124 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'INIT-PROVE-GLOBALS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'INDUC-PROVE :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS21015 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:COLL20452 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LIS :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS20191 :file) '(#P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'ATOMS :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL23528 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS21115 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL21003 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'MLHS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'READ :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'ADD-RULE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'DEF-DOMAIN-POINTS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'LOW-OPS :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'SYM2 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'ADD-POSITIVE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'LS1 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS20543 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIM20893 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'ANS-MEMBER :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21199 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'POPPED :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'TREE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:VAL23553 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '$REDUCE_TIME :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS21844 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:COLL21026 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20461 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PURE-REWRITE-AT-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIM22914 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'AC-SUPERPOSITION :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '$SYMMETRY-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'TY-OP :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22230 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'CRIT-MARKED :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LTREE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:POIN23131 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21690 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:VAL21789 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21214 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'SUPPORT-EQN :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'MAKE-ONE-SCHEME :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'AC-KB-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'EQ :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL21952 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$NUSEREQN :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS21412 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '$POST-POSI :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'VARS2 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'PRES-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'COMPRESS-FLAT :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20390 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21674 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:POIN23357 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'REMOVE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23249 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:COLL23411 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'OP-TRLIST :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21185 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'ASSS :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'DIFF-RHS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22650 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'LESS-VECTOR :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL21093 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '$X_RESTART_EQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'LL2 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22802 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'IS-BLOCKED :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21276 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'EL :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL20415 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN23153 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'GLOBAL :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL21842 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL20213 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'NONAC-UNIFY :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'BIND :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:COLL23013 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'CS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20679 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIM20386 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN21268 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21930 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'CHECKEQ-NORMAL :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'X_GET_INDUC_TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22352 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:COLL21328 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS21926 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21716 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL21260 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'LS22 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'Y1 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '*NO-DECLARE* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'TERMS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'OLD_STEP :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'ENTER-OP :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:LIS20319 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN22816 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'NEWVARSIN :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'CAN-HAVE-NEW-OP :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '$TYPE-RELA :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21010 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'MARK :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20792 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'ROW :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20949 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL22984 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22908 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'DEFUN :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL21972 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21211 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21616 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'MAKE-EQN :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'TAB :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:LIS20932 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'MAKERULES :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list 'FAIL-END-INDUC :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'ONEWAY :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL20924 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'FULL :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS20493 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20736 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS20769 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'MIN-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS20464 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'RULENO-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'DISPLAY-OPS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'ACLRPO :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:VAL22884 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN23252 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22329 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:COLL23514 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:COLL21625 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'B :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'WRITE-COMMENT-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:POIN22527 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'GET-TERM-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL21667 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS23020 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23630 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'ASS :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21077 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL23602 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'IS-ASSOC-UNDER-C :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'POLY-MATCH-+ :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'PRED-SUPER :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'DRULE :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:POIN22871 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22229 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'PROCESS-ASSERTION :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:POIN22943 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22655 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'GIVE-STAT :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'INCREMENTED :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23322 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22071 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL22080 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'ASK-A-NUMBER :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:VAL23359 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'WHEN :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:COLL23662 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS21998 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22780 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL23104 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PKG :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'M-*-M :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN22023 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list 'TRASH :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'ELSE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS23112 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$CASE-SPLIT-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'VAR1-LIST :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:VAL22771 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'ELSE-CLAUSE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIM22523 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN20799 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'SEQNO :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:LIS21839 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'CHANGE-CTX :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CONDI :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'EQ-MATCH :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21435 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:COLL20208 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'LHS-ARG :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL23392 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL21335 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS20766 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL23564 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'NEWSYM :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS21159 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'LINE :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'MULTI-COM :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:POIN21396 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'Y :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23754 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:COLL20554 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21113 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21634 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21358 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL23765 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'IS-ASS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'VAR1 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS23283 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS20296 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SUPERTERM-COVER :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'NON-LINEAR-VARS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'PA :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN21810 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'MERGE-AND-REMOVE-DUPS :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'MOST-NEGATIVE-FIXNUM :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22106 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS21297 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:POIN23207 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS21168 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN20269 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23555 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'SUCC :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS23082 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$EX2 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL21310 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'DEL :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$UNIF_TIME :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS23773 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS20567 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22920 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'OLD-ARGS2 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL21554 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:POIN22268 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:COLL22754 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'X_STEP-DEEP :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22270 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL22570 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL23311 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'MULTIPLE-VALUE-SETQ :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS20337 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21433 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS20867 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'CYCLE-REWRITE-AT-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'NEW-TOPS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'CTX1 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21542 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:COLL22295 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS23711 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIM22606 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'PUSH-HISTORY-MANUAL :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'VEC :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'RUN-KB-OPTIONS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL21372 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'TRACE-BUILDING :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'TRACE-AC-SUPERPOSITION :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22672 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'CASEQ :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL21497 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'POST-POSI-STRA :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:POIN22856 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'GUIDE-REDUCIBLE-TIME :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'GET-ARITY2 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21140 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS22354 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:VAL22099 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'REMOVE-EQ-OP :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:LIS20805 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL22858 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '$CONSTRUCTORS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'NEWEQNS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '$IN-PORT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'FIRST-N-ELEMENTS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22504 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21966 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'MAKE-CYCLE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'STR-FORMULATE-SCHEME :file) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (callers-list 'REST-OF-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'STRING-DOWNCASE :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'ALLVARS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL23496 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL22512 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL22558 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'END :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS20355 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PAIR-INFO :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'REDUCE-BY-P-COMMUT :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'PP :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL23181 :file) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (callers-list '#:LIS23386 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'IT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:COLL20381 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20642 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:COLL21723 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'NAME2RULENUM :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS20899 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'NEW-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list 'VARS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$BRT_TIME :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:COLL21513 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'C-PERMU :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'DECL-LIST :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL22713 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '*AUTO-TYPE* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL22298 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS23681 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'REDUCE-+-TERM :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21037 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21511 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'IS-CONDI-DOMINATE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'NTS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS20495 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'QUOTIENT :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'BOTH-ADD-PREDICATE :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'CLEARSCREEN :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'ALL-PLAUS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22365 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS22705 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'WRITE-DETAIL-RULE :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:VAL21696 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'NAME-LAST-RULE :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS22122 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS20534 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '$CYCLE-OP-RULES :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'CONSTANTP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'L5 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS22382 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:COLL21682 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'SIMP-XOR :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL22482 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'IS-TYPE-PREDICATE :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL20964 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN21415 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN22880 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22494 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'N-TUPLES :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS23720 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'NEGATE-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '$USED-RULE-NUMS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21811 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '$REDUCED-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:COLL21757 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'LIST-EQUATIONS :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:COLL21477 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21294 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS23350 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'EXT-COMMUTATIVE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'EQLISTS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21565 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIM20462 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'S :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$TRUE-TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list '#:LIS21363 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:COLL20202 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS20840 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'PSIZE :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'DISABLE-RULES-AUX :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL21498 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:VAL20362 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21933 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22727 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS21592 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'INNER-BODY :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '$DROP-PRES :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22121 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:COLL23566 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS23328 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'PRES2 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'DEF-LOOP-MAP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'CHOOSE-BEST-SCHEMES :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22201 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'CDDDDR :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS23052 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'CHAR-HANDLER :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL21615 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '$TRY :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIM22529 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23474 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:COLL22033 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:VAL23723 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'PRE-VARS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'SET-UP-ARITY2 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS23353 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'TY-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'ENABLE :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'PAT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL20831 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'SUMY :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REMONCE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'NORM-TERM :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL21312 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:VAL20361 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'NOT-AUTO-PREV-RULES :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS22987 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PROBE-FILE :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'CONDITION :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'NO-SUBSUMPTION :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22426 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:VAL21699 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list 'OPS-IN-PRES-OF-RULES :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'RULE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22320 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS22000 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'STR-LIST :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:VAL20647 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'TRY-SUGG-PREC :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:LIS23029 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'LCASE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'ADD-CONDI-DOMINATE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21764 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN20263 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REMOVE-PAIRS-WITH :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS21848 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22325 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'FIND-MERGE-SIGMA :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21793 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '$SUBS2 :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$SUFFICIENT :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:VAL22476 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'C1 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21948 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21062 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'LITERAL-NUM :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL23625 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS21560 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21095 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL20884 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20845 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'CONJ :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'N2 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'V :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23521 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL22785 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS21366 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'R-LIST :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'TEST-VALUE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'TRLISTS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:COLL20401 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21046 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL23601 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:POIN20347 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'EQS2 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL22628 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20215 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'DISPLAY-TYPE-ARITY :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21836 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'GET-VAR-SUBSTITUTION :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'N1 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'TRACE-ADD-TESTSET :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'QUIT-RRL :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS20513 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'POST-ASS-LIST :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'SEARCH-TREE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'REDUCTION-PROOF :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:POIN21468 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'OPEN :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'NEWSIGMA :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL22510 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL22074 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '$OPERLIST :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:POIN22450 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'POLY-SUPER-AT-*-0 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'NEW-RULE-STRA :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS23277 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22024 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:COLL23619 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL20694 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL20915 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL23494 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'SAVE-WORD-END :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'PURE-SUP-TERM2 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'SUCC-END-INDUC :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'GET-ATOM2 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS22722 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS22402 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:POIN22687 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:VAL21847 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'STEP :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'SCHEME :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23651 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:COLL22216 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'CONDENSE-SEQUENCE :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'T11 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'INDUC-IDEM-SUPERPOSITION :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL20718 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS22982 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22603 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'DISPLAY-OP-STATS :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'REMOVE-ONE-ARG :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:COLL21872 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$FALSE-TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list '#:LIS22875 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'LOAD-RRL :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS22975 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20393 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ATOM1 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'ELIGIBLE-INDUC-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22711 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS23550 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS23076 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ARGS-LIST :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'MUL :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'RUL3 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22388 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21917 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'IS-COMMUT-PAIR :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'REF-INSTANCE-SEEDS2 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS20712 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21090 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'INTO :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS20648 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '$BUILD-RULES :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL23126 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23026 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21761 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21661 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIM20446 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23522 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'L11 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'OPERATOR-ORDERING :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL22925 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20711 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21190 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'XA1 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21247 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'COVER-SETS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL21453 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:POIN23576 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS21494 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:POIN22688 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'CHANGE-MONO-SIGN :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23589 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'BINDS :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL21645 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '$PARAMODULATE :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS23278 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22680 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:VAL22807 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22032 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list 'AC-OP-P :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LOOP-POP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'U :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '$EQOP_LIST :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS22171 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL23758 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS21365 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:COLL20722 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'ORDER-CTX :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:VAL21869 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL23385 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'DEFAULT :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21963 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'RESTRICT-CRIT-STRA :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'PRED :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22721 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'COMP :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:COLL21001 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS20810 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21994 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIM20368 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23372 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'FALSEP :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21713 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS21049 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL20858 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'TYPE-VAR-LIST :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'PROCESS-ASS1 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'COMM-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIM23641 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'POLY-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL22507 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL21950 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS23769 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '$ADD_TIME :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:COLL22568 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23355 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'PICK-STRATEGY :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21248 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'UNIFY :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL20837 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'BUFFER :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:VAL23184 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:VAL20367 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'UNITP :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'ADD-PAIRS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22981 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL20373 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'INDUC-SUPERPOSITION :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL23173 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23079 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'INDUC-AC-SUBS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20996 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS22387 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS22370 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:COLL20523 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21164 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'T4 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL23559 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'CONSTRUCTORP :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL21342 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'NORM-EQ-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:LIS21631 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS21566 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'LUCID-RUNTIME-SUPPORT:BQ-APPEND :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:VAL23321 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN22956 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'RES :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'GET-DECODED-TIME :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS22508 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'FUNCTION :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:COLL22916 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'MAX-SIZE :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN21012 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS20313 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL22311 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'PARAMODULATE :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL20449 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'MEMBER :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'REDUCE-REVERSE-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL21740 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'USER-TOP-LEVEL :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'X_PREPARE_RULES :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:VAL22304 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS20739 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '$NCRITPR :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'TERMS-LIST :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'READ-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL23586 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'EXTEND-DEF-DOMAIN :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'ACO-COMPUTE-SIZES :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'GET-RECURSIVE-DEF-TERM :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22840 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'STREAM :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:VAL23571 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22358 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'PRES1 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'K2 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:COLL20570 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22323 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:COLL23764 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'INDUC-REDUCE-OTHERS-AUX :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN20991 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:VAL23039 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'NOFALSE-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL23095 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20999 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'APPLYSUBST-RULE :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS20538 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22671 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:LIS23556 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '*RRL-PACKAGE* :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:VAL21311 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS22049 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'PARSE-LOOP-COLLECT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22573 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'APPEND :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:POIN21069 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22275 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL20432 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'RED :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'CONJS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS22282 :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'THEN :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN22007 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'AR :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS23603 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL23120 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'VA-EQN :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:COLL20320 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SAVE-RRL :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS23400 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'KEYWORDP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN21943 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'SUBTERMS :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS20838 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL20334 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'QUOTE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS22709 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL21835 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '$LRPO :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22357 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'CHOOSE-CONSTRUCTORS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:COLL23236 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'NAIL-QUASI-REDUCIBLE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'XAS :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:POIN23376 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL23430 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'REF-EXTRA-PRE-VARIABLES :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'CTX2 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS23478 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'OK-PREV-RULES :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:COLL21980 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'TY :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'GENERAL-BASIS-VECTORS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIM22605 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21298 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:VAL23383 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23585 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'VN2 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21965 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'IS-CONDI-EQN :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'ISVAR :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21569 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'A :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23154 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23274 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'TRACE-FACTOR :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21649 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL22957 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20697 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS20916 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIM20434 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'MAPCAN :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'READ-ATOM :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21512 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'OFFSET :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:LIS21632 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS20496 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIM20635 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'REMOVE-DUP-VARS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23648 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL22520 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN21346 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:VAL23409 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL21400 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'ALLSYM :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'NOT-FALSEP :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN20398 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'POLY-MATCH-FIND-REST-*-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'SORT :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21099 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22587 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'SIMILAR-EQN :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'DELETE-EQN :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:POIN22883 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'P-AND-P :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'START-PUSH-HISTORY :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN22658 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN22578 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'FIRST-VAR-PRE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS22381 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS23679 :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:POIN20410 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL21695 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:VAL20967 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL20237 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22470 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22276 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21567 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL22766 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'ARGSX :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'MENU_FOR_CURSOR :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:VAL21646 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'REPLACE :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20843 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'AUTO-KB :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL20919 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'SUBST-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22185 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:COLL22240 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS23607 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22554 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'STRING_LIST :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:POIN23575 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS23713 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:COLL23290 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'NORM-SUB :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:VAL22808 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'C-PERMUTATION :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'TRIPLE :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'CONSISTENT-PAIR :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL23435 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL22789 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS21110 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21436 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS21230 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'RULE-LIST :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS21960 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20765 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL21322 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:COLL21604 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS20243 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23580 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL22078 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'REFUTED-RESULT :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '*LAST-VAL* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22322 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS20564 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'MAKE-RULE-SIZE-ORDER :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'WRITE-TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'NO-0-BASIS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20896 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20295 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ACO-COLLECT-BIGT :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'NEW-RHS1-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIM20630 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21558 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL22873 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'P-XOR-P :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'MODE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$RUNTIME-MAX :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'OP-SET :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS21637 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'BOD :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'MAKE-CRIT-RULE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:COLL20476 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21031 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'COMBINATE2 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'WELL-TYPED3 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:POIN21813 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'REDUCE-ARGS-BY-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL21911 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$FIRST-INDUC-OP :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'CYCLE-REDUCE-AT-ROOT-3 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS22273 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'T :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'TRANS-STATUS :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL23759 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22582 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'ORDER-ASS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN23683 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:VAL21981 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22384 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'IS-PARTIAL-OP :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'IS-INCONSI-PAIR :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL21241 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'MENU_FOR_NORMAL :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIM20385 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'VALUE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:COLL22041 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'TS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL22077 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'SUB1-MODULO-N :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:POIN21017 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'REM-STATUS :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL21927 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21292 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'IS-CONDI-RULE :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS20284 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22786 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:COLL21586 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'ACO-RPOMULT> :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'HOU :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL20632 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21275 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'LHSVARS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'MESSAGES :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:VAL23432 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'FIRST-ARG :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CDR :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'LIST_NODE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS22401 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:COLL23046 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'PRED-FUNC-SUPERPOSITION :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'MAKE-RULE-INSTANCES :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'ON :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '$SMALL-DEPTH :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22631 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL22845 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'CYCLE-OUT-RED :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS22127 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS23471 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:VAL23313 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'ONE-EXTENSIBLE-POINT :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'COVER-INDUC-PROVE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL21479 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'ATOM2 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN22453 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'EQS1 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS23075 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20927 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:COLL23090 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23245 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22876 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21402 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS22600 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '$MANUAL-HISTORY-FREQUENCY :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'COPY-READTABLE :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS23729 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20403 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'FBIGT :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'VECY :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22891 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN23731 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'PREV-POSITION :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22430 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS22326 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:VAL22926 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23449 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'QUIT :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'CHARACTER-INDEXES :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23125 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL20603 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21244 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21762 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'UNIFS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21242 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS20601 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL22046 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'TOTALCOL :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIM20443 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'DISTR-AC-ORDER :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '$TYPE-CONSTRUCTORS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN20825 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20788 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'LIS1 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'LHSARG :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN21828 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS20953 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'NONLINEAR-VARS-UNDER-* :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'P :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'RES1 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21476 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21360 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS20249 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'INDEX :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:POIN21378 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN23488 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIM20290 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REDUCE-AT-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '$CURSOR :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'COVER-STRONG-INDUC-HYPO :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS23477 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:LIS23151 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'RUN-KB :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'MATCH-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL20849 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'SCORE-SUBS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'T1IN :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'ELIMCOM :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS22248 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'ONE-EXTENSIBLE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '1+ :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:POIN23379 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'BY :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22724 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:COLL23119 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN22286 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'COPY-LIST :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS22279 :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list '#:LIM20438 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22233 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'PRINT :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL20474 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN23132 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21951 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22929 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIM23324 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL22649 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL21517 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS23676 :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'ALL-OPS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'EQN2ASS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'PREMISES-INSTANCES :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'C2 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21186 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL20832 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'MULT-SORT-MERGE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'RPL-BY-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'REDUCE-MONO :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'PRES22 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20278 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20714 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21447 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS21441 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS20928 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS20589 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21677 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:POIN20576 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL23722 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'WRITE-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'OP-OF :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS21165 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21161 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'MAKE-TUPLES :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20720 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'MANUAL-OPTIONS :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'RIGHT-ARG2 :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:COLL22805 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'MATCH-PREMISE :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '$IDEM :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23712 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'LIST_TREE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'TWO :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'MERGE-SORT-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL21580 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL20836 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL23697 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '$GENE :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS23354 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL21769 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22407 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL22511 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL20240 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'NRULE :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'COVER-MULTI-TERM-INDUC :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'GET-DOWN :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'ONE-RULE-ITERATION :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:LIS20806 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'CHANGE-SOURCE :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS23008 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20366 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL23166 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'DISP_TREE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:VAL21894 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL20910 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN23421 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23073 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21722 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL23694 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'CHOICES :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'GOOD-UNIT-CLAUSE :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '*SLOOP-TRANSLATIONS* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'FOR :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL23241 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'VART2 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL21712 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'EQUIV :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'TEM :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'TIMES :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'INFO :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21078 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS23513 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'NORM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIM20639 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL22581 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'ELIST2 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN20794 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL20444 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22497 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'POSTPONE-OR-UNDO :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'STR-CHOOSE-ONE-SCHEME :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'INT :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS21364 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'SCORE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SIGMA :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20980 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21038 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL20521 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN23067 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21912 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:COLL23721 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22366 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'IF-KEYWORD-LIST :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'GROUNDP :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '$POST-ASS-LIST :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'PRIME-ACU-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS22095 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL23007 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'READ-OP-DECLARATION :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'SYMMETRY-NON-DELETABLE :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REDUCTION :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'COVER-NORM-ORDER :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS20839 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN21942 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'MINUS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'COMPARE-ITEM :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL22183 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS21766 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL23121 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$SAVE-IN-PORT :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '$MORE-BREAK :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL21608 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'PROPER-PRODUCT-LISTS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:POIN21334 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS22764 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'AND-OF-MONOMIALS :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL22038 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'ELIMINATE-SUB :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'INSERT-TERM-AT-LEFT :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:VAL23567 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22954 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21320 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'ASSOC :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PURE-MATCH :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL22699 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '$AUTO-SUGG :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL22842 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'REST-OF-POLY :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21236 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL22312 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'REWRITE-ONCE-BY-HYPO :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'GET_PNAME :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'TRUEP :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '$DEEP-CONDI :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'BUILD-EQUATION-FROM-PREMS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'WRITE-COMMENT-RHS :file) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'NEQ :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SIMP-XOR-SIMP :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN22457 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:COLL23643 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '*LOOP-END-TEST* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22809 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'READ-THIS-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'SCHEMES :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN23222 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:COLL23638 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22359 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS21121 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL20917 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'INSERT-TERM-AT-RIGHT :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:VAL23766 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'MATCH :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'PARTITION-TERM-BY-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'PRES :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'BLOAD :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:COLL21698 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:VAL23316 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN21939 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'SET-MACRO-CHARACTER :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'SWITCH :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'TERMS2 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'UNDO1 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'ASSERTIONP :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'START-HISTORY-MANUAL :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'SET-UNIFICATION :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21408 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:POIN23664 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'UNION :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'INCONSISTENT-EQN :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'ACM-POLY-* :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21296 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS22294 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:POIN21269 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'LEFT-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23310 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS23678 :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:COLL22045 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL20311 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL21182 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'MAXSIZE :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL21492 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '$X_RULE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'NEW-FIRST-CTX-TRANS :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS22447 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS23760 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'VAL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:POIN21483 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:VAL20891 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22351 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS22277 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21368 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL20516 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SIG :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'FLAG :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22801 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:VAL21915 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:POIN21817 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL21475 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'X2 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'PRE-PROCESS-PRE-ASS :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '*-CANONICALIZE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '$REDUCE-SYSTEM :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'EQ-PAIRS :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIM20389 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '*LISP-TYPE* :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:LIS21633 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'SET-CRIT-MARK :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL21493 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21279 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21715 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'LAST-HELPER-APPLY-ARG :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'WRITE-NODE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:VAL20911 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'PRINT-NODE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'SUB :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'SOURCE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'QUERY-INSERT :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list '#:LIS21202 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS20691 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS21313 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'TMP1 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS20247 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$INDUC :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '$ORDER-HELP :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'NON-CONSTANT :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'M :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'COMPLETE-TEST :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23275 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'REST-+-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'PARA-SUP-TERM :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:COLL20879 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'ADD-REST-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL22474 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23033 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'DEFAULT-VALUE :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '$STRONG-INDUC :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS23479 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:LIM21876 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'RETURN :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'SHOW-NODE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:COLL20328 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23493 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'NEWVARS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'RHS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS22367 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:COLL22076 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'UNICOMPOUND :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL20233 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20963 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'GLOBALS :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS23319 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'CLEAN-RIGHT-BRACKET :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS22385 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'FIRST-PART :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS22244 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:COLL22646 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23724 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23362 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS20784 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'CROSS-PRODUCT :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'CATCH :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:POIN21393 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS21030 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN20217 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'NUMS :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS21600 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21116 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22478 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'CYCLE-REWRITE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '$SYM-ARG-POSITIONS :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LISTS :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'FILLARRAY :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIM20631 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'MS2 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'IS-EQ-TRUE-PRE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'QUERY-ADD-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21231 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'OP_RULES :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:VAL22788 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'SUBST :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'GET-COVER-SETS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'MEMQ :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'REST-ELEMENTS :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN21419 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL22079 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS20562 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'AND-WITH :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'VARS-ARGSX :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20982 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN23285 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21317 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS22753 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL20478 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'UNITY :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:VAL21786 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN22301 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:VAL21647 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'RULE-DESTROYABLE :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:POIN22851 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'PARSE-LOOP-INITIALLY :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'NEQUAL :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'SET-DEPEND-SCORES :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'AUTO-MAKE-EQUI :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL22290 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:POIN22990 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'VARS1 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '$CASE-COND :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'WRITE-COMMENT-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '*LOOP-COLLECT-VAR* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'DOWNFROM :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS23122 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20726 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'UNI1 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '*CATCH :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL21094 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21879 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'NORM-MULT-MONOS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'ORDER-PC-SEQ :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'IS-SKOLEM-OP :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22757 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS21153 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:COLL20514 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '$SUCC-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:POIN20268 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23554 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS21755 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21169 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL23368 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL23756 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'CONDI1 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL20556 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS23569 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:POIN22949 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20297 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CAR-LENGTH-CDDR :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21873 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS23295 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'HINT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22517 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20566 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL21323 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'NTH :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL22123 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '$PROC_TIME :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'GET-LCM-SOLNS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LEADER :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:VAL20800 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'PRINC :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS20767 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL22158 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:LIS23118 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL21238 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21525 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS21838 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'AC-SUP-TERM :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21499 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'REM-SKOLEM :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS23163 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21112 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'ADD-SIMPLIFY-OTHERS :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'X :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'COND :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS22110 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:COLL23557 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '$PICK-RULE-STR :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS23094 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'RPLAT-IN-BY :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '$INDUC-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'SIZE-DEPTH-STR :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL23312 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS20871 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22556 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'X-RESULT :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'ACO-LEXICO-COMP-RL :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL22297 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS22245 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'NORM-POLY :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL23169 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL20369 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIM22522 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'CLOSE :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'WRITE-DISJUNCTIONS :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'BREAK :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'NRM-TIME :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL20498 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS23072 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20986 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:VAL21564 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:POIN22022 :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:POIN21626 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'SYMMETRY-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL22566 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN20979 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21802 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'COLLECT-VAR :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS21156 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL21495 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS20559 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SKIP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'NARGS :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'FLATTEN-TESTSET :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN21825 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21243 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL21718 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:POIN20500 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'BRAKE-CHOICE :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'VARR :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '$OVER-REWRITE :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'ASSERTION2EQUATION :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:POIN21064 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL21326 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'REM-DUPS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS23561 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL21520 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'DECF :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS20494 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22844 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'NEW-LHS1 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS22314 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'NO-TOP :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS20695 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'IS-ELIM-TERM :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'DECIDE-DEFIN-MODE :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SORT-OF :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20528 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:COLL20356 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22115 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'READ-CHAR :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS21807 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'CONSTRUCTORS-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:COLL21523 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'NORM-ONE-PRE :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL22559 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL21721 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:POIN22267 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS20983 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS23351 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN21459 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS20522 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'PNTLEN :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'SAME-NONVAR :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'THE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'ADD-OLD-VARS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'MXA :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'FROM-DATA :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL20512 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22355 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list 'MACROEXPAND :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS21357 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL22719 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'IS-CHARACTER-RULE :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS20874 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '$DEBUG :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:COLL22696 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'V1 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:VAL22292 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:LIS20960 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'TRY-MAKE-EQUI :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:COLL21694 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:LIS21551 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21039 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '$ART :file) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL20231 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SEARCH_BY_ID :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS21160 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL20527 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21278 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL22580 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'JUSTIFY-EQN :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIM20638 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS20897 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21582 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:POIN21576 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'FREE-VARS :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20230 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23434 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL22477 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL21009 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS23674 :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'B-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'REMOVE0 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'ADD-OPERATOR :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'MARGS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS23208 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'FORM :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'PRED-RULEP :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL20646 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'EXPECT-ARITY :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:COLL23446 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22001 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '*BIN-TYPE* :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:LIS20781 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'ADD1 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'ADD-SOLN :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21203 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL23647 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:POIN23506 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL23238 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:POIN20504 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'PURE-OUTRED1 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS23582 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS20921 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL21184 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'CL2 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'NAME :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS20580 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22406 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS21404 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'ALIST :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:VAL23243 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS23475 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'ARG1 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'MAX-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'NORM-AND-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL21895 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'USER-SELECTQ :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'CLEAN-INDHYP :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'ENABLE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS22950 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23009 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'NEW-MON2 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'REMOVE-QUAN-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'QUASI-EQUIVALENT :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS20271 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'G1 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN22995 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22187 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'REMAKE-PREMISES :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'DAY :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'EXPECTEDLIST :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list 'UNLESS :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'LIST-DIFF :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL23605 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:COLL20405 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21042 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22040 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN20545 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL21783 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:COLL22583 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'SEPARATOR :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS20649 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'LST2 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22403 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'GET-RULES-WITH-OP :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS21246 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN21134 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '*ADDITIONAL-COLLECTIONS* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS20965 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'NROW :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'REDUCE-AT-ROOT-BOOL :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL22585 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN20741 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '$TRANSLIST :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'IDEM-EQ-CRITICAL :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS22638 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN22826 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'NORM-SIGN-CHANGED-MONOS :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'EXPR2 :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'GET-PRES-OPS :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22602 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'GET-RHS :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'AC-C-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN20307 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PAIR :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:COLL22966 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21787 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22389 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS23719 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23077 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23347 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL20914 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS23470 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:COLL22037 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS23276 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'SYMBOL-PACKAGE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL21431 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'H :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22205 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:LIS21957 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL20442 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22679 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:COLL20640 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21207 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'TRACE-DIVISIBLE :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list 'M-AND-P :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21047 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'RPOMULT :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:VAL22784 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:POIN21865 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$ONE-WAY :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22119 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'SUB1 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN20540 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL23006 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL20956 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS22643 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'MONOMIALS-THAT-GET-SMALLER :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'TEST-RRL :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'TOKEN-TEXT :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'CADDAR :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'ASSERT :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:COLL21473 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:POIN22149 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'ARITY :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'HYPOS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23032 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'GET-DEFINING-DOMAINS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'BIGT-ONE-KILL-ONE :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'ADD-AT-END :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'ADD-SUGG-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'CYCLE-REDUCE-AT-ROOT-2 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'PROCESS-AC-CRITICAL-PAIR :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22090 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '$CKB_FLAG :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'ADD-BIND-TO-SUB :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'SUBSTVARFOR :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL20834 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL20644 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21079 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'SUBDIR :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list 'IDEM-SUPER-COMMU :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'OP1 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL23293 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'ADD_CHILD :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'L :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22986 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$GENE-NUM :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:VAL22847 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS21124 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'SUB-QUASI-REDUCIBLE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'NOT-AS-REST :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIM20388 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CONTINUE-MAPPING :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'PRE-BIGGER-THAN-EQN :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'NORM-INN :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'PREV :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'COMPOSE :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL23645 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'TOTAL-ORDER-ATOM :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'EXPECTED-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'POLY-SIMPLIFY :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS20751 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'MULT-INSERT :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL23092 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'NEWPRES :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN23747 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20517 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22446 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS22350 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIM22514 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23049 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22674 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:VAL21474 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'CHECK-MISMATCH :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'CDDDR :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'OP :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'DEFINING-DOMAIN :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23672 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22800 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22560 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL20479 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22044 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22693 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'LUCID-RUNTIME-SUPPORT:BQ-CONS :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL23315 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'WHILE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'NEW-TOP-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22318 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'PARSE-LOOP-FOR :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22692 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '#:VAL20725 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS23631 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS23127 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'X_FAILURE_HANDLER :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:POIN22226 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:COLL21448 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:VAL22648 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20563 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN21418 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS20803 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN21978 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'ONLY-IF-NOT-THERE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'MONO :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21987 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list ':SLOOP-MAP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'BOOL-MATCH-STR :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21316 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIM21832 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22048 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL22874 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'TO :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL23490 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'I2 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21601 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '$ORD_TIME :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'SIGN :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS20353 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SUB-NONVARS :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS21117 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:VAL23691 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:POIN21392 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'LRPO :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS20785 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:COLL21892 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIM20634 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL20958 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL22633 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL22125 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN21619 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS20518 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS20878 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'COVER-OF :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL23160 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL20360 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21727 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:COLL21444 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'HAVE-INDUCTIVE-VARS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'TEMP :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20844 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'LS :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL20524 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'INFIXP :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS22363 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '$POST-BOUND :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'GREATERP :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'X_READ_TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL21351 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list 'FLATTEN-POST-ASS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL23114 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22553 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'BA-SIMP-AND :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list '#:LIS21555 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'PREDRULE :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL23168 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22492 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22380 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:COLL21096 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'NTHCDR :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list 'SYS-FLAG-INIT :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS20870 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21382 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS23204 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS20206 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:COLL21767 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL20882 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'E :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS23360 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21781 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'WRITE-ONE-PRE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'ARGSY :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'MANY :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:VAL23699 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:COLL23036 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22471 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL20236 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23234 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:VAL23408 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'GET-INTERSECTION-RANGE :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'MAKE-P-COMMUT-RULE :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'POLY-REDUCE-AT-ROOT-ONE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'TRY-ONE-CONDI-RULE :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'DISKSAVE :file) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL20276 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL22955 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21383 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS22111 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'REM-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL23517 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:POIN23210 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:VAL21403 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'ONE-COMPOSITION :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL21006 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'PARSE-LOOP-WITH :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL20557 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21964 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS22310 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:VAL23382 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'TR-ADD :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS23565 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'HIGH-OP-POSI :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL20409 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'HEAD_OF_FRI :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS22236 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'ELEM :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'CHECK_AND_ADD :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS21528 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '$FAILED-EQNS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'EXT-TYPE-RELATION :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:COLL20698 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'VN :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$ST_LIST :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'INSERT :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:LIS22670 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list '$RRL-FILES :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:LIS21672 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS21754 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '+-CANONICALIZE :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22181 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:POIN21970 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'MULT-SORT-INSERT :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL21899 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'CONCATENATE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS21806 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'NAME-VAL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'TRY-ONE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'GET-ALL-PROPERTIES :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'COVER-PROOF-PROCESS2 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list '#:POIN21306 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'REC :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22272 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21270 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'MONOMIALS-THAT-DONT :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL23437 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'M2 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL21910 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '$DEL-RULES :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:COLL21968 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21409 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL21240 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL22912 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SET2 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL22242 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIM20380 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23511 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22922 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21356 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'ADD-EXTRA-PREMISE :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'CLEAN-RULE :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$MULTI-TERM-INDUC :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS23762 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:POIN22936 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS23696 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '*RRL-DIRECTORY* :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list '#:VAL20959 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'CLEAR-OUTPUT :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:VAL21606 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:VAL21720 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:LIS20969 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS23041 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22299 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'UNWIND-PROTECT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'SHOW-TREE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS21636 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL21521 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'RESTORE-REST-GLOBALS :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:VAL20209 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '(APPEND NCONC COLLECT) :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS20912 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'M-*-P :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'DUP-EQOP :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS20579 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21896 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'DELETE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'EQL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS21437 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'POP :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21527 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'SYM :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'D2 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIM22441 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:LIS20242 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23240 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'STOP :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS20301 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'OCC :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21157 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL20510 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21780 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'MTERMS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21285 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'D :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'LESSP :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'IND :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22959 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'EXCHANGE-LR :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'FORCE-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22209 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:POIN23108 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN20820 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'TY-OPS :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'READTEQNS :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:POIN20370 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23636 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS21071 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'RESTORE-EQUATION :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL22911 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20558 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'DISABLE-RULE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL21913 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'SIMPLIFY-ALMOST-FLAT :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'COMM-OP-P :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:POIN21947 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS21075 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21763 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:COLL20324 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21729 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:POIN20374 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23448 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN20652 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SLOOP::*ADDITIONAL-COLLECTIONS* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'UNUSED :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:LIS20876 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL22047 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN21027 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS20600 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'BACK :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'IS-SUBTYPE :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:VAL22751 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL21679 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:COLL22479 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23369 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'MERGE-LIST :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ARROW2 :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:POIN22888 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20926 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL20473 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PAS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL20529 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22877 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ADD-RULE-LINEAR :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS22431 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list 'ACOPS :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '$ANSPRED :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'CRIT-STRATEGY-OPTIONS :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'RIGHT :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:LIS23518 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'T22 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22327 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'VECX :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'BUTLAST :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS22117 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN23227 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22630 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'ACO-PULL-OUT-BIG-EQ-SUBS :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'R2 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21874 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'BOOL-REWRITE-AT-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'EVAL :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'CONSISTENT :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN21887 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:VAL20551 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22316 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:COLL23751 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL22730 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'TU1 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIM22362 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS21585 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'POLY-SUPER-DISTRIBUTION :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL21324 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'RULE-NUMS-FROM-SOURCE :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '$ACLRPO :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '$REDUCE-BOUND :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS21293 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '$TRACE_FLAG :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIM20384 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'FIXUP-QUANTIFIED-FORMULA :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL22760 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'COMPOSE2 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'RULES :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL23649 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:POIN20453 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21274 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21752 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'REF-PRES-VARS :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN20419 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20279 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'GET-TESTSET :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'OLDEQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'RPLACA :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL20961 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS21800 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS20715 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'ONE-ELIM-SUBTERM :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN21414 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'REFUTE-EQN :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21187 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21691 :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp"))
(setf (callers-list '#:LIM22515 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL23727 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS20984 :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIS21676 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list 'UNIFIER :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS20588 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:COLL22988 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20254 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN21852 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL22832 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS20929 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '$CHARACTER-RULES :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'PSEUDO-TERM-ORDERING :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN23133 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'MAX-DEPEND-GAP :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20329 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22232 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS22714 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:COLL23129 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SET-ARITY2 :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22524 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'Q :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PREV-TERM :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS21361 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:VAL20492 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20606 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'COMBINATE :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23161 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21516 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:VAL21726 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL20318 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22919 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL20693 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'NORM-XOR-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:VAL20848 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS23646 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS21362 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS23150 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '$AKB_FLAG :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '$WITNESS-EQN :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20802 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:COLL22951 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22249 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS22725 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:COLL23152 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'Z11 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:LIS21206 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '$SET_PRED :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL20352 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23491 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'PURE-NORM-INNERMOST :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'AREF :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS20952 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:COLL21833 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:LIS22666 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'NEWTERM :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'SUBSTITUTE-SLOOP-BODY :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'IS-GROUND :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:LIS20789 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIS21151 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '#:VAL23716 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'EMPTY-SUB :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIM20291 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'MANUAL-GOAL :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:LIS22496 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21490 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'SIMPLIFY-COND-TERM :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '$HANDLE-AND :file) '(#P"/usr/users/eschbach/rrl/code/art.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS23314 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:VAL23560 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '$POLYNOMIAL :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '#:VAL22043 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS23768 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23034 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL22609 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'PICK-OUT-RULE :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'EXPECTING-PREDICATES :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:VAL20326 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22561 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23099 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL23205 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22641 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL20520 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL20981 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list 'PICK-AN-ARG :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'ACTUAL-UNIFY-ACTION :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'NUM-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL20364 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21559 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'COVER-CASE-COND-FLAG :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '$XNODE :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'XX :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'OPER :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:LIM20404 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22967 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:POIN21257 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'M-AND-M :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21125 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21205 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL22769 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL23442 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS20354 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'CURSOR_DOWN :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:VAL23093 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'LET :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'ELIMINABLE-TERMS :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:COLL20293 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS21955 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20750 :file) '(#P"/usr/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL23695 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'J :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'DIMENSIONS :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS20470 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL21710 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'IS-SUBLIST :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL23292 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'DECIDE-MERGE-CONJ :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'MATCH-SET-AC :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN23097 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21522 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list 'SYMBOL-NAME :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'SET-DIFF :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS21983 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:LIS20807 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list 'IS-HIGHER-TERM :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'TOTAL-ORDER-2 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:COLL20519 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22691 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'DISPLAY-ONE-ARITY2 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:VAL23563 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:VAL23439 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'NTHELEM :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN22199 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:COLL23527 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'COVER-CASE-BOOL-FLAG :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS22440 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '$LAST-SOLN :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'INIT-BOOL-OPS :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL22728 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'STRING< :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS23235 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'NUMARGS :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS22091 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:COLL23123 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'CHILDLIST :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp"))
(setf (callers-list '#:VAL22313 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'ACM-ONE-VAR :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:COLL23725 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22118 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:VAL23753 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20525 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL20605 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:POIN23139 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL23405 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22238 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'ACO-NOBIGT-PARTITION :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22493 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:POIN23194 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'FILE-DATE :file) '(#P"/usr/users/eschbach/rrl/code/rrl.lsp"))
(setf (callers-list 'VARS-ONLY :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '$PROVE-EQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'ARR :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'S-SUB :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL21350 :file) '(#P"/usr/users/eschbach/rrl/code/datamacs.lsp"))
(setf (callers-list '#:LIS23498 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'IS-SYMMETRY-RULE :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list 'RUL2 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:LIS23637 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '$NUM-TRANS :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'SLOOP-SWAP :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:POIN21454 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:VAL22434 :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp"))
(setf (callers-list '#:VAL22895 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'CHAR= :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'FIND-PACKAGE :file) '(#P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS21319 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:COLL20490 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL20287 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL23690 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:VAL22838 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '$X_CHOOSE_TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp"))
(setf (callers-list 'X_MANUAL_INDUC :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'HANDLE-FACTOR :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'PROCESS-NEW-AC-CP2 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22221 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'COMPLETE-WELL-TYPED :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS21120 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'EXT :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:LIS21406 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS20582 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL22843 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list 'INITIALIZE :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:VAL22698 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'TI :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:LIS22946 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21321 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '#:LIS21607 :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:VAL23040 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'ATTACH :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'AND :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:LIS20818 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22490 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20783 :file) '(#P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list 'COVER-GENE-INDUC-EQN :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21123 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN21373 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list 'PURE-RWONCE-OUTERMOST :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'PROVE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:COLL22557 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22849 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS22094 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'THE-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'OCCURS-IN-RULE :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'OPS-EQUIV-TO :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SYMBOLP :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list '$HELPFILE :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS22765 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:VAL20358 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ONE-TYPE-VAR-LIST :file) '(#P"/usr/users/eschbach/rrl/code/structure.lsp"))
(setf (callers-list '#:VAL23381 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '$POST-ASS-SET :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'SCH :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20724 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS22319 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'SETQ :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/structure.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:COLL23604 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS21550 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS21289 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS21673 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:LIS23750 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list 'FACTORIBLE :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS22467 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '*AUTOMATIC-DECLARATIONS* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'PARTITION-OPS-BY-TYPE :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '*AUTO-REGISTER* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'PURE-PROCESS-CRITPAIR :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22396 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL21129 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:COLL22153 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list 'TYS2 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'PROP :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:VAL21455 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'CVAL :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list 'Z2 :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list 'USED-RULES :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:POIN21587 :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS22361 :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp"))
(setf (callers-list '#:VAL21846 :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:POIN23060 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20656 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL23195 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:POIN20885 :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS22324 :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list '#:POIN20424 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PICK-SMALL-GOAL :file) '(#P"/usr/users/eschbach/rrl/code/narrow.lsp"))
(setf (callers-list '#:POIN20322 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PREVIOUS :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:POIN22743 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:LIS21023 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'REDUCE-BY-ONE-AT-ROOT :file) '(#P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:VAL22717 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list '#:COLL21941 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'REMOVE-LEFT-ARG :file) '(#P"/usr/users/eschbach/rrl/code/cancel.lsp"))
(setf (callers-list '#:LIM20458 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:COLL23670 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS22237 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'MULT-DIFF :file) '(#P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list '#:VAL23298 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21222 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:VAL23693 :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'READ-LINE :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list 'PT :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:VAL22940 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'SPLIT-ALIST :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:LIS23492 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS22036 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'ALPHALESSP :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:COLL20692 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'OPL :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'P-TERM :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22147 :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp"))
(setf (callers-list '#:POIN22542 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL21004 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list 'FORM-SUBGOALS-FROM-PATTERNS :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL23394 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22197 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:COLL23739 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '$X_RULE_SAVE :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list 'ORDER-PC-RES :file) '(#P"/usr/users/eschbach/rrl/code/orderpc.lsp"))
(setf (callers-list 'SHOW-MESSAGE :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:POIN22064 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'STATUS :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/datamacs.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp"))
(setf (callers-list '#:VAL22039 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'STIME :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list '#:LIS20207 :file) '(#P"/usr/users/eschbach/rrl/code/abstract.lsp"))
(setf (callers-list 'PARSE-LOOP-MACRO :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'HAVE-BOOLEAN-CONSTANT :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS23269 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'NORMALIZE :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp"))
(setf (callers-list 'COVER-NORM-UNCONDI-EQN :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:POIN22263 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS21472 :file) '(#P"/usr/users/eschbach/rrl/code/induc.lsp"))
(setf (callers-list '#:LIS23318 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '$ORDERHELP :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:COLL23221 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'WITH-UNIQUE :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIM22528 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list 'NORMAL-FORM-SUB :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp"))
(setf (callers-list '#:VAL20325 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:POIN23663 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list 'FOUND :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:LIS22934 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21353 :file) '(#P"/usr/users/eschbach/rrl/code/equality.lsp"))
(setf (callers-list '#:LIS22562 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:VAL22042 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:LIS22595 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20936 :file) '(#P"/usr/users/eschbach/rrl/code/building.lsp"))
(setf (callers-list '#:LIS23397 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'TIME-LIMIT-STRA :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'RETURN-SUBST-LIST :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:VAL23233 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'OR :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/rrl.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list '#:VAL22968 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS22608 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS22213 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list 'REMOVE-IRRELEVANT :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list 'ADD-PATTERNS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21669 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '(FROM DOWNFROM) :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:COLL23209 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'GET-ALL-RULE-NUMS :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list 'NUM-OLDEQN :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:VAL20273 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'ASS-RULE-BOUND :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:LIS23352 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'TEST-ONE-OP :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'EQUAL :file) '(#P"/usr/users/eschbach/rrl/code/xtree.lsp" #P"/usr/users/eschbach/rrl/code/xrrl.lsp" #P"/usr/users/eschbach/rrl/code/xprover.lsp" #P"/usr/users/eschbach/rrl/code/xmanual.lsp" #P"/usr/users/eschbach/rrl/code/typing.lsp" #P"/usr/users/eschbach/rrl/code/term.lsp" #P"/usr/users/eschbach/rrl/code/syntax.lsp" #P"/usr/users/eschbach/rrl/code/suffice.lsp" #P"/usr/users/eschbach/rrl/code/subst.lsp" #P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/scheme.lsp" #P"/usr/users/eschbach/rrl/code/prove.lsp" #P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/precedence.lsp" #P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/orderpc.lsp" #P"/usr/users/eschbach/rrl/code/order.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/operators.lsp" #P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp" #P"/usr/users/eschbach/rrl/code/narrow.lsp" #P"/usr/users/eschbach/rrl/code/miscel.lsp" #P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/makerules.lsp" #P"/usr/users/eschbach/rrl/code/lrpo.lsp" #P"/usr/users/eschbach/rrl/code/kb.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/induc.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/equality.lsp" #P"/usr/users/eschbach/rrl/code/cyclerule.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp" #P"/usr/users/eschbach/rrl/code/consist.lsp" #P"/usr/users/eschbach/rrl/code/condit.lsp" #P"/usr/users/eschbach/rrl/code/commut.lsp" #P"/usr/users/eschbach/rrl/code/cancel.lsp" #P"/usr/users/eschbach/rrl/code/building.lsp" #P"/usr/users/eschbach/rrl/code/boolring.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp" #P"/usr/users/eschbach/rrl/code/autoorder.lsp" #P"/usr/users/eschbach/rrl/code/art.lsp" #P"/usr/users/eschbach/rrl/code/acunify.lsp" #P"/usr/users/eschbach/rrl/code/aclrpo.lsp" #P"/usr/users/eschbach/rrl/code/acdio.lsp" #P"/usr/users/eschbach/rrl/code/abstract.lsp" #P"/amd/users/eschbach/rrl/code/art.lsp"))
(setf (callers-list 'DEP :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS21271 :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:POIN23698 :file) '(#P"/usr/users/eschbach/rrl/code/xrrl.lsp"))
(setf (callers-list '#:LIS22599 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS23444 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'FILENAME :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list '#:LIS20988 :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '*INNER-SLOOP* :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list '#:VAL22612 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS20716 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list 'MOVE_CURSOR :file) '(#P"/usr/users/eschbach/rrl/code/xprover.lsp"))
(setf (callers-list '#:LIS20223 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list 'PRED-CRITICAL-PAIR :file) '(#P"/usr/users/eschbach/rrl/code/pccrit.lsp"))
(setf (callers-list '#:VAL23597 :file) '(#P"/usr/users/eschbach/rrl/code/typing.lsp"))
(setf (callers-list '#:LIS21126 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIM22915 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS21152 :file) '(#P"/usr/users/eschbach/rrl/code/consist.lsp"))
(setf (callers-list '$GRAMMAR :file) '(#P"/usr/users/eschbach/rrl/code/output.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIS21327 :file) '(#P"/usr/users/eschbach/rrl/code/cyclerule.lsp"))
(setf (callers-list '$CRIT-WITH-STR :file) '(#P"/usr/users/eschbach/rrl/code/pickrules.lsp" #P"/usr/users/eschbach/rrl/code/options.lsp" #P"/usr/users/eschbach/rrl/code/input.lsp" #P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:COLL23583 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'NORMALIZE-BOUND :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'SORT-OP-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/commut.lsp"))
(setf (callers-list '#:VAL23211 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list '#:LIS22673 :file) '(#P"/usr/users/eschbach/rrl/code/precedence.lsp"))
(setf (callers-list 'UNIFI :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list 'CON2 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list 'QUANT :file) '(#P"/usr/users/eschbach/rrl/code/boolring.lsp"))
(setf (callers-list '#:LIS21880 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'QUANTIFIER :file) '(#P"/usr/users/eschbach/rrl/code/syntax.lsp"))
(setf (callers-list '#:COLL23272 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:LIS22635 :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp"))
(setf (callers-list '#:LIS21877 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list '#:POIN22811 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS23335 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list '#:POIN21888 :file) '(#P"/usr/users/eschbach/rrl/code/miscel.lsp"))
(setf (callers-list 'YI :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '#:VAL22913 :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:LIS20728 :file) '(#P"/usr/users/eschbach/rrl/code/acunify.lsp"))
(setf (callers-list '#:POIN22217 :file) '(#P"/usr/users/eschbach/rrl/code/operators.lsp"))
(setf (callers-list '#:VAL21751 :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list 'ITEM :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp"))
(setf (callers-list 'WEIGHT :file) '(#P"/usr/users/eschbach/rrl/code/makerules.lsp"))
(setf (callers-list '#:VAL23436 :file) '(#P"/usr/users/eschbach/rrl/code/suffice.lsp"))
(setf (callers-list 'WELL-TYPED-EQN :file) '(#P"/usr/users/eschbach/rrl/code/polynomial.lsp" #P"/usr/users/eschbach/rrl/code/pccrit.lsp" #P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#\= :file) '(#P"/usr/users/eschbach/rrl/code/input.lsp"))
(setf (callers-list '#:COLL20636 :file) '(#P"/usr/users/eschbach/rrl/code/aclrpo.lsp"))
(setf (callers-list 'CYCLE-CHECK :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp" #P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'RENAME-EQN-RULE :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list 'BA-SIMP-OR :file) '(#P"/usr/users/eschbach/rrl/code/normbool.lsp" #P"/usr/users/eschbach/rrl/code/boolean.lsp"))
(setf (callers-list '#:LIS22092 :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list '#:POIN23495 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list 'TRACE-OPTIONS :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list 'COMMON-ELEMENTS :file) '(#P"/usr/users/eschbach/rrl/code/critical.lsp"))
(setf (callers-list '#:LIS22794 :file) '(#P"/usr/users/eschbach/rrl/code/prove.lsp"))
(setf (callers-list '#:LIS21434 :file) '(#P"/usr/users/eschbach/rrl/code/history.lsp"))
(setf (callers-list '#:LIS22763 :file) '(#P"/usr/users/eschbach/rrl/code/premises.lsp"))
(setf (callers-list 'NORM-OUTERMOST :file) '(#P"/usr/users/eschbach/rrl/code/normalize.lsp"))
(setf (callers-list 'SET-RIGHT-HYPO-ARGS :file) '(#P"/usr/users/eschbach/rrl/code/scheme.lsp"))
(setf (callers-list '#:COLL21043 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '$INTER-RANGE :file) '(#P"/usr/users/eschbach/rrl/code/match.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:VAL22243 :file) '(#P"/usr/users/eschbach/rrl/code/options.lsp"))
(setf (callers-list '#:VAL23529 :file) '(#P"/usr/users/eschbach/rrl/code/term.lsp"))
(setf (callers-list '#:LIS21084 :file) '(#P"/usr/users/eschbach/rrl/code/condit.lsp"))
(setf (callers-list '#:LIS21675 :file) '(#P"/usr/users/eschbach/rrl/code/kb.lsp"))
(setf (callers-list '#:VAL23248 :file) '(#P"/usr/users/eschbach/rrl/code/subst.lsp"))
(setf (callers-list 'AUTO-ORIENT :file) '(#P"/usr/users/eschbach/rrl/code/order.lsp"))
(setf (callers-list 'INTERN :file) '(#P"/usr/users/eschbach/rrl/code/sloop.lsp" #P"/usr/users/eschbach/rrl/code/franz.lsp"))
(setf (callers-list 'POPORT :file) '(#P"/usr/users/eschbach/rrl/code/franz.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list '#:LIM20408 :file) '(#P"/usr/users/eschbach/rrl/code/acdio.lsp"))
(setf (callers-list '$FOPC-LRPO :file) '(#P"/usr/users/eschbach/rrl/code/initialize.lsp" #P"/usr/users/eschbach/rrl/code/history.lsp" #P"/usr/users/eschbach/rrl/code/defvars.lsp"))
(setf (callers-list 'IS-PRIMITIVE :callers) '(RULE-DESTROYABLE DESTROYABLE CONSISTENT-PAIR CONSISTENT-RULE))
(setf (callers-list 'MY-PROBEF :callers) '(OPEN-WRITE-FILE))
(setf (callers-list 'TYPEP :callers) '(GET-CODOMAIN-TYPES RPL-BY-TERMS2 TOP-TERM GET-SKELETON2 MAKE-VALUE DECIDE-DEFIN-MODE REFUTE-RULE-INSTANCES POLY-SUPER-AT-*-0 POLY-SUPER-AT-* FIRST-N-ELEMENTS REST-ELEMENTS POLY-MATCH-FIND-REST-*-ARGS WRITE-DISJUNCTIONS LIST-ASSERTIONS CON1-NUMS CON-NUMS NTIMES IS-SUBSEQUENCE INCREMENT-POS SYM-ARG-POSITIONS DIO2 DIO COMBINATE2 COMBINATE ADD-SOLN GET-SOLUTIONS SUMYMAX GET-LCM-SOLNS GENERAL-BASIS-VECTORS ALL-ONES))
(setf (callers-list 'REF-SYMMETRY-VARS :callers) '(POLY-SUPER-DISTRIBUTION POLY-SUPER-AT-*-1))
(setf (callers-list 'RENAME-EQN-RULE :callers) '(RENAME-OP-RULES RENAME-PAIR-RULE SAVE-RRL))
(setf (callers-list 'DISPLAY :callers) '(WRITEF-SYS SUPPORT-EQN RUN-KB-OPTIONS DELETE-EQN DELETE-SYS RRL-AUX))
(setf (callers-list 'LIST* :callers) '(FORM-SUBGOALS-FROM-PATTERNS PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM XIN-MENU REDUCE-EQN-BY-ONE-RULE X_ONE_RULE ORIENT-RULE LAST-CONSISTENCY-CHECK ADD-OPERATOR FIRST-PROCESS-EQN READ-THIS-EQN NORMAL-PROVE USER-SELECTQ PRINT-NORMALIZED-EQN FLATTEN-EQN FLATTEN-RULE))
(setf (callers-list 'NEGATE-LITERAL :callers) '(CONDI-FROM-CLAUSE))
(setf (callers-list 'BA-SIMP-OR :callers) '(BA-SIMPLIFY))
(setf (callers-list 'GETF :callers) '(PARSE-LOOP-FOR LOOP-DECLARE-BINDING MAKE-VALUE THE-TYPE))
(setf (callers-list 'LHSIZE :callers) '(COMP-RULE GOAL-RULE-SIZE MAKE-PAIRS))
(setf (callers-list 'RRL :callers) '(RESUME-RRL INIT))
(setf (callers-list 'DIVISIBLE-NONAC-CHECK :callers) '(DIVISIBLE-CHECK2))
(setf (callers-list 'PSETF :callers) '(MAKE-BETTER-PRE COMPRESS-FLAT))
(setf (callers-list 'NODE-PARENT :callers) '(ADD_CHILD CURSOR_UP X_INITIAL))
(setf (callers-list 'PROCESS-ASS2 :callers) '(SUBST-QUANT-FORM PROCESS-ASS1))
(setf (callers-list 'REDUCE-AT-ROOT-BOOL :callers) '(REDUCE-BY-ONE-AT-ROOT))
(setf (callers-list 'EXT-WEIGHT :callers) '(OPERATOR-OPTIONS))
(setf (callers-list 'SET-INFIX :callers) '(POLY-INITIALIZE ASK-FOR-OPERATOR INIT-BOOL-OPS))
(setf (callers-list 'EXT-STATUS :callers) '(ASK-USER OPERATOR-OPTIONS))
(setf (callers-list 'POLY-ADD-HOMO-RULES :callers) '(ADD-RULE))
(setf (callers-list 'INVALID-RULE :callers) '(IS-VALID-RULE))
(setf (callers-list 'ART? :callers) '(SUCC-END-INDUC CONSTRUCTORS-CHECK IS-PARTIAL-OP CHOOSE-CONSTRUCTORS PROVE OPEN-WRITE-FILE ASK-USER QUERY-ADD-EQN))
(setf (callers-list 'X_CLEAN-RULE :callers) '(X_PREPARE_RULES))
(setf (callers-list 'FLATTEN-WITNESS :callers) '(MAKE-ASS-COM-OP))
(setf (callers-list 'CONSTANTP :callers) '(PARSE-LOOP-FOR LOOP-ADD-BINDING MAKE-VALUE PARSE-LOOP-INITIALLY UCONCAT))
(setf (callers-list 'FIRST-BOOLEAN-CONSTANT :callers) '(HAVE-BOOLEAN-CONSTANT))
(setf (callers-list 'POST-LIMIT-STRA :callers) '(BRAKE-CHOICE))
(setf (callers-list 'LIST-EQUATIONS :callers) '(DISPLAY))
(setf (callers-list 'BIG-PRE-INFO :callers) '(PRE-BIGGER-THAN-EQN))
(setf (callers-list 'SYNERR :callers) '(CHECK-ARITY BAD-TYPED EXPECTING-PREDICATES))
(setf (callers-list 'ONE-RULE-ITERATION :callers) '(X_HYPOTHESIS))
(setf (callers-list 'ASK-A-CHOICE :callers) '(REFUTE-EQN KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA EQ-PRE-STRAT OPERATOR-STRA POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE EXT-DIVISIBLE EXT-CONSTRUCTOR NORM-STRATEGY SIZE-DEPTH-STR RESTRICT-CRIT-STRA BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG LINEAR OK-TO-CONTINUE SET-HANDLE-AND SET-ART-MODE))
(setf (callers-list 'IS-CONDI-DOMINATE-RULE :callers) '(INDUC-ADD-RULE))
(setf (callers-list 'NONLINEAR-VARS-UNDER-* :callers) '(POLY-SUPER-DISTRIBUTION))
(setf (callers-list 'INTERN :callers) '(DEF-LOOP-INTERNAL MAKESYM))
(setf (callers-list 'PARSE-LOOP :callers) '(SLOOP))
(setf (callers-list 'TIMES :callers) '(POLY-INITIALIZE POLY-SIZE UNKNOWN-SIZE SPECIAL-SIZE RUNTIME-MAX-WARNING MAKE-PAIRS REDUCE-BY-P-COMMUT2))
(setf (callers-list 'NEGATE-PREMISES :callers) '(OR-CONDI-EQN))
(setf (callers-list 'SET-UNIFY :callers) '(PROCESS-NEW-AC-CP))
(setf (callers-list 'NIL :callers) '(PARSE-NO-BODY))
(setf (callers-list 'REDUCE-AND-TERM :callers) '(REDUCE-AT-ROOT-BOOL BOOL-REWRITE-AT-ROOT))
(setf (callers-list 'CHANGE-RHS :callers) '(REDUCE-EQN-BY-ONE-RULE ADD-OPERATOR READ-THIS-EQN))
(setf (callers-list 'SPLIT-LHS-OR :callers) '(PROVE-SPLIT-BOOL))
(setf (callers-list 'INCONSISTENT-EQN :callers) '(IS-VALID-RULE CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK MAKE-ONE-DOWN-HILL))
(setf (callers-list 'CYCLE-REDUCE-AT-ROOT-3 :callers) '(CYCLE-REDUCE-AT-ROOT-1))
(setf (callers-list 'RELEASE-PREMISES :callers) '(ORIENT-AN-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN))
(setf (callers-list 'DEMULT-FORM :callers) '(NORM-POLY))
(setf (callers-list 'HANDLE-CONDITIONS :callers) '(SUP-TERM2))
(setf (callers-list 'SUB-NONVARS :callers) '(ABSTRACTION))
(setf (callers-list 'REDUCE-+-TERM :callers) '(POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT))
(setf (callers-list 'FOR :callers) '(SLOOP-SLOOP-MACRO PARSE-LOOP1))
(setf (callers-list 'DEFVAR :callers) '(WRITEF-SYS))
(setf (callers-list '* :callers) '(POLY-INITIALIZE POLY-SIZE UNKNOWN-SIZE SPECIAL-SIZE RUNTIME-MAX-WARNING DISPLAY-KB-STAT MAKE-PAIRS REDUCE-BY-P-COMMUT2 TWO-KILL-ONE SUMYMAX ALL-ONES))
(setf (callers-list 'PROG1 :callers) '(PARSE-LOOP-MACRO INDUC-PROVE PROVE SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR ORDER-ASS PURE-ORIENT-AN-EQN ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-AT-ROOT-ONE-RULE PURE-PROCESS-EQUATION PROCESS-EQUATION START-KB NEXT-TOKEN GET-ITEM READFEQNS APPLYSUBST-PRE PARA-SUP-TERM2 IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 COVER-NORM-TERM COVER-NORM-ORDER INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN PROCESS-ASS-SIMPLE BRT UNIFY UNIFIER UNIFIERS DIO2 DIO FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'R2E :callers) '(RESET-RRL UNDO1 INDUC-ADD-RULE))
(setf (callers-list 'ACM-AND-EQ :callers) '(EQ-MATCH))
(setf (callers-list 'QUOTIENT :callers) '(AVERAGE VARS-ONLY SPECIAL-SIZE REDUCE-BY-P-COMMUT2))
(setf (callers-list 'TRY-TO-ORIENT :callers) '(ORIENT-RULE))
(setf (callers-list 'CADAR :callers) '(SUPER-ITSELF-PRE ADD-SIMPLIFY-OTHERS WRITE-ASSERTION GOOD-UNIT-CLAUSE MAKE-ONE-DOWN-HILL))
(setf (callers-list 'VAR? :callers) '(DECOMPOSE-TERMS))
(setf (callers-list 'SKOLEMP :callers) '(DEFAULT-PRECEDENCE))
(setf (callers-list 'ABSTRACTION :callers) '(ABSTRACT-PROOF))
(setf (callers-list 'DECF :callers) '(TRY-ONE-CONDI-RULE TRY-ONE-RULE LISTARRAY))
(setf (callers-list 'SETF :callers) '(SEARCH_BY_EQN SEARCH_BY_ID ADD_CHILD CURSOR_DOWN CURSOR_UP SHOW-TREE-INFO SEARCH-TREE BREADTH-SEARCH CUTTREE WRITE-TREE SHOW-TREE REWRITE-ONCE-BY-HYPO X_MATH_IND X_REMOVE_HYP X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS X_GET_INDUC_TERM X_INITIAL REDUCTION-PROOF FORM-SUBGOALS-FROM-PATTERNS COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES COVER-INDUC-PROVE COVER-SET-SCHEME RESUME_AUTO X_MANUAL_INDUC X_FAILURE_HANDLER CHECK_AND_ADD X_AUTO_INDUC CLEARSCREEN MENU_FOR_CURSOR PROVE_EQN MOVE_CURSOR X_AUGMENT X_PREPARE_RULES X_CHOOSE_ONE_RULE SWITCH_RULE_LR X_HYPOTHESIS X_ONE_RULE X_NORMAL MENU_FOR_NORMAL MENU_FOR_MANUAL_REDUCE X_INDUC MANUAL_REDUCE EXPECT-ARITY EXPECT-ARITY12 SET-UP-ARITY2 CHECK-ARITY ENSURE-PREDICATE RULE-DESTROYABLE IN-FRINGE-SLOOP-MAP MAP-FRINGE COLLATE-SLOOP-COLLECT FIRST-USE-SLOOP-FOR IN-CAREFULLY-SLOOP-FOR SLOOP-SLOOP-MACRO =-SLOOP-FOR IN-ARRAY-SLOOP-FOR IN-PACKAGE-SLOOP-MAP IN-TABLE-SLOOP-MAP RETURN-SLOOP-MACRO REPEAT-SLOOP-MACRO AVERAGING-SLOOP-MACRO NEVER-SLOOP-COLLECT ALWAYS-SLOOP-COLLECT THEREIS-SLOOP-COLLECT COUNT-SLOOP-COLLECT MINIMIZE-SLOOP-COLLECT MAXIMIZE-SLOOP-COLLECT LOGXOR-SLOOP-COLLECT SUM-SLOOP-COLLECT SUBSTITUTE-SLOOP-BODY PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-FOR ADD-FROM-DATA PARSE-LOOP-DECLARE LOOP-DECLARE-BINDING LOOP-ADD-BINDING THE-TYPE PARSE-LOOP-COLLECT PARSE-LOOP-INITIALLY PARSE-NO-BODY PARSE-LOOP LOOP-LET-BINDINGS LOOP-UN-POP ADD-PREMISE-END PRE-PROCESS-PRE-ASS POLY-INITIALIZE EXT-TRANSITIVE EXT-CONSTRUCTOR LINEAR ASK-FOR-OPERATOR ADD-RULE-COMPLETE ADD-CRIT-RULE NEXT-TOKEN CLEAN-RIGHT-BRACKET FILLARRAY INITSYM REMOVE-IRRELEVANT COVER-CONDI-NORM QUERY-ADD-EQN GET-SKO-FUNC SUBSTVARFOR INIT-BOOL-OPS SUMYMAX))
(setf (callers-list 'PARSE-LOOP-MAP :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'FOPC-STRA :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'LAST :callers) '(PRINT-NODE SHOW-TREE REFUTE-EQN POLY-SUPER-AT-*-1 POLY-SUPER-AT-* LINEAR CLEAN-HISTORY))
(setf (callers-list 'ADD-ASSOCIATE-LIST :callers) '(X_ADD-RULE3 POLY-ADD-HOMO-RULES ADD-RULE3 ENABLE-RULE MAKE-CYCLE-RULE))
(setf (callers-list 'NAME-LAST-RULE :callers) '(RRL-AUX))
(setf (callers-list 'IS-SUBT :callers) '(ACO-LPRO>= ACO-LRPO>))
(setf (callers-list 'PARTITION-OPS-BY-TYPE :callers) '(GET-BASIC-TYPE-TERMS))
(setf (callers-list 'SIZE-DEPTH-STR :callers) '(CRIT-STRATEGY-OPTIONS))
(setf (callers-list 'COVER-UNCONDI-NORM :callers) '(COVER-NORMALIZE))
(setf (callers-list 'QUASI-REDUCIBLE :callers) '(CONSISTENT-CHECK-QUASI CONSISTENT-RULE))
(setf (callers-list 'HEAD_OF_FRI :callers) '(X_PROVER))
(setf (callers-list 'NEXT-TOKEN :callers) '(TOKEN-EOLN MAKE-BUFFER GET-TERM-ARGS GET-VARLIST GET-ITEM GET-RHS CONDI-FROM-CLAUSE GET-CLAUSE GET-EQUATION READ-TYPE-RELATION READ-ARITY))
(setf (callers-list 'POLY-SIMPLIFY :callers) '(SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-SIMPLIFY PRED-CRITICAL-PAIR REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-AT-ROOT-ONE-RULE APPLYSUBST-PRE IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS COVER-NORM-TERM FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'AC-DISTRI :callers) '(AC-DISTRI DISTR-AC-ORDER))
(setf (callers-list 'ADD-TIME :callers) '(INDUC-PROVE PROVE SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR ORDER-ASS PURE-ORIENT-AN-EQN ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-AT-ROOT-ONE-RULE PURE-PROCESS-EQUATION PROCESS-EQUATION START-KB APPLYSUBST-PRE PARA-SUP-TERM2 IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 COVER-NORM-TERM COVER-NORM-ORDER INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN PROCESS-ASS-SIMPLE BRT UNIFY UNIFIER UNIFIERS DIO2 DIO FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'COVER-CONDI-NORM :callers) '(COVER-CONDI-NORM COVER-NORMALIZE))
(setf (callers-list 'PRIME-ACU-CHOICE :callers) '(FASTKB-CHOICES))
(setf (callers-list 'ENABLE-RULE :callers) '(ORIENT-INDUC-HYPO))
(setf (callers-list 'NON-LINEAR-VARS :callers) '(IS-LINEAR RULE-DESTROYABLE))
(setf (callers-list 'INT-RULE-STRAT :callers) '(CRIT-STRATEGY-OPTIONS))
(setf (callers-list 'NULL :callers) '(SHOW-TREE X_COVER-PROOF-PROCESS2 SUCC-END-INDUC REDUCTION-PROOF COVER-PROOF-PROCESS2 PROOF-BY-HINT-TERM COVER-SET-SCHEME X_AUTO_INDUC ADD-SUGG-TYPE COMPLETE-WELL-TYPED WELL-TYPED IS-CONSTANT-TERM PSEUDO-TERM-ORDERING IS-LINEAR SUBS-ARE-PRIMITIVE IS-LIMITED DEPTH IS-SUBTERM RPL-BY-TERMS2 RPLAT-IN-BY W-SIZE SIZE IS-GROUND ALL-VARS ALL-OPS IS-VALID-OP FIXUP-QUANTIFIED-FORMULA QUASI-REDUCIBLE QUASI-EQUIVALENT TOP-TERM DESTROYABLE GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE EXTEND-DEF-DOMAIN GET-SCHEMES TEST-ONE-OP COMPLETE-TEST START-TEST APPLY-TO2 COMPOSE FIND-IN-ORDERED-LIST SLOOP-SLOOP-MACRO PARSE-LOOP-MAP PARSE-LOOP-FOR ADD-FROM-DATA LOOP-ADD-TEMPS LOOP-DECLARE-BINDING LOOP-ADD-BINDING LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-ONE-WHEN-CLAUSE PARSE-NO-BODY PARSE-LOOP1 LOOP-LET-BINDINGS LCASE SUBSUMED-TUPLE INDUC-SUBS-TERM ALL-NONVARS REF-INSTANCE-SEEDS NEGATE-EQN UNCONDI-PROVE PROVE IS-EQ-TRUE-PRE MERGE-PREMISES NEGATE-ONE-PRE ONE-PREMISE-IS-TRUE ADD-PREMISE-END MAKE-BETTER-PRE NORM-ONE-PRE FIRST-VAR-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES ADD-SUGG NORM-POLY IS-CHARACTER-RULE INSERT-SORT-ARG P-*-M M-*-P M-*-M POLY-SIMPLIFY CHOOSE-BY-HAND DETACHMENT-SUPER DETACHMENT-CRITICAL DETACHMENT-RULE IDEM-SUPERPOSITION WRITE-F-RHS WRITE-RHS WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN TOTAL-ORDER-RES TOTAL-ORDER-PC-RES COMPARE-TERM COMP-TERMS SIZE-COMPARE ORDER-ASS MAKE-EQ COMP-EQN COMP-RULE ASK-USER ORIENT-RULE NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX SIMPLIFY-COND-TERM REDUCE-COND-TERM SIMPLIFY-MY-EQ-TERM LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE SUB-TEST NOT-IN-SET MR SUB1-MODULO-N ADD1-MODULO-N PROPER-PRODUCT-LISTS PRODUCT-LISTS MATCH-PREMISE EQ-MATCH AC-MATCH APPLIES IS-CONDI-DOMINATE-RULE MAKE-RULE-SIZE-ORDER RPOMULT PURE-LRPO LRPO ADD-RULE-LINEAR ADD-RULE PROCESS-EQUATION READ-THIS-EQN IS-EMPTY-LINE GET-ATOM SKIP-EOLN READ-EQNS AND-LHS-TRUE-RHS NORMAL-PROVE LOAD-RRL CLEAN-HISTORY UNDO START-HISTORY FILLARRAY TYIPEEK READC INSERT MERGE-LIST IF* PARAMODULATE EQ-JOIN EQ-ADD CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE UNIT-RULE ACCEPTABLE-PAIR PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION AC-CRITPAIRS TRACE-INCONSISTENCY CONSISTENT-CHECK-QUASI CONSISTENT-PAIR CONSISTENT-CHECK IS-INCONSI-PAIR REMOVE-IRRELEVANT3 EQN2PRE MAKE-ONE-BUILD SUBSUMED-PREMISES ADD-EXTRA-PREMISE COVER-NORM-TERM COVER-NORM-UNCONDI-EQN COVER-NORM-ORDER PRINT-NORMALIZED-EQN COMMUNE-TERMS2 COMMUNE-TERMS IS-COMMUT-PAIR IS-P-COMMUT-PAIR AVOIDABLE DIVISIBLE-AC-CHECK BUILDING CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT INDUC-ADD-RULE NEGATE-XOR-ARGS TRIVIAL-SIMPLIFY AND-OF-MONOMIALS SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT M-AND-P M-AND-M INSERT-AND-REMOVE-PAIRS NOT-ARG FIRST-TRANS SIMP-FIRST-TRANS BA-SIMP-NOT BA-SIMPLIFY NEW-FIRST-TRANS NEW-TRANS-SIMP CAN-HAVE-NEW-OP AUTO-ORIENT ACUNI UNIFY-WITH-AC ACO-RPOMULT>= ACO-RPOMULT> ACO-LPRO>= ACO-LRPO> AC-DISTRI ACLRPO FLATTEN-RULES MAKE-FLAT WRITE-COMMENT-RHS WRITE-COMMENT-EQN))
(setf (callers-list 'GET-DEF-DOMAIN :callers) '(RULE-DESTROYABLE GET-SCHEMES TEST-ONE-OP IS-PARTIAL-OP))
(setf (callers-list 'SET-CRIT-MARK :callers) '(CHOOSE-BY-HAND))
(setf (callers-list 'INFIXP :callers) '(WRITE-TERM-SIMPLE))
(setf (callers-list 'ORDER-ASS :callers) '(PROCESS-ASS-SIMPLE))
(setf (callers-list 'MINUS :callers) '(TRACE-HYPOTHESE))
(setf (callers-list 'COMPARE-ITEM :callers) '(COMPARE-ITEM-RESULT))
(setf (callers-list 'GET-VARLIST :callers) '(GET-ITEM))
(setf (callers-list 'CHAR-HANDLER :callers) '(CHAR-HANDLER))
(setf (callers-list 'INDUC-ADD-RULE :callers) '(ADD-RULE INDUC-ORIENT-AN-EQN))
(setf (callers-list 'T :callers) '(=-SLOOP-FOR IN-ARRAY-SLOOP-FOR PARSE-LOOP-FOR PARSE-LOOP-COLLECT PARSE-LOOP-WHEN PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-WITH PARSE-NO-BODY PARSE-LOOP1))
(setf (callers-list 'COLLECT :callers) '(PARSE-LOOP-COLLECT))
(setf (callers-list 'EQ-JOIN :callers) '(EQ-JOIN EQ-ADD))
(setf (callers-list 'SYMMETRY-NON-DELETABLE :callers) '(ONE-COMPOSITION))
(setf (callers-list 'WRITE-EQN :callers) '(SHOW-NODE WRITE-NODE SUCC-END-INDUC X_GET_INDUC_TERM X_AUTO_INDUC LIST_NODE INDUC-PROVE PROVE INSTANTIATE-LHS MANUAL-ORIENT CTX-GT-LHS ORDER-CTX TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE ASSERTION2EQUATION NORMALIZE INVALID-RULE PURE-PROCESS-EQUATION PROCESS-EQUATION TRACE-HYPOTHESE TRACE-CRIT TRACE-FACTOR TRACE-DROPPED-PREMISES MAKE-ONE-DOWN-HILL INDUC-ADD-RULE MAKE-ASS-COM-OP))
(setf (callers-list 'DISABLE-RULES-AUX :callers) '(ENABLE-RULES DISABLE-RULES))
(setf (callers-list 'TOKEN-EOLN :callers) '(X_READ_TERM READ-THIS-EQN NEXT-TOKEN READ-T-TERM GET-TERM))
(setf (callers-list 'ENDP :callers) '(SEARCH_BY_EQN SEARCH_BY_ID BREADTH-SEARCH PRINT-NODE REDUCTION-PROOF CHECK_AND_ADD X_AUTO_INDUC X_INDUC))
(setf (callers-list 'TERPRI :callers) '(REWRITE-ONCE-BY-HYPO X_COVER-PROOF-PROCESS2 SUCC-END-INDUC X_GET_INDUC_TERM X_READ_TERM DEBUG-MSG TRACE-GENERATED-RESULT COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-SET-SCHEME HEAD_OF_MANUAL_INDUC HEAD_OF_FAILURE_HANDLER X_FAILURE_HANDLER X_AUTO_INDUC LIST_NODE LIST_TREE WAIT-RETURN DISP_TREE PRINT_STR HEAD_OF_FRI X_HYPOTHESIS EXT-TYPE-RELATION EXPECT-ARITY21 EXPECT-ARITY12 EXPECTED CHECK-ARITY ENSURE-PREDICATE INPUT-TYPE-CHECK BAD-TYPED EXPECTING-PREDICATES TRACE-TESTSET TEST-ONE-OP START-TEST REFUTE-EQN REFUTED-RESULT CHOOSE-CONSTRUCTORS INDUC-PROVE UNCONDI-PROVE PROVE PRINT-SUGG-INFO POLY-INITIALIZE LAST-CHECK-2ND-RULE MAN-PICK-2ND-RULE CHOOSE-BY-HAND WRITE-DETAIL-RULE WRITE-F-PREMISES WRITE-PREMISES WRITE-DISJUNCTIONS WRITE-ASSERTION WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE OPEN-WRITE-FILE WRITEF-SYS DISPLAY ORDER-ASS INSTANTIATE-LHS MANUAL-ORIENT ASK-USER CTX-GT-LHS ORDER-CTX TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA NORMALIZE-BOUND TIME-LIMIT-STRA BRAKE-CHOICE POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE FASTKB-CHOICES WARN-STAT TRY-MAKE-EQUI EXT-EQUIVALENCE EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-STATUS EXT-WEIGHT EXT-PRECEDENCE NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR FOPC-STRA IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS PRINT-WARNING MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS DISPLAY-CONSTRUCTORS CYCLE-CHECK NORMALIZE-ONE-EQN ASSERTION2EQUATION NORMALIZE LINEAR ASK-FOR-OPERATOR INVALID-RULE RUNTIME-MAX-WARNING ADD-RULE3 ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE PURE-PROCESS-EQUATION PROCESS-EQUATION START-KB INVALID-INPUT-WARNING READ-THIS-EQN OK-TO-CONTINUE SAVE-WORD-END READ-T-TERM READ-TYPE-RELATION READTEQNS OPEN-READ-FILE DISPLAY-OP-STATS DISPLAY-KB-STAT GIVE-STAT NAME-LAST-RULE DATE TEST-RRL QUIT-RRL CLOSE-LOG DELETE-SYS RRL-AUX START-UP RESET-RRL MARK TRACE-SUCC-PROVE TRACE-HYPOTHESE PROVE-SPLIT-BOOL LOAD-RRL CLEAN-HISTORY UNDO PUSH-HISTORY TRACE-PARA MAKE-CYCLE-RULE TRACE-CRIT TRACE-AC-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS TRACE-INCONSISTENCY INCONSISTENT-EQN CONSISTENT-RULE TRACE-FACTOR TRACE-REMOVE-IRRELEVANT4 TRACE-DROPPED-PREMISES MAKE-ONE-DOWN-HILL HEAD-LESS-THAN-PRES PRINT-CURRENT-PREMISES PRINT-NORMALIZED-EQN MAKE-P-COMMUT-RULE TRACE-DIVISIBLE TRACE-BUILDING INDUC-REDUCE-OTHERS-AUX ADD-CONDI-DOMINATE-RULE INDUC-ADD-RULE POSTPONE-OR-UNDO POSTPONE-IT CAN-HAVE-NEW-OP ONE-COMPOSITION MAKE-ASS-COM-OP SET-HANDLE-AND SET-ART-MODE WRITE-COMMENT-PREMISES WRITE-COMMENT-EQN))
(setf (callers-list 'SPLIT-RHS-OR :callers) '(PROVE-SPLIT-BOOL))
(setf (callers-list 'LHS-VARS :callers) '(INDUC-ADD-RULE))
(setf (callers-list 'FLATTEN-PREMISES :callers) '(FLATTEN-EQN))
(setf (callers-list 'CDDDDR :callers) '(WRITE-DETAIL-RULE))
(setf (callers-list 'ACO-RPOSTATUS> :callers) '(ACO-LRPO>))
(setf (callers-list 'RENAME-VAR1 :callers) '(RENAME-VARY RENAME-VAR))
(setf (callers-list 'CONSTRUCTORP :callers) '(EXT-CONSTRUCTOR))
(setf (callers-list 'NORM-TERM :callers) '(NORM-EQ-ARGS NORM-BOOL-INNERMOST NORM-CTX COVER-NORM-TERM))
(setf (callers-list 'ASSOC :callers) '(IS-EXIST-TYPE-NAME IS-SUBTYPE ADD-SUGG-TYPE WELL-TYPED-VAR W-SIZE GET-DOWN APPLY-TO2 LOOP-DECLARE-BINDING LOOP-ADD-BINDING POINTER-FOR-COLLECT FORM-PATTERNS-SINGLE MERGEBLE-TERMS DEPENDED-OP DEFINING-POSITIONS HAVE-MANY-RECURSIVE-EQNS GET-RECURSIVE-DEF-TERM GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS INDUCTIBLE INDUC-SUBS-TERM ADD-SUGG UPDATE-BY-EQ IS-REL-PREC PC-GRT-PREC GRT-PREC POLY-SIZE IS-CHARACTER-RULE POLY-MATCH-+ IS-BIG-ENOUGH-RULE WRITE-VARIABLE ADD-EQU EXT-DIVISIBLE NAME2RULENUM GET-VAR-SUBSTITUTION TR-ADD CYCLE-REDUCE-TERM DIVISIBLE-CHECK ELIMINATE-SUB FREE-SUBTERMS IS-ELIM-TERM GET-SKO-FUNC SKOLEMIZE-AWAY-QUANTS))
(setf (callers-list 'INDUC-SUBS-OF-EQN :callers) '(CHOOSE-BEST-SCHEMES))
(setf (callers-list 'NTHCDR :callers) '(POLISH-PREMISES))
(setf (callers-list 'NEGATE-EQN :callers) '(REFUTE-EQN))
(setf (callers-list 'READ-OP-DECLARATION :callers) '(READ-ARITY))
(setf (callers-list 'SYS-FLAG-INIT :callers) '(EXT-AC EXT-COMMUTATIVE START-KB))
(setf (callers-list 'PRE-VARS :callers) '(VAR-CONSISTENCY BIG-PRE-INFO))
(setf (callers-list 'NOT :callers) '(X_COVER-PROOF-PROCESS2 X_READ_TERM COVER-INDUC-PROVE ABSTRACT-PROOF X_AUTO_INDUC X_PREPARE_RULES X_REDUCE-BY-ONE-RULE GET-DOMAIN-TYPE PSEUDO-TERM-ORDERING IS-LIMITED TERM-SIZE-ORDER SET-UP-ARITY2 IS-VALID-OP CHECK-ARITY FIXUP-QUANTIFIED-FORMULA ENTER-OP ENSURE-PREDICATE EXPECTING-PREDICATES EXPECTING-FUNCTIONS RULE-DESTROYABLE DESTROYABLE ONE-EXTENSIBLE-TYPE-POINT GET-TESTSET IS-PARTIAL-OP COMPLETE-TEST START-TEST PARSE-LOOP-FOR MAKE-VALUE THE-TYPE PARSE-LOOP-COLLECT PARSE-LOOP-WITH INDUCTIBLE INDUC-SUBS-TERM CLOAD2 CLOAD ALL-NONVARS CHOOSE-CONSTRUCTORS PROVE IS-EQ-FALSE-PRE NEGATE-ONE-PRE MAKE-PRE-EQN ADD-PREMISE-END MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRINT-SUGG-INFO IS-REL-PREC POLY-INITIALIZE POLY-SUPER-DISTRIBUTION POLY-SUPER-AT-*-1 NONDO-CRIT LAST-CHECK-2ND-RULE MAN-PICK-2ND-RULE PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE IDEM-SUPER-COMMU PRED-FUNC-SUPERPOSITION PRED-SUPERPOSITION WRITE-DETAIL-RULE WRITE-TERM-SIMPLE WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN OPEN-WRITE-FILE WRITEF-SYS TOTAL-ORDER-ATOM ORDER-ASS MAKE-EQ ASK-USER TRY-TO-ORIENT2 TRY-TO-ORIENT TRY-TO-ORIENT-CONDI PURE-ORIENT-AN-EQN ORIENT-AN-EQN BRAKE-CHOICE FASTKB-CHOICES EXT-EQUIVALENCE EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-DIVISIBLE EXT-CONSTRUCTOR NORM-STRATEGY FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX SIMPLIFY-COND-TERM REDUCE-COND-TERM NORM-RHS ADD-REST-ARGS SIMPLIFY-MY-EQ-TERM LAST-CONSISTENCY-CHECK PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL NORMALIZE IS-NORMAL ANS-MEMBER SUB-TEST LINEAR CAR-NUM-ORDER IS-SUBSEQUENCE MATCH-BOOL-NEW ASK-FOR-OPERATOR INVALID-RULE IS-VALID-RULE RUNTIME-MAX-WARNING ADD-RULE3 ADD-RULE-LINEAR ADD-RULE-COMPLETE ADD-RULE PROCESS-EQUATION IS-PURE-INPUT START-KB READ-THIS-EQN SKIP-EOLN TOKEN-EOLN NEXT-TOKEN READ-T-TERM NEGATE-LITERAL GET-CLAUSE READ-INPUT DELETE-SYS NORMAL-PROVE PREMISE-INSTANCE PUSH-HISTORY START-HISTORY INSERT IF* PARAMODULATE IS-CYCLE-EQN UNIT-RULE MAKE-PAIRS ACCEPTABLE-PAIR INDUC-IDEM-SUPERPOSITION INDUC-SUP-TERM SUP-TERM2 PURE-SUP-TERM SUP-TERM PURE-SUPERPOSITION FUNC-SUPERPOSITION CRITPAIRS CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-RULE CONSISTENT-CHECK DOWN-HILL-ONE LRPO-PREMISES HEAD-LESS-PRE JUSTIFY-EQN EQN2PRE MAKE-ONE-BUILD NO-SUBSUMPTION ADD-EXTRA-PREMISE COVER-CONDI-NORM COVER-NORM-TERM COVER-NORM-UNCONDI-EQN PRINT-NORMALIZED-EQN REDUCE-BY-P-COMMUT2 NEW-RULE-FROM-ASSOC DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT INDUC-REDUCE-OTHERS-AUX INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE M-XOR-P M-XOR-M M-AND-P M-AND-M NOT-ARG OR-ARGS AUTO-ADD-STATUS PLAUSIBLE UNIFY-WITH-AC UNIFY ONE-COMPOSITION LOOSE-SYM-SEQUENCE IS-ASSOC-PAIR SUB-NONVARS2 SUBST-EQN WRITE-COMMENT-EQN))
(setf (callers-list 'NODE-LABEL :callers) '(ADD_CHILD BREADTH-SEARCH PRINT-NODE X_INITIAL))
(setf (callers-list 'COVER-NORM-ORDER :callers) '(PROCESS-EQUATION))
(setf (callers-list 'READ-CHAR :callers) '(IS-EMPTY-LINE GET-ATOM2 GET-ATOM SKIP-EOLN READC))
(setf (callers-list 'FORMAT :callers) '(SHOW-TREE X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 X_AUTO_INDUC LIST_NODE DISPLAY-ONE-ARITY2 EXT-TYPE-RELATION EXPECT-ARITY21 EXPECT-ARITY12 ENSURE-PREDICATE INPUT-TYPE-CHECK EXPECTING-PREDICATES TRACE-TESTSET TEST-ONE-OP DEF-LOOP-INTERNAL FCLOAD CLOAD BLOAD FLOAD REFUTE-EQN CHOOSE-CONSTRUCTORS LAST-CHECK-2ND-RULE MAN-PICK-2ND-RULE CHOOSE-BY-HAND RULE-NAME WRITE-DETAIL-RULE PRINT-ATOMS WRITE-VARIABLE WRITE-ASSERTION WRITE-GOAL-EQN WRITE-EQN WRITE-GOAL-RULE WRITE-RULE OPEN-WRITE-FILE DISPLAY ORIENT-RULE POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA NORMALIZE-BOUND TIME-LIMIT-STRA POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE WARN-STAT TRY-MAKE-EQUI EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-OPERATOR EXT-PRECEDENCE NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL CYCLE-CHECK LINEAR INVALID-RULE READ-THIS-EQN OK-TO-CONTINUE READ-TYPE-RELATION OPEN-READ-FILE DISPLAY-OPS DISPLAY-KB-STAT GIVE-STAT TEST-RRL QUIT-RRL CLOSE-LOG REPORT-CURRENT-TIME RRL-AUX WRITE-SEQ-NUM TRACE-HYPOTHESE UNDO PUSH-HISTORY MAKESYM TAB TRACE-PARA PAIR-INFO TRACE-CRIT TRACE-AC-SUPERPOSITION TRACE-BUILDING INDUC-ADD-RULE MAKE-ASS-COM-OP SET-HANDLE-AND SET-ART-MODE))
(setf (callers-list 'COPY-TREE :callers) '(PROOF-UNDER-NEW-PREMISES PARSE-LOOP-FOR PARSE-LOOP TRY-SUGG-PREC PRED-FUNC-SUPERPOSITION))
(setf (callers-list 'DOLIST :callers) '(PRINT-NODE SHOW-TREE DEBUG-MSG DISP_STRINGS SLOOP-SLOOP-MACRO PARSE-LOOP-DECLARE LOOP-DECLARE-BINDING LOOP-ADD-BINDING PARSE-LOOP-INITIALLY PARSE-LOOP CRRL LRRL PRINT-NORMALIZED-EQN))
(setf (callers-list 'SECOND-ARG :callers) '(PROOF-UNDER-NEW-PREMISES FREE-VARS EXPECTING-PREDICATES EXPECTING-FUNCTIONS REVERSE-PREMISE MAKE-BETTER-PRE SIMPLIFY-ONE-PRE DETACHMENT-CRITICAL ORDER-ASS SIMPLIFY-COND-TERM REDUCE-COND-TERM SIMPLIFY-MY-EQ-TERM LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL ASSERTION2EQUATION MATCH-POSS SPLIT-RHS-OR SPLIT-RHS-AND INDUC-IDEM-SUPERPOSITION COVER-NORM-UNCONDI-EQN IS-COMMUT-PAIR INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT REMOVE-LEFT-ARG2 REMOVE-RIGHT-ARG2 RIGHT-ARG2 REMOVE-LEFT-ARG RIGHT-ARG SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS TRIVIAL-SIMPLIFY OR-COUNT IS-ASSOC-PAIR))
(setf (callers-list 'PRINT-NORMALIZED-EQN :callers) '(REDUCTION-PROOF COVER-NORMAL-PROOF))
(setf (callers-list 'PRINT-CHOICE-MESSAGE :callers) '(REFUTE-EQN MAN-PICK-2ND-RULE POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA NORMALIZE-BOUND TIME-LIMIT-STRA POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE EXT-DIVISIBLE EXT-CONSTRUCTOR NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL LINEAR OK-TO-CONTINUE SET-HANDLE-AND SET-ART-MODE))
(setf (callers-list 'BASIC-TERM :callers) '(TOP-TERM GET-SCHEMES STR-FORMULATE-SCHEME))
(setf (callers-list 'IS-SUBSET :callers) '(STRONG-SUBGOAL-PROOFS INDUC-SUBGOAL-PROOFS IS-SUBTERM POLY-SUPER-AT-*-0 COMPARE-TERM ASK-USER CHECKEQ-NORMAL ADD-OPERATOR IS-VALID-RULE LRPO-PREMISES COVER-NORM-UNCONDI-EQN IS-ASSOC-PAIR))
(setf (callers-list 'QUASI-REMOVER :callers) '(TEST-ONE-OP))
(setf (callers-list 'REDUCE-BY-PREMISES-AT-ROOT :callers) '(BOOL-REWRITE-AT-ROOT REDUCE-AT-ROOT))
(setf (callers-list 'WRITE-ASSERTIONS :callers) '(WRITEF-SYS))
(setf (callers-list 'UNIFY-WITH-AC :callers) '(ACUNI UNIFY))
(setf (callers-list 'HEAD_OF_MANUAL_INDUC :callers) '(X_MANUAL_INDUC))
(setf (callers-list 'HELP-FILE :callers) '(MANUAL-ORIENT ASK-USER RRL-AUX))
(setf (callers-list 'INFILE :callers) '(OPEN-READ-FILE))
(setf (callers-list 'FLATTEN-POST-ASS :callers) '(FLATTEN-RULES))
(setf (callers-list 'BA-SIMP-AND :callers) '(BA-SIMPLIFY))
(setf (callers-list 'TRUNCATE :callers) '(AVERAGE VARS-ONLY SPECIAL-SIZE DISPLAY-KB-STAT INSERT REDUCE-BY-P-COMMUT2))
(setf (callers-list 'AND-OF-MONOMIALS :callers) '(M-AND-M))
(setf (callers-list 'FIND-BASIS-VECTORS :callers) '(FULL-DIO))
(setf (callers-list 'ADD-FROM-DATA :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'SIMP-XOR-SIMP :callers) '(SIMPLIFY-ALMOST-FLAT))
(setf (callers-list 'INC :callers) '(GET-CLAUSE GET-EQUATION ONE-COMPOSITION))
(setf (callers-list 'POLY-SUPER-DISTRIBUTION :callers) '(AC-SUPERPOSITION))
(setf (callers-list 'UNITP :callers) '(PRED-SUPERPOSITION))
(setf (callers-list 'REMONCE :callers) '(PARA-SUP-TERM2 GET-SKO-FUNC))
(setf (callers-list 'GET-INTERSECTION-RANGE :callers) '(VARS-ONLY))
(setf (callers-list 'DIVISIBLE-AC-CHECK :callers) '(DIVISIBLE-CHECK2))
(setf (callers-list 'GET-ATOM :callers) '(GET-ATOM NEXT-TOKEN))
(setf (callers-list 'ON :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'PUSH-HISTORY-MANUAL :callers) '(MANUAL-ORIENT ASK-USER))
(setf (callers-list 'MAKE-P-COMMUT-RULE :callers) '(TRY-TO-ORIENT))
(setf (callers-list 'POLY-REDUCE-AT-ROOT-ONE-RULE :callers) '(REDUCE-BY-ONE-AT-ROOT CYCLE-REDUCE-AT-ROOT-4))
(setf (callers-list 'DECLARE :callers) '(PARSE-NO-BODY))
(setf (callers-list 'PARTITION-TERM-BY-TYPE :callers) '(GET-TESTSET))
(setf (callers-list 'DISPLAY-CONSTRUCTORS :callers) '(WRITEF-SYS))
(setf (callers-list 'FIND-MERGE-SIGMA :callers) '(MERGE-TWO-PATTERNS))
(setf (callers-list 'BUILD-EQUATION-FROM-PREMS :callers) '(MAKE-ONE-BUILD))
(setf (callers-list 'NEW-FIRST-TRANS :callers) '(NEW-FIRST-TRANS NEW-TRANS-SIMP))
(setf (callers-list 'PURE-CHECKEQ-NORMAL :callers) '(PURE-PROCESS-EQUATION))
(setf (callers-list 'WRITE-COMMENT-RHS :callers) '(WRITE-COMMENT-EQN))
(setf (callers-list 'PRE-CRIT-CHECKEQ :callers) '(PROCESS-CRITPAIR))
(setf (callers-list 'NEQ :callers) '(ABSTRACT-PROOF ENSURE-PREDICATE PROVE IS-REL-PREC PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE WRITE-DETAIL-RULE EXT-DIVISIBLE SIMPLIFY-MY-EQ-TERM NORMALIZE ADD-RULE-COMPLETE ADD-RULE TOKEN-EOLN NEXT-TOKEN NEGATE-LITERAL GET-CLAUSE CRITPAIRS JUSTIFY-EQN PLAUSIBLE))
(setf (callers-list 'LOOP-UN-POP :callers) '(PARSE-LOOP-MAP PARSE-LOOP-FOR PARSE-LOOP-COLLECT PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-DO PARSE-LOOP-WITH PARSE-NO-BODY))
(setf (callers-list 'RUN-TIME :callers) '(REPORT-CURRENT-TIME RRL-AUX))
(setf (callers-list 'ADD-SUGG :callers) '(AUTO-ADD-PREC))
(setf (callers-list 'ADD-RULE3 :callers) '(ADD-RULE-LINEAR ADD-RULE-COMPLETE PURE-ADD-RULE))
(setf (callers-list 'BREAK-ASS :callers) '(PROCESS-ASS1))
(setf (callers-list 'NEW-AC-SUPER-SAME :callers) '(AC-SUPERPOSITION))
(setf (callers-list 'CDAR :callers) '(LOOP-LET-BINDINGS TRANSLATE-NAME REF-INSTANCE-SEEDS WRITE-SIGMA WRITE-TERM-SIMPLE NORMAL-FORM-SUB))
(setf (callers-list 'STRING-EQUAL :callers) '(NORM-BOOL-INNERMOST))
(setf (callers-list 'SEARCH_BY_ID :callers) '(SEARCH_BY_ID X_MANUAL_INDUC))
(setf (callers-list 'NORMALIZE :callers) '(PROCESS-EQUATION))
(setf (callers-list 'GET-ARITY :callers) '(GET-CODOMAIN-TYPES EXPECT-ARITY12 SET-UP-ARITY2 IS-INFIX-OP CHECK-ARITY BASIC-TERM DECIDE-DEFIN-MODE EXT-DIVISIBLE IS-CONSTANT-OP NORM-BOOL-INNERMOST GREATER-ARITY AUTO-ADD-PREC IS-ASSOC-PAIR))
(setf (callers-list 'CDDR :callers) '(STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 FORM-SUBGOALS-FROM-PATTERNS COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM INDUC-SUBGOAL-PROOFS X_AUTO_INDUC X_AUGMENT REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE WELL-TYPED-EQN IN-ARRAY-SLOOP-FOR SUBSUMED-TUPLE MERGE-TWO-PATTERNS MERGEBLE-TERMS OPS-OF-RULE CAR-LENGTH-CDDR HAVE-MANY-RECURSIVE-EQNS GET-RECURSIVE-DEF-TERM INDUC-SUBS-OF-EQN PROVE MARK-USED-PRE NEGATE-ONE-PRE NORM-ONE-PRE IS-HOMOGENEOUS-TERM IS-CHARACTER-RULE POLY-REDUCE-AT-ROOT-ONE-RULE DETACHMENT-SUPER DETACHMENT-RULE IDEM-SUPER-COMMU PRED-SUPERPOSITION WRITE-DETAIL-RULE WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE MAKE-EQ COMP-EQN COMP-RULE MAKE-CRIT-RULE ASK-USER ORIENT-RULE ORIENT-AN-EQN DISPLAY-CONSTRUCTORS REDUCE-AT-ROOT-BOOL REDUCE-BY-ONE-AT-ROOT TRY-ONE-EXTRA-VAR-RULE TRY-ONE-RULE LAST-CONSISTENCY-CHECK OCCURS-IN-RULE ADD-OPERATOR CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE FIRST-PROCESS-EQN READ-THIS-EQN R2E AND-LHS-TRUE-RHS IS-PREVIOUS-INDUC-EQN APPLYSUBST-PRE APPLYSUBST-EQN NORMAL-PROVE PREMISE-INSTANCE SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE RENAME-EQN-RULE CLEAN-HISTORY INSERT IF* CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE IS-SYMMETRY-EQN IS-CYCLE-EQN ACCEPTABLE-PAIR PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION SUP-TERM2 PURE-SUPERPOSITION FUNC-SUPERPOSITION SUPERPOSITION AC-CRITPAIRS RULE-NUMS-FROM-SOURCE INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK REMOVE-IRRELEVANT3 OR-CONDI-EQN HEAD-LESS-THAN-PRES MAKE-ONE-BUILD ADD-EXTRA-PREMISE COVER-CONDI-NORM PRE-CRIT-CHECKEQ COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE PRINT-NORMALIZED-EQN IS-P-COMMUT-PAIR NEW-RULE-FROM-ASSOC REMOVE-ONE-ARG DIVISIBLE-AC-CHECK ELIMINATE-SUB ELIMINABLE-TERMS REMOVE-VAR-PRES CHECK-BUILD-RULE HAVE-BOOLEAN-CONSTANT FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHERS-AUX QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE AUTO-ORIENT LOOSE-SYM-SEQUENCE FLATTEN-EQN FLATTEN-RULE EQN-SUB-NONVARS SUBST-EQN WRITE-COMMENT-EQN))
(setf (callers-list 'READ-PRESERVING-WHITESPACE :callers) '(READ-ATOM GET-ATOM2))
(setf (callers-list 'CLEAN-HISTORY :callers) '(RRL-AUX))
(setf (callers-list 'PROBE-FILE :callers) '(FCLOAD CLOAD2 CLOAD BLOAD FLOAD FILE-DATE OPEN-WRITE-FILE INFILE))
(setf (callers-list 'PROOF-BY-HINT-TERM :callers) '(COVER-PROOF-PROCESS2))
(setf (callers-list 'CONDI-FROM-CLAUSE :callers) '(CONDI-FROM-CLAUSE GET-CLAUSE))
(setf (callers-list 'IS-CONSTANT :callers) '(DEFAULT-PRECEDENCE))
(setf (callers-list 'GET-SKELETON2 :callers) '(GET-SKELETON2 GET-SKELETON))
(setf (callers-list 'CLOSE :callers) '(WRITEF-SYS READ-ATOM READFEQNS CLOSE-LOG LOAD-RRL))
(setf (callers-list 'HAS-HINT-TERM :callers) '(COVER-PROOF-PROCESS2))
(setf (callers-list 'REDUCE-XOR-TERM :callers) '(REDUCE-AT-ROOT-BOOL BOOL-REWRITE-AT-ROOT))
(setf (callers-list 'IS-FREE-TERM :callers) '(FREE-SUBTERMS))
(setf (callers-list 'PARSE-LOOP-WITH :callers) '(PARSE-LOOP-WITH PARSE-NO-BODY))
(setf (callers-list 'MATCH :callers) '(MATCH-PREMISE APPLIES SAME-NONVAR SUBSUMED-PREMISES))
(setf (callers-list 'IM-DEL-RULES :callers) '(CRIT-STRATEGY-OPTIONS))
(setf (callers-list 'PARAMOD-STR :callers) '(FOPC-STRA CRIT-STRATEGY-OPTIONS))
(setf (callers-list 'LEFT-ARG :callers) '(DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK))
(setf (callers-list 'STRING :callers) '(OPEN-WRITE-FILE OUTFILE INFILE))
(setf (callers-list 'PRINT-SUGG-INFO :callers) '(ASK-USER))
(setf (callers-list 'NODE-STATUS :callers) '(ADD_CHILD SHOW-TREE X_COVER-PROOF-PROCESS2 X_INITIAL REDUCTION-PROOF COVER-PROOF-PROCESS2 COVER-INDUC-PROVE X_AUTO_INDUC LIST_NODE MANUAL_REDUCE))
(setf (callers-list 'READ-THIS-EQN :callers) '(X_AUGMENT X_ONE_RULE PROVE))
(setf (callers-list 'CRIT-STRATEGY-OPTIONS :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'TRY-SUGG-PREC :callers) '(ASK-USER))
(setf (callers-list 'UNION :callers) '(ADD-EQU CTX-DOMINANT-RULE TR-ADD EQ-JOIN EQ-ADD ACLRPO))
(setf (callers-list 'LCASE :callers) '(SLOOP-SLOOP-MACRO =-SLOOP-FOR IN-ARRAY-SLOOP-FOR PARSE-LOOP-FOR LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP-COLLECT PARSE-LOOP-WHEN PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-INITIALLY PARSE-LOOP-WITH PARSE-NO-BODY PARSE-LOOP1))
(setf (callers-list 'IS-EXIST-TYPE-NAME :callers) '(READ-TYPE-RELATION))
(setf (callers-list 'SET-MACRO-CHARACTER :callers) '(CHAR-HANDLER))
(setf (callers-list 'INSERT-TERM-AT-RIGHT :callers) '(INSERT-TERM-AT-RIGHT NEW-RULE-FROM-ASSOC))
(setf (callers-list 'PRINT-ATOMS :callers) '(REFUTE-EQN KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA EQ-PRE-STRAT OPERATOR-STRA POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE EXT-DIVISIBLE NORM-STRATEGY SIZE-DEPTH-STR RESTRICT-CRIT-STRA BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG LINEAR OK-TO-CONTINUE SET-HANDLE-AND SET-ART-MODE))
(setf (callers-list 'ACTUAL-UNIFY-ACTION :callers) '(ACUNI))
(setf (callers-list 'LUCID-RUNTIME-SUPPORT:BQ-LIST :callers) '(XIN-MENU IN-FRINGE-SLOOP-MAP COLLATE-SLOOP-COLLECT FIRST-USE-SLOOP-FOR IN-CAREFULLY-SLOOP-FOR SLOOP-SLOOP-MACRO =-SLOOP-FOR IN-ARRAY-SLOOP-FOR IN-PACKAGE-SLOOP-MAP IN-TABLE-SLOOP-MAP RETURN-SLOOP-MACRO REPEAT-SLOOP-MACRO AVERAGING-SLOOP-MACRO NEVER-SLOOP-COLLECT ALWAYS-SLOOP-COLLECT THEREIS-SLOOP-COLLECT COUNT-SLOOP-COLLECT MINIMIZE-SLOOP-COLLECT MAXIMIZE-SLOOP-COLLECT LOGXOR-SLOOP-COLLECT SUM-SLOOP-COLLECT DEF-LOOP-INTERNAL PARSE-LOOP-FOR MAKE-VALUE PARSE-LOOP-COLLECT PARSE-LOOP-WHEN PARSE-LOOP DESETQ DESETQ1 LCASE TIMES-CDR CHANGE-MONO-SIGN PRED-CRITICAL-PAIR ACM-AC-ROOT ACM-NO-ARG ACM-NONAC ACM-POLY-ONE-TO-MANY ACM-POLY-* ACM-AND-EQ ACM-VARIABLE GOOD-LUCK-CONDI INSERT-POLY-SIGMA POLY-SIGMA ADD-BIND-TO-SUB MAKE-RULE-FROM-ASS TIME-IN-SEC RUN-TIME DEFAULT-FLAG CHAR-ASCII PRINC0 PNTLEN APPEND1 GET_PNAME *THROW *CATCH ASET PUTPROP REMAINDER QUOTIENT MINUS NTHELEM SYMEVAL COPYSYMBOL COPY NEQUAL NEQ IF* SELECTQ CASEQ REMQ PARA-SUP-TERM2 ALL-PRE-VARS ARRANGE-EQ-ARGS PROCESS-DEL-RULE ASK-CHOICE ASK-NUMBER CROSS-PRODUCT COVER-OF EQUAL-TERM COLLECT-IF ALWAYS THEREIS IS-POLY IS-TYPE-PREDICATE FLAT-TERM IS-USED-PRE IS-HYPO-PRE MAKE-PRE GET-PRE-RHS GET-PRE-LHS GET-PREMISES IS-PREMISE-SET SORT-OF LAST-LETTER LETTERP ADD-END PUSH-END INSERT1 INC HALF-CANONICALIZE C-MATCH DOMAIN-RULEP PROCESS-ASSERTION PRINT-NAME SINGLE ONE-ARG TOKEN-TYPE TOKEN-TEXT TOKEN-PORT CUR-VAL GET-DEF-DOMAIN GUIDE-REDUCIBLE-TIME REDUCIBLE-TIME C-PERMU AC-EQUAL QUERY-INSERT ADD-ASSOCIATE-LIST ADD-TIME USER-SELECTQ CODE DRAIN-IT MY-UNTYI MY-TYO MY-TYI MY-TYIPEEK MY-PROBEF SKOLEMP REM-SKOLEM SET-SKOLEM PREDICATEP REM-PREDICATE SET-PREDICATE COMM-ROOT AC-ROOT REM-STATUS GET-STATUS SET-STATUS REM-ARITY2 GET-ARITY2 SET-ARITY2 REM-ARITY IS-CONSTANT SET-ARITY IS-RULE-SOURCE-TYPE CHANGE-RULE-SOURCE-TYPE INFIXP REM-INFIX SET-INFIX GET-RULES-WITH-OP RULES-WITH-OP REF-PRES-VARS LHS-VARS IS-GENERAL-RULE IS-REDUCTION RULE-SOURCE-TYPE RULE-SOURCE PAIRSWITH LHSIZE CHANGE-RULENO RULENO PRED-RULEP REF-EXTRA-PRE-VARIABLES SET-EXTRA-PRE-VARIABLES SET-NO-REDUCTION-MARK REF-SYMMETRY-VARS REF-SYMMETRY-TERMS CRIT-MARKED SET-SYMMETRY-MARK SET-CRIT-MARK IS-CONDI-RULE CTX RHS LHS MAKE-RULE IS-INPUT-ASS IS-ONEWAY SET-EQN-MARK ASSERTIONP IS-ASSERTION EQN2ASS ASS2EQN IS-PROP-EQN CHANGE-SOURCE EXCHANGE-LR CHANGE-CTX CHANGE-LHS-RHS-CTX CHANGE-LHS-RHS CHANGE-RHS CHANGE-LHS IS-SOURCE-TYPE EQN-SOURCE-TYPE EQN-SOURCE IS-CONDI-EQN EQN-CTX MAKE-EQN NULL-CTX TRUEP NOT-FALSEP FALSEP APPLYSUBST UNITP SAME-PNAME IS-ROOTED-+ IS-BOOL-ROOT MAKE-TERMS NTHSUBT SAME-ROOT SAME-OP? SAME-OP SECOND-ARG FIRST-ARG NARGS NONVARP CONSTANT? ARGUMENTS VAR? VARIABLEP ARGS ARGS-OF OP-OF MAKE-TERM-1ARG MAKE-TERM PROCESS-AC-CRITICAL-PAIR MANY-ARGS2 SUBST-QUANT-FORM TRIVIAL-SIMPLIFY M-XOR-M OR-ARGS NEW-FIRST-TRANS ACO-RPOSTATUS>= ACO-RPOSTATUS> GENERAL-BASIS-VECTORS LOOP-RETURN WHEN-ART-WITH-INPUT-FROM-TERMINAL))
(setf (callers-list 'RPLACA :callers) '(STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 FORM-SUBGOALS-FROM-PATTERNS COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM INDUC-SUBGOAL-PROOFS X_AUTO_INDUC X_AUGMENT REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE WELL-TYPED-EQN OPS-OF-RULE INDUC-SUBS-OF-EQN PROVE POLY-REDUCE-AT-ROOT-ONE-RULE CHOOSE-BY-HAND DETACHMENT-SUPER DETACHMENT-RULE IDEM-SUPER-COMMU PRED-SUPERPOSITION WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE MAKE-EQ COMP-EQN COMP-RULE MAKE-CRIT-RULE ASK-USER ORIENT-RULE ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL REDUCE-BY-ONE-AT-ROOT TRY-ONE-EXTRA-VAR-RULE TRY-ONE-RULE SUB1-MODULO-N ADD1-MODULO-N OCCURS-IN-RULE ADD-OPERATOR CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE FIRST-PROCESS-EQN R2E AND-LHS-TRUE-RHS IS-PREVIOUS-INDUC-EQN APPLYSUBST-EQN SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE RENAME-EQN-RULE INSERT ATTACH IS-CYCLE-EQN ACCEPTABLE-PAIR AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION SUP-TERM2 PURE-SUPERPOSITION FUNC-SUPERPOSITION SUPERPOSITION AC-CRITPAIRS INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK REMOVE-IRRELEVANT3 OR-CONDI-EQN HEAD-LESS-THAN-PRES ADD-EXTRA-PREMISE COVER-CONDI-NORM PRE-CRIT-CHECKEQ COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE PRINT-NORMALIZED-EQN NEW-RULE-FROM-ASSOC ELIMINATE-SUB ELIMINABLE-TERMS REMOVE-VAR-PRES CHECK-BUILD-RULE HAVE-BOOLEAN-CONSTANT FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHERS-AUX QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE END-AUTO-ORDER AUTO-ORIENT FLATTEN-EQN EQN-SUB-NONVARS SUBST-EQN WRITE-COMMENT-EQN))
(setf (callers-list 'READ-ARGS :callers) '(EXT-TYPE-RELATION TRY-SUGG-PREC SUPPORT-EQN EXT-OPERATOR EXT-WEIGHT EXT-PRECEDENCE DISABLE-RULES-AUX DELETE-EQN DELETE-RULE))
(setf (callers-list 'UNDO1 :callers) '(LOAD-RRL UNDO))
(setf (callers-list 'DECOMPOSE-TERMS :callers) '(PURE-MATCH MATCH NONAC-UNIFY DECOMPOSE-TERMS))
(setf (callers-list 'PRE-PROCESS-PREMISES :callers) '(PRE-PROCESS-PREMISES FIRST-PROCESS-PREMISES COVER-CONDI-NORM))
(setf (callers-list 'BOOL-MATCH-STR :callers) '(FOPC-STRA))
(setf (callers-list 'LISTP :callers) '(IS-VALID-OP IN-ARRAY-SLOOP-FOR PARSE-LOOP-FOR LOOP-ADD-TEMPS PARSE-LOOP-COLLECT PARSE-LOOP-INITIALLY PARSE-LOOP-DO L-EQUAL ORDER-PC-RES))
(setf (callers-list 'TIME-IN-SEC :callers) '(REPORT-CURRENT-TIME RRL-AUX))
(setf (callers-list 'INDUC-SUBS-TERM :callers) '(INDUC-SUBS-TERM INDUC-SUBS-OF-EQN))
(setf (callers-list 'INTERSECTION :callers) '(MERGEBLE-TERMS PRED-CRITICAL-PAIR TRY-MAKE-EQUI NEW-TERM CHANGE-VARS EQ-ADD AUTO-ADD-STATUS AUTO-MAKE-EQUI))
(setf (callers-list 'MAKE-PRE-XOR-ARGS :callers) '(MAKE-PRE-ASS))
(setf (callers-list 'ABSTRACT-PROOF :callers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 X_AUTO_INDUC))
(setf (callers-list 'AC-ROOT :callers) '(TOP-TERM SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT REDUCE-BY-PREMISE-AT-ROOT IS-CHARACTER-RULE OUTRED1 AC-C-ROOT ELIM-BIN MATCH-POSS SYMMETRY-TERMS MAKE-CYCLE-RULE IS-CYCLE-EQN MAKE-PAIRS IS-P-COMMUT-PAIR DIVISIBLE-CHECK2 PLAUSIBLE UNIFY-WITH-AC ACO-LRPO>))
(setf (callers-list 'LITERAL-NUM :callers) '(LITERAL-NUM TOTAL-ORDER-PC-RES MAKE-RULE-SIZE-ORDER SPECIAL-SIZE))
(setf (callers-list 'TYPE-ALL-VARS :callers) '(TYPE-VAR-LIST))
(setf (callers-list 'COVER-INDUC-PROVE :callers) '(INDUC-PROVE))
(setf (callers-list 'POST-ASS-LIST :callers) '(FOPC-STRA))
(setf (callers-list 'VARIABLEP :callers) '(GET-TERM-TYPE COMPLETE-WELL-TYPED WELL-TYPED TYPE-VAR-LIST ONE-TYPE-VAR-LIST GROUNDP PSEUDO-TERM-ORDERING IS-LIMITED RENAME-VAR1 RENAME-VARS DEPTH SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM OCCURS-IN IS-SUBTERM FREE-VARS W-SIZE SIZE IS-GROUND ALL-VARS ALL-OPS EXPECTING-PREDICATES TOP-TERM GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN APPLY-TO2 INDUC-SUBS-TERM SKOLEM-TERMS ALL-NONVARS REDUCE-ARGS-BY-PREMISES REDUCE-BY-PREMISE-AT-ROOT SUBST-VAR-PREMISES SUPER-ITSELF-PRE NEGATE-ONE-PRE REVERSE-PREMISE ADD-PREMISE-END ADD-SIMPLIFY-OTHERS MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES FIRST-CTX-TRANS NORM-POLY POLY-SIZE IS-CHARACTER-RULE POLY-LRPO NONLINEAR-VARS-UNDER-* POLY-SUPER-AT-*-1 POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-SIMPLIFY PRED-CRITICAL-PAIR WRITE-ONE-PRE WRITE-DISJUNCTIONS WRITE-TERM-SIMPLE WRITE-TERM-BOOL COMPARE-TERM TRY-TO-ORIENT-CONDI REDUCE-AT-ROOT-BOOL NORM-BOOL-INNERMOST NORM-CTX PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST PURE-RWONCE-OUTERMOST RWONCE-OUTERMOST PURE-NORM-OUTERMOST NORM-OUTERMOST NORM-RHS PURE-REDUCE-BY-ONE-AT-ROOT PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-AT-ROOT REDUCE-BY-ONE-RULE ADD-REST-ARGS REDUCE-AT-ROOT-ONE-RULE GUIDE-REDUCIBLE REDUCIBLE MATCH-POSS EQUIV PURE-LRPO NEGATE-LITERAL APPLYSUBST-PRE NORMAL-PROVE PREMISE-INSTANCE GET-VAR-SUBSTITUTION SYMMETRY-TERMS CYCLE-REDUCE-TERM IS-SYMMETRY-EQN UNIT-RULE PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-CHECK IS-INCONSI-PAIR GOOD-UNIT-CLAUSE MAKE-ONE-DOWN-HILL EQN2PRE COVER-NORM-TERM COMMUNE-TERMS2 COMMUNE-TERMS IS-COMMUT-PAIR C-PERMUTATION REMOVE-LEFT-ARG2 LEFT-ARG2 REMOVE-RIGHT-ARG2 RIGHT-ARG2 AVOIDABLE FREE-SUBTERMS IS-ELIM-TERM ONE-ELIM-SUBTERM CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT FIRST-SPEC-TERM HASQUANT SPECIAL-SUBST TRIVIAL-SIMPLIFY SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT FIRST-TRANS SIMP-FIRST-TRANS BA-SIMP-NOT BA-SIMPLIFY NEW-FIRST-TRANS NEW-TRANS-SIMP UNIFY-WITH-AC ACO-LRPO= ACO-LPRO>= ACO-LRPO> AC-DISTRI MAKE-FLAT FLAT-TERM-FUNC FLATTEN-EQN FLATTEN-RULE SUB-NONVARS2 SUBST-EQN))
(setf (callers-list 'START-HISTORY :callers) '(START-PUSH-HISTORY START-HISTORY-MANUAL))
(setf (callers-list 'NORM-ONE-PRE :callers) '(SIMPLIFY-ONE-PRE))
(setf (callers-list 'ASK-USER :callers) '(ORDER-CTX TRY-TO-ORIENT TRY-TO-ORIENT-CONDI))
(setf (callers-list 'SAVE-WORD-END :callers) '(TRY-SUGG-PREC ASK-A-NUMBER ASK-A-CHOICE))
(setf (callers-list 'BA-SIMPLIFY :callers) '(SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR REDUCE-AT-ROOT-BOOL NORM-CTX AC-COMPRESS REDUCE-AT-ROOT-ONE-RULE APPLYSUBST-PRE IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS COVER-NORM-TERM BA-SIMPLIFY NEW-TRANS-SIMP FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'NONVARP :callers) '(REDUCE-EQN-BY-ONE-RULE IS-CONSTANT-TERM IS-SUBTERM EXPECTING-FUNCTIONS QUASI-REDUCIBLE SUBS-OF-SAME-ROOT IS-EQ-FALSE-PRE SUPER-ITSELF-PRE MAKE-BETTER-PRE NORM-POLY IS-HOMOGENEOUS-TERM POLY-SUPER-DISTRIBUTION *-CANONICALIZE +-CANONICALIZE DETACHMENT-RULE NORM-BOOL-INNERMOST NORM-CTX PURE-MIXED-REDUCE SIMPLIFY-COND-TERM REDUCE-COND-TERM REWRITE-AT-ROOT LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL NORMALIZE ELIM-BIN PARA-SUP-TERM CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE MAKE-PAIRS HEAD-LESS-PRE COVER-NORM-UNCONDI-EQN IS-COMMUT-PAIR REDUCE-BY-P-COMMUT2 INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT DIVISIBLE-AC-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK IS-FREE-TERM IS-ELIM-TERM ACUNI IS-ASSOC-PAIR))
(setf (callers-list 'CONSTRUCTORS-CHECK :callers) '(START-TEST))
(setf (callers-list 'START-HISTORY-MANUAL :callers) '(MANUAL-ORIENT ASK-USER))
(setf (callers-list 'CONSP :callers) '(REDUCE-EQN-BY-ONE-RULE IS-CONSTANT-TERM IS-SUBTERM EXPECTING-FUNCTIONS QUASI-REDUCIBLE PARSE-LOOP-FOR LOOP-DECLARE-BINDING MAKE-VALUE THE-TYPE DESETQ1 SUBS-OF-SAME-ROOT IS-EQ-FALSE-PRE SUPER-ITSELF-PRE MAKE-BETTER-PRE NORM-POLY IS-HOMOGENEOUS-TERM POLY-SUPER-DISTRIBUTION *-CANONICALIZE +-CANONICALIZE DETACHMENT-RULE NORM-BOOL-INNERMOST NORM-CTX PURE-MIXED-REDUCE SIMPLIFY-COND-TERM REDUCE-COND-TERM REWRITE-AT-ROOT LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL NORMALIZE ELIM-BIN IS-CONDI-DOMINATE-RULE PRINC0 PARA-SUP-TERM CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE MAKE-PAIRS HEAD-LESS-PRE COVER-NORM-UNCONDI-EQN IS-COMMUT-PAIR REDUCE-BY-P-COMMUT2 INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT DIVISIBLE-AC-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK IS-FREE-TERM IS-ELIM-TERM ACUNI IS-ASSOC-PAIR))
(setf (callers-list 'SUCC-END-INDUC :callers) '(INDUC-PROVE))
(setf (callers-list 'IS-REDUCTION :callers) '(ADD-RULE INDUC-ADD-RULE))
(setf (callers-list 'OPEN-WRITE-FILE :callers) '(WRITEF-SYS RRL-AUX SAVE-RRL))
(setf (callers-list 'P-XOR-P :callers) '(EQN2ASSERTION))
(setf (callers-list 'DIVISIBLE-RIGHT-CHECK :callers) '(DIVISIBLE-NONAC-CHECK))
(setf (callers-list 'X_REDUCE-BY-ONE-RULE :callers) '(REDUCE-EQN-BY-ONE-RULE))
(setf (callers-list 'LENGTH :callers) '(SHOW-TREE X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 LITERAL-NUM PSEUDO-TERM-ORDERING SIZE SET-UP-ARITY2 CHECK-ARITY NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT TOP-TERM TRACE-TESTSET GET-SKELETON2 ONE-EXTENSIBLE-TYPE-POINT EXTEND-DOM-ARGS DEF-LOOP-INTERNAL PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-INITIALLY LOOP-RETURN MERGEBLE-TERMS AVERAGE CAR-LENGTH-CDDR CAR-LENGTH-GREAT INDUC-AC-SUBS REFUTE-RULE-INSTANCES POLY-ADD-HOMO-RULES POLY-SIZE IS-CHARACTER-RULE POLY-LRPO POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS M-*-P CHOOSE-BY-HAND DISPLAY TOTAL-ORDER-RES ORDER-ASS NORM-BOOL-INNERMOST GOAL-RULE-SIZE IS-SUBSEQUENCE NEXT-CHOICE VARS-ONLY MATCH-POSS DECOMPOSE-TERMS NEW-TERM INVALID-RULE IS-VALID-RULE EQUIV PURE-LRPO DISPLAY-KB-STAT DELETE-EQN SPLIT-RHS-OR SPLIT-RHS-AND UNDO PUSH-HISTORY LISTARRAY FILLARRAY INSERT IF* REDUCE-EQ-EXACTLY REDUCE-EQ-TERM CYCLE-REDUCE-AT-ROOT-2 MAKE-PAIRS ADD-EXTRA-PREMISE MAKE-P-COMMUT-RULE GET-SKO-FUNC SUBSTVARFOR M-AND-P DECANON-XOR DECANON-AND POSTPONE-IT CAN-HAVE-NEW-OP UNIFY-WITH-AC ACO-LRPO= ACO-LEXICO-COMP-RL ACO-LPRO>= ACO-LRPO> GENERAL-BASIS-VECTORS HALF-ONES FULL-DIO ALL-ONES IS-ASSOC-PAIR HANDLE-AND))
(setf (callers-list 'PROCESS-PRE-ASS :callers) '(MAKE-ONE-BUILD))
(setf (callers-list 'BAD-TYPED :callers) '(EXPECTING-PREDICATES EXPECTING-FUNCTIONS))
(setf (callers-list 'EXT-TYPE-RELATION :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'RULE-NUMS-FROM-SOURCE :callers) '(TRACE-INCONSISTENCY))
(setf (callers-list 'EQN-AS-RULE-INFO :callers) '(STRONG-SUBGOAL-PROOFS INDUC-SUBGOAL-PROOFS))
(setf (callers-list 'LHS :callers) '(SUCC-END-INDUC FORM-SUBGOALS-FROM-PATTERNS PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM X_AUTO_INDUC X_AUGMENT X_CLEAN-RULE X_ADD-RULE3 X_REDUCE-BY-ONE-RULE REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE WELL-TYPED-EQN OPS-OF-RULE INDUC-SUBS-OF-EQN NEGATE-EQN REFUTE-EQN UNCONDI-PROVE POLY-ADD-HOMO-RULES IS-HOMOGENEOUS-RULE IS-CHARACTER-RULE MOVE-MONOS MOVE-LHS-ARGS POLY-SUPER-DISTRIBUTION POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE IS-BIG-ENOUGH-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL DETACHMENT-RULE IDEM-SUPER-COMMU IDEM-SUPERPOSITION PRED-FUNC-SUPERPOSITION PRED-SUPERPOSITION WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE MANUAL-ORIENT COMP-EQN ASK-USER TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL PURE-REDUCE-BY-ONE-AT-ROOT PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE TRY-ONE-RULE LAST-CONSISTENCY-CHECK PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE NOT-IN-SET GOAL-RULE-SIZE MR LINEAR OCCURS-IN-RULE ADD-OPERATOR CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE FLATTEN-WITNESS CHECK-WITNESS ADD-RULE3 ADD-RULE-LINEAR FIRST-PROCESS-EQN PROCESS-EQUATION READ-THIS-EQN ENABLE-RULE DISABLE-RULE R2E AND-LHS-TRUE-RHS INDUC-SUBSUMED-BY SIMILAR-EQN HYPO-SUBSUME-EQN CHANGE-VARS APPLYSUBST-EQN NORMAL-PROVE SPLIT-RHS-OR SPLIT-RHS-AND SPLIT-LHS-OR SPLIT-LHS-AND APPLYSUBST-RULE RENAME-EQN-RULE IS-SYMMETRY-RULE SYMMETRY-VARS GET-SYMMETRY-TERMS CYCLE-REDUCE-AT-ROOT-2 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE MAKE-CYCLE-RULE IS-CYCLE-EQN MAKE-PAIRS NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION INDUC-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 SUP-TERM PURE-SUPERPOSITION FUNC-SUPERPOSITION INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-RULE CONSISTENT-CHECK REMOVE-IRRELEVANT3 HANDLE-COMMU-HYPO HEAD-LESS-PRE EQN2PRE ADD-EXTRA-PREMISE PRE-CRIT-CHECKEQ COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE PRINT-NORMALIZED-EQN MAKE-P-COMMUT-RULE NEW-RULE-FROM-ASSOC TRACE-DIVISIBLE ELIMINATE-SUB CHECK-BUILD-RULE HAVE-BOOLEAN-CONSTANT FIND-SPECIAL-TERM INDUC-REDUCE-OTHER-RULES QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN EQN2ASSERTION FLATTEN-EQN FLATTEN-RULE EQN-SUB-NONVARS SUBST-EQN WRITE-COMMENT-EQN))
(setf (callers-list 'OPEN :callers) '(OUTFILE INFILE))
(setf (callers-list 'MAKE-CYCLE-RULE :callers) '(TRY-TO-ORIENT))
(setf (callers-list 'MAKE-VALUE :callers) '(LOOP-ADD-BINDING))
(setf (callers-list 'UNKNOWN-SIZE :callers) '(SPECIAL-SIZE))
(setf (callers-list 'INDUC-ORIENT-AN-EQN :callers) '(QUERY-ADD-EQN))
(setf (callers-list 'CYCLE-CHOICE :callers) '(RUN-KB-OPTIONS))
(setf (callers-list '> :callers) '(SHOW-TREE REWRITE-ONCE-BY-HYPO X_COVER-PROOF-PROCESS2 SUCC-END-INDUC COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM X_AUTO_INDUC TERM-SIZE-ORDER GET-SKELETON2 CDR-GREAT CAR-LENGTH-GREAT UNCONDI-PROVE PC-GRT-PREC GRT-PREC WRITE-TERM-SIMPLE TOTAL-ORDER-ATOM TOTAL-ORDER-RES TOTAL-ORDER-PC-RES ORDER-ASS TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE NORM-BOOL-INNERMOST TRY-ONE-CONDI-RULE CAR-NUM-ORDER CLEAN-RULE ADD-RULE3 ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE DISPLAY-KB-STAT GREATER-ARITY CNTH MAKE-CYCLE-RULE MAKE-PAIRS AC-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS TRACE-FACTOR TRACE-REMOVE-IRRELEVANT4 TRACE-DROPPED-PREMISES MAKE-ONE-DOWN-HILL LRPO-PREMISES HEAD-LESS-THAN-PRES PRINT-NORMALIZED-EQN MAKE-P-COMMUT-RULE TRACE-DIVISIBLE INDUC-REDUCE-OTHERS-AUX AUTO-ADD-PREC POSTPONE-IT CAN-HAVE-NEW-OP ACLRPO))
(setf (callers-list 'GET-ATOM2 :callers) '(GET-ATOM))
(setf (callers-list 'SIMPLIFY-ONE-PRE :callers) '(ADD-EXTRA-PREMISE))
(setf (callers-list 'NEW-RULE-STRA :callers) '(BRAKE-CHOICE))
(setf (callers-list 'APPLIES :callers) '(SUBSUMED-TUPLE POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE REDUCE-AT-ROOT-BOOL TRY-ONE-RULE SIMILAR-TERM HYPO-SUBSUME-EQN CONSISTENT-CHECK-TESTSET ELIMINATE-SUB))
(setf (callers-list 'COMPARE-ITEM-RESULT :callers) '(ORDER-PC-RES))
(setf (callers-list 'STRONG-SUBGOAL-PROOFS :callers) '(X_COVER-PROOF-PROCESS2))
(setf (callers-list 'WRITE-F-EQN :callers) '(STRUCTURE-INDUC-ON COVER-SET-SCHEME READ-THIS-EQN WRITE-SEQ-EQN HEAD-LESS-THAN-PRES))
(setf (callers-list 'HAVE-COMMON :callers) '(EQ-JOIN SYMMETRY-VARS))
(setf (callers-list 'CHANGE-CTX :callers) '(FORM-SUBGOALS-FROM-PATTERNS PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM X_ONE_RULE ADD-OPERATOR PRINT-NORMALIZED-EQN FLATTEN-EQN))
(setf (callers-list 'COMMU-EXCHANGE :callers) '(MAKE-PRE-ASS MAKE-EQ AC-COMPRESS IS-VALID-RULE C-PERMUTATION COMPRESS-FLAT))
(setf (callers-list 'EQN-SOURCE-TYPE :callers) '(WRITE-F-EQN ACCEPTABLE-PAIR WRITE-COMMENT-EQN))
(setf (callers-list 'INITIALIZE :callers) '(RRL-AUX INIT RESET-RRL))
(setf (callers-list 'READTEQNS :callers) '(READ-INPUT))
(setf (callers-list 'GET_PNAME :callers) '(X_NAME WRITE-VARIABLE GET-VAR-SUBSTITUTION))
(setf (callers-list 'NEGATE-ONE-PRE :callers) '(PROOF-UNDER-NEW-PREMISES MAKE-ONE-DOWN-HILL HEAD-LESS-THAN-PRES RULE-SUBSUMED-PREMISES COVER-CONDI-NORM INDUC-ADD-RULE))
(setf (callers-list '<= :callers) '(DEF-LOOP-INTERNAL LOOP-RETURN MATCH-POSS ADD-EXTRA-PREMISE))
(setf (callers-list 'ACCEPTABLE-PAIR :callers) '(MAKE-PAIRS))
(setf (callers-list 'MAKE-PRE :callers) '(NEGATE-ONE-PRE MAKE-PRE-ASS MAKE-EQ-PRE MAKE-BETTER-PRE FIRST-VAR-PRE FIRST-CTX-TRANS PREMISE-INSTANCE EQN2PRE))
(setf (callers-list 'FOUND-WITNESS :callers) '(FLATTEN-WITNESS CHECK-WITNESS))
(setf (callers-list 'TRY-ONE-RULE :callers) '(REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list 'ENABLE-RULES :callers) '(RRL-AUX))
(setf (callers-list 'IS-LIMITED :callers) '(IS-VALUE-TERM IS-PRIMITIVE CONSISTENT-CHECK-QUASI))
(setf (callers-list 'REMOVE-RIGHT-ARG :callers) '(DIVISIBLE-RIGHT-CHECK DIVISIBLE-NONAC-CHECK))
(setf (callers-list ':UNNAMED-LAMBDA :callers) '(UCONCAT SELECTQ CASEQ))
(setf (callers-list 'PSETQ :callers) '(MAKE-EQ-PRE MAKE-BETTER-PRE SIMPLIFY-COND-TERM CONSISTENT-PAIR))
(setf (callers-list 'BUILD-PREMISES-FROM-BOOL-TERM :callers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 X_AUTO_INDUC))
(setf (callers-list 'GRT-PREC :callers) '(OPERATOR-ORDERING PURE-LRPO AUTO-ADD-PREC FIND-OUT-BIG-EQ-SUBS ACO-LPRO>= ACO-LRPO>))
(setf (callers-list 'REMOVE-ONE-ARG :callers) '(ORIENT-RULE))
(setf (callers-list 'LIST :callers) '(ADD_CHILD SEARCH-TREE REDUCTION-PROOF COVER-PROOF-PROCESS2 PROOF-BY-HINT-TERM COVER-SET-SCHEME X_MANUAL_INDUC CHECK_AND_ADD X_AUTO_INDUC X_AUTO_NORMAL X_AUGMENT X_ADD-RULE3 X_HYPOTHESIS X_ONE_RULE ADD-SUGG-TYPE TYPE-VAR-LIST ALL-VARS FIXUP-QUANTIFIED-FORMULA ONE-EXTENSIBLE SUBSTITUTE-SLOOP-BODY LOOP-DECLARE-BINDING MAKE-VALUE THE-TYPE PARSE-LOOP-COLLECT DESETQ1 INDUC-AC-SUBS NEGATE-EQN NEGATE-ONE-PRE MAKE-EQ-PRE MAKE-BETTER-PRE FIRST-CTX-TRANS TRY-SUGG-PREC POLY-ADD-HOMO-RULES IS-CHARACTER-RULE POLY-MATCH-+ POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE M-+-M LAST-CHECK-2ND-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL PRED-CRITICAL-PAIR IDEM-SUPERPOSITION ORDER-ASS MAKE-EQ MAKE-CRIT-RULE ADD-EQU EXT-DIVISIBLE NORM-CTX-AND SIMPLIFY-COND-TERM REDUCE-COND-TERM PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE MR EQ-MATCH MATCH-SET-AC NEXT-CHOICE APPLIES NORMAL-FORM-SUB MAKE-RULE-FROM-ASS ADD-OPERATOR IS-VALID-RULE FLATTEN-WITNESS ADD-RULE3 SKIP-EOLN MAKE-BUFFER GET-VARLIST NEGATE-LITERAL CONDI-FROM-CLAUSE GET-CLAUSE GET-EQUATION ENABLE-RULE R2E SIMILAR-EQN APPLYSUBST-EQN PREMISE-INSTANCE SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE RENAME-PAIR-RULE GET-REST-GLOBALS START-HISTORY INSERT UCONCAT EQ-JOIN IS-SYMMETRY-RULE MAKE-CYCLE-RULE IS-SYMMETRY-EQN MAKE-PAIRS PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 RULE-NUMS-FROM-SOURCE MAKE-ONE-DOWN-HILL BIG-PRE-INFO JUSTIFY-EQN EQN2PRE ADD-EXTRA-PREMISE COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM REDUCE-BY-P-COMMUT2 MAKE-P-COMMUT-RULE INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT NEW-RULE-FROM-ASSOC REMOVE-LEFT-ARG2 REMOVE-RIGHT-ARG2 DIVISIBLE-AC-CHECK DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK INDUC-REDUCE-OTHERS-AUX SPECIAL-SUBST BA-SIMP-NOT UNICOMPOUND FULL-DIO ALL-ONES SUBST-EQN HANDLE-AND))
(setf (callers-list 'STEP :callers) '(START-TEST))
(setf (callers-list 'SUB1-MODULO-N :callers) '(SUB1-MODULO-N))
(setf (callers-list 'REST :callers) '(SEARCH_BY_EQN SEARCH_BY_ID CURSOR_DOWN BREADTH-SEARCH X_REMOVE_HYP SWITCH_RULE_LR))
(setf (callers-list 'ALL-NONVARS :callers) '(ALL-NONVARS))
(setf (callers-list 'REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES :callers) '(NORM-CTX COVER-NORM-TERM))
(setf (callers-list 'CYCLE-REDUCE-AT-ROOT-2 :callers) '(CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE))
(setf (callers-list 'PURE-SUP-TERM2 :callers) '(PURE-SUP-TERM))
(setf (callers-list 'CONCATENATE :callers) '(SHOW-TREE OBJ-NAME SOURCE-NAME UCONCAT))
(setf (callers-list 'MAKE-ARRAY :callers) '(GET-SOLUTIONS GENERAL-BASIS-VECTORS FULL-DIO ALL-ONES))
(setf (callers-list 'SET-PREDICATE :callers) '(SET-UP-ARITY2 ENSURE-PREDICATE LINEAR SUBSTVARFOR))
(setf (callers-list 'IS-COMMUT-PAIR :callers) '(IS-VALID-RULE IS-P-COMMUT-PAIR))
(setf (callers-list 'PICK-MAX-SCORE-OP :callers) '(CHOOSE-LEAST-COVER))
(setf (callers-list 'POLISH-PREMISES :callers) '(POLY-REDUCE-AT-ROOT-ONE-RULE REDUCE-AT-ROOT-BOOL))
(setf (callers-list 'MAKESYM :callers) '(ALLSYM NEWSYM INITSYM))
(setf (callers-list 'START-PUSH-HISTORY :callers) '(ADD-OPERATOR START-KB RRL-AUX MAKE-ASS-COM-OP))
(setf (callers-list 'X_COVER-PROOF-PROCESS2 :callers) '(X_AUTO_INDUC))
(setf (callers-list 'MAPCAR :callers) '(PROOF-UNDER-NEW-PREMISES XIN-MENU LITERAL-NUM RENAME-VARS DEPTH RPL-BY-TERMS W-SIZE SIZE GET-TESTSET-QUASI GET-SKELETON2 FLATTEN-TESTSET STR-FORMULATE-SCHEME AVERAGE ELEMENT-COMBINATION PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES POLY-SIZE POLY-SIMPLIFY NORM-EQ-ARGS NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST NORM-RHS VAR-CONSISTENCY MULT-LENGTH PP2 PROPER-PRODUCT-LISTS PRODUCT-LISTS MAKE-RULE-SIZE-ORDER RESET-RRL TRACE-HYPOTHESE RENAME-OP-RULES SAVE-RRL SUBPAIR UCONCAT SELECTQ CASEQ USER-SELECTQ MAKE-CYCLE-RULE COVER-CONDI-NORM C-PERMUTATION FIRST-TRANS BA-SIMPLIFY NEW-FIRST-TRANS AC-DISTRI FLATTEN-RULES MAKE-FLAT))
(setf (callers-list 'NEGATE-PREDICATE :callers) '(SIMPLIFY-ONE-PRE CHECKEQ-NORMAL))
(setf (callers-list 'AVOIDABLE :callers) '(DIVISIBLE-AC-CHECK DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK))
(setf (callers-list 'NORM-STRATEGY :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'HAS-INDUCTIVE-VAR :callers) '(INDUCTIBLE))
(setf (callers-list 'X_REMOVE_HYP :callers) '(COVER-SET-SCHEME))
(setf (callers-list 'TRANSLATE-NAME :callers) '(PARSE-LOOP-FOR PARSE-LOOP-COLLECT))
(setf (callers-list 'GET-PRE-RHS :callers) '(SUPER-ITSELF-PRE ADD-SIMPLIFY-OTHERS MAKE-ONE-DOWN-HILL))
(setf (callers-list 'COVER-SET-SCHEME :callers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2))
(setf (callers-list 'GIVE-STAT :callers) '(MANUAL-ORIENT RRL-AUX))
(setf (callers-list 'TOTAL-ORDER :callers) '(POLY-CYCLE-LUCK NORM-EQ-ARGS CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 MAKE-CYCLE-RULE COMMU-EXCHANGE COMMUE-EXCHANGE MAKE-P-COMMUT-RULE SIMP-XOR-SIMP XOR-OF-MONOMIALS SIMP-AND-SIMP AND-OF-MONOMIALS))
(setf (callers-list 'ELIGIBLE-INDUC-TERMS :callers) '(MAKE-ONE-SCHEME))
(setf (callers-list 'POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE :callers) '(CYCLE-REDUCE-AT-ROOT-3))
(setf (callers-list 'EQL :callers) '(FIND-IN-ORDERED-LIST PARSE-LOOP-FOR PARSE-LOOP-COLLECT PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-INITIALLY PARSE-LOOP LCASE))
(setf (callers-list 'CLEAN-RULE :callers) '(INDUC-REDUCE-OTHERS-AUX))
(setf (callers-list 'POLY-SIZE :callers) '(POLY-SIZE))
(setf (callers-list 'PRE-PROCESS-PRE-ASS :callers) '(SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES))
(setf (callers-list 'PUTPROP :callers) '(EXPECT-ARITY EXPECT-ARITY12 SET-UP-ARITY2 CHECK-ARITY ENSURE-PREDICATE POLY-INITIALIZE EXT-TRANSITIVE EXT-CONSTRUCTOR LINEAR ASK-FOR-OPERATOR GET-SKO-FUNC SUBSTVARFOR INIT-BOOL-OPS))
(setf (callers-list 'INDUC-IDEM-SUPERPOSITION :callers) '(FUNC-SUPERPOSITION))
(setf (callers-list 'UNWIND-PROTECT :callers) '(SUCC-END-INDUC CONSTRUCTORS-CHECK IS-PARTIAL-OP CHOOSE-CONSTRUCTORS PROVE OPEN-WRITE-FILE ASK-USER QUERY-ADD-EQN))
(setf (callers-list 'GET-COVER-SETS :callers) '(COVER-INDUC-PROVE RRL-AUX))
(setf (callers-list 'MENU_FOR_NORMAL :callers) '(X_NORMAL))
(setf (callers-list 'MANUAL-PICK :callers) '(PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE))
(setf (callers-list 'UNDO :callers) '(MANUAL-ORIENT ASK-USER INVALID-RULE ADD-RULE3 POSTPONE-OR-UNDO CAN-HAVE-NEW-OP))
(setf (callers-list 'AUTO-OPTIONS :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'LOAD-RRL :callers) '(RRL-AUX))
(setf (callers-list 'REM-ARGS :callers) '(ELIM-BIN))
(setf (callers-list 'X_SPLIT :callers) '(MANUAL_REDUCE))
(setf (callers-list 'MR :callers) '(LINEAR))
(setf (callers-list 'FIRST-N-ELEMENTS :callers) '(GET-INSTANCE-TERMS2))
(setf (callers-list 'REDUCE-EQ-TERM :callers) '(REDUCE-AT-ROOT-BOOL BOOL-REWRITE-AT-ROOT))
(setf (callers-list 'OPERATOR-ORDERING :callers) '(PSEUDO-TERM-ORDERING LRPO-PREMISES))
(setf (callers-list 'SUBST-VAR-PREMISES :callers) '(SIMPLIFY-ONE-PRE NORM-CTX NORM-RHS COVER-NORM-TERM))
(setf (callers-list 'IS-VALID-RULE :callers) '(ORIENT-RULE))
(setf (callers-list 'SKOLEMIZE :callers) '(REFUTE-EQN MR SKOLEMIZE PROCESS-ASS1))
(setf (callers-list 'SET :callers) '(MAKE-NEW-VARIABLE))
(setf (callers-list 'TOTAL-ORDER-2 :callers) '(M-+-M))
(setf (callers-list 'INTO :callers) '(PARSE-LOOP-COLLECT))
(setf (callers-list 'HAVE-MANY-RECURSIVE-EQNS :callers) '(MAKE-ONE-SCHEME))
(setf (callers-list 'SPLIT-RHS-AND :callers) '(PROVE-SPLIT-BOOL))
(setf (callers-list 'DELETE :callers) '(PROOF-BY-HINT-TERM X_CLEAN-RULE FREE-VARS ONE-EXTENSIBLE-POINT REMOVE-DUP-VARS DECIDE-MERGE-CONJ REFUTE-EQN ADD-EQU LINEAR MATCH-SET-AC MAKE-RULE-FROM-ASS CLEAN-RULE DISABLE-RULE TR-TERM TRACE-INCONSISTENCY MAKE-ONE-BUILD FLATTEN-RULES MAKE-ASS-COM-OP))
(setf (callers-list 'ORDER-EQNS :callers) '(RRL-AUX))
(setf (callers-list 'RESTORE-REST-GLOBALS :callers) '(LOAD-RRL))
(setf (callers-list 'GET-SKO-FUNC :callers) '(SKOLEMIZE-AWAY-QUANTS))
(setf (callers-list 'POP :callers) '(PROOF-UNDER-NEW-PREMISES RPL-BY-TERMS2 LOOP-POP COLLECT-CDR-WITH-SAME-CAR POLY-MATCH-ONE-TO-* POLY-MATCH-* POLY-MATCH-+ PICK-UNMARKED-RULE-DUMMY WRITE-DETAIL-RULE ASK-USER PICK-GOAL IS-SUBSEQ-LIST MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC VARS-ONLY RPOMULT READ-ATOM DISPLAY-OPS RESTORE-REST-GLOBALS UNDO1 FILLARRAY LRPO-PREMISES SIMP-XOR-SIMP XOR-OF-MONOMIALS SIMP-AND-SIMP AND-OF-MONOMIALS SET-UNIFICATION))
(setf (callers-list 'SET-ARITY2 :callers) '(EXPECT-ARITY EXPECT-ARITY12 SET-UP-ARITY2 GET-SKO-FUNC SUBSTVARFOR INIT-BOOL-OPS))
(setf (callers-list 'AC-OP-P :callers) '(TOP-TERM SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT REDUCE-BY-PREMISE-AT-ROOT IS-CHARACTER-RULE OUTRED1 AC-C-ROOT ELIM-BIN MATCH-POSS SYMMETRY-TERMS MAKE-CYCLE-RULE IS-CYCLE-EQN MAKE-PAIRS IS-P-COMMUT-PAIR DIVISIBLE-CHECK2 PLAUSIBLE UNIFY-WITH-AC ACO-LRPO> COMPRESS-FLAT))
(setf (callers-list 'STRUCTURE-INDUC-ON :callers) '(COVER-PROOF-PROCESS2))
(setf (callers-list 'REF-INSTANCE-SEEDS2 :callers) '(GET-INSTANCE-TERMS2))
(setf (callers-list 'SUBSUMED-PREMISES :callers) '(SUBSUMED-PREMISES ADD-EXTRA-PREMISE))
(setf (callers-list 'NCONC :callers) '(X_ADD-RULE3 ADD-SUGG-TYPE ENTER-OP GET-SKELETON2 EXTEND-DOM-ARGS IN-ARRAY-SLOOP-FOR PARSE-LOOP-COLLECT ELEMENT-COMBINATION REFUTED-RESULT PRE-OPS PRE-VARS SIMPLIFY-ONE-PRE ADD-SUGG POLY-ADD-HOMO-RULES MOVE-MONOS LINEAR ADD-AT-END EQ-MATCH INVALID-RULE ADD-RULE3 ADD-RULE-LINEAR ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE ENABLE-RULE RRL-AUX RESET-RRL START-HISTORY MAKE-CYCLE-RULE MAKE-PAIRS RULE-NUMS-FROM-SOURCE INCONSISTENT-EQN MAKE-P-COMMUT-RULE ADD-CONDI-DOMINATE-RULE INDUC-ADD-RULE POSTPONE-IT AUTO-ORIENT ACUNI FULL-DIO ALL-ONES EQN-SUB-NONVARS))
(setf (callers-list 'WRITE-RULES :callers) '(WRITEF-SYS))
(setf (callers-list 'ASSOC0 :callers) '(GET-DOWN GET-VAR-SUBSTITUTION TR-ADD))
(setf (callers-list 'ADD-RULE-COMPLETE :callers) '(ADD-RULE INDUC-ADD-RULE))
(setf (callers-list 'QUIT-RRL :callers) '(RRL-AUX))
(setf (callers-list 'PURE-OUTRED1 :callers) '(PURE-RWONCE-OUTERMOST))
(setf (callers-list 'ASSQ :callers) '(X_CLEAN-RULE X_ADD-RULE3 RULE-DESTROYABLE DEFINING-DOMAIN GET-SCHEMES TEST-ONE-OP IS-PARTIAL-OP GET-RECURSIVE-RETURN-OP COVER-SETS POLY-ADD-HOMO-RULES REDUCE-*-TERM REDUCE-+-TERM POLY-REDUCE-AT-ROOT REDUCE-AND-TERM REDUCE-XOR-TERM PURE-REWRITE-AT-ROOT PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN ADD-TO-ARGS REDUCE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE MATCH-SET-AC ELIM-BIN DECOMPOSE-TERMS ADD-RULE3 ENABLE-RULE DISABLE-RULE REDUCE-EQ-TERM CYCLE-REDUCE-TERM MAKE-CYCLE-RULE GOOD-UNIT-CLAUSE INDUC-REDUCE-OTHER-RULES))
(setf (callers-list 'ORDER-VARS :callers) '(NEWVARSIN))
(setf (callers-list 'COMPLETE-TEST :callers) '(START-TEST))
(setf (callers-list 'HALF-CANONICALIZE-AND-EXPAND-EQ :callers) '(COMPARE-ITEM SIZE-COMPARE))
(setf (callers-list 'LOOP-PEEK :callers) '(=-SLOOP-FOR PARSE-LOOP-WHEN PARSE-LOOP-WITH PARSE-LOOP1))
(setf (callers-list 'ORDER-STR :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'SET-ART-MODE :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'RESTRICT-CRIT-STRA :callers) '(FASTKB-CHOICES FOPC-STRA CRIT-STRATEGY-OPTIONS))
(setf (callers-list 'REMOVE-RIGHT-ARG2 :callers) '(REMOVE-RIGHT-ARG2 REMOVE-RIGHT-ARG))
(setf (callers-list 'GET-VAR-SUBSTITUTION :callers) '(RENAME-EQN-RULE RENAME-TERM))
(setf (callers-list 'ECASE :callers) '(PARSE-LOOP-MACRO))
(setf (callers-list 'SORT :callers) '(NEWVARSIN MERGE-DUPLICATE SIZE-COMPARE NORM-EQ-ARGS COVER-CONDI-NORM SORT-OP-ARGS SIMP-XOR-SIMP XOR-OF-MONOMIALS SIMP-AND-SIMP AND-OF-MONOMIALS UNIFIERS))
(setf (callers-list 'MAKE-FLAT :callers) '(REDUCE-BY-PREMISE-AT-ROOT SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-AT-ROOT-ONE-RULE APPLYSUBST-PRE PREMISE-INSTANCE IS-SYMMETRY-RULE IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS COVER-NORM-TERM UNIFY-WITH-AC MAKE-FLAT FLAT-TERM-FUNC FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'START-TEST :callers) '(CHOOSE-CONSTRUCTORS RRL-AUX))
(setf (callers-list ':COLLECT :callers) '(PARSE-ONE-WHEN-CLAUSE))
(setf (callers-list 'COMPILE-FILE :callers) '(FCLOAD CLOAD2 CLOAD BLOAD))
(setf (callers-list 'NEW-TRANS-SIMP :callers) '(FIRST-CTX-TRANS FIRST-PROCESS-EQN))
(setf (callers-list 'ORDER-CTX :callers) '(TRY-TO-ORIENT-CONDI))
(setf (callers-list 'ORDER-ONE-NORM-OTHERS :callers) '(INDUC-ADD-RULE))
(setf (callers-list 'SUGG-PREC :callers) '(ASK-USER))
(setf (callers-list 'ACO-HARD> :callers) '(ACO-LRPO>))
(setf (callers-list 'JUSTIFY-EQN :callers) '(COVER-UNCONDI-NORM))
(setf (callers-list 'INCREMENT :callers) '(PARSE-NO-BODY))
(setf (callers-list 'DISPLAY-TYPE-ARITY :callers) '(WRITEF-SYS DISPLAY))
(setf (callers-list 'PUSH-HISTORY :callers) '(START-PUSH-HISTORY PUSH-HISTORY-MANUAL))
(setf (callers-list 'CHOOSE-HIGHEST-TERM :callers) '(DECIDE-MERGE-CONJ))
(setf (callers-list 'NOT-FALSEP :callers) '(INDUC-IDEM-SUPERPOSITION SUP-TERM2))
(setf (callers-list 'EXCHANGE-LR :callers) '(ORIENT-RULE LAST-CONSISTENCY-CHECK NORMAL-PROVE))
(setf (callers-list 'START-TIMER :callers) '(REPORT-CURRENT-TIME RRL-AUX))
(setf (callers-list 'OUTRED1 :callers) '(RWONCE-OUTERMOST))
(setf (callers-list 'PRINT-WARNING :callers) '(INITIALIZE-MANUAL-ORDERING ASK-USER))
(setf (callers-list 'SUB-TEST :callers) '(NOT-IN-SET))
(setf (callers-list 'IS-VALID-VAR :callers) '(EXPECT-ARITY IS-VALID-OP NEXT-TOKEN READ-ARITY))
(setf (callers-list 'MATCH-SET-NONAC :callers) '(MATCH-SET))
(setf (callers-list 'POSTPONE-IT :callers) '(INVALID-RULE POSTPONE-OR-UNDO))
(setf (callers-list 'TYPE-VAR-LIST :callers) '(NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT))
(setf (callers-list 'SEPARATED :callers) '(CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK))
(setf (callers-list 'RIGHT-ARG :callers) '(DIVISIBLE-RIGHT-CHECK DIVISIBLE-NONAC-CHECK))
(setf (callers-list 'READ-TYPE-RELATION :callers) '(READ-ARITY))
(setf (callers-list 'CASE :callers) '(PROOF-BY-HINT-TERM LITERAL-NUM PARSE-LOOP-MACRO LOOP-UN-POP MAKE-PRE-ASS PRE-PROCESS-PREMISES FIRST-CTX-TRANS POLY-SIZE NONLINEAR-VARS-UNDER-* POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT POLY-SIMPLIFY INTRO-RULE PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE WRITE-DETAIL-RULE WRITE-TERM-BOOL WRITEF-SYS TOTAL-ORDER-2 TOTAL-ORDER TOTAL-ORDER-PC ORDER-PC-RES ORDER-PC MANUAL-ORIENT ASK-USER ORDER-CTX TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE BRAKE-CHOICE FASTKB-CHOICES FOPC-STRA PROOF-METHODS COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS REDUCE-AT-ROOT-BOOL BOOL-REWRITE-AT-ROOT NORM-BOOL-INNERMOST PURE-NORM MATCH-SET-AC DECOMPOSE-TERMS UNKNOWN-SIZE SPECIAL-SIZE INVALID-RULE RPOST IS-EMPTY-LINE GET-ATOM NEXT-TOKEN GET-ITEM GET-LOW-OPS GET-TERM GET-RHS CONDI-FROM-CLAUSE GET-CLAUSE GET-EQUATION READ-ARITY GIVE-STAT DATE DELETE-SYS RRL-AUX PROVE-SPLIT-BOOL LISTARRAY FILLARRAY TRACE-CRIT ACCEPTABLE-PAIR PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR TRACE-AC-SUPERPOSITION RULE-NUMS-FROM-SOURCE CONSISTENT-RULE BIG-PRE-INFO NEW-RULE-FROM-ASSOC SKOLEMIZE NEGATE-PREDICATE TRIVIAL-SIMPLIFY PROCESS-ASS EQN2ASSERTION SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT M-XOR-M DECANON-XOR DECANON-AND FIRST-TRANS BA-SIMP-NOT BA-SIMPLIFY NEW-FIRST-TRANS ACUNI))
(setf (callers-list 'GET-CLAUSE :callers) '(GET-EQUATION))
(setf (callers-list 'COPYSYMBOL :callers) '(MAKE-NEW-VARIABLE))
(setf (callers-list 'LESSP :callers) '(SMALLER-SIZE OPERATOR-ORDERING PSEUDO-TERM-ORDERING ORDER-VARS TOP-TERM CAR-LESSP CAR-LENGTH-CDDR MARK-SUPERPOSED NONDO-CRIT COMPARE-SYMBOL COMP-EQN COMP-RULE IS-VALID-RULE IS-HIGHER-TERM))
(setf (callers-list 'PRINT_STR :callers) '(DISP_STRINGS))
(setf (callers-list 'FILE-WRITE-DATE :callers) '(FILE-DATE))
(setf (callers-list 'DISPLAY-ONE-ARITY2 :callers) '(EXPECT-ARITY EXPECT-ARITY21 EXPECT-ARITY12))
(setf (callers-list 'CATCH :callers) '(ORIENT-INDUC-HYPO SUCC-END-INDUC X_READ_TERM COVER-INDUC-PROVE INPUT-CHECK SLOOP-SLOOP-MACRO INDUC-PROVE PURE-ORIENT-AN-EQN ORIENT-AN-EQN RUN-KB READ-THIS-EQN READ-T-TERM RRL-AUX PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN ORDER-ONE-NORM-OTHERS))
(setf (callers-list 'EQOPS :callers) '(IS-REL-PREC EXT-EQUIVALENCE EQUIV PURE-LRPO AUTO-ADD-PREC AUTO-MAKE-EQUI FIND-OUT-BIG-EQ-SUBS ACO-LRPO= ACO-LPRO>= ACO-LRPO>))
(setf (callers-list 'NOT-IN-SET :callers) '(ADD-RULE-LINEAR))
(setf (callers-list 'RPL-BY-TERMS2 :callers) '(RPL-BY-TERMS))
(setf (callers-list 'X_GENERAL :callers) '(MANUAL_REDUCE))
(setf (callers-list 'PICK-STRATEGY :callers) '(CRIT-STRATEGY-OPTIONS))
(setf (callers-list 'MAPCAN :callers) '(ALL-VARS ALL-OPS MAKE-ONE-SCHEME INDUC-SUBS-TERM ADD-DEFIN-DEPEND SKOLEM-TERMS ALL-NONVARS FIRST-CTX-TRANS UCONCAT FREE-SUBTERMS SUB-NONVARS2))
(setf (callers-list 'COMM-ROOT :callers) '(SUPERTERM-COVER AC-C-ROOT DIVISIBLE-CHECK2))
(setf (callers-list 'BREADTH-SEARCH :callers) '(SEARCH-TREE BREADTH-SEARCH))
(setf (callers-list 'IS-EMPTY-LINE :callers) '(X_READ_TERM EXT-TYPE-RELATION REFUTE-EQN TRY-SUGG-PREC MAN-PICK-2ND-RULE PRINT-HEAD OPEN-WRITE-FILE POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA SUPPORT-EQN NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA NORMALIZE-BOUND TIME-LIMIT-STRA POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE EXT-EQUIVALENCE EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-OPERATOR EXT-STATUS EXT-WEIGHT EXT-PRECEDENCE NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL LINEAR ASK-FOR-OPERATOR PRINT-CHOICE-MESSAGE READ-THIS-EQN OK-TO-CONTINUE ASK-A-CHOICE IS-EMPTY-LINE READ-T-TERM OPEN-READ-FILE DISABLE-RULES-AUX DELETE-EQN DELETE-RULE SET-HANDLE-AND SET-ART-MODE))
(setf (callers-list 'MAKE-PRE-ASS :callers) '(PROOF-UNDER-NEW-PREMISES NEGATE-ONE-PRE PRE-PROCESS-PRE-ASS FIRST-CTX-TRANS SPLIT-RHS-OR SPLIT-RHS-AND))
(setf (callers-list 'BIN-IS-CURRENT :callers) '(CLOAD2 CLOAD FLOAD))
(setf (callers-list 'ASK-A-NUMBER :callers) '(MAN-PICK-2ND-RULE POST-LIMIT-STRA NEW-RULE-STRA NORMALIZE-BOUND TIME-LIMIT-STRA EXT-CONSTRUCTOR OVER-REWRITE-PREMISES ASS-RULE-BOUND MANUAL-OPTIONS COVER-AUTO-LEVEL))
(setf (callers-list 'CLEAN-RIGHT-BRACKET :callers) '(READ-TYPE-RELATION))
(setf (callers-list 'FALSEP :callers) '(X_AUTO_INDUC PSEUDO-TERM-ORDERING DESTROYABLE IS-EQ-FALSE-PRE NEGATE-ONE-PRE ADD-PREMISE-END MAKE-BETTER-PRE NORM-ONE-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS ORDER-ASS MAKE-EQ PURE-ORIENT-AN-EQN ORIENT-AN-EQN NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX SIMPLIFY-COND-TERM REDUCE-COND-TERM SIMPLIFY-MY-EQ-TERM LAST-CONSISTENCY-CHECK ADD-RULE-LINEAR PARAMODULATE INDUC-IDEM-SUPERPOSITION SUP-TERM2 CONSISTENT-CHECK-QUASI CONSISTENT-PAIR CONSISTENT-CHECK HEAD-LESS-PRE MAKE-ONE-BUILD COVER-CONDI-NORM COVER-NORM-TERM FIRST-BOOLEAN-CONSTANT INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN M-XOR-P M-XOR-M M-AND-P M-AND-M NOT-ARG))
(setf (callers-list 'FLATTEN-RULES :callers) '(EXT-AC EXT-COMMUTATIVE))
(setf (callers-list '+ :callers) '(X_INITIAL COVER-INDUC-PROVE CHECK_AND_ADD GET-CODOMAIN-TYPES LITERAL-NUM RPL-BY-TERMS2 W-SIZE SIZE TOP-TERM GET-SKELETON2 PARSE-LOOP-FOR AVERAGE ADD-POSITIVE DECIDE-DEFIN-MODE REFUTE-RULE-INSTANCES INDUC-PROVE PROVE SUBST-VAR-PREMISES PRES-SIZE PRE-PROCESS-PREMISES NORM-POLY POLY-SIZE FIRST-N-ELEMENTS REST-ELEMENTS POLY-MATCH-FIND-REST-*-ARGS POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR WRITE-DISJUNCTIONS ORDER-ASS PURE-ORIENT-AN-EQN ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-AT-ROOT-ONE-RULE MULT-LENGTH CON1-NUMS CON-NUMS NTIMES IS-SUBSEQUENCE UNKNOWN-SIZE SPECIAL-SIZE PURE-PROCESS-EQUATION PROCESS-EQUATION START-KB APPLYSUBST-PRE TRACE-HYPOTHESE PARA-SUP-TERM2 IS-SYMMETRY-EQN MAKE-PAIRS PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 BIG-PRE-INFO COVER-NORM-TERM COVER-NORM-ORDER INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN OR-COUNT PROCESS-ASS-SIMPLE BRT POSTPONE-OR-UNDO UNIFY UNIFIER UNIFIERS SYM-ARG-POSITIONS DIO2 DIO COMBINATE2 COMBINATE ADD-SOLN GET-SOLUTIONS SUMYMAX GET-LCM-SOLNS GENERAL-BASIS-VECTORS ALL-ONES FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'SIMPLIFY-ALMOST-FLAT :callers) '(BRT))
(setf (callers-list 'INSERT :callers) '(ORDER-ASS))
(setf (callers-list 'APPLY-TO :callers) '(ADD-TO-ARGS))
(setf (callers-list 'FILLARRAY :callers) '(GENERAL-BASIS-VECTORS DIO-INITIALIZE))
(setf (callers-list 'IS-CONSTANT-TERM :callers) '(IS-CHARACTER-RULE))
(setf (callers-list 'UNTIL :callers) '(PARSE-LOOP1))
(setf (callers-list 'EXT-OPERATOR :callers) '(OPERATOR-OPTIONS))
(setf (callers-list 'ZEROP :callers) '(LISTARRAY))
(setf (callers-list 'INDUC-SUPERPOSITION :callers) '(CRITPAIRS))
(setf (callers-list 'ADD-CONDI-DOMINATE-RULE :callers) '(INDUC-ADD-RULE))
(setf (callers-list 'DIO-INITIALIZE :callers) '(FULL-DIO ALL-ONES))
(setf (callers-list 'X_INDUC :callers) '(MANUAL_REDUCE))
(setf (callers-list 'QUERY-ADD-EQN :callers) '(SUCC-END-INDUC COVER-NORMAL-PROOF QUERY-ADD-EQN))
(setf (callers-list 'COPY :callers) '(PROOF-UNDER-NEW-PREMISES TRY-SUGG-PREC PRED-FUNC-SUPERPOSITION))
(setf (callers-list 'COVER-SET-INDUC-STRA :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'IS-GENERAL-RULE :callers) '(PURE-SUPERPOSITION FUNC-SUPERPOSITION))
(setf (callers-list 'ADD-PAIRS :callers) '(REDUCE-OTHER-RULES))
(setf (callers-list 'DOWN-HILL-ONE :callers) '(MAKE-ONE-DOWN-HILL PRE-CRIT-CHECKEQ))
(setf (callers-list 'MEMQ :callers) '(ORIENT-INDUC-HYPO IS-EXIST-TYPE-NAME IS-SUBTYPE WELL-TYPED-VAR COMPLETE-WELL-TYPED WELL-TYPED2 FREE-VARS SIZE IS-VALID-OP FIXUP-QUANTIFIED-FORMULA ENTER-OP EXPECTING-PREDICATES EXPECTING-FUNCTIONS TOP-TERM GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE EXTEND-DEF-DOMAIN COMPLETE-TEST START-TEST DEPENDED-OP INDUC-AC-SUBS IS-SKOLEM-OP ALL-NONVARS REDUCE-BY-PREMISE-AT-ROOT ADD-PREMISE-END DEFAULT-PRECEDENCE POLY-INITIALIZE IS-CHARACTER-RULE M-*-P M-*-M NONDO-CRIT MAN-PICK-2ND-RULE DETACHMENT-RULE IDEM-SUPERPOSITION PRED-SUPERPOSITION WRITE-DETAIL-RULE ORDER-PC-RES COMPARE-TERM ORIENT-AN-EQN EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-CONSTRUCTOR NORM-BOOL-INNERMOST OUTRED1 AC-COMPRESS REWRITE-AT-ROOT CTX-BAD-LUCK AC-C-ROOT ELIM-BIN MATCH-POSS IS-VALID-RULE FIRST-PROCESS-EQN ASK-A-CHOICE INFIX-LETTER NEXT-TOKEN IF* SYMMETRY-TERMS CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE MAKE-CYCLE-RULE IS-CYCLE-EQN MAKE-PAIRS ACCEPTABLE-PAIR AC-SUPERPOSITION INDUC-IDEM-SUPERPOSITION INDUC-SUP-TERM SUPERPOSITION CONSISTENT-PAIR CONSISTENT-RULE LRPO-PREMISES COMMUNE-TERMS IS-P-COMMUT-PAIR C-PERMUTATION NEW-RULE-FROM-ASSOC LEFT-ARG RIGHT-ARG DIVISIBLE-CHECK2 INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN HASQUANT SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS BREAK-ASS PLAUSIBLE UNIFY-WITH-AC ACO-LRPO> IS-ASSOC-UNDER-C COMPRESS-FLAT SUB-NONVARS2))
(setf (callers-list 'MAKE-EQ-PRE :callers) '(MAKE-BETTER-PRE))
(setf (callers-list 'UNIFY :callers) '(DISPLAY-UNIFY UNIFIERS))
(setf (callers-list 'FLAT-TERM-FUNC :callers) '(RPL-BY-TERMS))
(setf (callers-list 'MENU_FOR_MANUAL_REDUCE :callers) '(MANUAL_REDUCE))
(setf (callers-list 'IS-P-COMMUT-PAIR :callers) '(TRY-TO-ORIENT))
(setf (callers-list 'PREC-CONSISTENT :callers) '(ACLRPO))
(setf (callers-list 'PURE-ADD-RULE :callers) '(PURE-ORIENT-AN-EQN))
(setf (callers-list 'REDUCIBLE :callers) '(IS-NORMAL MAKE-ONE-BUILD NEW-RULE-FROM-ASSOC DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK))
(setf (callers-list 'REMOVE0 :callers) '(GET-TESTSET IS-CHARACTER-RULE POLY-MATCH-+ ELIM-BIN SPLIT-RHS-OR SPLIT-RHS-AND PARA-SUP-TERM2 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE UNIT-RULE HEAD-LESS-THAN-PRES IS-P-COMMUT-PAIR DIVISIBLE-AC-CHECK INDUC-ADD-RULE GET-SKO-FUNC NEGATE-XOR-ARGS))
(setf (callers-list 'NORM-EQ-ARGS :callers) '(NORM-BOOL-INNERMOST))
(setf (callers-list 'EQN2ASS :callers) '(NEGATE-EQN))
(setf (callers-list 'COVER-CASE-COND-FLAG :callers) '(COVER-SET-INDUC-STRA))
(setf (callers-list 'SUBST :callers) '(PROOF-UNDER-NEW-PREMISES SUBSTITUTE-SLOOP-BODY MAKE-VALUE ADD-PREMISE-END SUBST-EQN))
(setf (callers-list 'CYCLE-REDUCE-AT-ROOT-4 :callers) '(CYCLE-REWRITE-RULE))
(setf (callers-list 'WITH-STRATEGY :callers) '(CRIT-STRATEGY-OPTIONS))
(setf (callers-list 'CONSISTENT-RULE :callers) '(ADD-RULE-COMPLETE))
(setf (callers-list 'MAKE-PRE-EQN :callers) '(MAKE-PRE-ASS PROCESS-PRE-ASS PRE-PROCESS-PRE-ASS))
(setf (callers-list 'PARSE-LOOP-COLLECT :callers) '(PARSE-ONE-WHEN-CLAUSE))
(setf (callers-list 'MULT-FORM :callers) '(NORM-POLY REDUCE-BY-CHARACTER MOVE-MONOS MOVE-LHS-ARGS WRITE-TERM-SIMPLE OUTRED1 DIVIDED-BY RPOMULT CYCLE-REDUCE-AT-ROOT-2 MAKE-CYCLE-RULE REDUCE-BY-P-COMMUT ACO-RPOMULT>= ACO-RPOMULT> ACO-HARD>))
(setf (callers-list 'BUTLAST :callers) '(PRINT-NODE SHOW-TREE CHECK_AND_ADD WRITE-DETAIL-RULE))
(setf (callers-list 'IS-ASSOC-PAIR :callers) '(IS-VALID-RULE IS-ASSOC-UNDER-C))
(setf (callers-list 'AUTO-OPERATOR :callers) '(NEW-TERM))
(setf (callers-list 'MATCH-POSS :callers) '(MATCH-POSS APPLIES))
(setf (callers-list 'REMOVE-IRRELEVANT2 :callers) '(X_AUTO_INDUC))
(setf (callers-list 'SECOND :callers) '(SWITCH_RULE_LR IN-ARRAY-SLOOP-FOR PARSE-LOOP-FOR LOOP-DECLARE-BINDING MAKE-VALUE THE-TYPE PARSE-LOOP-INITIALLY SUBSUMED-TUPLE DEFINING-POSITIONS GET-SCHEME-VARS GET-INDUC-VARS ONE-PREMISE-IS-TRUE WRITE-DETAIL-RULE MR EQ-MATCH VARS-ONLY UNKNOWN-SIZE LISTARRAY FILLARRAY TRACE-CRIT RULE-NUMS-FROM-SOURCE JUSTIFY-EQN SUBSUMED-PREMISES PRE-CRIT-CHECKEQ COMMU-EXCHANGE COMMUE-EXCHANGE DIVISIBLE-CHECK ELIMINATE-SUB COMPRESS-FLAT))
(setf (callers-list 'MEMBER-TERM :callers) '(CAN-HAVE-NEW-OP))
(setf (callers-list 'OP-POSITION :callers) '(CHECK-BUILD-RULE IS-HIGHER-TERM))
(setf (callers-list 'MAKE-ASS-COM-OP :callers) '(IS-VALID-RULE))
(setf (callers-list 'EQN-INSTANCE :callers) '(FORM-SUBGOALS-FROM-PATTERNS))
(setf (callers-list 'IS-AN-INSTANCE :callers) '(NAIL-QUASI-REDUCIBLE))
(setf (callers-list 'RENAME-OP-RULES :callers) '(SAVE-RRL))
(setf (callers-list 'WRITEF-SYS :callers) '(RRL-AUX))
(setf (callers-list 'CLEAR-OUTPUT :callers) '(DRAIN))
(setf (callers-list 'BOOL-REWRITE-AT-ROOT :callers) '(NORM-BOOL-INNERMOST))
(setf (callers-list 'PROCESS-ASS-SIMPLE :callers) '(PRED-CRITICAL-PAIR PROCESS-ASS2))
(setf (callers-list 'MAKE-CRIT-RULE :callers) '(MANUAL-ORIENT ASK-USER))
(setf (callers-list 'ADD-RULE-LINEAR :callers) '(ADD-RULE))
(setf (callers-list 'SUBST0 :callers) '(PROOF-UNDER-NEW-PREMISES ADD-PREMISE-END SUBST-EQN))
(setf (callers-list 'NON-CONSTANTS :callers) '(GET-TESTSET-QUASI))
(setf (callers-list 'MACROEXPAND :callers) '(PRINC0))
(setf (callers-list 'NEW-TERM :callers) '(ADD-OPERATOR))
(setf (callers-list 'SAME-LIST :callers) '(IS-CYCLE-EQN IS-P-COMMUT-PAIR))
(setf (callers-list 'CHOOSE-BEST-SCHEMES :callers) '(COVER-SET-SCHEME))
(setf (callers-list 'INDUC-PICK-UNMARK :callers) '(PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE))
(setf (callers-list 'PRODUCT-LISTS :callers) '(PRODUCT-LISTS))
(setf (callers-list 'DOTIMES :callers) '(PARSE-LOOP-MAP PARSE-LOOP-MACRO LISTARRAY FILLARRAY ALLSYM))
(setf (callers-list 'DISKSAVE :callers) '(MAKE-RRL-IMAGE))
(setf (callers-list 'EQ :callers) '(ORIENT-INDUC-HYPO SUCC-END-INDUC X_READ_TERM PROOF-UNDER-NEW-PREMISES X_AUTO_INDUC X_REDUCE-BY-ONE-RULE X_ONE_RULE MANUAL_REDUCE WELL-TYPED-EQN GET-SUBTYPES IS-SUBTYPE TYPE-COHERE WELL-TYPED-VAR PSEUDO-TERM-ORDERING SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM OCCURS-IN IS-SUBTERM REPVARSIN SIZE SET-UP-ARITY2 DESTROYABLE GET-TESTSET TEST-ONE-OP COMPLETE-TEST APPLY-TO SIZE-UNI PARSE-LOOP-FOR PARSE-LOOP-DECLARE LOOP-DECLARE-BINDING MAKE-VALUE THE-TYPE MERGE-TWO-PATTERNS MERGEBLE-TERMS REFUTE-EQN INDUC-PROVE PROVE REDUCE-BY-PREMISE-AT-ROOT SUBST-VAR-PREMISES IS-EQ-TRUE-PRE IS-EQ-FALSE-PRE SUPER-ITSELF-PRE NEGATE-ONE-PRE REMAKE-PREMISES NOFALSE-PREMISES ADD-PREMISE-END ADD-SIMPLIFY-OTHERS MAKE-BETTER-PRE NORM-ONE-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES PC-GRT-PREC DEFAULT-PRECEDENCE NORM-POLY IS-HOMOGENEOUS-TERM POLY-LRPO POLY-SUPER-DISTRIBUTION POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE *-CANONICALIZE +-CANONICALIZE CHOOSE-BY-HAND PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE DETACHMENT-SUPER DETACHMENT-RULE PRED-CRITICAL-PAIR IDEM-SUPERPOSITION WRITE-DETAIL-RULE WRITE-DISJUNCTIONS WRITE-TERM-SIMPLE WRITE-F-RHS WRITE-RHS WRITE-F-EQN WRITEF-SYS TOTAL-ORDER-ATOM TOTAL-ORDER-RES COMPARE-TERM ORDER-ASS MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ MAKE-EQ TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN SUPPORT-EQN BRAKE-CHOICE FASTKB-CHOICES TRY-MAKE-EQUI SIZE-DEPTH-STR FOPC-STRA PICK-STRATEGY ORDER-STR COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS REDUCE-AT-ROOT-BOOL NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX SIMPLIFY-COND-TERM REDUCE-COND-TERM NORM-RHS PURE-REDUCE-BY-ONE-AT-ROOT PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE CYCLE-CHECK ADD-REST-ARGS ADD-TO-ARGS SIMPLIFY-MY-EQ-TERM TRY-ONE-RULE REWRITE-AT-ROOT LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE PICK-GOAL LINEAR EQ-MATCH ELIM-BIN MATCH-POSS AC-MATCH APPLIES PURE-MATCH MATCH NONAC-UNIFY NORMAL-FORM-SUB DECOMPOSE-TERMS MAKE-RULE-FROM-ASS INVALID-RULE FLATTEN-WITNESS ADD-RULE-LINEAR READ-THIS-EQN READ-ATOM GET-ATOM NEXT-TOKEN READ-T-TERM GET-CLAUSE GET-EQUATION READ-TYPE-RELATION DISPLAY-KB-STAT GIVE-STAT DELETE-EQN DELETE-SYS AND-LHS-TRUE-RHS APPLYSUBST-PRE APPLYSUBST-EQN NORMAL-PROVE PREMISE-INSTANCE APPLYSUBST-RULE RENAME-TERM PRINC0 IF* SELECTQ EQ-IN-MONOMIAL PARA-SUP-TERM2 PARAMODULATE IS-SYMMETRY-RULE CYCLE-REWRITE-RULE IS-SYMMETRY-EQN MAKE-PAIRS ACCEPTABLE-PAIR PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-RULE CONSISTENT-CHECK GOOD-UNIT-CLAUSE MAKE-ONE-DOWN-HILL DOWN-HILL-ONE LRPO-PREMISES HEAD-LESS-PRE MAKE-ONE-BUILD ADD-EXTRA-PREMISE COVER-CONDI-NORM COVER-NORM-TERM COVER-NORM-UNCONDI-EQN IS-COMMUT-PAIR REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT REMOVE-LEFT-ARG2 LEFT-ARG2 REMOVE-RIGHT-ARG2 RIGHT-ARG2 REMOVE-LEFT-ARG LEFT-ARG REMOVE-RIGHT-ARG RIGHT-ARG DIVISIBLE-AC-CHECK DIVISIBLE-NONAC-CHECK ELIMINATE-SUB IS-ELIM-TERM CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS PROCESS-ASS1 M-XOR-P M-XOR-M M-AND-P M-AND-M CANONICALIZE NOT-ARG AUTO-MAKE-EQUI IS-BLOCKED PLAUSIBLE UNIFY-WITH-AC UNIFIER ACO-LPRO>= ACO-LRPO> ACLRPO FLATTEN-RULES IS-ASSOC-PAIR COMPRESS-FLAT FLATTEN-PREMISES EQN-SUB-NONVARS HANDLE-AND WRITE-COMMENT-RHS WRITE-COMMENT-EQN HANDLE-AND? ART?))
(setf (callers-list 'USER-SELECTQ :callers) '(WRITEF-SYS BRAKE-CHOICE FASTKB-CHOICES FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS INVALID-RULE DELETE-SYS))
(setf (callers-list 'GET-DECODED-TIME :callers) '(DATE))
(setf (callers-list 'IS-BOOL-OP :callers) '(ENTER-OP DEFAULT-PRECEDENCE))
(setf (callers-list 'TOKEN-TYPE :callers) '(NEXT-TOKEN GET-ITEM GET-TERM CLEAN-RIGHT-BRACKET))
(setf (callers-list 'FUNCTION :callers) '(PROOF-UNDER-NEW-PREMISES X_CLEAN-RULE X_REDUCE-BY-ONE-RULE TYPE-VAR-LIST ONE-TYPE-VAR-LIST GROUNDP IS-LIMITED VAR-LIST OP-LIST GET-DOWN DEF-DOMAIN-POINTS GET-TESTSET REMOVE-DUP-VARS MAKE-ONE-SCHEME DECIDE-MERGE-CONJ ADD-DEFIN-DEPEND REFUTE-EQN PRE-OPS PRE-VARS ADD-PREMISE-END POLY-INITIALIZE IS-CHARACTER-RULE POLY-SUPER-AT-*-1 POLY-MATCH-+ MARK-SUPERPOSED WRITE-VARIABLE ADD-EQU NORM-EQ-ARGS PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL SUB-TEST LINEAR INSERT-LIST INS-LIS ADD-AT-END MATCH-SET-AC ELIM-BIN MAKE-RULE-FROM-ASS CLEAN-RULE DISABLE-RULE SPLIT-RHS-OR SPLIT-RHS-AND GET-VAR-SUBSTITUTION INSERT CASEQ PARA-SUP-TERM2 TR-TERM TR-ADD EQ-ADD SYMMETRY-TERMS CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE UNIT-RULE AC-SUP-TERM SET-UNIFY NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS INDUC-IDEM-SUPERPOSITION PURE-SUP-TERM SUP-TERM TRACE-INCONSISTENCY MAKE-ONE-DOWN-HILL HEAD-LESS-THAN-PRES MAKE-ONE-BUILD PRINT-NORMALIZED-EQN IS-P-COMMUT-PAIR DIVISIBLE-AC-CHECK FIRST-BOOLEAN-CONSTANT INDUC-REDUCE-OTHERS-AUX INDUC-ADD-RULE GET-SKO-FUNC NEGATE-XOR-ARGS PROCESS-ASS-SIMPLE SIMP-AND-SIMP AND-OF-MONOMIALS BA-SIMP-OR BA-SIMP-AND FLATTEN-RULES MAKE-ASS-COM-OP SUB-NONVARS EQN-SUB-NONVARS SUBST-EQN))
(setf (callers-list 'TOTAL-ORDER-PC-RES :callers) '(TOTAL-ORDER-PC ORDER-PC-RES))
(setf (callers-list 'RELATED-VARS :callers) '(VAR-CONSISTENCY))
(setf (callers-list 'IS-SUBTYPE :callers) '(TYPE-COHERE))
(setf (callers-list 'LUCID-RUNTIME-SUPPORT:BQ-APPEND :callers) '(XIN-MENU SLOOP-SLOOP-MACRO IN-ARRAY-SLOOP-FOR DEF-LOOP-INTERNAL PARSE-LOOP USER-SELECTQ))
(setf (callers-list 'IS-SOURCE-TYPE :callers) '(WRITE-F-EQN ACCEPTABLE-PAIR WRITE-COMMENT-EQN))
(setf (callers-list 'CLOAD2 :callers) '(CRRL))
(setf (callers-list 'VAR-LIST :callers) '(PROOF-BY-HINT-TERM NEWVARSIN GET-DOWN POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE COMPARE-TERM MANUAL-ORIENT ASK-USER MAKE-NEW-RULE CTX-DOMINANT-RULE IS-VALID-RULE IS-VALID-CONDI-RULE CHANGE-VARS SYMMETRY-VARS ELIMINATE-SUB CAN-HAVE-NEW-OP IS-ASSOC-PAIR))
(setf (callers-list 'NEQUAL :callers) '(X_READ_TERM SET-UP-ARITY2 CHECK-ARITY GET-TESTSET MAKE-PRE-EQN IDEM-SUPER-COMMU PRED-FUNC-SUPERPOSITION PRED-SUPERPOSITION TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ASK-FOR-OPERATOR RUNTIME-MAX-WARNING READ-T-TERM UNIT-RULE MAKE-PAIRS PURE-SUPERPOSITION FUNC-SUPERPOSITION INDUC-REDUCE-OTHERS-AUX IS-ASSOC-PAIR SUBST-EQN))
(setf (callers-list 'COMMUTATIVEP :callers) '(AC-COMPRESS C-PERMUTATION COMPRESS-FLAT))
(setf (callers-list 'BREAK :callers) '(ADD-PREMISE-END TRY-TO-ORIENT RRL-AUX PROVE-SPLIT-BOOL))
(setf (callers-list 'COVER-NORMAL-PROOF :callers) '(PROVE))
(setf (callers-list 'MEMBER :callers) '(X_CLEAN-RULE X_REDUCE-BY-ONE-RULE GROUNDP IS-LIMITED ENTER-OP DEF-DOMAIN-POINTS PARSE-LOOP-MAP PARSE-LOOP-MACRO LOOP-DECLARE-BINDING PARSE-LOOP-INITIALLY TRANSLATE-NAME LOOP-COLLECT-KEYWORD-P L-EQUAL LCASE ADD-PREMISE-END IS-REL-PREC EQOPS PC-GRT-PREC GRT-PREC POLY-INITIALIZE POLY-SUPER-AT-*-1 MARK-SUPERPOSED WRITE-VARIABLE TOTAL-ORDER-PC-RES EXT-EQUIVALENCE EXT-CONSTRUCTOR EXT-STATUS EXT-PRECEDENCE COVER-AUTO-LEVEL OUTRED1 AC-COMPRESS CHECKEQ-NORMAL SUB-TEST INSERT-LIST INS-LIS ADD-AT-END MAKE-RULE-FROM-ASS ASK-FOR-OPERATOR OK-TO-CONTINUE GET-ATOM2 SKIP-EOLN IS-VALID-VAR GET-VAR-SUBSTITUTION INSERT CASEQ TR-TERM AC-SUP-TERM PURE-SUP-TERM SUP-TERM CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK COMMUNE-TERMS2 DIVISIBLE-AC-CHECK FIRST-BOOLEAN-CONSTANT FIRST-SPEC-TERM NEGATE-XOR-ARGS SIMP-AND-SIMP AND-OF-MONOMIALS BA-SIMP-OR BA-SIMP-AND))
(setf (callers-list 'STATUS-CANDIDATES :callers) '(AUTO-ORIENT))
(setf (callers-list 'MAKE-BUFFER :callers) '(X_READ_TERM READ-THIS-EQN READ-T-TERM READ-EQNS))
(setf (callers-list '*CATCH :callers) '(ORIENT-INDUC-HYPO SUCC-END-INDUC X_READ_TERM COVER-INDUC-PROVE INPUT-CHECK INDUC-PROVE PURE-ORIENT-AN-EQN ORIENT-AN-EQN RUN-KB READ-THIS-EQN READ-T-TERM RRL-AUX PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN ORDER-ONE-NORM-OTHERS))
(setf (callers-list 'FIXUP-QUANTIFIED-FORMULA :callers) '(FIXUP-QUANTIFIED-FORMULA GET-ITEM))
(setf (callers-list '*THROW :callers) '(CHECK-ARITY BAD-TYPED EXPECTING-PREDICATES REFUTED-RESULT MANUAL-ORIENT CTX-GT-LHS ORDER-CTX TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-AN-EQN ADD1-MODULO-N ADD-OPERATOR INVALID-RULE FOUND-WITNESS RESET-KB UNDO PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR INCONSISTENT-EQN CONSISTENT-RULE))
(setf (callers-list 'EVAL :callers) '(MAKE-VALUE UCONCAT))
(setf (callers-list 'WRITE-COMMENT-PREMISES :callers) '(WRITE-COMMENT-RHS))
(setf (callers-list '+-CANONICALIZE :callers) '(NORM-POLY MOVE-MONOS))
(setf (callers-list 'DELETE0 :callers) '(X_CLEAN-RULE REMOVE-DUP-VARS DECIDE-MERGE-CONJ REFUTE-EQN ADD-EQU LINEAR MATCH-SET-AC MAKE-RULE-FROM-ASS CLEAN-RULE DISABLE-RULE TR-TERM TRACE-INCONSISTENCY MAKE-ONE-BUILD FLATTEN-RULES MAKE-ASS-COM-OP))
(setf (callers-list 'GET-INTERNAL-RUN-TIME :callers) '(INDUC-PROVE PROVE SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR ORDER-ASS PURE-ORIENT-AN-EQN ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-AT-ROOT-ONE-RULE PURE-PROCESS-EQUATION PROCESS-EQUATION START-KB REPORT-CURRENT-TIME RRL-AUX APPLYSUBST-PRE PARA-SUP-TERM2 IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 COVER-NORM-TERM COVER-NORM-ORDER INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN PROCESS-ASS-SIMPLE BRT UNIFY UNIFIER UNIFIERS DIO2 DIO FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'DOWNFROM :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'SET-NO-REDUCTION-MARK :callers) '(ADD-CRIT-RULE))
(setf (callers-list 'REF-INSTANCE-SEEDS :callers) '(REF-INSTANCE-SEEDS GET-INSTANCE-TERMS))
(setf (callers-list 'CLEAR-OPERATORS :callers) '(INITIALIZE))
(setf (callers-list 'ALL-VARS :callers) '(NON-LINEAR-VARS VAR1-LIST ALL-VARS VAR-LIST PRE-VARS COMPARE-TERM VAR-CONSISTENCY LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL CTX-DOMINANT-RULE ADD-RULE-LINEAR IS-CYCLE-EQN COVER-NORM-UNCONDI-EQN AVOIDABLE))
(setf (callers-list 'NAMED :callers) '(PARSE-LOOP1))
(setf (callers-list 'BUILD-PREMISES-FROM-COND-TERM :callers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 X_AUTO_INDUC))
(setf (callers-list 'LEXICO-COMP :callers) '(RPOST))
(setf (callers-list 'NODECLARE :callers) '(PARSE-NO-BODY))
(setf (callers-list 'GET-ALL-RULE-NUMS :callers) '(TRACE-INCONSISTENCY))
(setf (callers-list 'GET-TERM-TYPE :callers) '(COMPLETE-WELL-TYPED WELL-TYPED2 EXPECTING-PREDICATES EXPECTING-FUNCTIONS))
(setf (callers-list 'PURE-NORM-MIXED :callers) '(PURE-NORM))
(setf (callers-list 'READ-EQNS :callers) '(READTEQNS READFEQNS))
(setf (callers-list 'EQ-TR-MEMBER :callers) '(M-AND-M))
(setf (callers-list 'GOOD-LUCK-CONDI :callers) '(AC-MATCH))
(setf (callers-list 'CDR-GREAT :callers) '(MERGE-DUPLICATE))
(setf (callers-list 'OCCURS-IN :callers) '(MAKE-EQ-PRE MAKE-BETTER-PRE NORMAL-FORM-SUB OCCURS-IN-RULE PURE-LRPO UNIFY-WITH-AC))
(setf (callers-list 'NORM-MULT-MONOS :callers) '(NORM-POLY MOVE-MONOS))
(setf (callers-list 'IS-SORTED :callers) '(REDUCE-BY-P-COMMUT2))
(setf (callers-list '< :callers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 X_AUTO_INDUC SMALLER-SIZE OPERATOR-ORDERING PSEUDO-TERM-ORDERING ORDER-VARS TOP-TERM LESSP-SIZE-BINDINGS CAR-LESSP CAR-LENGTH-CDDR ADD-POSITIVE BIN-IS-CURRENT GET-INSTANCE-TERMS2 REF-INSTANCE-SEEDS PC-GRT-PREC MARK-SUPERPOSED NONDO-CRIT PRED-SUPERPOSITION WRITE-GOAL-RULE WRITE-RULE COMPARE-SYMBOL COMP-EQN COMP-RULE IS-SUBSEQUENCE INVALID-RULE IS-VALID-RULE RUNTIME-MAX-WARNING ASK-A-NUMBER INSERT IF* MAKE-CYCLE-RULE MAKE-PAIRS LESS-SIZE-CAR SMALLER-PRE-CAR POSTPONE-IT CAN-HAVE-NEW-OP ONE-COMPOSITION IS-HIGHER-TERM))
(setf (callers-list 'SHOW-TREE :callers) '(SHOW-TREE DISP_TREE))
(setf (callers-list 'ONE-PRESENTATIVE :callers) '(POLY-SUPER-DISTRIBUTION))
(setf (callers-list 'PRINT-HEAD :callers) '(WRITEF-SYS BRAKE-CHOICE FASTKB-CHOICES FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS INVALID-RULE DELETE-SYS))
(setf (callers-list 'GET-RECURSIVE-DEF-TERM :callers) '(GET-RECURSIVE-RETURN-OP ENCOURAGE))
(setf (callers-list 'ACO-LEXICO-COMP-LR :callers) '(ACO-LPRO>= ACO-LRPO>))
(setf (callers-list 'CUTTREE :callers) '(X_MANUAL_INDUC))
(setf (callers-list 'REDUCE-*-TERM :callers) '(POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT))
(setf (callers-list 'ORDER-PC-SEQ :callers) '(PSEUDO-TERM-ORDERING))
(setf (callers-list 'IS-TYPE-PREDICATE :callers) '(NORM-BOOL-INNERMOST))
(setf (callers-list 'IS-SKOLEM-OP :callers) '(SKOLEM-TERMS ALL-NONVARS))
(setf (callers-list 'HALF-CANONICALIZE :callers) '(EQ-IN-MONOMIAL M-AND-P M-AND-M))
(setf (callers-list 'ALL-PRE-VARS :callers) '(STRONG-SUBGOAL-PROOFS INDUC-SUBGOAL-PROOFS POLISH-PREMISES MAKE-NEW-RULE IS-VALID-CONDI-RULE))
(setf (callers-list 'REF-PRES-VARS :callers) '(POLISH-PREMISES))
(setf (callers-list 'IS-FREE-CONSTRUCTOR :callers) '(CONSISTENT-PAIR))
(setf (callers-list 'NOFALSE-PREMISES :callers) '(INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS))
(setf (callers-list 'GET-TESTSET :callers) '(COMPLETE-TEST INDUC-PROVE))
(setf (callers-list 'LAST-CONSISTENCY-CHECK :callers) '(PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL COVER-NORM-UNCONDI-EQN))
(setf (callers-list 'EXT-PRECEDENCE :callers) '(OPERATOR-OPTIONS))
(setf (callers-list 'ORIENT-AN-EQN :callers) '(MAKE-RULE-FROM-ASS))
(setf (callers-list 'APPEND :callers) '(SEARCH_BY_EQN SEARCH_BY_ID ADD_CHILD BREADTH-SEARCH PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM X_AUGMENT X_HYPOTHESIS X_ONE_RULE NEW-ARGS GET-TESTSET COMPOSE PARSE-LOOP-MACRO PARSE-LOOP-COLLECT PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-INITIALLY PARSE-NO-BODY PARSE-LOOP ADD-PATTERNS OPS-OF-RULE INDUC-SUBS-OF-EQN REFUTE-EQN MERGE-PREMISES ADD-PREMISE-END FIRST-PROCESS-PREMISES POLY-SUPER-AT-*-0 REDUCE-*-TERM REDUCE-+-TERM POLY-REDUCE-AT-ROOT M-*-M WRITEF-SYS DISPLAY ADD-EQU REDUCE-AND-TERM REDUCE-XOR-TERM PURE-REWRITE-AT-ROOT NORM-INN ADD-REST-ARGS REDUCE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL FOUND-WITNESS RRL-AUX SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE MY-COPYLIST START-HISTORY REDUCE-EQ-TERM PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION TRACE-INCONSISTENCY REMOVE-IRRELEVANT3 MAKE-ONE-DOWN-HILL OR-CONDI-EQN SUBSUMED-PREMISES REMOVE-ONE-ARG INDUC-REDUCE-OTHERS-AUX PROCESS-ASS-SIMPLE M-AND-M POSTPONE-OR-UNDO HANDLE-AND))
(setf (callers-list 'NTH :callers) '(PROOF-UNDER-NEW-PREMISES ABSTRACT-PROOF X_AUGMENT X_HYPOTHESIS X_ONE_RULE PARSE-LOOP-FOR REMOVE-DUP-VARS IS-CHARACTER-RULE POLY-SUPER-DISTRIBUTION POLY-SUPER-AT-*-1 MARK-SUPERPOSED NONDO-CRIT LAST-CHECK-2ND-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL PRED-CRITICAL-PAIR IDEM-SUPER-COMMU IDEM-SUPERPOSITION PRED-SUPERPOSITION WRITE-DETAIL-RULE WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE MANUAL-ORIENT MAKE-EQ COMP-RULE MAKE-CRIT-RULE TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN POLISH-PREMISES PURE-REDUCE-BY-ONE-AT-ROOT REDUCE-AT-ROOT-ONE-RULE TRY-ONE-RULE LAST-CONSISTENCY-CHECK PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE GOAL-RULE-SIZE MR NEXT-CHOICE IS-CONDI-DOMINATE-RULE ADD-OPERATOR INVALID-RULE IS-VALID-RULE FOUND-WITNESS CLEAN-RULE REDUCE-OTHER-RULES ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE ADD-RULE FIRST-PROCESS-EQN ENABLE-RULE DISABLE-RULE R2E APPLYSUBST-EQN NORMAL-PROVE SPLIT-RHS-OR SPLIT-RHS-AND CYCLE-REDUCE-OTHERS MAKE-CYCLE-RULE PAIR-INFO MAKE-PAIRS ACCEPTABLE-PAIR PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR TRACE-AC-SUPERPOSITION PROCESS-NEW-AC-CP AC-SUPERPOSITION INDUC-IDEM-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 PURE-SUPERPOSITION FUNC-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS TRACE-INCONSISTENCY INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-RULE CONSISTENT-CHECK MAKE-ONE-DOWN-HILL JUSTIFY-EQN ADD-EXTRA-PREMISE COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM MAKE-P-COMMUT-RULE NEW-RULE-FROM-ASSOC CHECK-BUILD-RULE INDUC-REDUCE-OTHERS-AUX INDUC-REDUCE-OTHER-RULES INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE ADD-SOLN MAKE-ASS-COM-OP SUBST-EQN WRITE-COMMENT-EQN))
(setf (callers-list 'UNIFIER :callers) '(NOT-IN-SET PARA-SUP-TERM2 INDUC-IDEM-SUPERPOSITION SUP-TERM2 UNIFIERS))
(setf (callers-list 'MAKE-RULE-FROM-ASS :callers) '(ORDER-ASS MAKE-RULE-FROM-ASS))
(setf (callers-list 'SAME-ROOT :callers) '(X_REDUCE-BY-ONE-RULE POLY-LRPO PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE MAKE-PAIRS))
(setf (callers-list 'PURE-ORIENT-AN-EQN :callers) '(PURE-PROCESS-EQUATION))
(setf (callers-list 'ADD-REST-ARGS :callers) '(ADD-TO-ARGS))
(setf (callers-list '(NCONC APPEND) :callers) '(PARSE-LOOP-COLLECT))
(setf (callers-list 'REMOVE-LEFT-ARG2 :callers) '(REMOVE-LEFT-ARG2 REMOVE-LEFT-ARG))
(setf (callers-list 'ASK-FOR-OPERATOR :callers) '(NEW-TERM))
(setf (callers-list 'LOOP-DECLARE-BINDING :callers) '(PARSE-LOOP-DECLARE LOOP-DECLARE-BINDING LOOP-ADD-BINDING))
(setf (callers-list 'WRITE-TERM-BOOL :callers) '(PRINT-SUGG-INFO WRITE-ONE-PRE WRITE-TERM-BOOL WRITE-TERM))
(setf (callers-list 'CAADR :callers) '(NORMALIZE))
(setf (callers-list 'TRY-TO-ORIENT-CONDI :callers) '(ORIENT-RULE))
(setf (callers-list 'READ-INPUT :callers) '(REFUTE-EQN LINEAR RRL-AUX))
(setf (callers-list 'QUOTE :callers) '(SEARCH_BY_EQN SEARCH_BY_ID BREADTH-SEARCH SHOW-TREE ORIENT-INDUC-HYPO STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 SUCC-END-INDUC X_READ_TERM X_INITIAL REDUCTION-PROOF FORM-SUBGOALS-FROM-PATTERNS COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-INDUC-PROVE COVER-SET-SCHEME ABSTRACT-PROOF INDUC-SUBGOAL-PROOFS EQN-AS-RULE-INFO RESUME_AUTO HEAD_OF_MANUAL_INDUC X_MANUAL_INDUC HEAD_OF_FAILURE_HANDLER XIN-MENU CHECK_AND_ADD X_AUTO_INDUC WAIT-RETURN CLEARSCREEN MENU_FOR_CURSOR HEAD_OF_FRI X_AUGMENT X_PREPARE_RULES REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE MENU_FOR_NORMAL MENU_FOR_MANUAL_REDUCE X_INDUC MANUAL_REDUCE WELL-TYPED-EQN IS-EXIST-TYPE-NAME DISPLAY-ONE-ARITY2 GET-SUBTYPES IS-SUBTYPE EXT-TYPE-RELATION GET-CODOMAIN-TYPES GET-DOMAIN-TYPE WELL-TYPED-VAR GET-TERM-TYPE COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2 TYPE-VAR-LIST PSEUDO-TERM-ORDERING RENAME-VARY RENAME-VAR RPL-BY-TERMS2 FREE-VARS MAKE-NEW-VARIABLE SIZE EXPECT-ARITY EXPECT-ARITY21 EXPECT-ARITY12 SET-UP-ARITY2 CHECK-ARITY ENSURE-PREDICATE EXPECTING-PREDICATES EXPECTING-FUNCTIONS TOP-TERM DESTROYABLE GET-SKELETON2 GET-SKELETON GET-TESTSET TEST-ONE-OP COMPLETE-TEST IN-FRINGE-SLOOP-MAP MAP-FRINGE COLLATE-SLOOP-COLLECT FIRST-USE-SLOOP-FOR IN-CAREFULLY-SLOOP-FOR SLOOP-SLOOP-MACRO =-SLOOP-FOR IN-ARRAY-SLOOP-FOR IN-PACKAGE-SLOOP-MAP IN-TABLE-SLOOP-MAP RETURN-SLOOP-MACRO REPEAT-SLOOP-MACRO AVERAGING-SLOOP-MACRO NEVER-SLOOP-COLLECT ALWAYS-SLOOP-COLLECT THEREIS-SLOOP-COLLECT COUNT-SLOOP-COLLECT MINIMIZE-SLOOP-COLLECT MAXIMIZE-SLOOP-COLLECT LOGXOR-SLOOP-COLLECT SUM-SLOOP-COLLECT DEF-LOOP-INTERNAL SUBSTITUTE-SLOOP-BODY PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-FOR ADD-FROM-DATA PARSE-LOOP-DECLARE LOOP-DECLARE-BINDING MAKE-VALUE THE-TYPE LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP-COLLECT PARSE-LOOP-WHEN PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-INITIALLY PARSE-LOOP-DO PARSE-NO-BODY PARSE-LOOP1 PARSE-LOOP LOOP-UN-POP LOOP-POP TRANSLATE-NAME LOOP-COLLECT-KEYWORD-P L-EQUAL SLOOP-SWAP DEF-LOOP-COLLECT DEF-LOOP-MACRO DEF-LOOP-FOR DEF-LOOP-MAP DESETQ DESETQ1 LCASE SUBSUMED-TUPLE RENAME-PATTERN OPS-OF-RULE INDUC-SUBS-OF-EQN DECIDE-DEFIN-MODE OBJ-NAME SOURCE-NAME IS-SKOLEM-OP REFUTE-RULE-INSTANCES ALL-NONVARS NEGATE-EQN REFUTE-EQN REFUTED-RESULT INDUC-PROVE PROVE SUBST-PREMISES IS-EQ-TRUE-PRE IS-EQ-FALSE-PRE SUPER-ITSELF-PRE MARK-USED-PRE NEGATE-ONE-PRE REMAKE-PREMISES MAKE-PRE-ASS NOFALSE-PREMISES ONE-PREMISE-IS-TRUE SIMPLIFY-PREMISES ADD-PREMISE-END ADD-SIMPLIFY-OTHERS MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE FIRST-VAR-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES FIRST-PROCESS-PREMISES MY-FIRST-CTX-TRANS TRANS-STATUS DEFAULT-PRECEDENCE NORM-POLY IS-HOMOGENEOUS-TERM POLY-INITIALIZE POLY-LRPO POLY-SUPER-DISTRIBUTION POLY-SUPER-AT-*-0 POLY-SUPER-AT-* FIRST-N-ELEMENTS REST-ELEMENTS POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-+ REDUCE-*-TERM REDUCE-+-TERM POLY-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT *-CANONICALIZE +-CANONICALIZE INSERT-SORT-ARG MERGE-SORT-ARGS M-+-P M-+-M P-*-P P-*-M M-*-P M-*-M P-+-P SIMPLIFY-+ TIMES-CDR CHANGE-MONO-SIGN MAN-PICK-2ND-RULE CHOOSE-BY-HAND PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL DETACHMENT-RULE PRED-CRITICAL-PAIR IDEM-SUPER-COMMU IDEM-SUPERPOSITION PRED-SUPERPOSITION WRITE-DETAIL-RULE WRITE-ONE-PRE WRITE-DISJUNCTIONS WRITE-TERM-SIMPLE LIST-ASSERTIONS WRITE-F-RHS WRITE-RHS WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE OPEN-WRITE-FILE WRITEF-SYS TOTAL-ORDER-RES TOTAL-ORDER-PC-RES ORDER-PC-RES COMPARE-TERM SIZE-COMPARE ORDER-ASS MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ MANUAL-ORIENT MAKE-EQ COMP-EQN COMP-RULE MAKE-CRIT-RULE ASK-USER TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA SUPPORT-EQN EQ-PRE-STRAT OPERATOR-STRA BRAKE-CHOICE POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE FASTKB-CHOICES WARN-STAT TRY-MAKE-EQUI EXT-EQUIVALENCE EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-CONSTRUCTOR EXT-STATUS EXT-PRECEDENCE NORM-STRATEGY SIZE-DEPTH-STR RESTRICT-CRIT-STRA BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR FOPC-STRA IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS GET-ARITY REDUCE-AND-TERM REDUCE-XOR-TERM REDUCE-AT-ROOT-BOOL NORM-EQ-ARGS NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX OUTRED1 SIMPLIFY-COND-TERM REDUCE-COND-TERM NORM-RHS REDUCE-BY-ONE-AT-ROOT AC-COMPRESS ADD-TO-ARGS SIMPLIFY-MY-EQ-TERM TRY-ONE-EXTRA-VAR-RULE TRY-ONE-RULE REWRITE-AT-ROOT LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE GOAL-RULE-SIZE PICK-GOAL MR LINEAR CON1-NUMS CON-NUMS NTIMES IS-SUBSEQUENCE MATCH-PREMISE EQ-MATCH MATCH-BOOL-NEW MATCH-SET-AC INCREMENT-POS VARS-ONLY MATCH-POSS ACM-AC-ROOT ACM-NO-ARG ACM-NONAC ACM-POLY-ONE-TO-MANY ACM-POLY-* ACM-ONE-VAR ACM-AND-EQ ACM-VARIABLE APPLIES GOOD-LUCK-CONDI INSERT-POLY-SIGMA POLY-SIGMA PURE-MATCH MATCH NONAC-UNIFY DECOMPOSE-TERMS ADD-BIND-TO-SUB OCCURS-IN-RULE MAKE-RULE-FROM-ASS AUTO-OPERATOR ASK-FOR-OPERATOR ADD-OPERATOR CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE RPOST EQUIV PURE-LRPO FLATTEN-WITNESS ADD-RULE-LINEAR ADD-RULE-COMPLETE ADD-RULE FIRST-PROCESS-EQN PROCESS-EQUATION READ-THIS-EQN OK-TO-CONTINUE ASK-A-NUMBER ASK-A-CHOICE READ-ARGS INFIX-LETTER GET-ATOM2 GET-ATOM TOKEN-EOLN NEXT-TOKEN READ-T-TERM GET-VARLIST GET-ITEM GET-LOW-OPS GET-RHS NEGATE-LITERAL CONDI-FROM-CLAUSE GET-CLAUSE GET-EQUATION CLEAN-RIGHT-BRACKET READ-TYPE-RELATION READ-ARITY OPEN-READ-FILE IS-VALID-VAR DISPLAY-KB-STAT GIVE-STAT TEST-RRL DELETE-EQN DELETE-SYS RRL-AUX START-UP TIME-IN-SEC RUN-TIME START-TIMER R2E PRE-INIT DEFAULT-FLAG AND-LHS-TRUE-RHS SIMILAR-EQN IS-PREVIOUS-INDUC-EQN APPLYSUBST-EQN NORMAL-PROVE PREMISE-INSTANCE FORM-PREMISES-FROM-CONJ SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE RENAME-EQN-RULE RENAME-TERM UNDO1 ALLSYM NEWSYM INITSYM CHAR-ASCII UCONCAT PRINC0 PNTLEN REM-DUPS APPEND1 GET_PNAME *THROW *CATCH ASET PUTPROP TIMES REMAINDER QUOTIENT MINUS LESSP GREATERP DIFF NTHELEM SYMEVAL COPYLIST COPYSYMBOL COPY NEQUAL NEQ DELETE0 IF* SELECTQ CASEQ REMQ REMOVE0 ASSOC0 MEMBER-EQUAL MEMBER0 SUBST0 EQ-IN-MONOMIAL PARA-SUP-TERM2 PARAMODULATE TR-TERM REDUCE-EQ-TERM ALL-PRE-VARS ARRANGE-EQ-ARGS PROCESS-DEL-RULE ASK-CHOICE ASK-NUMBER CROSS-PRODUCT COVER-OF EQUAL-TERM COLLECT-IF ALWAYS THEREIS IS-POLY IS-TYPE-PREDICATE FLAT-TERM IS-USED-PRE IS-HYPO-PRE MAKE-PRE GET-PRE-RHS GET-PRE-LHS GET-PREMISES IS-PREMISE-SET SORT-OF LAST-LETTER LETTERP ADD-END PUSH-END INSERT1 INC HALF-CANONICALIZE C-MATCH QUANTIFIERP BOOLEAN-OPP DOMAIN-RULEP PROCESS-ASSERTION PRINT-NAME SINGLE ONE-ARG SYNERR TOKEN-TYPE TOKEN-TEXT TOKEN-PORT CUR-VAL GET-DEF-DOMAIN GUIDE-REDUCIBLE-TIME REDUCIBLE-TIME C-PERMU AC-EQUAL REMONCE QUERY-INSERT ADD-ASSOCIATE-LIST ADD-TIME USER-SELECTQ CODE DRAIN-IT MY-UNTYI MY-TYO MY-TYI MY-TYIPEEK MY-PROBEF GET-NONCONS IS-FREE-CONSTRUCTOR CONSTRUCTORP SET-CONSTRUCTOR COMMUTATIVEP SET-COMMUTATIVE SKOLEMP REM-SKOLEM SET-SKOLEM PREDICATEP REM-PREDICATE SET-PREDICATE COMM-ROOT COMM-OP-P AC-ROOT AC-OP-P REM-STATUS GET-STATUS SET-STATUS REM-ARITY2 GET-ARITY2 SET-ARITY2 REM-ARITY IS-CONSTANT SET-ARITY IS-RULE-SOURCE-TYPE CHANGE-RULE-SOURCE-TYPE INFIXP REM-INFIX SET-INFIX GET-RULES-WITH-OP RULES-WITH-OP REF-PRES-VARS LHS-VARS IS-GENERAL-RULE IS-REDUCTION RULE-SOURCE-TYPE RULE-SOURCE PAIRSWITH LHSIZE CHANGE-RULENO RULENO PRED-RULEP REF-EXTRA-PRE-VARIABLES SET-EXTRA-PRE-VARIABLES SET-NO-REDUCTION-MARK REF-SYMMETRY-VARS REF-SYMMETRY-TERMS CRIT-MARKED SET-SYMMETRY-MARK SET-CRIT-MARK IS-CONDI-RULE CTX RHS LHS MAKE-RULE IS-INPUT-ASS IS-ONEWAY SET-EQN-MARK ASSERTIONP IS-ASSERTION EQN2ASS ASS2EQN IS-PROP-EQN CHANGE-SOURCE EXCHANGE-LR CHANGE-CTX CHANGE-LHS-RHS-CTX CHANGE-LHS-RHS CHANGE-RHS CHANGE-LHS IS-SOURCE-TYPE EQN-SOURCE-TYPE EQN-SOURCE IS-CONDI-EQN EQN-CTX MAKE-EQN IS-BOOL-OP NULL-CTX TRUEP NOT-FALSEP FALSEP APPLYSUBST UNITP SAME-PNAME IS-ROOTED-+ IS-BOOL-ROOT MAKE-TERMS NTHSUBT SAME-ROOT SAME-OP? SAME-OP SECOND-ARG FIRST-ARG NARGS NONVARP CONSTANT? ARGUMENTS VAR? VARIABLEP ARGS ARGS-OF OP-OF MAKE-TERM-1ARG MAKE-TERM IS-SYMMETRY-RULE CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 IS-CYCLE-EQN MAKE-PAIRS POLY-MAKE-PAIRS ACCEPTABLE-PAIR PROCESS-AC-CRITICAL-PAIR AC-CRITICAL-SOURCE NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION SUP-TERM2 SUP-TERM PURE-SUPERPOSITION FUNC-SUPERPOSITION SUPERPOSITION AC-CRITPAIRS CRITPAIRS INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-RULE CONSISTENT-CHECK HANDLE-FACTOR GOOD-UNIT-CLAUSE REMOVE-IRRELEVANT3 REMOVE-IRRELEVANT MAKE-ONE-DOWN-HILL DOWN-HILL-ONE OR-CONDI-EQN LRPO-PREMISES HEAD-LESS-THAN-PRES HEAD-LESS-PRE JUSTIFY-EQN EQN2PRE MAKE-ONE-BUILD ADD-EXTRA-PREMISE COVER-CONDI-NORM PRE-CRIT-CHECKEQ COVER-NORM-TERM COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE PRINT-NORMALIZED-EQN COMMUNE-TERMS REDUCE-BY-P-COMMUT2 NEW-RULE-FROM-ASSOC REMOVE-LEFT-ARG LEFT-ARG REMOVE-RIGHT-ARG RIGHT-ARG DIVISIBLE-NONAC-CHECK MANY-ARGS2 ELIMINATE-SUB IS-ELIM-TERM ELIMINABLE-TERMS REMOVE-VAR-PRES CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT HAVE-BOOLEAN-CONSTANT FIND-SPECIAL-TERM BUILD-PREMISES-FROM-BOOL-TERM BUILD-PREMISES-FROM-COND-TERM RELEASE-PREMISES INDUC-REDUCE-OTHERS-AUX QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE GET-SKO-FUNC HASQUANT SUBST-QUANT-FORM SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS NEGATE-XOR-ARGS NEGATE-PREDICATE TRIVIAL-SIMPLIFY BREAK-AT-OR OR-COUNT SUBSTVARFOR BREAK-ASS PROCESS-ASS1 EQN2ASSERTION INIT-BOOL-OPS SIMP-XOR SIMP-AND-SIMP SIMP-AND AND-OF-MONOMIALS SIMPLIFY-FLAT P-XOR-P M-XOR-P M-XOR-M P-AND-P M-AND-P M-AND-M INSERT-AND-REMOVE-PAIRS MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS DECANON-XOR DECANON-AND CANONICALIZE NOT-ARG OR-ARGS FIRST-TRANS NEW-FIRST-CTX-TRANS BA-SIMP-NOT BA-SIMPLIFY NEW-FIRST-TRANS AUTO-ADD-STATUS AUTO-MAKE-EQUI POSTPONE-OR-UNDO POSTPONE-IT AUTO-ORIENT PLAUSIBLE ACUNI ACTUAL-UNIFY-ACTION UNIFY-WITH-AC UNIFIER ACO-LRPO= ACO-PULL-OUT-BIG-EQ-SUBS MY-COPYLIST2 ACO-COMPUTE-SIZES ACO-COLLECT-BIGT ACO-DELETE-EQUIV ACO-LPRO>= ACO-LRPO> ACO-RPOSTATUS>= ACO-RPOSTATUS> ACLRPO SYM-ARG-POSITIONS DIO2 DIO COMBINATE2 COMBINATE ADD-SOLN GET-SOLUTIONS SUMYMAX GET-LCM-SOLNS GENERAL-BASIS-VECTORS DIO-INITIALIZE ALL-ONES FLATTEN-RULES MAKE-ASS-COM-OP COMPRESS-FLAT FLATTEN-PREMISES FLATTEN-EQN EQN-SUB-NONVARS SUBST-EQN MAKE-RRL-IMAGE HANDLE-AND SET-HANDLE-AND SET-ART-MODE LOOP-RETURN SLOOP::LOOP-FINISH LOCAL-FINISH WRITE-COMMENT-RHS WRITE-COMMENT-EQN WHEN-ART-WITH-INPUT-FROM-TERMINAL HANDLE-AND? ART?))
(setf (callers-list 'BOTH-ADD-PREDICATE :callers) '(IDEM-SUPERPOSITION))
(setf (callers-list 'COVER-NORM-TERM :callers) '(NORM-ONE-PRE FIRST-VAR-PRE SIMPLIFY-COND-TERM COVER-NORM-TERM COVER-NORM-UNCONDI-EQN))
(setf (callers-list 'READFEQNS :callers) '(READ-INPUT))
(setf (callers-list 'WRITE-TERM-SIMPLE :callers) '(PROOF-UNDER-NEW-PREMISES WRITE-SIGMA WRITE-TERM-SIMPLE WRITE-F-RHS WRITE-F-EQN WRITE-F-RULE TRACE-DIVISIBLE WRITE-COMMENT-EQN))
(setf (callers-list 'MULT-DIFF2 :callers) '(MOVE-MONOS))
(setf (callers-list 'SIMPLIFY :callers) '(BRT SIMP-FIRST-TRANS))
(setf (callers-list 'NODE-INFO :callers) '(SEARCH_BY_EQN ADD_CHILD SHOW-NODE WRITE-NODE X_INITIAL LIST_NODE))
(setf (callers-list 'HEAD_OF_FAILURE_HANDLER :callers) '(X_FAILURE_HANDLER))
(setf (callers-list 'SIMPLIFY-ALL-PREMISES :callers) '(MAKE-ONE-BUILD COVER-CONDI-NORM))
(setf (callers-list 'RULES-WITH-OP :callers) '(DEFINING-DOMAIN GET-RECURSIVE-RETURN-OP COVER-SETS REDUCE-AND-TERM REDUCE-XOR-TERM NORM-INN PURE-NORM-INN REDUCE-EQ-TERM CYCLE-REDUCE-TERM GOOD-UNIT-CLAUSE INDUC-REDUCE-OTHER-RULES))
(setf (callers-list 'SMALLER-PRE-CAR :callers) '(COVER-CONDI-NORM))
(setf (callers-list 'CAAR :callers) '(LESSP-SIZE-BINDINGS LOOP-ADD-BINDING LOOP-LET-BINDINGS COLLECT-CDR-WITH-SAME-CAR REF-INSTANCE-SEEDS IS-EQ-TRUE-PRE IS-EQ-FALSE-PRE SUPER-ITSELF-PRE ADD-SIMPLIFY-OTHERS WRITE-SIGMA WRITE-TERM-SIMPLE WRITE-ASSERTION NORMALIZE NORMAL-FORM-SUB SUPERPOSITION AC-CRITPAIRS GOOD-UNIT-CLAUSE MAKE-ONE-DOWN-HILL))
(setf (callers-list 'REFUTE-EQN :callers) '(RRL-AUX))
(setf (callers-list 'LESSP-SIZE-BINDINGS :callers) '(UNIFIERS))
(setf (callers-list 'QUASI-EQUIVALENT :callers) '(CONSISTENT-CHECK-QUASI))
(setf (callers-list 'CONDENSE-SEQUENCE :callers) '(LOOSE-SYM-SEQUENCE))
(setf (callers-list 'START-UP :callers) '(START START-RRL))
(setf (callers-list 'PARSE-LOOP-INITIALLY :callers) '(PARSE-NO-BODY))
(setf (callers-list 'RESET-KB :callers) '(IS-VALID-RULE))
(setf (callers-list 'LIST-ASSERTIONS :callers) '(DISPLAY))
(setf (callers-list 'LRPO :callers) '(PSEUDO-TERM-ORDERING POLY-LRPO LRPO-RESULT COMPARE-TERM TRY-TO-ORIENT2 ORDER-CTX TRY-TO-ORIENT TRY-TO-ORIENT-CONDI LAST-CONSISTENCY-CHECK NORMAL-PROVE IS-CYCLE-EQN CONSISTENT-CHECK-QUASI LRPO-PREMISES))
(setf (callers-list 'IS-SUBTERM :callers) '(CONSISTENT-PAIR IS-HIGHER-TERM))
(setf (callers-list 'SET-SYMMETRY-MARK :callers) '(ADD-RULE-COMPLETE))
(setf (callers-list 'SYMBOLP :callers) '(X_AUTO_INDUC GET-TERM-TYPE COMPLETE-WELL-TYPED WELL-TYPED TYPE-VAR-LIST ONE-TYPE-VAR-LIST GROUNDP PSEUDO-TERM-ORDERING IS-LIMITED RENAME-VAR1 RENAME-VARS DEPTH SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM OCCURS-IN IS-SUBTERM FREE-VARS W-SIZE SIZE IS-GROUND ALL-VARS ALL-OPS EXPECTING-PREDICATES TOP-TERM DESTROYABLE GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN APPLY-TO2 PARSE-LOOP-FOR LOOP-ADD-TEMPS PARSE-LOOP-INITIALLY PARSE-LOOP-WITH PARSE-LOOP TRANSLATE-NAME L-EQUAL DESETQ1 INDUC-SUBS-TERM SKOLEM-TERMS ALL-NONVARS REDUCE-ARGS-BY-PREMISES REDUCE-BY-PREMISE-AT-ROOT SUBST-VAR-PREMISES IS-EQ-FALSE-PRE SUPER-ITSELF-PRE NEGATE-ONE-PRE REVERSE-PREMISE ADD-PREMISE-END ADD-SIMPLIFY-OTHERS MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES FIRST-CTX-TRANS PC-GRT-PREC NORM-POLY POLY-SIZE IS-CHARACTER-RULE POLY-LRPO NONLINEAR-VARS-UNDER-* POLY-SUPER-AT-*-1 POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-SIMPLIFY PRED-CRITICAL-PAIR WRITE-ONE-PRE WRITE-DISJUNCTIONS WRITE-TERM-SIMPLE WRITE-TERM-BOOL TOTAL-ORDER-ATOM COMPARE-TERM ORDER-ASS MAKE-EQ TRY-TO-ORIENT-CONDI PURE-ORIENT-AN-EQN ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST PURE-RWONCE-OUTERMOST RWONCE-OUTERMOST PURE-NORM-OUTERMOST NORM-OUTERMOST SIMPLIFY-COND-TERM REDUCE-COND-TERM NORM-RHS PURE-REDUCE-BY-ONE-AT-ROOT PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-AT-ROOT REDUCE-BY-ONE-RULE ADD-REST-ARGS SIMPLIFY-MY-EQ-TERM REDUCE-AT-ROOT-ONE-RULE GUIDE-REDUCIBLE REDUCIBLE LAST-CONSISTENCY-CHECK MATCH-POSS DECOMPOSE-TERMS EQUIV PURE-LRPO ADD-RULE-LINEAR CHOOSE-STR NEGATE-LITERAL IS-VALID-VAR APPLYSUBST-PRE NORMAL-PROVE PREMISE-INSTANCE GET-VAR-SUBSTITUTION ALPHALESSP PARAMODULATE SYMMETRY-TERMS CYCLE-REDUCE-TERM IS-SYMMETRY-EQN UNIT-RULE PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS SUP-TERM2 CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-CHECK IS-INCONSI-PAIR GOOD-UNIT-CLAUSE MAKE-ONE-DOWN-HILL HEAD-LESS-PRE EQN2PRE MAKE-ONE-BUILD COVER-CONDI-NORM COVER-NORM-TERM COMMUNE-TERMS2 COMMUNE-TERMS IS-COMMUT-PAIR C-PERMUTATION REMOVE-LEFT-ARG2 LEFT-ARG2 REMOVE-RIGHT-ARG2 RIGHT-ARG2 AVOIDABLE FREE-SUBTERMS IS-ELIM-TERM ONE-ELIM-SUBTERM CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT FIRST-SPEC-TERM INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN HASQUANT SPECIAL-SUBST TRIVIAL-SIMPLIFY SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT M-XOR-P M-XOR-M M-AND-P M-AND-M NOT-ARG FIRST-TRANS SIMP-FIRST-TRANS BA-SIMP-NOT BA-SIMPLIFY NEW-FIRST-TRANS NEW-TRANS-SIMP UNIFY-WITH-AC ACO-LRPO= ACO-LPRO>= ACO-LRPO> AC-DISTRI MAKE-FLAT FLAT-TERM-FUNC FLATTEN-EQN FLATTEN-RULE SUB-NONVARS2 SUBST-EQN))
(setf (callers-list 'INITIALIZE-MANUAL-ORDERING :callers) '(ORDER-STR))
(setf (callers-list 'REMOVE-LEFT-ARG :callers) '(DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK))
(setf (callers-list 'SAVE-RRL :callers) '(RRL-AUX))
(setf (callers-list 'KEYWORDP :callers) '(THE-TYPE))
(setf (callers-list 'GET-INDUC-VARS :callers) '(MAKE-ONE-SCHEME MERGEBLE-TERMS))
(setf (callers-list 'INSTANTIATE-LHS :callers) '(TRY-TO-ORIENT-CONDI))
(setf (callers-list 'THEN :callers) '(=-SLOOP-FOR))
(setf (callers-list 'PICK-AC-PAIR :callers) '(PICK-UNMARKED-RULE))
(setf (callers-list 'DIVISIBLE-LEFT-CHECK :callers) '(DIVISIBLE-NONAC-CHECK))
(setf (callers-list 'DESETQ1 :callers) '(DESETQ DESETQ1))
(setf (callers-list 'ELES-MORE-THAN-1 :callers) '(NONLINEAR-VARS-UNDER-*))
(setf (callers-list 'PROCESS-EQUATION :callers) '(ORDER-ASS ORIENT-RULE))
(setf (callers-list 'FIRST :callers) '(SEARCH_BY_EQN SEARCH_BY_ID CURSOR_DOWN BREADTH-SEARCH PRINT-NODE SHOW-TREE X_REMOVE_HYP X_READ_TERM COVER-INDUC-PROVE SWITCH_RULE_LR REM-DUP-VARS INDUCTIBLE ONE-PREMISE-IS-TRUE WRITE-DETAIL-RULE VARS-ONLY UNKNOWN-SIZE READ-T-TERM GET-CLAUSE GET-EQUATION LISTARRAY FILLARRAY TRACE-CRIT RULE-NUMS-FROM-SOURCE JUSTIFY-EQN MAKE-ONE-BUILD SUBSUMED-PREMISES PRE-CRIT-CHECKEQ COMMU-EXCHANGE COMMUE-EXCHANGE COMPRESS-FLAT))
(setf (callers-list 'MEMBER0 :callers) '(X_CLEAN-RULE X_REDUCE-BY-ONE-RULE GROUNDP IS-LIMITED DEF-DOMAIN-POINTS ADD-PREMISE-END POLY-INITIALIZE POLY-SUPER-AT-*-1 MARK-SUPERPOSED WRITE-VARIABLE CHECKEQ-NORMAL SUB-TEST INSERT-LIST INS-LIS ADD-AT-END GET-VAR-SUBSTITUTION INSERT CASEQ TR-TERM AC-SUP-TERM PURE-SUP-TERM SUP-TERM DIVISIBLE-AC-CHECK FIRST-BOOLEAN-CONSTANT NEGATE-XOR-ARGS SIMP-AND-SIMP AND-OF-MONOMIALS BA-SIMP-OR BA-SIMP-AND))
(setf (callers-list 'ELIMCOM :callers) '(ACUNI))
(setf (callers-list 'FASTKB-CHOICES :callers) '(RUN-KB-OPTIONS))
(setf (callers-list '= :callers) '(PSEUDO-TERM-ORDERING SET-UP-ARITY2 IS-INFIX-OP BASIC-TERM ONE-EXTENSIBLE-TYPE-POINT PARSE-LOOP-WITH MERGEBLE-TERMS CAR-LENGTH-CDDR INDUC-AC-SUBS ELEMENT-COMBINATION REF-INSTANCE-SEEDS POLY-LRPO DETACHMENT-SUPER PRED-CRITICAL-PAIR PRED-SUPERPOSITION ORDER-ASS IS-SUBSEQUENCE DIVIDED-BY NEXT-CHOICE DECOMPOSE-TERMS ASK-FOR-OPERATOR INVALID-RULE IS-VALID-RULE PURE-LRPO REDUCE-OTHER-RULES ADD-RULE-COMPLETE PURE-PROCESS-EQUATION PROCESS-EQUATION SPLIT-RHS-OR SPLIT-RHS-AND MY-COPYLIST PUSH-HISTORY-MANUAL START-HISTORY-MANUAL INSERT CNTH IF* MAKE-CYCLE-RULE MAKE-PAIRS PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR AC-SUPERPOSITION PURE-SUPERPOSITION FUNC-SUPERPOSITION MAKE-ONE-DOWN-HILL AUTO-ADD-PREC POSTPONE-OR-UNDO POST-FOR-WHILE AUTO-ORIENT UNIFY-WITH-AC COMBINATE ONE-COMPOSITION IS-ASSOC-PAIR HANDLE-AND))
(setf (callers-list 'ADD-SIMPLIFY-OTHERS :callers) '(PROCESS-PRE-ASS SIMPLIFY-ONE-PRE))
(setf (callers-list 'ELEMENT-COMBINATION :callers) '(ELEMENT-COMBINATION REF-INSTANCE-SEEDS))
(setf (callers-list 'ACO-LEXICO-COMP-RL :callers) '(ACO-LPRO>= ACO-LRPO>))
(setf (callers-list 'EXTEND-SCHEMES :callers) '(GET-SCHEMES))
(setf (callers-list 'CHOOSE-CONSTRUCTORS :callers) '(INDUC-PROVE))
(setf (callers-list 'DEFMACRO :callers) '(DEF-LOOP-COLLECT DEF-LOOP-MACRO DEF-LOOP-FOR DEF-LOOP-MAP SLOOP LOCAL-FINISH LOOP-RETURN DESETQ DESETQ1))
(setf (callers-list 'COMP-TERMS :callers) '(COMPARE-TERM COMPARE-ITEM))
(setf (callers-list 'RPLAT-IN-BY :callers) '(PARA-SUP-TERM2 PURE-SUP-TERM2 SUP-TERM2))
(setf (callers-list 'EQN-CTX :callers) '(STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 FORM-SUBGOALS-FROM-PATTERNS COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM INDUC-SUBGOAL-PROOFS X_AUTO_INDUC X_AUGMENT REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE WELL-TYPED-EQN OPS-OF-RULE INDUC-SUBS-OF-EQN PROVE POLY-REDUCE-AT-ROOT-ONE-RULE DETACHMENT-SUPER DETACHMENT-RULE IDEM-SUPER-COMMU PRED-SUPERPOSITION WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE MAKE-EQ COMP-EQN COMP-RULE MAKE-CRIT-RULE ASK-USER ORIENT-RULE ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL REDUCE-BY-ONE-AT-ROOT TRY-ONE-EXTRA-VAR-RULE TRY-ONE-RULE OCCURS-IN-RULE ADD-OPERATOR CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE FIRST-PROCESS-EQN R2E AND-LHS-TRUE-RHS IS-PREVIOUS-INDUC-EQN APPLYSUBST-EQN SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE RENAME-EQN-RULE IS-CYCLE-EQN ACCEPTABLE-PAIR AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION SUP-TERM2 PURE-SUPERPOSITION FUNC-SUPERPOSITION SUPERPOSITION AC-CRITPAIRS INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK REMOVE-IRRELEVANT3 OR-CONDI-EQN HEAD-LESS-THAN-PRES ADD-EXTRA-PREMISE COVER-CONDI-NORM PRE-CRIT-CHECKEQ COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE PRINT-NORMALIZED-EQN NEW-RULE-FROM-ASSOC ELIMINATE-SUB ELIMINABLE-TERMS REMOVE-VAR-PRES CHECK-BUILD-RULE HAVE-BOOLEAN-CONSTANT FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHERS-AUX QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE AUTO-ORIENT FLATTEN-EQN EQN-SUB-NONVARS SUBST-EQN WRITE-COMMENT-EQN))
(setf (callers-list 'WRITE-DISJUNCTIONS :callers) '(WRITE-RHS WRITE-COMMENT-RHS))
(setf (callers-list '/ :callers) '(NRM-TIME REPORT-CURRENT-TIME RRL-AUX))
(setf (callers-list 'FIRST-PROCESS-EQN :callers) '(PROVE))
(setf (callers-list 'ARRANGE-EQ-ARGS :callers) '(MAKE-BETTER-PRE COMPRESS-FLAT))
(setf (callers-list 'FLATTEN-RULES2 :callers) '(FLATTEN-RULES))
(setf (callers-list 'PUSH-END :callers) '(ENTER-OP ADD-CRIT-RULE ENABLE-RULE MAKE-CYCLE-RULE MAKE-PAIRS MAKE-P-COMMUT-RULE ADD-CONDI-DOMINATE-RULE INDUC-ADD-RULE))
(setf (callers-list 'SPLIT-ALIST :callers) '(TYPE-VAR-LIST ACUNI))
(setf (callers-list 'AUTO-ORIENT :callers) '(ASK-USER))
(setf (callers-list 'CHOOSE-BY-HAND :callers) '(INTRO-RULE))
(setf (callers-list 'COMPAREFN :callers) '(INSERT))
(setf (callers-list 'REST-ELEMENTS :callers) '(GET-INSTANCE-TERMS2))
(setf (callers-list 'FUN :callers) '(MAP-FRINGE))
(setf (callers-list 'GET-TERM :callers) '(GET-ITEM GET-RHS CONDI-FROM-CLAUSE GET-CLAUSE GET-EQUATION))
(setf (callers-list 'COND :callers) '(SEARCH_BY_EQN SEARCH_BY_ID ADD_CHILD BREADTH-SEARCH PRINT-NODE SHOW-TREE ORIENT-INDUC-HYPO REWRITE-ONCE-BY-HYPO STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 SUCC-END-INDUC X_READ_TERM DEBUG-MSG REDUCTION-PROOF FORM-SUBGOALS-FROM-PATTERNS TRACE-GENERATED-RESULT COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-INDUC-PROVE COVER-SET-SCHEME ABSTRACT-PROOF INDUC-SUBGOAL-PROOFS HEAD_OF_FAILURE_HANDLER CHECK_AND_ADD X_AUTO_INDUC X_AUGMENT X_PREPARE_RULES X_CLEAN-RULE X_ADD-RULE3 X_REDUCE-BY-ONE-RULE REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE X_INDUC MANUAL_REDUCE WELL-TYPED-EQN DISPLAY-ONE-ARITY2 GET-SUBTYPES ADD-SUGG-TYPE EXT-TYPE-RELATION GET-CODOMAIN-TYPES GET-DOMAIN-TYPE WELL-TYPED-VAR GET-TERM-TYPE COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2 WELL-TYPED TYPE-VAR-LIST ONE-TYPE-VAR-LIST GROUNDP OPERATOR-ORDERING PSEUDO-TERM-ORDERING SUBS-ARE-PRIMITIVE IS-LIMITED RENAME-VAR1 RENAME-VARS DEPTH SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM OCCURS-IN IS-SUBTERM IS-SUBT REPVARSIN ORDER-VARS RPL-BY-TERMS2 RPLAT-IN-BY SUBTAT FREE-VARS MAKE-NEW-VARIABLE W-SIZE SIZE IS-GROUND ALL-VARS ALL-OPS EXPECT-ARITY EXPECT-ARITY12 SET-UP-ARITY2 EXPECTED CHECK-ARITY FIXUP-QUANTIFIED-FORMULA ENTER-OP ENSURE-PREDICATE INPUT-TYPE-CHECK EXPECTING-PREDICATES EXPECTING-FUNCTIONS INPUT-CHECK QUASI-REMOVER NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT TOP-TERM BASIC-TERM RULE-DESTROYABLE DESTROYABLE GET-DOWN GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN GET-DEFINING-DOMAINS GET-SCHEMES GET-TESTSET TEST-ONE-OP IS-PARTIAL-OP COMPLETE-TEST START-TEST APPLY-TO APPLY-TO2 COMPOSE2 COMPOSE SIZE-UNI MAP-FRINGE FIND-IN-ORDERED-LIST SLOOP-SLOOP-MACRO IN-ARRAY-SLOOP-FOR SUBSTITUTE-SLOOP-BODY PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-FOR LOOP-ADD-TEMPS PARSE-LOOP-DECLARE LOOP-DECLARE-BINDING LOOP-ADD-BINDING MAKE-VALUE THE-TYPE PARSE-LOOP-COLLECT PARSE-LOOP-WHEN PARSE-LOOP-INITIALLY PARSE-LOOP-DO PARSE-NO-BODY PARSE-LOOP LOOP-POP TRANSLATE-NAME L-EQUAL LOOP-RETURN DESETQ DESETQ1 LCASE RENAME-PATTERN MERGE-TWO-PATTERNS REMOVE-DUP-VARS MAKE-ONE-SCHEME MERGEBLE-TERMS DECIDE-MERGE-CONJ DEPENDED-OP OPS-OF-RULE CAR-LENGTH-CDDR ADD-POSITIVE GET-RECURSIVE-RETURN-OP ENCOURAGE CHOOSE-LEAST-COVER CHOOSE-OFF-CLOSE INDUCTIBLE INDUC-AC-SUBS INDUC-SUBS-TERM INDUC-SUBS-OF-EQN SUBS-OF-SAME-ROOT SET-RIGHT-HYPO-ARGS CLOAD BLOAD FLOAD SKOLEM-TERMS ALL-NONVARS GET-INSTANCE-TERMS2 ELEMENT-COMBINATION REF-INSTANCE-SEEDS NEGATE-EQN REFUTE-EQN REFUTED-RESULT FAIL-END-INDUC CHOOSE-CONSTRUCTORS INDUC-PROVE UNCONDI-PROVE PROVE SUBST-PREMISES REDUCE-ARGS-BY-PREMISES REDUCE-BY-PREMISE-AT-ROOT SUBST-VAR-PREMISES MERGE-PREMISES SUPER-ITSELF-PRE PRE-VARS NEGATE-ONE-PRE REMAKE-PREMISES MAKE-PRE-ASS NOFALSE-PREMISES ONE-PREMISE-IS-TRUE REVERSE-PREMISE SIMPLIFY-PREMISES ADD-PREMISE-END ADD-SIMPLIFY-OTHERS MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE FIRST-VAR-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES ADD-SUGG TRY-SUGG-PREC PRINT-SUGG-INFO TRANS-STATUS PC-GRT-PREC DEFAULT-PRECEDENCE GRT-PREC REDUCE-MONO NORM-POLY POLY-ADD-HOMO-RULES POLY-INITIALIZE POLY-SIZE IS-CHARACTER-RULE POLY-LRPO MAKE-RULE-INSTANCES MOVE-LHS-ARGS NONLINEAR-VARS-UNDER-* POLY-SUPER-DISTRIBUTION POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-MATCH-TEST-REST-*-ARGS POLY-MATCH-ONE-TO-* POLY-MATCH-* POLY-MATCH-+ REDUCE-*-TERM REDUCE-+-TERM POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT *-CANONICALIZE +-CANONICALIZE INSERT-SORT-ARG M-+-P M-+-M P-*-M M-*-P M-*-M P-+-P POLY-SIMPLIFY MARK-SUPERPOSED NONDO-CRIT LAST-CHECK-2ND-RULE MAN-PICK-2ND-RULE CHOOSE-BY-HAND INTRO-RULE PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL DETACHMENT-RULE PRED-CRITICAL-PAIR IDEM-SUPER-COMMU IDEM-SUPERPOSITION PRED-FUNC-SUPERPOSITION PRED-SUPERPOSITION WRITE-SIGMA RULE-NAME WRITE-DETAIL-RULE PRINT-HEAD PRINT-ATOMS WRITE-ONE-PRE WRITE-F-PREMISES WRITE-PREMISES WRITE-DISJUNCTIONS WRITE-VARIABLE WRITE-TERM-SIMPLE WRITE-TERM-BOOL WRITE-F-RHS WRITE-RHS WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE OPEN-WRITE-FILE WRITEF-SYS DISPLAY TOTAL-ORDER-ATOM TOTAL-ORDER-RES TOTAL-ORDER-PC-RES LRPO-RESULT COMPARE-TERM-RESULT COMPARE-ITEM-RESULT ORDER-PC-RES COMPARE-SYMBOL COMPARE-TERM COMP-TERMS SIZE-COMPARE ORDER-ASS MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ MANUAL-ORIENT MAKE-EQ COMP-EQN COMP-RULE MAKE-CRIT-RULE ASK-USER TRY-TO-ORIENT2 ORDER-CTX TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA SUPPORT-EQN NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA NORMALIZE-BOUND TIME-LIMIT-STRA BRAKE-CHOICE POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE FASTKB-CHOICES ADD-EQU TRY-MAKE-EQUI EXT-EQUIVALENCE EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-OPERATOR EXT-STATUS EXT-WEIGHT EXT-PRECEDENCE NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR FOPC-STRA IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS DISPLAY-CONSTRUCTORS GET-ARITY REDUCE-AND-TERM REDUCE-XOR-TERM REDUCE-AT-ROOT-BOOL NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX PURE-REWRITE-AT-ROOT PURE-MIXED-REDUCE PURE-NORM-MIXED PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST PURE-OUTRED1 OUTRED1 PURE-RWONCE-OUTERMOST RWONCE-OUTERMOST PURE-NORM-OUTERMOST NORM-OUTERMOST SIMPLIFY-COND-TERM REDUCE-COND-TERM NORM-RHS PURE-REDUCE-BY-ONE-AT-ROOT PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-AT-ROOT REDUCE-BY-ONE-RULE AC-COMPRESS CYCLE-CHECK ADD-TO-ARGS SIMPLIFY-MY-EQ-TERM REDUCE-AT-ROOT-ONE-RULE TRY-ONE-EXTRA-VAR-RULE TRY-ONE-RULE REDUCE-AT-ROOT REWRITE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE LAST-CONSISTENCY-CHECK PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE ANS-MEMBER SUB-TEST NOT-IN-SET GOAL-RULE-SIZE MANUAL-GOAL PICK-GOAL MR LINEAR CAPITALIZE INSERT-LIST SUB1-MODULO-N ADD1-MODULO-N N-TUPLES INS-LIS ADD-AT-END IS-SUBSEQUENCE EQ-MATCH MATCH-BOOL-NEW MATCH-SET-AC MATCH-SET ELIM-BIN DIVIDED-BY NEXT-CHOICE VARS-ONLY MATCH-POSS AC-MATCH APPLIES PURE-MATCH MATCH NONAC-UNIFY NORMAL-FORM-SUB DECOMPOSE-TERMS OCCURS-IN-RULE MAKE-RULE-SIZE-ORDER MAKE-RULE-FROM-ASS ASK-FOR-OPERATOR NEW-TERM ADD-OPERATOR UNKNOWN-SIZE SPECIAL-SIZE CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE RPOST RPOMULT EQUIV PURE-LRPO LRPO FLATTEN-WITNESS CLEAN-RULE RUNTIME-MAX-WARNING ADD-RULE3 ADD-RULE-LINEAR REDUCE-OTHER-RULES ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE ADD-RULE FIRST-PROCESS-EQN PURE-PROCESS-EQUATION PROCESS-EQUATION KNUTH-BENDIX1 RUN-KB START-KB INVALID-INPUT-WARNING PRINT-CHOICE-MESSAGE READ-THIS-EQN CHOOSE-STR OK-TO-CONTINUE ASK-A-NUMBER ASK-A-CHOICE READ-ATOM GET-ATOM2 NEXT-TOKEN READ-T-TERM GET-TERM-ARGS GET-VARLIST NEGATE-LITERAL GET-CLAUSE GET-EQUATION READ-TYPE-RELATION READ-ARITY READFEQNS OPEN-READ-FILE READ-INPUT DISPLAY-OPS DISPLAY-OP-STATS DISPLAY-KB-STAT GIVE-STAT ENABLE-RULE DISABLE-RULES-AUX TEST-RRL CLOSE-LOG ORDER-EQNS DELETE-EQN DELETE-RULE DELETE-SYS RRL-AUX R2E PRE-INIT AND-LHS-TRUE-RHS MARK WRITE-SEQ-NUM IS-PREVIOUS-INDUC-EQN APPLYSUBST-PRE APPLYSUBST-EQN NORMAL-PROVE PREMISE-INSTANCE NORM-PROVE-ALL-EQNS PROVE-ALL-EQNS SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE GET-VAR-SUBSTITUTION RENAME-EQN-RULE RENAME-TERM LOAD-RRL SAVE-RRL MY-COPYLIST CLEAN-HISTORY UNDO1 UNDO PUSH-HISTORY-MANUAL PUSH-HISTORY START-HISTORY-MANUAL START-HISTORY LISTARRAY FILLARRAY TYIPEEK READC INSERT CNTH MERGE-LIST ATTACH ALPHALESSP PRINC0 IF* SELECTQ CASEQ EQ-IN-MONOMIAL PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE TR-TERM TR-ADD EQ-JOIN EQ-ADD REDUCE-EQ-TERM SYMMETRY-TERMS IS-SYMMETRY-RULE SYMMETRY-VARS SAME-NONVAR GET-SYMMETRY-TERMS CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE CYCLE-OUT-RED CYCLE-REDUCE-TERM MAKE-CYCLE-RULE IS-SYMMETRY-EQN IS-CYCLE-EQN PAIR-INFO TRACE-CRIT UNIT-RULE MAKE-PAIRS ACCEPTABLE-PAIR PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR AC-SUP-TERM PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION INDUC-SUP-TERM HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 PURE-SUP-TERM SUP-TERM PURE-SUPERPOSITION FUNC-SUPERPOSITION SUPERPOSITION AC-CRITPAIRS PURE-CRITPAIRS CRITPAIRS RULE-NUMS-FROM-SOURCE TRACE-INCONSISTENCY INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-RULE CONSISTENT-CHECK TRACE-FACTOR FACTORIBLE TRACE-REMOVE-IRRELEVANT4 GOOD-UNIT-CLAUSE REMOVE-IRRELEVANT3 REMOVE-IRRELEVANT MAKE-ONE-DOWN-HILL DOWN-HILL-ONE OR-CONDI-EQN LRPO-PREMISES HEAD-LESS-THAN-PRES JUSTIFY-EQN EQN2PRE MAKE-ONE-BUILD BUILD-EQN-FROM-PRES SUBSUMED-PREMISES ADD-EXTRA-PREMISE COVER-CONDI-NORM PRE-CRIT-CHECKEQ COVER-NORM-TERM COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE COVER-NORM-ORDER PRINT-NORMALIZED-EQN COVER-NORMAL-PROOF COMMU-EXCHANGE COMMUE-EXCHANGE COMMUNE-TERMS2 COMMUNE-TERMS REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT MAKE-P-COMMUT-RULE C-PERMUTATION INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT NEW-RULE-FROM-ASSOC TRACE-DIVISIBLE REMOVE-LEFT-ARG2 LEFT-ARG2 REMOVE-RIGHT-ARG2 RIGHT-ARG2 REMOVE-LEFT-ARG LEFT-ARG REMOVE-RIGHT-ARG RIGHT-ARG AVOIDABLE DIVISIBLE-AC-CHECK DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK2 DIVISIBLE-CHECK ELIMINATE-SUB FREE-SUBTERMS IS-ELIM-TERM ONE-ELIM-SUBTERM ELIMINABLE-TERMS REMOVE-VAR-PRES CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT HAVE-BOOLEAN-CONSTANT FIRST-SPEC-TERM FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHERS-AUX QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE GET-SKO-FUNC HASQUANT SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS NEGATE-XOR-ARGS NEGATE-PREDICATE TRIVIAL-SIMPLIFY OR-COUNT SUBSTVARFOR BREAK-ASS PROCESS-ASS PROCESS-ASS1 PROCESS-ASS-SIMPLE EQN2ASSERTION INIT-BOOL-OPS SIMP-AND-SIMP AND-OF-MONOMIALS SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT BRT BRT-IF P-XOR-P M-XOR-P M-XOR-M M-AND-P M-AND-M INSERT-AND-REMOVE-PAIRS CANONICALIZE NOT-ARG OR-ARGS FIRST-TRANS SIMP-FIRST-TRANS BA-SIMP-NOT NEW-FIRST-TRANS NEW-TRANS-SIMP END-AUTO-ORDER AUTO-ADD-STATUS AUTO-ADD-PREC AUTO-MAKE-EQUI POSTPONE-OR-UNDO POST-FOR-WHILE POSTPONE-IT CAN-HAVE-NEW-OP AUTO-ORIENT AUTO-KB IS-BLOCKED PLAUSIBLE ACUNI UNIFY-WITH-AC UNIFIER UNIFIERS FIND-OUT-BIG-EQ-SUBS ACO-LRPO= ACO-RPOMULT>= ACO-RPOMULT> ACO-LPRO>= ACO-LRPO> AC-DISTRI ACLRPO CARDINALITY COMBINATE ONE-COMPOSITION TAKE-OUT FIND-BASIS-VECTORS FLATTEN-RULES MAKE-ASS-COM-OP COMPRESS-FLAT MAKE-FLAT FLAT-TERM-FUNC FLATTEN-PREMISES FLATTEN-EQN FLATTEN-RULE IS-HIGHER-TERM SUB-NONVARS2 EQN-SUB-NONVARS SUBST-EQN HANDLE-AND SET-HANDLE-AND SET-ART-MODE WRITE-COMMENT-PREMISES WRITE-COMMENT-RHS WRITE-COMMENT-EQN))
(setf (callers-list 'FLAT-SORT-ARGS :callers) '(COMPRESS-FLAT))
(setf (callers-list 'SELECTQ :callers) '(TOTAL-ORDER-2 TOTAL-ORDER TOTAL-ORDER-PC ORDER-PC-RES ORDER-PC MANUAL-ORIENT ASK-USER REDUCE-AT-ROOT-BOOL BOOL-REWRITE-AT-ROOT PURE-NORM GIVE-STAT RRL-AUX M-XOR-M))
(setf (callers-list 'ASS-RULE-BOUND :callers) '(FOPC-STRA))
(setf (callers-list 'PARSE-LOOP-WHEN :callers) '(PARSE-ONE-WHEN-CLAUSE))
(setf (callers-list 'DEFAULT-PRECEDENCE :callers) '(IS-REL-PREC PC-GRT-PREC GRT-PREC))
(setf (callers-list 'SUB-NONVARS2 :callers) '(SUB-NONVARS2 SUB-NONVARS EQN-SUB-NONVARS))
(setf (callers-list 'CHECK_AND_ADD :callers) '(COVER-PROOF-PROCESS))
(setf (callers-list 'NORM-OUTERMOST :callers) '(NORM-TERM))
(setf (callers-list 'NEW-FIRST-CTX-TRANS :callers) '(FIRST-PROCESS-EQN))
(setf (callers-list 'GET-PRE-LHS :callers) '(SUPER-ITSELF-PRE ADD-SIMPLIFY-OTHERS GOOD-UNIT-CLAUSE MAKE-ONE-DOWN-HILL))
(setf (callers-list 'OR-COUNT :callers) '(OR-COUNT))
(setf (callers-list 'SOURCE-NAME :callers) '(FCLOAD CLOAD2 CLOAD BLOAD FLOAD BIN-IS-CURRENT))
(setf (callers-list 'PROVE :callers) '(PROVE_EQN RRL-AUX))
(setf (callers-list 'NRM-TIME :callers) '(DISPLAY-KB-STAT))
(setf (callers-list 'L-EQUAL :callers) '(FIRST-USE-SLOOP-FOR PARSE-LOOP-MAP PARSE-LOOP-WHEN))
(setf (callers-list 'PURE-NORM-INNERMOST :callers) '(PURE-NORM-INNERMOST PURE-NORM))
(setf (callers-list 'TRACE-OPTIONS :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'SIMP-FIRST-TRANS :callers) '(FIRST-PROCESS-EQN PROCESS-ASS2))
(setf (callers-list 'OPERATOR-OPTIONS :callers) '(RUN-KB-OPTIONS RRL-AUX))
(setf (callers-list 'INCREMENT-POS :callers) '(NEXT-CHOICE))
(setf (callers-list 'NORM-XOR-TERM :callers) '(NORM-BOOL-INNERMOST))
(setf (callers-list 'MAP-FRINGE :callers) '(MAP-FRINGE))
(setf (callers-list 'INITSYM :callers) '(RENAME-VARY RENAME-VAR GET-SKELETON GENNEWSYM AUTO-OPERATOR RENAME-EQN-RULE RENAME-TERM))
(setf (callers-list 'NORM-POLY :callers) '(NORM-CTX))
(setf (callers-list 'IS-GROUND :callers) '(SUB-NONVARS2))
(setf (callers-list 'WHEN-ART-WITH-INPUT-FROM-TERMINAL :callers) '(SUCC-END-INDUC CONSTRUCTORS-CHECK IS-PARTIAL-OP CHOOSE-CONSTRUCTORS PROVE OPEN-WRITE-FILE ASK-USER QUERY-ADD-EQN))
(setf (callers-list 'BLOCK :callers) '(LOOP-RETURN))
(setf (callers-list 'EXTEND-DEF-DOMAIN :callers) '(RULE-DESTROYABLE))
(setf (callers-list 'ONE-EXTENSIBLE-TYPE-POINT :callers) '(GET-DOWN))
(setf (callers-list 'EXPECT-ARITY12 :callers) '(SET-UP-ARITY2))
(setf (callers-list 'STRING= :callers) '(SHOW-TREE IS-SUBSEQUENCE))
(setf (callers-list 'AREF :callers) '(LISTARRAY FILLARRAY ALL-PLAUS RES1 TAKE-OUT SUMYMAX))
(setf (callers-list 'EMPTY-SUB :callers) '(COMPOSE))
(setf (callers-list 'REF-EXTRA-PRE-VARIABLES :callers) '(ENABLE-RULE DISABLE-RULE))
(setf (callers-list 'MAKE-EQ :callers) '(ASK-USER INVALID-RULE))
(setf (callers-list 'IS-REL-PREC :callers) '(EXT-EQUIVALENCE AUTO-MAKE-EQUI))
(setf (callers-list 'FLAT-TERM :callers) '(TOP-TERM SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-AT-ROOT-ONE-RULE APPLYSUBST-PRE IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS COVER-NORM-TERM FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'MAKE-NEW-RULE :callers) '(X_AUGMENT X_HYPOTHESIS X_ONE_RULE REFUTED-RESULT DETACHMENT-SUPER IDEM-SUPER-COMMU MANUAL-ORIENT MAKE-EQ MAKE-CRIT-RULE TRY-TO-ORIENT TRY-TO-ORIENT-CONDI INVALID-RULE IS-VALID-RULE FOUND-WITNESS MAKE-CYCLE-RULE AC-SUPERPOSITION PURE-SUPERPOSITION FUNC-SUPERPOSITION INCONSISTENT-EQN MAKE-P-COMMUT-RULE NEW-RULE-FROM-ASSOC))
(setf (callers-list 'ORIENT-INDUC-HYPO :callers) '(REWRITE-ONCE-BY-HYPO))
(setf (callers-list 'SUBSTITUTE-SLOOP-BODY :callers) '(SLOOP-SLOOP-MACRO PARSE-LOOP))
(setf (callers-list 'LOWER-CASE-P :callers) '(CAPITALIZE))
(setf (callers-list 'TRY-TO-ORIENT2 :callers) '(ASK-USER))
(setf (callers-list 'SYMMETRY-CHOICE :callers) '(FASTKB-CHOICES))
(setf (callers-list 'WRITE-RHS :callers) '(WRITE-GOAL-EQN WRITE-EQN WRITE-GOAL-RULE WRITE-RULE))
(setf (callers-list 'INSERT-POLY-SIGMA :callers) '(EQ-MATCH))
(setf (callers-list 'END-TEST :callers) '(PARSE-NO-BODY))
(setf (callers-list 'COVER-OF :callers) '(FORM-PATTERNS-SINGLE MERGEBLE-TERMS GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS INDUCTIBLE INDUC-SUBS-TERM))
(setf (callers-list 'MAX :callers) '(DEPTH POLY-SIZE MAKE-RULE-SIZE-ORDER UNKNOWN-SIZE PUSH-HISTORY MAKE-CYCLE-RULE AUTO-KB))
(setf (callers-list 'BOUNDP :callers) '(PSEUDO-TERM-ORDERING ORDER-VARS PC-GRT-PREC TOTAL-ORDER-ATOM COMPARE-SYMBOL PRE-INIT))
(setf (callers-list 'ACUNI :callers) '(UNIFY-WITH-AC))
(setf (callers-list 'M-XOR-P :callers) '(NEGATE-XOR-ARGS EQN2ASSERTION NOT-ARG))
(setf (callers-list 'ASSERTION2EQUATION :callers) '(NORMALIZE MAKE-RULE-FROM-ASS))
(setf (callers-list 'EQUAL-TERM :callers) '(CHECKEQ-NORMAL NORMALIZE PROCESS-EQUATION COVER-NORM-UNCONDI-EQN))
(setf (callers-list 'SYMMETRY-VARS :callers) '(GET-SYMMETRY-TERMS))
(setf (callers-list 'INITIALLY :callers) '(PARSE-LOOP-INITIALLY))
(setf (callers-list 'PEEK-CHAR :callers) '(TYIPEEK-SPA-CR TYIPEEK-SPACE IS-EMPTY-LINE GET-ATOM2 GET-ATOM SKIP-EOLN TYIPEEK))
(setf (callers-list 'IS-CONDI-EQN :callers) '(WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-COMMENT-EQN))
(setf (callers-list 'IF* :callers) '(ADD_CHILD SHOW-TREE REWRITE-ONCE-BY-HYPO STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 X_READ_TERM DEBUG-MSG REDUCTION-PROOF FORM-SUBGOALS-FROM-PATTERNS TRACE-GENERATED-RESULT COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-INDUC-PROVE COVER-SET-SCHEME ABSTRACT-PROOF INDUC-SUBGOAL-PROOFS CHECK_AND_ADD X_AUTO_INDUC X_AUGMENT X_PREPARE_RULES X_CLEAN-RULE X_ADD-RULE3 REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE X_INDUC WELL-TYPED-EQN DISPLAY-ONE-ARITY2 GET-SUBTYPES EXT-TYPE-RELATION WELL-TYPED-VAR GET-TERM-TYPE COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2 WELL-TYPED TYPE-VAR-LIST OPERATOR-ORDERING PSEUDO-TERM-ORDERING SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM OCCURS-IN IS-SUBTERM IS-SUBT REPVARSIN ORDER-VARS SUBTAT MAKE-NEW-VARIABLE W-SIZE EXPECT-ARITY SET-UP-ARITY2 EXPECTED CHECK-ARITY FIXUP-QUANTIFIED-FORMULA ENTER-OP ENSURE-PREDICATE INPUT-TYPE-CHECK EXPECTING-PREDICATES EXPECTING-FUNCTIONS INPUT-CHECK QUASI-REMOVER NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT TOP-TERM RULE-DESTROYABLE DESTROYABLE GET-DOWN GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN GET-DEFINING-DOMAINS GET-SCHEMES GET-TESTSET TEST-ONE-OP IS-PARTIAL-OP COMPLETE-TEST START-TEST APPLY-TO COMPOSE2 COMPOSE SIZE-UNI RENAME-PATTERN MERGE-TWO-PATTERNS REMOVE-DUP-VARS MAKE-ONE-SCHEME MERGEBLE-TERMS DECIDE-MERGE-CONJ DEPENDED-OP OPS-OF-RULE CAR-LENGTH-CDDR ADD-POSITIVE GET-RECURSIVE-RETURN-OP ENCOURAGE CHOOSE-LEAST-COVER CHOOSE-OFF-CLOSE INDUCTIBLE INDUC-AC-SUBS INDUC-SUBS-TERM INDUC-SUBS-OF-EQN SUBS-OF-SAME-ROOT SET-RIGHT-HYPO-ARGS SKOLEM-TERMS ALL-NONVARS GET-INSTANCE-TERMS2 ELEMENT-COMBINATION REF-INSTANCE-SEEDS NEGATE-EQN REFUTE-EQN REFUTED-RESULT FAIL-END-INDUC CHOOSE-CONSTRUCTORS INDUC-PROVE UNCONDI-PROVE PROVE SUBST-PREMISES REDUCE-BY-PREMISE-AT-ROOT SUBST-VAR-PREMISES MERGE-PREMISES SUPER-ITSELF-PRE PRE-VARS NEGATE-ONE-PRE REMAKE-PREMISES MAKE-PRE-ASS NOFALSE-PREMISES ONE-PREMISE-IS-TRUE REVERSE-PREMISE SIMPLIFY-PREMISES ADD-PREMISE-END ADD-SIMPLIFY-OTHERS MAKE-BETTER-PRE NORM-ONE-PRE FIRST-VAR-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES TRY-SUGG-PREC PRINT-SUGG-INFO TRANS-STATUS PC-GRT-PREC GRT-PREC NORM-POLY POLY-ADD-HOMO-RULES POLY-INITIALIZE POLY-SIZE IS-CHARACTER-RULE POLY-LRPO MAKE-RULE-INSTANCES MOVE-LHS-ARGS NONLINEAR-VARS-UNDER-* POLY-SUPER-DISTRIBUTION POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-MATCH-TEST-REST-*-ARGS POLY-MATCH-ONE-TO-* POLY-MATCH-* POLY-MATCH-+ REDUCE-*-TERM REDUCE-+-TERM POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT *-CANONICALIZE +-CANONICALIZE INSERT-SORT-ARG M-+-P M-+-M M-*-M P-+-P POLY-SIMPLIFY MARK-SUPERPOSED NONDO-CRIT LAST-CHECK-2ND-RULE MAN-PICK-2ND-RULE CHOOSE-BY-HAND INTRO-RULE PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL DETACHMENT-RULE PRED-CRITICAL-PAIR IDEM-SUPER-COMMU IDEM-SUPERPOSITION PRED-FUNC-SUPERPOSITION PRED-SUPERPOSITION WRITE-SIGMA RULE-NAME WRITE-DETAIL-RULE PRINT-HEAD PRINT-ATOMS WRITE-ONE-PRE WRITE-F-PREMISES WRITE-PREMISES WRITE-DISJUNCTIONS WRITE-VARIABLE WRITE-TERM-SIMPLE WRITE-TERM-BOOL WRITE-F-RHS WRITE-RHS WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE OPEN-WRITE-FILE WRITEF-SYS DISPLAY TOTAL-ORDER-ATOM TOTAL-ORDER-RES TOTAL-ORDER-PC-RES COMPARE-SYMBOL COMPARE-TERM COMP-TERMS SIZE-COMPARE ORDER-ASS MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ MANUAL-ORIENT MAKE-EQ COMP-EQN COMP-RULE MAKE-CRIT-RULE ASK-USER TRY-TO-ORIENT2 TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA SUPPORT-EQN NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA NORMALIZE-BOUND TIME-LIMIT-STRA BRAKE-CHOICE POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE FASTKB-CHOICES ADD-EQU TRY-MAKE-EQUI EXT-EQUIVALENCE EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-OPERATOR EXT-STATUS EXT-WEIGHT EXT-PRECEDENCE NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR FOPC-STRA IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS DISPLAY-CONSTRUCTORS GET-ARITY REDUCE-AND-TERM REDUCE-XOR-TERM REDUCE-AT-ROOT-BOOL NORM-BOOL-INNERMOST NORM-CTX PURE-REWRITE-AT-ROOT PURE-MIXED-REDUCE PURE-NORM-MIXED PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN NORM-RHS PURE-REDUCE-BY-ONE-AT-ROOT REDUCE-BY-ONE-AT-ROOT CYCLE-CHECK ADD-TO-ARGS SIMPLIFY-MY-EQ-TERM REDUCE-AT-ROOT-ONE-RULE TRY-ONE-EXTRA-VAR-RULE TRY-ONE-RULE REDUCE-AT-ROOT REWRITE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE LAST-CONSISTENCY-CHECK PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE ANS-MEMBER SUB-TEST NOT-IN-SET GOAL-RULE-SIZE MANUAL-GOAL PICK-GOAL LINEAR CAPITALIZE INSERT-LIST INS-LIS ADD-AT-END IS-SUBSEQUENCE EQ-MATCH MATCH-BOOL-NEW MATCH-SET-AC MATCH-SET ELIM-BIN DIVIDED-BY NEXT-CHOICE VARS-ONLY AC-MATCH APPLIES PURE-MATCH MATCH NONAC-UNIFY NORMAL-FORM-SUB DECOMPOSE-TERMS OCCURS-IN-RULE MAKE-RULE-SIZE-ORDER MAKE-RULE-FROM-ASS ASK-FOR-OPERATOR NEW-TERM ADD-OPERATOR UNKNOWN-SIZE SPECIAL-SIZE CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE RPOST EQUIV PURE-LRPO LRPO FLATTEN-WITNESS CLEAN-RULE RUNTIME-MAX-WARNING ADD-RULE3 ADD-RULE-LINEAR REDUCE-OTHER-RULES ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE ADD-RULE FIRST-PROCESS-EQN PURE-PROCESS-EQUATION PROCESS-EQUATION KNUTH-BENDIX1 RUN-KB START-KB INVALID-INPUT-WARNING PRINT-CHOICE-MESSAGE READ-THIS-EQN CHOOSE-STR OK-TO-CONTINUE ASK-A-NUMBER ASK-A-CHOICE READ-ATOM NEXT-TOKEN READ-T-TERM GET-TERM-ARGS GET-VARLIST NEGATE-LITERAL GET-CLAUSE GET-EQUATION READ-TYPE-RELATION READ-ARITY READFEQNS OPEN-READ-FILE READ-INPUT DISPLAY-OPS DISPLAY-OP-STATS DISPLAY-KB-STAT GIVE-STAT ENABLE-RULE DISABLE-RULES-AUX TEST-RRL CLOSE-LOG ORDER-EQNS DELETE-EQN DELETE-RULE DELETE-SYS RRL-AUX R2E PRE-INIT AND-LHS-TRUE-RHS MARK WRITE-SEQ-NUM IS-PREVIOUS-INDUC-EQN APPLYSUBST-PRE APPLYSUBST-EQN NORMAL-PROVE PREMISE-INSTANCE NORM-PROVE-ALL-EQNS PROVE-ALL-EQNS SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE GET-VAR-SUBSTITUTION RENAME-EQN-RULE RENAME-TERM LOAD-RRL SAVE-RRL MY-COPYLIST CLEAN-HISTORY UNDO1 UNDO PUSH-HISTORY-MANUAL PUSH-HISTORY START-HISTORY-MANUAL START-HISTORY LISTARRAY FILLARRAY TYIPEEK READC MERGE-LIST EQ-IN-MONOMIAL PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE TR-ADD REDUCE-EQ-TERM IS-SYMMETRY-RULE SYMMETRY-VARS SAME-NONVAR GET-SYMMETRY-TERMS CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE MAKE-CYCLE-RULE IS-SYMMETRY-EQN IS-CYCLE-EQN PAIR-INFO TRACE-CRIT UNIT-RULE MAKE-PAIRS ACCEPTABLE-PAIR PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR AC-SUP-TERM PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION INDUC-SUP-TERM HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 PURE-SUP-TERM SUP-TERM PURE-SUPERPOSITION FUNC-SUPERPOSITION SUPERPOSITION AC-CRITPAIRS PURE-CRITPAIRS CRITPAIRS RULE-NUMS-FROM-SOURCE TRACE-INCONSISTENCY INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-RULE CONSISTENT-CHECK TRACE-FACTOR FACTORIBLE TRACE-REMOVE-IRRELEVANT4 GOOD-UNIT-CLAUSE REMOVE-IRRELEVANT3 REMOVE-IRRELEVANT MAKE-ONE-DOWN-HILL DOWN-HILL-ONE OR-CONDI-EQN LRPO-PREMISES HEAD-LESS-THAN-PRES JUSTIFY-EQN EQN2PRE MAKE-ONE-BUILD BUILD-EQN-FROM-PRES ADD-EXTRA-PREMISE COVER-CONDI-NORM PRE-CRIT-CHECKEQ COVER-NORM-TERM COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE PRINT-NORMALIZED-EQN COVER-NORMAL-PROOF COMMU-EXCHANGE COMMUE-EXCHANGE COMMUNE-TERMS2 COMMUNE-TERMS REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT MAKE-P-COMMUT-RULE INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT NEW-RULE-FROM-ASSOC TRACE-DIVISIBLE REMOVE-LEFT-ARG2 LEFT-ARG2 REMOVE-RIGHT-ARG2 RIGHT-ARG2 REMOVE-LEFT-ARG LEFT-ARG REMOVE-RIGHT-ARG RIGHT-ARG AVOIDABLE DIVISIBLE-AC-CHECK DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK2 DIVISIBLE-CHECK ELIMINATE-SUB FREE-SUBTERMS IS-ELIM-TERM ONE-ELIM-SUBTERM ELIMINABLE-TERMS REMOVE-VAR-PRES CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT HAVE-BOOLEAN-CONSTANT FIRST-SPEC-TERM FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHERS-AUX QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE GET-SKO-FUNC SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS NEGATE-XOR-ARGS NEGATE-PREDICATE TRIVIAL-SIMPLIFY OR-COUNT SUBSTVARFOR BREAK-ASS PROCESS-ASS PROCESS-ASS1 PROCESS-ASS-SIMPLE EQN2ASSERTION SIMP-AND-SIMP AND-OF-MONOMIALS SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT BRT BRT-IF P-XOR-P M-XOR-P M-AND-P M-AND-M CANONICALIZE END-AUTO-ORDER AUTO-ADD-STATUS AUTO-MAKE-EQUI POSTPONE-OR-UNDO CAN-HAVE-NEW-OP AUTO-ORIENT AUTO-KB IS-BLOCKED ACUNI UNIFY-WITH-AC UNIFIER UNIFIERS FIND-OUT-BIG-EQ-SUBS ACO-LRPO= ACO-LPRO>= ACO-LRPO> AC-DISTRI ACLRPO CARDINALITY COMBINATE ONE-COMPOSITION TAKE-OUT FIND-BASIS-VECTORS FLATTEN-RULES MAKE-ASS-COM-OP COMPRESS-FLAT FLAT-TERM-FUNC FLATTEN-PREMISES FLATTEN-EQN FLATTEN-RULE IS-HIGHER-TERM SUB-NONVARS2 EQN-SUB-NONVARS SUBST-EQN HANDLE-AND SET-HANDLE-AND SET-ART-MODE WRITE-COMMENT-PREMISES WRITE-COMMENT-RHS WRITE-COMMENT-EQN))
(setf (callers-list 'CHECK-WITNESS :callers) '(ADD-RULE-COMPLETE PURE-ADD-RULE))
(setf (callers-list 'RESET :callers) '(INDUC-PROVE PURE-ORIENT-AN-EQN EXT-CONSTRUCTOR RUNTIME-MAX-WARNING ADD-RULE3 INVALID-INPUT-WARNING INDUC-ORIENT-AN-EQN))
(setf (callers-list 'DEF-LOOP-INTERNAL :callers) '(DEF-LOOP-COLLECT DEF-LOOP-MACRO DEF-LOOP-FOR DEF-LOOP-MAP))
(setf (callers-list 'READ-ATOM :callers) '(X_AUGMENT X_PREPARE_RULES EXT-TYPE-RELATION OPEN-WRITE-FILE WRITEF-SYS MANUAL-ORIENT ASK-USER BRAKE-CHOICE FASTKB-CHOICES EXT-EQUIVALENCE EXT-STATUS EXT-PRECEDENCE FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS ASK-FOR-OPERATOR INVALID-RULE ASK-A-NUMBER ASK-A-CHOICE READ-ARGS OPEN-READ-FILE DELETE-SYS RRL-AUX))
(setf (callers-list 'CLOSE-LOG :callers) '(QUIT-RRL RRL-AUX))
(setf (callers-list 'DO :callers) '(COMPLETE-TEST START-TEST MAP-FRINGE FIND-IN-ORDERED-LIST SLOOP-SLOOP-MACRO IN-ARRAY-SLOOP-FOR PARSE-LOOP-MAP PARSE-LOOP-FOR ADD-FROM-DATA LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-DO PARSE-NO-BODY PARSE-LOOP1 LOOP-LET-BINDINGS LCASE WRITEF-SYS BRAKE-CHOICE FASTKB-CHOICES FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS INVALID-RULE ASK-A-NUMBER ASK-A-CHOICE SKIP-EOLN TOKEN-EOLN DELETE-SYS IF*))
(setf (callers-list 'BRAKE-CHOICE :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'CHANGE-LHS-RHS :callers) '(FLATTEN-EQN FLATTEN-RULE))
(setf (callers-list 'FUNCALL :callers) '(MAP-FRINGE FIND-IN-ORDERED-LIST LOOP-PARSE-ADDITIONAL-COLLECTIONS INSERT))
(setf (callers-list 'DIVIDED-BY :callers) '(VARS-ONLY))
(setf (callers-list 'SAME-OP :callers) '(PSEUDO-TERM-ORDERING SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM IS-SUBTERM MERGEBLE-TERMS REDUCE-BY-PREMISE-AT-ROOT POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE COMPARE-TERM REDUCE-AT-ROOT-BOOL ADD-REST-ARGS EQ-MATCH ELIM-BIN MATCH-POSS CYCLE-REWRITE-RULE LRPO-PREMISES IS-COMMUT-PAIR DIVISIBLE-AC-CHECK))
(setf (callers-list 'EXPECTED :callers) '(EXPECT-ARITY EXPECT-ARITY21 EXPECT-ARITY12 NEXT-TOKEN GET-ITEM GET-RHS CONDI-FROM-CLAUSE GET-CLAUSE GET-EQUATION READ-TYPE-RELATION READ-ARITY))
(setf (callers-list 'TRUENAME :callers) '(TEST-RRL CLOSE-LOG))
(setf (callers-list 'EQN2ASSERTION :callers) '(NORMALIZE MAKE-ONE-BUILD))
(setf (callers-list 'FIND :callers) '(LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP-COLLECT LOOP-COLLECT-KEYWORD-P))
(setf (callers-list 'AC-MATCH :callers) '(POLY-MATCH-+ EQ-MATCH MATCH-SET-AC APPLIES))
(setf (callers-list 'REM-DUPS :callers) '(STRONG-SUBGOAL-PROOFS INDUC-SUBGOAL-PROOFS TYPE-VAR-LIST ONE-TYPE-VAR-LIST FREE-VARS VAR-LIST OP-LIST MAKE-ONE-SCHEME ADD-DEFIN-DEPEND PRE-OPS PRE-VARS MAKE-RULE-INSTANCES NONLINEAR-VARS-UNDER-* NORM-EQ-ARGS POLISH-PREMISES PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL MAKE-NEW-RULE IS-VALID-CONDI-RULE EQ-ADD SYMMETRY-TERMS SET-UNIFY NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS INDUC-IDEM-SUPERPOSITION MAKE-ONE-DOWN-HILL PRINT-NORMALIZED-EQN COMMUNE-TERMS2 INDUC-REDUCE-OTHERS-AUX PROCESS-ASS-SIMPLE SUB-NONVARS PRE-SUB-NONVARS EQN-SUB-NONVARS))
(setf (callers-list 'INDUC-SUBSUMED-BY :callers) '(X_AUTO_INDUC))
(setf (callers-list 'ACO-LRPO> :callers) '(CAR-LRPO< ACO-LPRO>= ACO-LRPO> ACLRPO))
(setf (callers-list 'PRED-SUPERPOSITION :callers) '(SUPERPOSITION AC-CRITPAIRS))
(setf (callers-list 'FOURTH :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'ADD-PREMISE-END :callers) '(PRE-PROCESS-PRE-ASS COVER-CONDI-NORM))
(setf (callers-list 'ORDER-FUNCTION :callers) '(FIND-IN-ORDERED-LIST))
(setf (callers-list 'IS-CYCLE-EQN :callers) '(TRY-TO-ORIENT))
(setf (callers-list 'COVER-NORMALIZE :callers) '(REDUCTION-PROOF NORMALIZE CHECK-WITNESS NORMAL-PROVE COVER-NORM-ORDER COVER-NORMAL-PROOF))
(setf (callers-list 'PC-GRT-PREC :callers) '(TOTAL-ORDER-PC-RES COMPARE-TERM))
(setf (callers-list 'SIMPLIFY-COND-TERM :callers) '(REWRITE-AT-ROOT))
(setf (callers-list 'WRITE-ONE-PRE :callers) '(PROOF-BY-HINT-TERM WRITE-F-PREMISES WRITE-PREMISES TRACE-FACTOR INDUC-ADD-RULE WRITE-COMMENT-PREMISES))
(setf (callers-list 'TO :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'X_PROVER :callers) '(RRL-AUX))
(setf (callers-list 'M-XOR-M :callers) '(NEGATE-PREDICATE EQN2ASSERTION))
(setf (callers-list 'PURE-MIXED-REDUCE :callers) '(PURE-NORM-MIXED))
(setf (callers-list 'MY-COPYLIST :callers) '(X_MANUAL_INDUC REDUCE-EQN-BY-ONE-RULE START-HISTORY))
(setf (callers-list 'DISABLE-RULES :callers) '(RRL-AUX))
(setf (callers-list 'LOAD :callers) '(FCLOAD CLOAD2 CLOAD BLOAD FLOAD))
(setf (callers-list 'PURE-LRPO :callers) '(LRPO ACLRPO))
(setf (callers-list 'FIRST-CTX-TRANS :callers) '(FIRST-CTX-TRANS MY-FIRST-CTX-TRANS NEW-FIRST-CTX-TRANS))
(setf (callers-list 'PICK-OUT-RULE :callers) '(X_PREPARE_RULES))
(setf (callers-list 'READ-LINE :callers) '(CLEAN-LINE))
(setf (callers-list 'GET-SCHEMES :callers) '(TEST-ONE-OP))
(setf (callers-list ':SLOOP-MAP :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'IS-ELIM-TERM :callers) '(ONE-ELIM-SUBTERM))
(setf (callers-list 'MAKE-NEW-VARIABLE :callers) '(RENAME-VARS TOP-TERM DETACHMENT-CRITICAL NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS NEW-RULE-FROM-ASSOC SKOLEMIZE-AWAY-QUANTS))
(setf (callers-list 'UNIFIERS :callers) '(DETACHMENT-SUPER FACTORIBLE))
(setf (callers-list 'START-KB :callers) '(PROVE LINEAR RRL-AUX))
(setf (callers-list 'HANDLE-AND :callers) '(COVER-CONDI-NORM))
(setf (callers-list 'ALLSYM :callers) '(IS-SKOLEM-OP))
(setf (callers-list 'REMPROP :callers) '(MAKE-ASS-COM-OP))
(setf (callers-list 'CANONICALIZE :callers) '(IDEM-SUPERPOSITION PRED-FUNC-SUPERPOSITION PRED-SUPERPOSITION))
(setf (callers-list 'POLY-MATCH-FIND-REST-*-ARGS :callers) '(POLY-MATCH-ONE-TO-* POLY-MATCH-*))
(setf (callers-list 'AVOID-COMMON-TERM :callers) '(DIVISIBLE-AC-CHECK))
(setf (callers-list 'WRITE-RULE :callers) '(REWRITE-ONCE-BY-HYPO X_HYPOTHESIS REFUTED-RESULT ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE MAKE-CYCLE-RULE PURE-CRITPAIRS CRITPAIRS INCONSISTENT-EQN CONSISTENT-RULE MAKE-P-COMMUT-RULE INDUC-REDUCE-OTHERS-AUX ADD-CONDI-DOMINATE-RULE INDUC-ADD-RULE))
(setf (callers-list 'REMOVE-SUGG :callers) '(ASK-USER))
(setf (callers-list 'UNDO-STRATEGY :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'NORM-OR-ARGS :callers) '(NORM-BOOL-INNERMOST))
(setf (callers-list 'SIMPLIFY-+ :callers) '(NORM-POLY POLY-SIMPLIFY))
(setf (callers-list 'PURE-MATCH :callers) '(PURE-REDUCE-BY-ONE-AT-ROOT))
(setf (callers-list 'QUANTIFIERP :callers) '(HASQUANT SKOLEMIZE-AWAY-QUANTS BREAK-ASS))
(setf (callers-list 'ASS2EQN :callers) '(NORMALIZE GET-EQUATION))
(setf (callers-list 'DELETE-EQN :callers) '(DELETE-SYS))
(setf (callers-list 'REF-SYMMETRY-TERMS :callers) '(AC-SUPERPOSITION))
(setf (callers-list 'AUTO-KB :callers) '(RRL-AUX))
(setf (callers-list 'NUMBERP :callers) '(DISPLAY-ONE-ARITY2 GET-CODOMAIN-TYPES GET-DOMAIN-TYPE WELL-TYPED3 OPERATOR-ORDERING EXPECT-ARITY EXPECT-ARITY12 SET-UP-ARITY2 CHECK-ARITY ENSURE-PREDICATE MAKE-EQ-PRE MAKE-BETTER-PRE TRANS-STATUS PC-GRT-PREC DEFAULT-PRECEDENCE POLY-INITIALIZE PRED-SUPERPOSITION WRITE-TERM-SIMPLE WRITEF-SYS TOTAL-ORDER-ATOM ORDER-PC-RES ASK-USER BRAKE-CHOICE FASTKB-CHOICES EXT-CONSTRUCTOR FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS GET-ARITY NORM-BOOL-INNERMOST NORM-CTX NORMALIZE LINEAR ASK-FOR-OPERATOR UNKNOWN-SIZE INVALID-RULE RPOST EQUIV PURE-LRPO ASK-A-NUMBER NEXT-TOKEN NAME2RULENUM DELETE-SYS INSTANCE-DELETE-CONDITION SUP-TERM EQN2PRE COVER-NORM-TERM NEW-RULE-FROM-ASSOC REMOVE-LEFT-ARG LEFT-ARG REMOVE-RIGHT-ARG RIGHT-ARG DIVISIBLE-NONAC-CHECK FIRST-BOOLEAN-CONSTANT GET-SKO-FUNC SUBSTVARFOR INIT-BOOL-OPS AUTO-ADD-STATUS AUTO-MAKE-EQUI ACO-LRPO= ACO-LPRO>= ACO-LRPO>))
(setf (callers-list 'SIZE :callers) '(SMALLER-SIZE TERM-SIZE-ORDER SIZE COMP-EQN TRY-TO-ORIENT TRY-TO-ORIENT-CONDI UNKNOWN-SIZE SPECIAL-SIZE MAKE-CYCLE-RULE BIG-PRE-INFO LESS-SIZE-CAR SMALLER-PRE-CAR))
(setf (callers-list 'NEWSYM :callers) '(GET-SKELETON2 AUTO-OPERATOR))
(setf (callers-list 'CONS :callers) '(STRONG-SUBGOAL-PROOFS X_REMOVE_HYP PROOF-UNDER-NEW-PREMISES STRUCTURE-INDUC-ON COVER-SET-SCHEME INDUC-SUBGOAL-PROOFS REDUCE-EQN-BY-ONE-RULE SWITCH_RULE_LR EXT-TYPE-RELATION WELL-TYPED-VAR RENAME-VARS RPLAT-IN-BY RPLNTHSUBT-IN-BY ALL-OPS FIXUP-QUANTIFIED-FORMULA TOP-TERM BASIC-TERM GET-SKELETON2 DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN COMPLETE-TEST START-TEST STR-FORMULATE-SCHEME SUBSTITUTE-SLOOP-BODY PARSE-LOOP-MAP LOOP-ADD-BINDING POINTER-FOR-COLLECT PARSE-LOOP-INITIALLY PARSE-LOOP SUBSUMED-TUPLE RENAME-PATTERN INDUC-AC-SUBS ALL-NONVARS REFUTE-EQN SUBST-PREMISES REDUCE-BY-PREMISE-AT-ROOT MARK-USED-PRE NEGATE-ONE-PRE REMAKE-PREMISES MAKE-PRE-ASS NOFALSE-PREMISES REVERSE-PREMISE ADD-PREMISE-END MAKE-EQ-PRE MAKE-BETTER-PRE FIRST-VAR-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES FIRST-CTX-TRANS MY-FIRST-CTX-TRANS ADD-SUGG TRY-SUGG-PREC POLY-MATCH-+ M-*-M P-+-P POLY-SIMPLIFY WRITE-VARIABLE MAKE-EQ MAKE-CRIT-RULE NORM-EQ-ARGS PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST AC-COMPRESS ADD-REST-ARGS SIMPLIFY-MY-EQ-TERM LAST-CONSISTENCY-CHECK SUB-TEST MR SUB1-MODULO-N ADD1-MODULO-N EQ-MATCH MATCH-SET-AC NEXT-CHOICE NORMAL-FORM-SUB DECOMPOSE-TERMS NEW-TERM ADD-OPERATOR IS-VALID-RULE FLATTEN-WITNESS READ-ARGS GET-TERM-ARGS GET-ITEM GET-RHS APPLYSUBST-PRE PREMISE-INSTANCE FORM-PREMISES-FROM-CONJ SPLIT-RHS-OR SPLIT-RHS-AND RENAME-OP-RULES START-HISTORY NCONS SUBPAIR INSERT CNTH ATTACH TR-ADD EQ-JOIN EQ-ADD IS-SYMMETRY-RULE GET-SYMMETRY-TERMS IS-SYMMETRY-EQN TRACE-INCONSISTENCY HANDLE-FACTOR MAKE-ONE-DOWN-HILL BIG-PRE-INFO HEAD-LESS-THAN-PRES EQN2PRE SUBSUMED-PREMISES SORT-OP-ARGS REDUCE-BY-P-COMMUT2 C-PERMUTATION INDUC-ADD-RULE GET-SKO-FUNC SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS REMOVE-QUAN-ARGS NEGATE-XOR-ARGS SUBSTVARFOR AND-OF-MONOMIALS SIMPLIFY-FLAT P-XOR-P M-XOR-M M-AND-M INSERT-AND-REMOVE-PAIRS DECANON-XOR CANONICALIZE FIRST-TRANS NEW-FIRST-CTX-TRANS BA-SIMPLIFY NEW-FIRST-TRANS END-AUTO-ORDER POSTPONE-OR-UNDO POSTPONE-IT UNIFY-WITH-AC ACO-BIGT-PARTITION DISTR-AC-ORDER COMBINATE2 GENERAL-BASIS-VECTORS COMPRESS-FLAT FLATTEN-PREMISES SUB-NONVARS2))
(setf (callers-list 'MERGE-DUPLICATE :callers) '(PARTI-BY-VARS))
(setf (callers-list 'PREDICATEP :callers) '(GET-DOMAIN-TYPE ENSURE-PREDICATE MAKE-EQ-PRE MAKE-BETTER-PRE DEFAULT-PRECEDENCE PRED-SUPERPOSITION ORDER-PC-RES NORM-BOOL-INNERMOST NORM-CTX NORMALIZE INSTANCE-DELETE-CONDITION SUP-TERM EQN2PRE COVER-NORM-TERM FIRST-BOOLEAN-CONSTANT))
(setf (callers-list 'LET :callers) '(SEARCH_BY_EQN SEARCH_BY_ID BREADTH-SEARCH PEQNS CLEAN-INDHYP REWRITE-ONCE-BY-HYPO X_MATH_IND STRONG-SUBGOAL-PROOFS X_REMOVE_HYP X_COVER-PROOF-PROCESS2 SUCC-END-INDUC X_READ_TERM X_REAL_VARS X_NAME SPLIT-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-SET-SCHEME ABSTRACT-PROOF INDUC-SUBGOAL-PROOFS XIN-MENU X_ADD-RULE3 X_REDUCE-BY-ONE-RULE REDUCE-EQN-BY-ONE-RULE WELL-TYPED-EQN DISPLAY-ONE-ARITY2 DISPLAY-ARITY2 DISPLAY-TYPE-ARITY GET-SUBTYPES ADD-SUGG-TYPE1 EXT-TYPE-RELATION GET-CODOMAIN-TYPES COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2 TYPE-ALL-VARS ONE-TYPE-ALL-VARS GROUNDP NON-LINEAR-VARS SUBS-ARE-PRIMITIVE PRIMITIVE-SUBST IS-LIMITED RENAME-VAR1 SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM OCCURS-IN IS-SUBTERM IS-SUBT NEWVARSIN RPL-BY-TERMS2 RPLAT-IN-BY RPLNTHSUBT-IN-BY SUBTAT FREE-VARS IS-GROUND EXPECTED EXPECTING-PREDICATES EXPECTING-FUNCTIONS QUASI-REMOVER NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT SUB-QUASI-REDUCIBLE MAKE-TUPLES BASE-DEPTH TOP-TERM NEW-TOP-TERMS NEW-ARGS ADD-ONE-DEPTH GET-TESTSET-QUASI BASIC-TERM GET-BASIC-TYPE-TERMS PARTITION-OPS-BY-TYPE PARTITION-TERM-BY-TYPE RULE-DESTROYABLE DESTROYABLE TRACE-ADD-TESTSET TRACE-TESTSET GET-DOWN GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE EXTEND-DOM-ARGS DEF-DOMAIN-POINTS DEFINING-DOMAIN GET-DEFINING-DOMAINS EXTEND-SCHEMES GET-SCHEMES GET-TESTSET2 FLATTEN-TESTSET CONSTRUCTORS-CHECK TEST-ONE-OP IS-PARTIAL-OP COMPLETE-TEST APPLY-TO2 COMPOSE2 RESOLVE COMP1 NORM-SUB COMPOSE1 COMPOSE SIZE-UNI STR-FORMULATE-SCHEME STR-CHOOSE-ONE-SCHEME IN-CAREFULLY-SLOOP-FOR SLOOP-SLOOP-MACRO IN-ARRAY-SLOOP-FOR REPEAT-SLOOP-MACRO PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-FOR PARSE-LOOP-DECLARE MAKE-VALUE LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP-COLLECT POINTER-FOR-COLLECT PARSE-LOOP-WHEN PARSE-LOOP-INITIALLY PARSE-LOOP-WITH PARSE-LOOP DESETQ LCASE REMOVE-SUBSUMED-PATTERNS MERGE-TWO-TUPLES FIND-MERGE-SIGMA MERGE-TWO-PATTERNS ADD-PATTERNS REM-DUP-VARS REMOVE-DUP-VARS HAS-NONLINEAR-VARS ONE-PATTERN COMPATIBLE-PATTERNS FORM-PATTERNS-SINGLE MAKE-ONE-SCHEME MERGEBLE-TERMS CHOOSE-HIGHEST-TERM DECIDE-MERGE-CONJ MERGE-DUPLICATE PARTI-BY-VARS DEPENDED-OP OPS-OF-RULE ADD-OLD-VARS MAX-DEPEND-GAP DEFINING-POSITIONS SET-DEPEND-SCORES COMPATIBLE-PATTERN CAR-LENGTH-CDDR GET-RECURSIVE-RETURN-OP HAVE-MANY-RECURSIVE-EQNS GET-RECURSIVE-DEF-TERM ENCOURAGE PICK-MAX-SCORE-OP CHOOSE-LEAST-COVER CHOOSE-MAX-SCORE GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS HAVE-INDUCTIVE-VARS HAS-INDUCTIVE-VAR INDUCTIBLE INDUC-AC-SUBS INDUC-SUBS-TERM INDUC-SUBS-OF-EQN CHOOSE-BEST-SCHEMES ADD-DEFIN-DEPEND SUBS-OF-SAME-ROOT DECIDE-DEFIN-MODE IS-CROSS-OP SET-RIGHT-HYPO-ARGS COVER-SETS GET-COVER-SETS REFUTE-RULE-INSTANCES COLLECT-CDR-WITH-SAME-CAR REF-INSTANCE-SEEDS2 GET-INSTANCE-TERMS2 ELEMENT-COMBINATION REF-INSTANCE-SEEDS GET-INSTANCE-SEEDS NEGATE-EQN REFUTE-EQN SEPARATED FAIL-END-INDUC CHOOSE-CONSTRUCTORS INDUC-PROVE PROVE SUBST-PREMISES REDUCE-ARGS-BY-PREMISES REDUCE-BY-PREMISES REDUCE-BY-PREMISES-AT-ROOT SUBST-VAR-PREMISES NORM-BY-PREMISES PRES-SIZE MORE-VARS-PREMISE SUPER-ITSELF-PRE GET-PRES-OPS NEGATE-PREMISES SEPARATE-XOR-ARGS MAKE-PRE-XOR-ARGS REMAKE-PREMISES MAKE-PRE-ASS NOFALSE-PREMISES PREMISES-ARE-TRUE REDUCE-REVERSE-PREMISES SIMPLIFY-PREMISES ADD-SIMPLIFY-OTHERS PRE-PROCESS-PREMISES FIRST-PROCESS-PREMISES ADD-SUGG1 REMOVE-SUGG SUGG-PREC TRY-SUGG-PREC PRINT-SUGG-INFO STATUS-CANDIDATES TRANS-STATUS REMOVE-EQ-OP OK-PREV-RULES UPDATE-BY-EQ EQUIV-OPS OPS-EQUIV-TO PC-GRT-PREC REDUCE-BY-HOMO-RULES REDUCE-MONO NORM-SIGN-CHANGED-MONOS NORM-POLY POLY-ADD-HOMO-RULES IS-HOMOGENEOUS-TERM REDUCE-BY-CHARACTER IS-CHARACTER-RULE POLY-LRPO MOVE-MONOS MAKE-RULE-INSTANCES MOVE-LHS-ARGS ELES-MORE-THAN-1 NONLINEAR-VARS-UNDER-* POLY-SUPER-DISTRIBUTION COMPACT-LAST-ELEMENTS POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* FIRST-N-ELEMENTS REST-ELEMENTS POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS POLY-MATCH-ONE-TO-* POLY-MATCH-* POLY-MATCH-+ REDUCE-*-TERM REDUCE-+-TERM POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE INSERT-SORT-ARG MERGE-SORT-ARGS M-+-P P-*-P P-*-M M-*-P M-*-M P-+-P SIMPLIFY-* SIMPLIFY-+ MAN-PICK-2ND-RULE CHOOSE-BY-HAND INTRO-RULE PICK-ONE-UNMARKED MANUAL-PICK IS-BIG-ENOUGH-RULE INDUC-PICK-UNMARK PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL PRED-CRITICAL-PAIR BOTH-ADD-PREDICATE IDEM-SUPER-COMMU IDEM-SUPERPOSITION PRED-FUNC-SUP PRED-FUNC-SUPERPOSITION PRED-SUPER SHOW-MESSAGE HELP-FILE WRITE-SIGMA WRITE-DETAIL-RULE PRINT-HEAD PRINT-ATOMS WRITE-F-PREMISES WRITE-PREMISES WRITE-DISJUNCTIONS WRITE-TERM-SIMPLE WRITE-TERM-BOOL WRITE-ASSERTIONS LIST-ASSERTIONS WRITE-EQNS LIST-EQUATIONS WRITE-RULES LIST-RULES OPEN-WRITE-FILE WRITEF-SYS TOTAL-ORDER-RES TOTAL-ORDER-PC-RES ORDER-PC-SEQ COMP-TERMS SIZE-COMPARE ORDER-ASS MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ INSTANTIATE-LHS MAKE-CRIT-RULE ASK-USER PURE-ORIENT-AN-EQN ORIENT-AN-EQN POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA SUPPORT-EQN NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA AUTO-OPTIONS NORMALIZE-BOUND TIME-LIMIT-STRA BRAKE-CHOICE POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE FASTKB-CHOICES WARN-STAT ADD-EQU TRY-MAKE-EQUI EXT-EQUIVALENCE EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-OPERATOR ADD-STATUS EXT-STATUS EXT-PRECEDENCE NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR FOPC-STRA IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS CLEAN-OPS DISPLAY-CONSTRUCTORS GET-FREE-CONSTRUCTORS NON-CONSTANTS GET-CONSTANTS SAME-ARITY EXIST-OP CLEAR-OPERATORS GENNEWSYM REDUCE-AND-TERM REDUCE-XOR-TERM REDUCE-AT-ROOT-BOOL NORM-AND-ARGS NORM-OR-ARGS NORM-XOR-TERM NORM-CTX PURE-REWRITE-AT-ROOT PURE-MIXED-REDUCE PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-OUTRED1 OUTRED1 PURE-NORM-OUTERMOST NORM-OUTERMOST SIMPLIFY-COND-TERM REDUCE-COND-TERM EACH POLISH-PREMISES PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE REDUCE-BY-RULES CYCLE-CHECK SIMPLIFY-MY-EQ-TERM REDUCE-AT-ROOT-ONE-RULE TRY-ONE-EXTRA-VAR-RULE REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES REDUCE-AT-ROOT REWRITE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE ANS-MEMBER PICK-SMALL-GOAL MANUAL-GOAL PICK-GOAL LINEAR DEMULT-FORM MULT-FORM MULT-DIFF2 MULT-DIFF MULT-UNION MULT-SORT-MERGE MULT-MERGE MULT-SORT-INSERT MULT-INSERT IS-SUBLIST LIST-DIFF IS-SUBSET SET-DIFF2 SET-DIFF HAVE-COMMON COMMON-ELEMENTS ONE-PRESENTATIVE LONGEST-LIST GET-RULE LESS-VECTOR CON1-NUMS CON-NUMS NTIMES INSERT-LIST N-TUPLES REAL-COLLECT-PRODUCTS PROPER-PRODUCT-LISTS PRODUCT-LISTS GET-POSITION PICKOUT NON-DECREASING-SEQ IS-SUBSEQ-LIST IS-SUBSEQUENCE SPLIT-ALIST MATCH-PREMISES EQ-MATCH CTX-BAD-LUCK MATCH-BOOL-NEW IS-AN-INSTANCE MEMBER-TERM REM-ARGS ELIM-BIN OCCUR-NUM DIVIDED-BY INCREMENT-POS NEXT-CHOICE GET-INTERSECTION-RANGE VARS-ONLY PICK-AN-ARG MATCH-POSS AC-MATCH ACM-AC-ROOT ACM-AND-EQ PURE-MATCH MATCH NONAC-UNIFY NORMAL-FORM-SUB DECOMPOSE-TERMS OCCURS-IN-RULE CHECK-MISMATCH MAKE-RULE-SIZE-ORDER MAKE-RULE-FROM-ASS AUTO-OPERATOR NEW-TERM ADD-OPERATOR GET-RULE-LEVEL BODY-PREMISES-SIZE MAKE-NEW-RULE CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE RPOST RPOMULT EQUIV-LIST EQUIV PURE-LRPO CLEAN-RULE ADD-RULE3 REDUCE-POST-ASS ADD-RULE-LINEAR REDUCE-OTHER-RULES ADD-RULE-COMPLETE PURE-ADD-RULE FIRST-PROCESS-EQN PURE-PROCESS-EQUATION PROCESS-EQUATION KNUTH-BENDIX1 START-KB PRINT-CHOICE-MESSAGE READ-THIS-EQN CHOOSE-STR OK-TO-CONTINUE READ-ARGS SAVE-WORDS GET-ATOM2 NEXT-TOKEN MAKE-BUFFER READ-T-TERM GET-TERM-ARGS GET-VARLIST GET-TERM GET-RHS GET-CLAUSE GET-EQUATION READ-OP-DECLARATION READ-EQNS OPEN-READ-FILE READ-INPUT DISPLAY-OPS DISPLAY-OP-STATS DISPLAY-KB-STAT ENABLE-RULE DISABLE-RULES-AUX DATE ORDER-EQNS DELETE-EQN DELETE-RULE DELETE-SYS START-UP RESET-RRL INITIALIZE PRE-INIT AND-LHS-TRUE-RHS INDUC-SUBSUMED-BY SEE WRITE-SEQ-NUM HYPO-SUBSUME-EQN IS-PREVIOUS-INDUC-EQN IS-FAILED-INDUC-EQN CHANGE-VARS APPLYSUBST-PRE APPLYSUBST-EQN EQN-INSTANCE PREMISES-INSTANCES FORM-PREMISES-FROM-CONJ NORM-PROVE-ALL-EQNS PROVE-ALL-EQNS SPLIT-LHS-OR SPLIT-LHS-AND PROVE-SPLIT-BOOL RENAME-EQN-RULE RESTORE-PROPERTIES GET-ALL-PROPERTIES SAVE-RRL MY-COPYLIST UNDO1 START-HISTORY LISTARRAY FILLARRAY TYIPEEK READC MERGE-LIST IF* EQ-IN-MONOMIAL PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE TR-TERM TR-CLOSURE TR-ADD TR-FIND EQ-FIND EQ-TR REDUCE-EQ-EXACTLY REDUCE-EQ-TERM FLAT-TERM ADD-ASSOCIATE-LIST ADD-TIME USER-SELECTQ SET-EQN-MARK CYCLE-PAIRS SYMMETRY-TERMS IS-SYMMETRY-RULE SYMMETRY-VARS CYCLE-REDUCE-AT-ROOT-2 CYCLE-REWRITE-AT-ROOT CYCLE-OUT-RED CYCLE-REDUCE-TERM CYCLE-NORM-TERM CYCLE-REDUCE-OTHERS MAKE-CYCLE-RULE SAME-LIST IS-SYMMETRY-EQN LIST-PAIRS LOOK-AT-PAIR-AND LOOK-AT-PAIRS MAKE-PAIRS PICK-AC-PAIR ADD-PAIRS REMOVE-PAIRS-WITH PROCESS-AC-UNIFIER AC-SUP-TERM PROCESS-AC-CRITICAL-PAIR SET-UNIFY PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION INDUC-SUP-TERM INDUC-SUPERPOSITION HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 PURE-SUP-TERM SUP-TERM FUNC-SUPERPOSITION AC-CRITPAIRS PURE-CRITPAIRS CRITPAIRS PICK-OUT-RULE RULE-NUMS-FROM-SOURCE GET-ALL-RULE-NUMS TRACE-INCONSISTENCY CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-CHECK HANDLE-FACTOR FACTORIZATION HIGH-OP-POSI RELATED-VARS2 RELATED-VARS TRACE-REMOVE-IRRELEVANT4 GOOD-UNIT-CLAUSE REMOVE-IRRELEVANT4 REMOVE-IRRELEVANT3 HANDLE-COMMU-HYPO TRACE-DROPPED-PREMISES REMOVE-IRRELEVANT2 MAKE-ONE-DOWN-HILL DOWN-HILL-ONE OR-CONDI-EQN OPS-IN-PRES-OF-RULES PRE-BIGGER-THAN-EQN HEAD-LESS-PRE RESTORE-EQUATION BUILD-EQN-FROM-PRES BUILD-EQUATION-FROM-PREMS CHECK-HEAD-ROLE PICK-OUT-PREMISE SIMPLIFY-ALL-PREMISES RULE-SUBSUMED-PREMISES NO-SUBSUMPTION COVER-CONDI-NORM NORM-BUT-ROOT COVER-NORM-TERM COVER-NORM-ORDER COMMUNE-TERMS2 COMMUNE-TERMS P-COMMUT-REDUCE-OTHERS IS-SORTED SORT-OP-ARGS REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT AVOID-COMMON-TERM DIVISIBLE-CHECK ELIMINATE-SUB IS-FREE-TERM IS-ELIM-TERM ONE-ELIM-SUBTERM ELIMINABLE-TERMS REMOVE-VAR-PRES TRACE-BUILDING BUILDING CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT HAS-HINT-TERM HAVE-BOOLEAN-CONSTANT FIRST-SPEC-TERM FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHER-RULES QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN ORDER-ONLY GET-SKO-FUNC HASQUANT SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS REMOVE-QUAN-ARGS SKOLEMIZE BREAK-AT-OR SUBSTVARFOR PROCESS-ASS PROCESS-ASS-SIMPLE EQN2ASSERTION INIT-BOOL-OPS EQ-TR-MEMBER SIMP-XOR-SIMP SIMP-XOR XOR-OF-MONOMIALS SIMP-AND AND-OF-MONOMIALS SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT BRT P-XOR-P M-XOR-P P-AND-P M-AND-P M-AND-M INSERT-AND-REMOVE-PAIRS MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS DECANON-XOR CANONICALIZE FIRST-TRANS BA-SIMP-OR BA-SIMP-AND NEW-FIRST-TRANS END-AUTO-ORDER NOT-AUTO-PREV-RULES AUTO-ADD-STATUS IS-BAD-SUGG POST-FOR-WHILE CAN-HAVE-NEW-OP AUTO-ORIENT AUTO-KB DISPLAY-UNIFY IS-BLOCKED BLOCK-CHECK TWO-UNIFIER CONTINUE-MAPPING UNICOMPOUND ALL-PLAUS PLAUSIBLE RES1 ACUNI UNIFY-WITH-AC UNIFY UNIFIER UNIFIERS FIND-OUT-BIG-EQ-SUBS ACO-EQUIV-LIST ACO-LRPO= ACO-RPOMULT>= ACO-RPOMULT> BIGT-TWO-KILL-ONE BIGT-ONE-KILL-ONE ACO-BIGT-PARTITION TWO-KILL-ONE ONE-KILL-ONE ACO-NOBIGT-PARTITION ACO-HARDER ACO-HARD> ACO-LPRO>= ACO-LRPO> AC-DISTRI PREC-CONSISTENT ACLRPO CARDINALITY SYMMETRY-NON-DELETABLE SYM-ARG-POSITIONS DIO2 DIO COMBINATE2 COMBINATE ADD-SOLN TAKE-OUT GET-SOLUTIONS SUMYMAX GET-LCM-SOLNS GENERAL-BASIS-VECTORS HALF-ONES FIND-BASIS-VECTORS CONDENSE-SEQUENCE LOOSE-SYM-SEQUENCE FULL-DIO DIO-INITIALIZE ALL-ONES WASH-DEF-RULES AC-MEMBER MULTI-COM ELIMCOM FLATTEN HAS-ACOP FLATTEN-POST-ASS FLATTEN-RULES2 FLATTEN-RULES MAKE-ASS-COM-OP FLAT-SORT-ARGS FLATTEN-PREMISES FLATTEN-EQN FLATTEN-RULE OP-POSITION PRE-SUB-NONVARS SUBST-EQN ABSTRACTION HANDLE-AND SET-HANDLE-AND SET-ART-MODE WRITE-COMMENT-PREMISES))
(setf (callers-list 'ELIMINABLE-TERMS :callers) '(BUILDING))
(setf (callers-list 'COVER-PROOF-PROCESS2 :callers) '(X_COVER-PROOF-PROCESS2 X_INDUC))
(setf (callers-list 'TYPE-COHERE :callers) '(EXPECTING-PREDICATES EXPECTING-FUNCTIONS))
(setf (callers-list 'MENU_FOR_CURSOR :callers) '(MOVE_CURSOR))
(setf (callers-list 'FIRST-VAR-PRE :callers) '(NORM-ONE-PRE))
(setf (callers-list 'CHAR :callers) '(IS-SUBSEQUENCE IS-VALID-VAR))
(setf (callers-list 'FORM-PATTERNS-SINGLE :callers) '(ADD-PATTERNS MAKE-ONE-SCHEME))
(setf (callers-list 'IDEM-SUPER-COMMU :callers) '(IDEM-SUPERPOSITION INDUC-IDEM-SUPERPOSITION))
(setf (callers-list 'WITH-UNIQUE :callers) '(PARSE-LOOP-WITH PARSE-NO-BODY))
(setf (callers-list 'OVER-REWRITE-PREMISES :callers) '(BRAKE-CHOICE))
(setf (callers-list 'X_NORMAL :callers) '(MANUAL_REDUCE))
(setf (callers-list 'IS-SUBLIST :callers) '(REDUCE-BY-PREMISE-AT-ROOT))
(setf (callers-list 'BRT :callers) '(SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR REDUCE-AT-ROOT-BOOL NORM-CTX AC-COMPRESS REDUCE-AT-ROOT-ONE-RULE APPLYSUBST-PRE IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS COVER-NORM-TERM BRT-IF OR-ARGS FLAT-TERM-FUNC FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'INDUC-PROVE :callers) '(PROVE))
(setf (callers-list 'HAS-NONLINEAR-VARS :callers) '(REMOVE-DUP-VARS))
(setf (callers-list 'CHOOSE-STR :callers) '(WRITEF-SYS MANUAL-ORIENT ASK-USER BRAKE-CHOICE FASTKB-CHOICES FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS INVALID-RULE DELETE-SYS RRL-AUX))
(setf (callers-list 'QUERY-INSERT :callers) '(ADD-PREMISE-END POLY-INITIALIZE MARK-SUPERPOSED))
(setf (callers-list 'CONSISTENT-PAIR :callers) '(MAKE-BETTER-PRE SIMPLIFY-MY-EQ-TERM LAST-CONSISTENCY-CHECK MAKE-ONE-DOWN-HILL PRE-CRIT-CHECKEQ COVER-UNCONDI-NORM))
(setf (callers-list 'MERGE-TWO-TUPLES :callers) '(MERGE-TWO-PATTERNS))
(setf (callers-list 'PURE-NORM :callers) '(PURE-CHECKEQ-NORMAL))
(setf (callers-list 'DETACHMENT-CRITICAL :callers) '(CRITPAIRS))
(setf (callers-list 'READ :callers) '(LOAD-RRL))
(setf (callers-list 'SET-DIFF :callers) '(IS-SUB-NONVAR-TERM ADD-PATTERNS PRED-CRITICAL-PAIR COMP-TERMS MAKE-RULE-SIZE-ORDER INVALID-RULE PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP))
(setf (callers-list 'THROW :callers) '(CHECK-ARITY BAD-TYPED EXPECTING-PREDICATES PARSE-LOOP-COLLECT REFUTED-RESULT MANUAL-ORIENT CTX-GT-LHS ORDER-CTX TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-AN-EQN ADD1-MODULO-N ADD-OPERATOR INVALID-RULE FOUND-WITNESS RESET-KB UNDO RESET PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR INCONSISTENT-EQN CONSISTENT-RULE))
(setf (callers-list 'COPY-SYMBOL :callers) '(MAKE-NEW-VARIABLE))
(setf (callers-list 'WRITE-F-PREMISES :callers) '(WRITE-F-RHS))
(setf (callers-list 'IS-CHARACTER-RULE :callers) '(ADD-RULE-COMPLETE MAKE-PAIRS))
(setf (callers-list 'SIMP-AND-SIMP :callers) '(NORM-RHS SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT))
(setf (callers-list 'RENAME-VARS :callers) '(RENAME-VARS))
(setf (callers-list 'LUCID-RUNTIME-SUPPORT:BQ-LIST* :callers) '(XIN-MENU IN-FRINGE-SLOOP-MAP COLLATE-SLOOP-COLLECT IN-CAREFULLY-SLOOP-FOR SLOOP-SLOOP-MACRO IN-ARRAY-SLOOP-FOR IN-PACKAGE-SLOOP-MAP IN-TABLE-SLOOP-MAP AVERAGING-SLOOP-MACRO NEVER-SLOOP-COLLECT ALWAYS-SLOOP-COLLECT COUNT-SLOOP-COLLECT MINIMIZE-SLOOP-COLLECT MAXIMIZE-SLOOP-COLLECT LOGXOR-SLOOP-COLLECT SUM-SLOOP-COLLECT DEF-LOOP-INTERNAL PARSE-LOOP-FOR MAKE-VALUE PARSE-LOOP-COLLECT PARSE-LOOP-WHEN PARSE-LOOP1 PARSE-LOOP DESETQ1 TIMES-CDR CHANGE-MONO-SIGN ORDER-ASS ACM-AC-ROOT ACM-NO-ARG ACM-NONAC ACM-ONE-VAR ACM-AND-EQ ACM-VARIABLE TIME-IN-SEC START-TIMER DEFAULT-FLAG UCONCAT PRINC0 REM-DUPS APPEND1 ASET COPYLIST DELETE0 SELECTQ CASEQ REMQ REMOVE0 ASSOC0 MEMBER-EQUAL MEMBER0 SUBST0 ALL-PRE-VARS PROCESS-DEL-RULE ASK-CHOICE ASK-NUMBER COVER-OF COLLECT-IF ALWAYS THEREIS IS-POLY IS-TYPE-PREDICATE GET-PRE-RHS GET-PRE-LHS IS-PREMISE-SET LAST-LETTER LETTERP HALF-CANONICALIZE QUANTIFIERP BOOLEAN-OPP GET-DEF-DOMAIN REMONCE QUERY-INSERT ADD-TIME USER-SELECTQ CODE MY-TYI MY-TYIPEEK IS-FREE-CONSTRUCTOR CONSTRUCTORP SET-CONSTRUCTOR COMMUTATIVEP SET-COMMUTATIVE SKOLEMP REM-SKOLEM SET-SKOLEM PREDICATEP REM-PREDICATE SET-PREDICATE COMM-OP-P AC-OP-P REM-STATUS GET-STATUS SET-STATUS REM-ARITY2 GET-ARITY2 SET-ARITY2 REM-ARITY IS-CONSTANT SET-ARITY INFIXP REM-INFIX SET-INFIX GET-RULES-WITH-OP PRED-RULEP SET-NO-REDUCTION-MARK SET-CRIT-MARK IS-PROP-EQN EQN-CTX IS-BOOL-OP TRUEP FALSEP APPLYSUBST UNITP IS-ROOTED-+ IS-BOOL-ROOT MAKE-TERMS PROCESS-AC-CRITICAL-PAIR MANY-ARGS2 FIRST-TRANS MY-COPYLIST2 ACO-RPOSTATUS>= ACO-RPOSTATUS> WHEN-ART-WITH-INPUT-FROM-TERMINAL))
(setf (callers-list 'NORM-INN :callers) '(NORM-INN PURE-NORM-INN))
(setf (callers-list 'IS-INFIX-OP :callers) '(ASK-FOR-OPERATOR))
(setf (callers-list 'IS-HIGHER-TERM :callers) '(CAR-LOWER))
(setf (callers-list 'MATCH-SET-AC :callers) '(MATCH-SET))
(setf (callers-list 'WELL-TYPED :callers) '(WELL-TYPED-EQN INPUT-TYPE-CHECK PRED-CRITICAL-PAIR))
(setf (callers-list 'POLY-CHOICE :callers) '(FASTKB-CHOICES))
(setf (callers-list 'ANS-MEMBER :callers) '(MAKE-RULE-SIZE-ORDER AND-OF-MONOMIALS))
(setf (callers-list 'BUILDING :callers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2))
(setf (callers-list 'GO :callers) '(PARSE-ONE-WHEN-CLAUSE MANUAL-ORIENT ASK-USER SUPPORT-EQN SUB-TEST NOT-IN-SET ASK-FOR-OPERATOR DELETE-EQN RRL-AUX INSERT CNTH))
(setf (callers-list 'GET-INSTANCE-SEEDS :callers) '(REFUTE-EQN))
(setf (callers-list 'POLY-MAKE-PAIRS :callers) '(MAKE-PAIRS))
(setf (callers-list 'RUN-KB :callers) '(START-KB))
(setf (callers-list 'MAKE-BETTER-PRE :callers) '(MAKE-PRE-EQN MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE))
(setf (callers-list 'SYMBOL-NAME :callers) '(X_NAME L-EQUAL WRITE-VARIABLE NORM-BOOL-INNERMOST IS-SUBSEQUENCE IS-VALID-VAR GET-VAR-SUBSTITUTION ALPHALESSP))
(setf (callers-list 'IS-ONEWAY :callers) '(ORIENT-RULE LAST-CONSISTENCY-CHECK NORMAL-PROVE))
(setf (callers-list 'CHECK-HEAD-ROLE :callers) '(COVER-CONDI-NORM))
(setf (callers-list 'ARGS-OF :callers) '(X_REDUCE-BY-ONE-RULE COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2 TYPE-ALL-VARS ONE-TYPE-ALL-VARS GROUNDP IS-CONSTANT-TERM LITERAL-NUM PSEUDO-TERM-ORDERING SUBS-ARE-PRIMITIVE IS-LIMITED RENAME-VARS DEPTH SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM OCCURS-IN IS-SUBTERM IS-SUBT RPL-BY-TERMS2 RPLAT-IN-BY RPLNTHSUBT-IN-BY FREE-VARS W-SIZE SIZE IS-GROUND ALL-VARS ALL-OPS CHECK-ARITY EXPECTING-PREDICATES EXPECTING-FUNCTIONS SUB-QUASI-REDUCIBLE TOP-TERM GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN APPLY-TO2 ENCOURAGE GET-SCHEME-VARS GET-INDUC-VARS INDUCTIBLE INDUC-SUBS-TERM SUBS-OF-SAME-ROOT SET-RIGHT-HYPO-ARGS SKOLEM-TERMS ALL-NONVARS SEPARATED REDUCE-ARGS-BY-PREMISES SUPER-ITSELF-PRE MAKE-PRE-ASS MAKE-BETTER-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES FIRST-CTX-TRANS POLY-ADD-HOMO-RULES IS-HOMOGENEOUS-TERM POLY-SIZE REDUCE-BY-CHARACTER IS-CHARACTER-RULE MOVE-LHS-ARGS NONLINEAR-VARS-UNDER-* POLY-SUPER-AT-*-0 POLY-SUPER-AT-* POLY-MATCH-ONE-TO-* POLY-MATCH-* *-CANONICALIZE +-CANONICALIZE M-+-P P-*-P P-*-M M-*-P P-+-P POLY-SIMPLIFY BOTH-ADD-PREDICATE IDEM-SUPERPOSITION PRED-FUNC-SUPERPOSITION WRITE-TERM-SIMPLE WRITE-TERM-BOOL COMPARE-TERM MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ REDUCE-AT-ROOT-BOOL BOOL-REWRITE-AT-ROOT NORM-AND-ARGS NORM-OR-ARGS NORM-XOR-TERM NORM-BOOL-INNERMOST PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST PURE-OUTRED1 OUTRED1 NORM-RHS PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE ADD-REST-ARGS SIMPLIFY-MY-EQ-TERM EQ-MATCH MATCH-SET ELIM-BIN VARS-ONLY MATCH-POSS DECOMPOSE-TERMS MAKE-RULE-FROM-ASS RPOST RPOMULT EQUIV PURE-LRPO SPLIT-LHS-OR SPLIT-LHS-AND EQ-IN-MONOMIAL PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE SYMMETRY-TERMS CYCLE-REDUCE-AT-ROOT-2 CYCLE-OUT-RED MAKE-CYCLE-RULE UNIT-RULE NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS INDUC-SUP-TERM PURE-SUP-TERM SUP-TERM CONSISTENT-PAIR IS-INCONSI-PAIR NORM-BUT-ROOT COMMUNE-TERMS2 SORT-OP-ARGS REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT MAKE-P-COMMUT-RULE C-PERMUTATION DIVISIBLE-AC-CHECK IS-FREE-TERM FREE-SUBTERMS IS-ELIM-TERM ONE-ELIM-SUBTERM FIRST-BOOLEAN-CONSTANT FIRST-SPEC-TERM HASQUANT SPECIAL-SUBST REMOVE-QUAN-ARGS SKOLEMIZE NEGATE-PREDICATE TRIVIAL-SIMPLIFY BREAK-AT-OR PROCESS-ASS SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT P-XOR-P M-XOR-P P-AND-P M-AND-P M-AND-M DECANON-XOR CANONICALIZE FIRST-TRANS BA-SIMPLIFY NEW-FIRST-TRANS PLAUSIBLE ACUNI UNIFY-WITH-AC FIND-OUT-BIG-EQ-SUBS ACO-LRPO= ACO-LEXICO-COMP-LR ACO-RPOMULT>= ACO-RPOMULT> ACO-HARD> ACO-LPRO>= ACO-LRPO> AC-DISTRI MAKE-FLAT SUB-NONVARS2))
(setf (callers-list 'ADD-CRIT-RULE :callers) '(INVALID-RULE ADD-RULE))
(setf (callers-list 'WARN-STAT :callers) '(TRY-MAKE-EQUI))
(setf (callers-list 'ADD-RULE :callers) '(ORDER-ASS MAKE-EQ ORIENT-AN-EQN IS-VALID-RULE NEW-RULE-FROM-ASSOC COVER-ORIENT-EQN))
(setf (callers-list 'PURE-NORM-OUTERMOST :callers) '(PURE-NORM))
(setf (callers-list 'INIT-PROVE-GLOBALS :callers) '(PROVE))
(setf (callers-list 'PURE-REWRITE-AT-ROOT :callers) '(PURE-NORM-INNERMOST PURE-RWONCE-OUTERMOST))
(setf (callers-list 'COVER-CASE-BOOL-FLAG :callers) '(COVER-SET-INDUC-STRA))
(setf (callers-list 'GET-STATUS :callers) '(TRANS-STATUS RPOST EQUIV PURE-LRPO NEW-RULE-FROM-ASSOC REMOVE-LEFT-ARG LEFT-ARG REMOVE-RIGHT-ARG RIGHT-ARG DIVISIBLE-NONAC-CHECK AUTO-ADD-STATUS AUTO-MAKE-EQUI ACO-LRPO= ACO-LPRO>= ACO-LRPO>))
(setf (callers-list 'DIFF :callers) '(VARS-ONLY))
(setf (callers-list 'C-PERMUTATION :callers) '(QUASI-REDUCIBLE SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-AT-ROOT-ONE-RULE APPLYSUBST-PRE IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS COVER-NORM-TERM C-PERMUTATION FLAT-TERM-FUNC FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'GET-RECURSIVE-RETURN-OP :callers) '(CHOOSE-LEAST-COVER))
(setf (callers-list 'IDEM-SUPERPOSITION :callers) '(PRED-SUPERPOSITION))
(setf (callers-list 'TRY-MAKE-EQUI :callers) '(EXT-EQUIVALENCE))
(setf (callers-list 'SPLIT-LHS-AND :callers) '(PROCESS-EQUATION PROVE-SPLIT-BOOL COVER-NORM-ORDER))
(setf (callers-list 'CHECK-ARITY :callers) '(EXPECTING-PREDICATES EXPECTING-FUNCTIONS))
(setf (callers-list 'SUPPORT-EQN :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'NORM-BY-PREMISES :callers) '(NORMALIZE-BY-PREMISES))
(setf (callers-list 'MAKE-ONE-SCHEME :callers) '(COVER-SET-SCHEME))
(setf (callers-list 'DEFUN :callers) '(LCASE))
(setf (callers-list 'LOOP-ADD-TEMPS :callers) '(PARSE-LOOP-FOR LOOP-ADD-TEMPS PARSE-LOOP-WITH))
(setf (callers-list 'REMQ :callers) '(ELIM-BIN))
(setf (callers-list 'DEF-DOMAIN-POINTS :callers) '(EXTEND-DEF-DOMAIN))
(setf (callers-list 'IS-PREMISE-SET :callers) '(WELL-TYPED-EQN WRITE-F-RHS WRITE-RHS COVER-CONDI-NORM WRITE-COMMENT-RHS))
(setf (callers-list 'PROOF-METHODS :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'PROG :callers) '(QUASI-REMOVER START-TEST PARSE-ONE-WHEN-CLAUSE INDUC-PROVE PROVE TRY-SUGG-PREC CHOOSE-BY-HAND MANUAL-ORIENT ASK-USER SUPPORT-EQN SUB-TEST NOT-IN-SET MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC ASK-FOR-OPERATOR START-KB DISPLAY-OPS DELETE-EQN RRL-AUX INSERT CNTH AUTO-ORIENT SET-UNIFICATION))
(setf (callers-list 'RULE-DESTROYABLE :callers) '(CONSISTENT-RULE))
(setf (callers-list 'FIRST-SPEC-TERM :callers) '(FIRST-SPEC-TERM FIND-SPECIAL-TERM))
(setf (callers-list 'POINTER-FOR-COLLECT :callers) '(PARSE-LOOP-COLLECT))
(setf (callers-list 'LRPO-RESULT :callers) '(ORDER-PC-RES))
(setf (callers-list 'GET-NONCONS :callers) '(COMPLETE-TEST START-TEST))
(setf (callers-list 'PURE-SUP-TERM :callers) '(PURE-SUPERPOSITION))
(setf (callers-list 'GET-CONSTANTS :callers) '(GET-TESTSET-QUASI EXT-DIVISIBLE))
(setf (callers-list 'AC-KB-CHOICE :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'LEFT-ARG2 :callers) '(LEFT-ARG2 LEFT-ARG))
(setf (callers-list 'MERGE-AND-REMOVE-PAIRS :callers) '(P-XOR-P))
(setf (callers-list 'WRITE-TERM :callers) '(X_READ_TERM STRUCTURE-INDUC-ON COVER-SET-SCHEME BAD-TYPED UNCONDI-PROVE PRINT-SUGG-INFO WRITE-ASSERTION WRITE-GOAL-EQN WRITE-EQN WRITE-GOAL-RULE WRITE-RULE ORDER-ASS READ-T-TERM TRACE-DIVISIBLE))
(setf (callers-list 'SAME-OP? :callers) '(DECOMPOSE-TERMS))
(setf (callers-list 'INSTANT-CHOICE :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'LET* :callers) '(PARSE-LOOP-MAP PARSE-LOOP-FOR LOOP-PARSE-ADDITIONAL-COLLECTIONS POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* IS-SUBSEQUENCE PARA-SUP-TERM2 MAKE-PAIRS INSTANCE-DELETE-CONDITION DIO2 DIO GENERAL-BASIS-VECTORS FULL-DIO ALL-ONES))
(setf (callers-list 'FREE-VARS :callers) '(FREE-VARS FIXUP-QUANTIFIED-FORMULA NEGATE-EQN GOAL-RULE-SIZE MR LINEAR GET-SKO-FUNC SUBSTVARFOR))
(setf (callers-list 'MAKE-BETTER-PRES :callers) '(MAKE-BETTER-PRE))
(setf (callers-list 'STRINGP :callers) '(ALPHALESSP UCONCAT))
(setf (callers-list 'AC-SUPERPOSITION :callers) '(AC-CRITPAIRS))
(setf (callers-list 'COMPRESS-FLAT :callers) '(AC-COMPRESS MAKE-FLAT))
(setf (callers-list 'MAKE-NODE :callers) '(ADD_CHILD))
(setf (callers-list 'INSERT-TERM-AT-LEFT :callers) '(INSERT-TERM-AT-LEFT NEW-RULE-FROM-ASSOC))
(setf (callers-list 'SEARCH_BY_EQN :callers) '(SEARCH_BY_EQN REDUCTION-PROOF CHECK_AND_ADD X_AUTO_INDUC X_ONE_RULE))
(setf (callers-list 'POLY-MATCH-TEST-REST-*-ARGS :callers) '(POLY-MATCH-ONE-TO-* POLY-MATCH-*))
(setf (callers-list 'SKOLEMIZE-AWAY-QUANTS :callers) '(SUBST-QUANT-FORM SKOLEMIZE-AWAY-QUANTS SKOLEMIZE))
(setf (callers-list 'ADD-OPERATOR :callers) '(MANUAL-ORIENT ASK-USER INVALID-RULE CAN-HAVE-NEW-OP))
(setf (callers-list 'FIRST-TRANS :callers) '(FIRST-TRANS SIMP-FIRST-TRANS))
(setf (callers-list 'LIST-DIFF :callers) '(REDUCE-BY-PREMISE-AT-ROOT))
(setf (callers-list 'RETURN-FROM :callers) '(MAKE-BETTER-PRE MAKE-RULE-FROM-ASS COVER-CONDI-NORM QUERY-ADD-EQN))
(setf (callers-list 'SIMPLIFY-* :callers) '(POLY-SIMPLIFY))
(setf (callers-list 'DISPLAY-OPS :callers) '(CHOOSE-CONSTRUCTORS DISPLAY GIVE-STAT))
(setf (callers-list 'NORM-BUT-ROOT :callers) '(QUERY-ADD-EQN))
(setf (callers-list 'APPLYSUBST :callers) '(REPVARSIN APPLY-TO MERGE-TWO-PATTERNS SUBST-VAR-PREMISES PRE-PROCESS-PREMISES PRED-CRITICAL-PAIR PURE-REDUCE-BY-ONE-AT-ROOT ADD-TO-ARGS NORMAL-FORM-SUB APPLYSUBST-PRE APPLYSUBST-EQN PREMISE-INSTANCE APPLYSUBST-RULE RENAME-TERM PARA-SUP-TERM2 IS-SYMMETRY-RULE IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 ADD-EXTRA-PREMISE ELIMINATE-SUB))
(setf (callers-list 'HANDLE-AND? :callers) '(COVER-CONDI-NORM))
(setf (callers-list 'COMM-OP-P :callers) '(SUPERTERM-COVER AC-C-ROOT DIVISIBLE-CHECK2))
(setf (callers-list 'NODE-SEQNO :callers) '(SEARCH_BY_ID ADD_CHILD PRINT-NODE X_INITIAL HEAD_OF_FAILURE_HANDLER X_FAILURE_HANDLER))
(setf (callers-list 'NULL-CTX :callers) '(COMP-EQN COMP-RULE NOT-ARG))
(setf (callers-list 'CHAR= :callers) '(IS-SUBSEQUENCE GET-VARLIST))
(setf (callers-list 'HAVE-BOOLEAN-CONSTANT :callers) '(COVER-PROOF-PROCESS2))
(setf (callers-list 'X_GET_INDUC_TERM :callers) '(COVER-SET-SCHEME))
(setf (callers-list 'PRED-RULEP :callers) '(SUPERPOSITION AC-CRITPAIRS))
(setf (callers-list 'PRE-SUB-NONVARS :callers) '(EQN-SUB-NONVARS))
(setf (callers-list 'EXPECT-ARITY :callers) '(SET-UP-ARITY2))
(setf (callers-list 'AND :callers) '(SEARCH_BY_EQN SEARCH_BY_ID ADD_CHILD BREADTH-SEARCH X_COVER-PROOF-PROCESS2 X_READ_TERM COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM ABSTRACT-PROOF X_AUTO_INDUC X_REDUCE-BY-ONE-RULE REDUCE-EQN-BY-ONE-RULE WELL-TYPED-EQN GET-DOMAIN-TYPE IS-VALUE-TERM IS-CONSTANT-TERM OPERATOR-ORDERING PSEUDO-TERM-ORDERING IS-SUBTERM ORDER-VARS SIZE IS-INFIX-OP ENTER-OP ENSURE-PREDICATE NAIL-QUASI-REDUCIBLE DESTROYABLE ONE-EXTENSIBLE-TYPE-POINT IS-PARTIAL-OP MAP-FRINGE SLOOP-SLOOP-MACRO DEF-LOOP-INTERNAL SUBSTITUTE-SLOOP-BODY PARSE-LOOP-MAP PARSE-LOOP-FOR ADD-FROM-DATA LOOP-DECLARE-BINDING LOOP-ADD-BINDING MAKE-VALUE THE-TYPE PARSE-LOOP-COLLECT PARSE-LOOP-WHEN PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-INITIALLY PARSE-LOOP-WITH PARSE-LOOP1 PARSE-LOOP TRANSLATE-NAME L-EQUAL DESETQ1 SUBSUMED-TUPLE MAKE-ONE-SCHEME ENCOURAGE CLOAD2 REFUTE-EQN PROVE SUBST-PREMISES REDUCE-BY-PREMISE-AT-ROOT IS-EQ-TRUE-PRE IS-EQ-FALSE-PRE SUPER-ITSELF-PRE NEGATE-ONE-PRE MAKE-PRE-EQN ADD-PREMISE-END MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS NORM-POLY IS-HOMOGENEOUS-TERM IS-CHARACTER-RULE POLY-LRPO POLY-SUPER-DISTRIBUTION POLY-SUPER-AT-*-1 POLY-MATCH-TEST-REST-*-ARGS REDUCE-*-TERM REDUCE-+-TERM POLY-REDUCE-AT-ROOT *-CANONICALIZE MAN-PICK-2ND-RULE PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE DETACHMENT-RULE IDEM-SUPERPOSITION PRED-SUPERPOSITION WRITE-DISJUNCTIONS WRITE-TERM-SIMPLE WRITE-F-RHS WRITE-RHS WRITE-F-EQN TOTAL-ORDER-ATOM ORDER-PC-RES COMPARE-SYMBOL COMPARE-TERM ORDER-ASS MINI-EXPAND-EQ MAKE-EQ ASK-USER TRY-TO-ORIENT2 TRY-TO-ORIENT TRY-TO-ORIENT-CONDI PURE-ORIENT-AN-EQN ORIENT-AN-EQN POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA NORMALIZE-BOUND TIME-LIMIT-STRA POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE TRY-MAKE-EQUI EXT-EQUIVALENCE EXT-DIVISIBLE EXT-CONSTRUCTOR NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL REDUCE-AND-TERM REDUCE-XOR-TERM NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX PURE-REWRITE-AT-ROOT NORM-INN SIMPLIFY-COND-TERM REDUCE-COND-TERM POLISH-PREMISES PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE VAR-CONSISTENCY SIMPLIFY-MY-EQ-TERM REDUCE-AT-ROOT REWRITE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE NOT-IN-SET LINEAR CAPITALIZE MATCH-PREMISE CTX-BAD-LUCK MATCH-BOOL-NEW ELIM-BIN MATCH-POSS AC-MATCH APPLIES DECOMPOSE-TERMS IS-CONDI-DOMINATE-RULE ASK-FOR-OPERATOR UNKNOWN-SIZE MAKE-NEW-RULE CTX-DOMINANT-RULE IS-VALID-RULE EQUIV PURE-LRPO RUNTIME-MAX-WARNING ADD-RULE-LINEAR REDUCE-OTHER-RULES ADD-RULE-COMPLETE ADD-RULE PROCESS-EQUATION OK-TO-CONTINUE READ-ATOM NEXT-TOKEN READ-T-TERM READ-TYPE-RELATION IS-VALID-VAR AND-LHS-TRUE-RHS SIMILAR-TERM HYPO-SUBSUME-EQN NORMAL-PROVE PREMISE-INSTANCE GET-VAR-SUBSTITUTION START-HISTORY INSERT UCONCAT PRINC0 IF* PARA-SUP-TERM PARAMODULATE REDUCE-EQ-TERM IS-SYMMETRY-RULE CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE IS-CYCLE-EQN UNIT-RULE MAKE-PAIRS ACCEPTABLE-PAIR AC-SUPERPOSITION INDUC-IDEM-SUPERPOSITION INDUC-SUP-TERM SUP-TERM2 PURE-SUPERPOSITION CRITPAIRS CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-RULE CONSISTENT-CHECK IS-INCONSI-PAIR FACTORIBLE TRACE-DROPPED-PREMISES MAKE-ONE-DOWN-HILL LRPO-PREMISES HEAD-LESS-THAN-PRES HEAD-LESS-PRE JUSTIFY-EQN MAKE-ONE-BUILD SUBSUMED-PREMISES ADD-EXTRA-PREMISE COVER-CONDI-NORM COVER-NORM-TERM COVER-NORM-UNCONDI-EQN PRINT-NORMALIZED-EQN COVER-NORMAL-PROOF COMMUNE-TERMS IS-COMMUT-PAIR REDUCE-BY-P-COMMUT2 IS-P-COMMUT-PAIR INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT NEW-RULE-FROM-ASSOC LEFT-ARG RIGHT-ARG DIVISIBLE-AC-CHECK DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK IS-FREE-TERM FREE-SUBTERMS IS-ELIM-TERM BUILDING CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE M-XOR-P M-XOR-M M-AND-P M-AND-M NOT-ARG OR-ARGS AUTO-ADD-PREC AUTO-MAKE-EQUI POST-FOR-WHILE POSTPONE-IT CAN-HAVE-NEW-OP AUTO-ORIENT PLAUSIBLE ACUNI UNIFY-WITH-AC ACO-LRPO= ACO-LPRO>= ACO-LRPO> ONE-COMPOSITION LOOSE-SYM-SEQUENCE FULL-DIO ALL-ONES FLATTEN-RULES IS-ASSOC-PAIR IS-ASSOC-UNDER-C SET-HANDLE-AND SET-ART-MODE WRITE-COMMENT-RHS))
(setf (callers-list 'EQ-ADD :callers) '(EQ-ADD))
(setf (callers-list 'REMOVE :callers) '(GET-TESTSET IS-CHARACTER-RULE POLY-MATCH-+ ELIM-BIN SPLIT-RHS-OR SPLIT-RHS-AND PARA-SUP-TERM2 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE UNIT-RULE HEAD-LESS-THAN-PRES IS-P-COMMUT-PAIR DIVISIBLE-AC-CHECK INDUC-ADD-RULE GET-SKO-FUNC NEGATE-XOR-ARGS))
(setf (callers-list 'REFUTED-RESULT :callers) '(ORDER-ASS MAKE-EQ PURE-ORIENT-AN-EQN ORIENT-AN-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN PROCESS-ASS))
(setf (callers-list 'PAIRSWITH :callers) '(MARK-SUPERPOSED NONDO-CRIT))
(setf (callers-list 'SLOOP-SWAP :callers) '(SLOOP-SLOOP-MACRO))
(setf (callers-list 'NONAC-UNIFY :callers) '(PURE-SUP-TERM2 UNIFIER))
(setf (callers-list '>= :callers) '(DEF-LOOP-INTERNAL ELIM-BIN REDUCE-BY-P-COMMUT2))
(setf (callers-list 'CLEAN-INDHYP :callers) '(X_INDUC))
(setf (callers-list 'IS-BLOCKED :callers) '(UNIFIER))
(setf (callers-list 'ADD-SUGG-TYPE1 :callers) '(ADD-SUGG-TYPE))
(setf (callers-list 'OUTFILE :callers) '(OPEN-WRITE-FILE TEST-RRL CLOSE-LOG PRE-INIT))
(setf (callers-list 'NORM-BOOL-INNERMOST :callers) '(NORM-BOOL-INNERMOST NORM-CTX COVER-NORM-TERM))
(setf (callers-list 'MACROLET :callers) '(CURSOR_DOWN SHOW-TREE-INFO SEARCH-TREE WRITE-TREE PEQNS CLEAN-INDHYP REWRITE-ONCE-BY-HYPO X_MATH_IND STRONG-SUBGOAL-PROOFS X_REMOVE_HYP SUCC-END-INDUC COVER-PROOF-PROCESS X_GET_INDUC_TERM X_REAL_VARS X_NAME SPLIT-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-SET-SCHEME ABSTRACT-PROOF INDUC-SUBGOAL-PROOFS X_MANUAL_INDUC X_FAILURE_HANDLER XIN-MENU CLEARSCREEN MENU_FOR_CURSOR PROVE_EQN MOVE_CURSOR X_PROVER X_AUGMENT X_REDUCE-BY-ONE-RULE REDUCE-EQN-BY-ONE-RULE X_CHOOSE_ONE_RULE ONE-RULE-ITERATION X_ONE_RULE X_NORMAL MENU_FOR_NORMAL MENU_FOR_MANUAL_REDUCE WELL-TYPED-EQN DISPLAY-ONE-ARITY2 DISPLAY-ARITY2 DISPLAY-TYPE-ARITY GET-SUBTYPES ADD-SUGG-TYPE1 EXT-TYPE-RELATION GET-CODOMAIN-TYPES COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2 TYPE-ALL-VARS ONE-TYPE-ALL-VARS GROUNDP NON-LINEAR-VARS SUBS-ARE-PRIMITIVE PRIMITIVE-SUBST IS-LIMITED RENAME-VAR1 SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM OCCURS-IN IS-SUBTERM IS-SUBT NEWVARSIN RPL-BY-TERMS2 RPLAT-IN-BY RPLNTHSUBT-IN-BY SUBTAT FREE-VARS IS-GROUND EXPECTED EXPECTING-PREDICATES EXPECTING-FUNCTIONS QUASI-REMOVER NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT SUB-QUASI-REDUCIBLE QUASI-CHECK MAKE-TUPLES BASE-DEPTH TOP-TERM NEW-TOP-TERMS NEW-ARGS ADD-ONE-DEPTH GET-TESTSET-QUASI BASIC-TERM GET-BASIC-TYPE-TERMS PARTITION-OPS-BY-TYPE PARTITION-TERM-BY-TYPE RULE-DESTROYABLE DESTROYABLE TRACE-ADD-TESTSET TRACE-TESTSET GET-DOWN GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE EXTEND-DOM-ARGS DEF-DOMAIN-POINTS DEFINING-DOMAIN GET-DEFINING-DOMAINS EXTEND-SCHEMES GET-TESTSET2 FLATTEN-TESTSET CONSTRUCTORS-CHECK TEST-ONE-OP COMPLETE-TEST APPLY-TO2 COMPOSE2 RESOLVE COMP1 NORM-SUB COMPOSE1 COMPOSE SIZE-UNI STR-FORMULATE-SCHEME STR-CHOOSE-ONE-SCHEME REMOVE-SUBSUMED-PATTERNS MERGE-TWO-TUPLES FIND-MERGE-SIGMA MERGE-TWO-PATTERNS ADD-PATTERNS REM-DUP-VARS REMOVE-DUP-VARS HAS-NONLINEAR-VARS ONE-PATTERN COMPATIBLE-PATTERNS FORM-PATTERNS-SINGLE MAKE-ONE-SCHEME MERGEBLE-TERMS CHOOSE-HIGHEST-TERM DECIDE-MERGE-CONJ MERGE-DUPLICATE PARTI-BY-VARS DEPENDED-OP OPS-OF-RULE ADD-OLD-VARS MAX-DEPEND-GAP DEFINING-POSITIONS SET-DEPEND-SCORES COMPATIBLE-PATTERN GET-RECURSIVE-RETURN-OP HAVE-MANY-RECURSIVE-EQNS GET-RECURSIVE-DEF-TERM ENCOURAGE PICK-MAX-SCORE-OP CHOOSE-LEAST-COVER CHOOSE-MAX-SCORE GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS HAVE-INDUCTIVE-VARS HAS-INDUCTIVE-VAR INDUCTIBLE INDUC-AC-SUBS INDUC-SUBS-TERM INDUC-SUBS-OF-EQN CHOOSE-BEST-SCHEMES ADD-DEFIN-DEPEND SUBS-OF-SAME-ROOT DECIDE-DEFIN-MODE IS-CROSS-OP SET-RIGHT-HYPO-ARGS COVER-SETS GET-COVER-SETS REFUTE-RULE-INSTANCES COLLECT-CDR-WITH-SAME-CAR REF-INSTANCE-SEEDS2 GET-INSTANCE-TERMS2 ELEMENT-COMBINATION REF-INSTANCE-SEEDS GET-INSTANCE-SEEDS NEGATE-EQN SEPARATED FAIL-END-INDUC PROVE SUBST-PREMISES REDUCE-ARGS-BY-PREMISES REDUCE-BY-PREMISES REDUCE-BY-PREMISES-AT-ROOT NORM-BY-PREMISES PRES-SIZE MORE-VARS-PREMISE SUPER-ITSELF-PRE GET-PRES-OPS NEGATE-PREMISES SEPARATE-XOR-ARGS MAKE-PRE-XOR-ARGS REMAKE-PREMISES MAKE-PRE-ASS NOFALSE-PREMISES PREMISES-ARE-TRUE REDUCE-REVERSE-PREMISES SIMPLIFY-PREMISES ADD-SIMPLIFY-OTHERS MAKE-BETTER-PRES FIRST-PROCESS-PREMISES ADD-SUGG1 REMOVE-SUGG SUGG-PREC TRY-SUGG-PREC PRINT-SUGG-INFO STATUS-CANDIDATES TRANS-STATUS REMOVE-EQ-OP OK-PREV-RULES UPDATE-BY-EQ EQUIV-OPS OPS-EQUIV-TO REDUCE-BY-HOMO-RULES REDUCE-MONO NORM-MULT-MONOS NORM-SIGN-CHANGED-MONOS NORM-POLY IS-HOMOGENEOUS-TERM REDUCE-BY-CHARACTER POLY-LRPO MOVE-MONOS MAKE-RULE-INSTANCES MOVE-LHS-ARGS ELES-MORE-THAN-1 NONLINEAR-VARS-UNDER-* POLY-SUPER-DISTRIBUTION COMPACT-LAST-ELEMENTS POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* FIRST-N-ELEMENTS REST-ELEMENTS POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS REDUCE-*-TERM REDUCE-+-TERM INSERT-SORT-ARG MERGE-SORT-ARGS M-+-P P-*-P P-*-M M-*-P SIMPLIFY-* SIMPLIFY-+ MAN-PICK-2ND-RULE CHOOSE-BY-HAND INTRO-RULE PICK-ONE-UNMARKED MANUAL-PICK IS-BIG-ENOUGH-RULE INDUC-PICK-UNMARK PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE DETACHMENT-SUPER BOTH-ADD-PREDICATE IDEM-SUPER-COMMU IDEM-SUPERPOSITION PRED-FUNC-SUP PRED-FUNC-SUPERPOSITION PRED-SUPER SHOW-MESSAGE HELP-FILE WRITE-SIGMA WRITE-DETAIL-RULE PRINT-HEAD PRINT-ATOMS WRITE-F-PREMISES WRITE-PREMISES WRITE-DISJUNCTIONS WRITE-TERM-SIMPLE WRITE-TERM-BOOL WRITE-ASSERTIONS LIST-ASSERTIONS WRITE-EQNS LIST-EQUATIONS WRITE-RULES LIST-RULES TOTAL-ORDER-RES TOTAL-ORDER-PC-RES ORDER-PC-SEQ COMP-TERMS SIZE-COMPARE MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ INSTANTIATE-LHS MAKE-CRIT-RULE SUPPORT-EQN AUTO-OPTIONS WARN-STAT ADD-EQU EXT-CONSTRUCTOR EXT-OPERATOR ADD-STATUS EXT-STATUS EXT-WEIGHT EXT-PRECEDENCE CLEAN-OPS DISPLAY-CONSTRUCTORS GET-FREE-CONSTRUCTORS NON-CONSTANTS GET-CONSTANTS SAME-ARITY EXIST-OP CLEAR-OPERATORS GENNEWSYM REDUCE-AND-TERM REDUCE-XOR-TERM NORM-AND-ARGS NORM-OR-ARGS NORM-XOR-TERM PURE-REWRITE-AT-ROOT PURE-MIXED-REDUCE PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-OUTRED1 OUTRED1 PURE-NORM-OUTERMOST NORM-OUTERMOST EACH POLISH-PREMISES PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE REDUCE-BY-RULES CYCLE-CHECK SIMPLIFY-MY-EQ-TERM TRY-ONE-EXTRA-VAR-RULE REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES REDUCE-AT-ROOT REWRITE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE ANS-MEMBER PICK-SMALL-GOAL MANUAL-GOAL PICK-GOAL MAKERULES LINEAR DEMULT-FORM MULT-FORM MULT-DIFF2 MULT-DIFF MULT-UNION MULT-SORT-MERGE MULT-MERGE MULT-SORT-INSERT MULT-INSERT IS-SUBLIST LIST-DIFF IS-SUBSET SET-DIFF2 SET-DIFF HAVE-COMMON COMMON-ELEMENTS ONE-PRESENTATIVE LONGEST-LIST GET-RULE LESS-VECTOR CON1-NUMS CON-NUMS NTIMES INSERT-LIST N-TUPLES REAL-COLLECT-PRODUCTS PROPER-PRODUCT-LISTS PRODUCT-LISTS GET-POSITION PICKOUT NON-DECREASING-SEQ IS-SUBSEQ-LIST IS-SUBSEQUENCE SPLIT-ALIST MATCH-PREMISES EQ-MATCH CTX-BAD-LUCK MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC IS-AN-INSTANCE MEMBER-TERM REM-ARGS OCCUR-NUM DIVIDED-BY INCREMENT-POS NEXT-CHOICE GET-INTERSECTION-RANGE VARS-ONLY PICK-AN-ARG MATCH-POSS AC-MATCH DECOMPOSE-TERMS OCCURS-IN-RULE CHECK-MISMATCH MAKE-RULE-SIZE-ORDER MAKE-RULE-FROM-ASS AUTO-OPERATOR GET-RULE-LEVEL BODY-PREMISES-SIZE MAKE-NEW-RULE CTX-DOMINANT-RULE IS-VALID-CONDI-RULE LEXICO-COMP RPOMULT EQUIV-LIST EQUIV PURE-LRPO CLEAN-RULE REDUCE-POST-ASS ADD-RULE-LINEAR REDUCE-OTHER-RULES ADD-RULE-COMPLETE PURE-ADD-RULE PROCESS-EQUATION PURE-KNUTH-BENDIX2 KNUTH-BENDIX2 KNUTH-BENDIX1 PRINT-CHOICE-MESSAGE CHOOSE-STR READ-ARGS SAVE-WORDS READ-ATOM GET-TERM-ARGS GET-VARLIST GET-TERM READ-OP-DECLARATION READ-EQNS READ-INPUT DISPLAY-OPS DISPLAY-OP-STATS DISABLE-RULES-AUX NAME-LAST-RULE ORDER-EQNS DELETE-EQN DELETE-RULE RRL START-UP INITIALIZE PRE-INIT AND-LHS-TRUE-RHS INDUC-SUBSUMED-BY SEE WRITE-SEQ-NUM HYPO-SUBSUME-EQN IS-PREVIOUS-INDUC-EQN IS-FAILED-INDUC-EQN CHANGE-VARS EQN-INSTANCE PREMISES-INSTANCES FORM-PREMISES-FROM-CONJ NORM-PROVE-ALL-EQNS PROVE-ALL-EQNS SPLIT-LHS-OR SPLIT-LHS-AND PROVE-SPLIT-BOOL GET-VAR-SUBSTITUTION RENAME-EQN-RULE RESTORE-PROPERTIES GET-ALL-PROPERTIES SAVE-RRL MY-COPYLIST UNDO1 START-HISTORY MERGE-LIST EQ-IN-MONOMIAL PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE IDEM-EQ-CRITICAL TR-TERM TR-CLOSURE TR-FIND EQ-FIND EQ-TR REDUCE-EQ-EXACTLY REDUCE-EQ-TERM USER-SELECTQ CYCLE-PAIRS SYMMETRY-TERMS SYMMETRY-VARS CYCLE-REDUCE-AT-ROOT-2 CYCLE-REWRITE-AT-ROOT CYCLE-OUT-RED CYCLE-REDUCE-TERM CYCLE-NORM-TERM CYCLE-REDUCE-OTHERS SAME-LIST LIST-PAIRS LOOK-AT-PAIR-AND LOOK-AT-PAIRS PICK-AC-PAIR ADD-PAIRS REMOVE-PAIRS-WITH PROCESS-AC-UNIFIER PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR AC-SUP-TERM SET-UNIFY PROCESS-NEW-AC-CP NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-SUP-TERM INDUC-SUPERPOSITION PURE-SUP-TERM SUP-TERM FUNC-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS PICK-OUT-RULE RULE-NUMS-FROM-SOURCE GET-ALL-RULE-NUMS TRACE-INCONSISTENCY CONSISTENT-PAIR HANDLE-FACTOR FACTORIZATION HIGH-OP-POSI RELATED-VARS2 RELATED-VARS TRACE-REMOVE-IRRELEVANT4 GOOD-UNIT-CLAUSE REMOVE-IRRELEVANT4 REMOVE-IRRELEVANT3 HANDLE-COMMU-HYPO TRACE-DROPPED-PREMISES REMOVE-IRRELEVANT2 DOWN-HILL-ONE OR-CONDI-EQN OPS-IN-PRES-OF-RULES PRE-BIGGER-THAN-EQN HEAD-LESS-PRE RESTORE-EQUATION BUILD-EQN-FROM-PRES BUILD-EQUATION-FROM-PREMS CHECK-HEAD-ROLE PICK-OUT-PREMISE SIMPLIFY-ALL-PREMISES RULE-SUBSUMED-PREMISES NO-SUBSUMPTION COVER-CONDI-NORM NORM-BUT-ROOT COVER-NORM-ORDER COMMUNE-TERMS2 COMMUNE-TERMS P-COMMUT-REDUCE-OTHERS IS-SORTED SORT-OP-ARGS REDUCE-BY-P-COMMUT AVOID-COMMON-TERM DIVISIBLE-CHECK ELIMINATE-SUB IS-FREE-TERM IS-ELIM-TERM ONE-ELIM-SUBTERM ELIMINABLE-TERMS REMOVE-VAR-PRES TRACE-BUILDING BUILDING CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT HAS-HINT-TERM HAVE-BOOLEAN-CONSTANT FIRST-SPEC-TERM FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHER-RULES ORDER-ONLY GET-SKO-FUNC HASQUANT SPECIAL-SUBST REMOVE-QUAN-ARGS SKOLEMIZE BREAK-AT-OR SUBSTVARFOR BREAK-ASS PROCESS-ASS INIT-BOOL-OPS EQ-TR-MEMBER SIMP-XOR-SIMP SIMP-XOR XOR-OF-MONOMIALS SIMP-AND-SIMP SIMP-AND AND-OF-MONOMIALS SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT M-XOR-P P-AND-P M-AND-P INSERT-AND-REMOVE-PAIRS MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS DECANON-XOR CANONICALIZE BA-SIMP-OR BA-SIMP-AND END-AUTO-ORDER NOT-AUTO-PREV-RULES AUTO-ADD-STATUS IS-BAD-SUGG POST-FOR-WHILE AUTO-ORIENT AUTO-KB DISPLAY-UNIFY IS-BLOCKED BLOCK-CHECK SET-UNIFICATION TWO-UNIFIER CONTINUE-MAPPING UNICOMPOUND ALL-PLAUS PLAUSIBLE RES1 ACUNI UNIFY-WITH-AC UNIFY FIND-OUT-BIG-EQ-SUBS ACO-EQUIV-LIST ACO-LRPO= ACO-LEXICO-COMP-RL ACO-LEXICO-COMP-LR ACO-RPOMULT>= ACO-RPOMULT> BIGT-TWO-KILL-ONE BIGT-ONE-KILL-ONE ACO-BIGT-PARTITION TWO-KILL-ONE ONE-KILL-ONE ACO-NOBIGT-PARTITION ACO-HARDER ACO-HARD> ACO-LPRO>= ACO-LRPO> AC-DISTRI PREC-CONSISTENT CARDINALITY SYMMETRY-NON-DELETABLE SYM-ARG-POSITIONS DIO2 DIO COMBINATE2 COMBINATE ADD-SOLN TAKE-OUT GET-SOLUTIONS SUMYMAX GET-LCM-SOLNS GENERAL-BASIS-VECTORS HALF-ONES FIND-BASIS-VECTORS CONDENSE-SEQUENCE LOOSE-SYM-SEQUENCE FULL-DIO DIO-INITIALIZE ALL-ONES WASH-DEF-RULES AC-MEMBER MULTI-COM ELIMCOM FLATTEN HAS-ACOP FLATTEN-POST-ASS FLATTEN-RULES2 FLATTEN-RULES MAKE-ASS-COM-OP FLAT-SORT-ARGS FLATTEN-PREMISES OP-POSITION PRE-SUB-NONVARS ABSTRACTION WRITE-COMMENT-PREMISES))
(setf (callers-list 'COMPARE-TERM-RESULT :callers) '(ORDER-PC-RES))
(setf (callers-list 'ADD_CHILD :callers) '(COVER-INDUC-PROVE CHECK_AND_ADD))
(setf (callers-list 'WELL-TYPED3 :callers) '(NORM-BOOL-INNERMOST))
(setf (callers-list 'OP-LIST :callers) '(GET-INSTANCE-SEEDS ASK-USER REMOVE-IRRELEVANT3 HEAD-LESS-PRE CAN-HAVE-NEW-OP AUTO-ORIENT ACLRPO))
(setf (callers-list 'ASK-CHOICE :callers) '(REFUTE-EQN KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA EQ-PRE-STRAT OPERATOR-STRA POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE EXT-DIVISIBLE EXT-CONSTRUCTOR NORM-STRATEGY SIZE-DEPTH-STR RESTRICT-CRIT-STRA BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG LINEAR OK-TO-CONTINUE SET-HANDLE-AND SET-ART-MODE))
(setf (callers-list 'WRITE-SEQ-EQN :callers) '(X_COVER-PROOF-PROCESS2 TRACE-GENERATED-RESULT COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM HEAD_OF_MANUAL_INDUC HEAD_OF_FAILURE_HANDLER X_AUTO_INDUC TRACE-SUCC-PROVE PROVE-SPLIT-BOOL PRINT-NORMALIZED-EQN TRACE-BUILDING))
(setf (callers-list 'SEARCH-TREE :callers) '(X_COVER-PROOF-PROCESS2 REDUCTION-PROOF COVER-PROOF-PROCESS2 CHECK_AND_ADD X_AUTO_INDUC MANUAL_REDUCE))
(setf (callers-list 'WRITE-SIGMA :callers) '(TRACE-CRIT))
(setf (callers-list 'CNTH :callers) '(INSERT))
(setf (callers-list 'BREAK-ASS-STR :callers) '(FOPC-STRA))
(setf (callers-list 'CHAR-CODE :callers) '(TYIPEEK READC))
(setf (callers-list 'CAN-HAVE-NEW-OP :callers) '(AUTO-ORIENT))
(setf (callers-list 'COVER-PROOF-PROCESS :callers) '(PROOF-UNDER-NEW-PREMISES))
(setf (callers-list 'IS-CONDI-RULE :callers) '(SUPERPOSITION AC-CRITPAIRS ELIMINATE-SUB))
(setf (callers-list 'NEWVARSIN :callers) '(RENAME-PATTERN))
(setf (callers-list 'CHECKEQ-NORMAL :callers) '(UNCONDI-PROVE NORMALIZE CHECK-WITNESS))
(setf (callers-list 'ASET :callers) '(SUMYMAX))
(setf (callers-list 'SET-ARITY :callers) '(SET-UP-ARITY2 CHECK-ARITY POLY-INITIALIZE EXT-CONSTRUCTOR ASK-FOR-OPERATOR GET-SKO-FUNC SUBSTVARFOR INIT-BOOL-OPS))
(setf (callers-list 'SKOLEM-TERMS :callers) '(SKOLEM-TERMS))
(setf (callers-list 'TRANS-STATUS :callers) '(AUTO-MAKE-EQUI))
(setf (callers-list 'NONDO-CRIT :callers) '(LAST-CHECK-2ND-RULE SUPERPOSITION))
(setf (callers-list 'ENSURE-PREDICATE :callers) '(EXPECTING-PREDICATES))
(setf (callers-list 'DISPLAY-KB-STAT :callers) '(WRITEF-SYS START-KB GIVE-STAT))
(setf (callers-list 'IS-VALID-OP :callers) '(IS-INFIX-OP ASK-FOR-OPERATOR NEXT-TOKEN READ-ARITY))
(setf (callers-list 'NODE-SOURCE :callers) '(ADD_CHILD SHOW-TREE X_COVER-PROOF-PROCESS2 X_INITIAL REDUCTION-PROOF COVER-PROOF-PROCESS2 X_AUTO_INDUC LIST_NODE MANUAL_REDUCE))
(setf (callers-list 'LOOP-POP :callers) '(SLOOP-SLOOP-MACRO =-SLOOP-FOR PARSE-LOOP-MAP PARSE-LOOP-FOR PARSE-LOOP-DECLARE LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP-COLLECT PARSE-LOOP-WHEN PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-DO PARSE-LOOP-WITH PARSE-NO-BODY PARSE-LOOP1))
(setf (callers-list 'NCONS :callers) '(FORM-SUBGOALS-FROM-PATTERNS PROOF-UNDER-NEW-PREMISES X_ADD-RULE3 ADD-SUGG-TYPE TYPE-VAR-LIST ONE-TYPE-VAR-LIST FREE-VARS ENTER-OP GET-TESTSET-QUASI BASIC-TERM DEF-DOMAIN-POINTS DEFINING-DOMAIN EXTEND-SCHEMES GET-SCHEMES SIZE-UNI STR-FORMULATE-SCHEME MAKE-ONE-SCHEME MERGE-DUPLICATE SKOLEM-TERMS ALL-NONVARS COLLECT-CDR-WITH-SAME-CAR ELEMENT-COMBINATION REF-INSTANCE-SEEDS REFUTED-RESULT ADD-PREMISE-END FIRST-PROCESS-PREMISES ADD-SUGG TRY-SUGG-PREC POLY-ADD-HOMO-RULES POLY-MATCH-ONE-TO-* POLY-MATCH-+ POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE *-CANONICALIZE +-CANONICALIZE INSERT-SORT-ARG ASK-USER ADD-EQU REDUCE-AT-ROOT-BOOL LINEAR PROPER-PRODUCT-LISTS PRODUCT-LISTS ADD-AT-END MATCH-SET-AC APPLIES INVALID-RULE ADD-RULE3 ADD-RULE-LINEAR ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE GET-ITEM GET-RHS ENABLE-RULE NORMAL-PROVE EQ-IN-MONOMIAL EQ-ADD MAKE-CYCLE-RULE MAKE-PAIRS PROCESS-NEW-AC-CP RULE-NUMS-FROM-SOURCE INCONSISTENT-EQN RELATED-VARS2 EQN2PRE COVER-CONDI-NORM COMMUNE-TERMS2 COMMUNE-TERMS REDUCE-BY-P-COMMUT2 MAKE-P-COMMUT-RULE DIVISIBLE-CHECK ELIMINATE-SUB FREE-SUBTERMS ADD-CONDI-DOMINATE-RULE INDUC-ADD-RULE M-AND-P M-AND-M CANONICALIZE POSTPONE-IT RES1 ACUNI UNIFY-WITH-AC UNIFIERS COMBINATE))
(setf (callers-list 'NORM-AND-ARGS :callers) '(NORM-BOOL-INNERMOST))
(setf (callers-list 'THIRD :callers) '(PARSE-LOOP-FOR PARSE-LOOP-INITIALLY WRITE-DETAIL-RULE DIVISIBLE-CHECK))
(setf (callers-list 'MANUAL-ORIENT :callers) '(TRY-TO-ORIENT TRY-TO-ORIENT-CONDI))
(setf (callers-list 'CDR :callers) '(STRONG-SUBGOAL-PROOFS PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-SET-SCHEME INDUC-SUBGOAL-PROOFS X_AUTO_INDUC X_REDUCE-BY-ONE-RULE REDUCE-EQN-BY-ONE-RULE WELL-TYPED-EQN DISPLAY-ONE-ARITY2 GET-CODOMAIN-TYPES WELL-TYPED-VAR COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2 TYPE-ALL-VARS ONE-TYPE-ALL-VARS GROUNDP IS-CONSTANT-TERM LITERAL-NUM PSEUDO-TERM-ORDERING SUBS-ARE-PRIMITIVE IS-LIMITED RENAME-VARS DEPTH SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM OCCURS-IN IS-SUBTERM IS-SUBT RPL-BY-TERMS2 RPLAT-IN-BY RPLNTHSUBT-IN-BY FREE-VARS W-SIZE SIZE IS-GROUND ALL-VARS ALL-OPS SET-UP-ARITY2 EXPECTED CHECK-ARITY FIXUP-QUANTIFIED-FORMULA EXPECTING-PREDICATES EXPECTING-FUNCTIONS SUB-QUASI-REDUCIBLE TOP-TERM RULE-DESTROYABLE GET-DOWN GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN DEFINING-DOMAIN GET-SCHEMES TEST-ONE-OP IS-PARTIAL-OP COMPLETE-TEST START-TEST APPLY-TO2 MAP-FRINGE FIND-IN-ORDERED-LIST SLOOP-SLOOP-MACRO PARSE-LOOP-MAP PARSE-LOOP-MACRO ADD-FROM-DATA LOOP-ADD-TEMPS PARSE-LOOP-DECLARE LOOP-DECLARE-BINDING LOOP-ADD-BINDING POINTER-FOR-COLLECT PARSE-LOOP LOOP-LET-BINDINGS DESETQ1 LCASE RENAME-PATTERN ADD-PATTERNS REM-DUP-VARS REMOVE-DUP-VARS FORM-PATTERNS-SINGLE MAKE-ONE-SCHEME CHOOSE-HIGHEST-TERM DECIDE-MERGE-CONJ CDR-GREAT MERGE-DUPLICATE DEPENDED-OP OPS-OF-RULE AVERAGE GET-RECURSIVE-RETURN-OP ENCOURAGE CHOOSE-LEAST-COVER CHOOSE-OFF-CLOSE GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS INDUCTIBLE INDUC-AC-SUBS INDUC-SUBS-TERM INDUC-SUBS-OF-EQN SUBS-OF-SAME-ROOT SET-RIGHT-HYPO-ARGS COVER-SETS SKOLEM-TERMS ALL-NONVARS COLLECT-CDR-WITH-SAME-CAR GET-INSTANCE-TERMS2 ELEMENT-COMBINATION REF-INSTANCE-SEEDS REFUTE-EQN SEPARATED SUBST-PREMISES REDUCE-ARGS-BY-PREMISES NORMALIZE-BY-PREMISES PRES-SIZE MERGE-PREMISES SUPER-ITSELF-PRE MARK-USED-PRE NEGATE-PREMISES SEPARATE-XOR-ARGS MAKE-PRE-XOR-ARGS REMAKE-PREMISES MAKE-PRE-ASS NOFALSE-PREMISES PREMISES-ARE-TRUE REDUCE-REVERSE-PREMISES ADD-PREMISE-END MAKE-BETTER-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES FIRST-CTX-TRANS UPDATE-BY-EQ IS-REL-PREC PC-GRT-PREC GRT-PREC REDUCE-MONO NORM-POLY POLY-ADD-HOMO-RULES IS-HOMOGENEOUS-TERM POLY-SIZE REDUCE-BY-CHARACTER IS-CHARACTER-RULE POLY-LRPO MOVE-LHS-ARGS NONLINEAR-VARS-UNDER-* POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* POLY-MATCH-TEST-REST-*-ARGS POLY-MATCH-ONE-TO-* POLY-MATCH-* POLY-MATCH-+ REDUCE-*-TERM REDUCE-+-TERM POLY-REDUCE-AT-ROOT *-CANONICALIZE +-CANONICALIZE M-+-P P-*-P P-*-M M-*-P M-*-M P-+-P POLY-SIMPLIFY CHOOSE-BY-HAND IS-BIG-ENOUGH-RULE PRED-CRITICAL-PAIR BOTH-ADD-PREDICATE IDEM-SUPERPOSITION PRED-FUNC-SUPERPOSITION PRED-SUPER WRITE-SIGMA WRITE-DETAIL-RULE PRINT-HEAD PRINT-ATOMS WRITE-F-PREMISES WRITE-PREMISES WRITE-VARIABLE WRITE-TERM-SIMPLE WRITE-TERM-BOOL WRITE-ASSERTION WRITE-F-RHS WRITE-RHS COMPARE-TERM MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ ADD-EQU EXT-DIVISIBLE DISPLAY-CONSTRUCTORS REDUCE-AND-TERM REDUCE-XOR-TERM REDUCE-AT-ROOT-BOOL BOOL-REWRITE-AT-ROOT NORM-AND-ARGS NORM-OR-ARGS NORM-XOR-TERM NORM-EQ-ARGS NORM-BOOL-INNERMOST PURE-REWRITE-AT-ROOT PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST PURE-OUTRED1 OUTRED1 NORM-RHS POLISH-PREMISES PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE ADD-REST-ARGS ADD-TO-ARGS VAR-CONSISTENCY SIMPLIFY-MY-EQ-TERM TRY-ONE-EXTRA-VAR-RULE REDUCE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE LAST-CONSISTENCY-CHECK SUB-TEST NOT-IN-SET MULT-LENGTH SUB1-MODULO-N ADD1-MODULO-N PROPER-PRODUCT-LISTS PRODUCT-LISTS NON-DECREASING-SEQ EQ-MATCH MATCH-SET-AC MATCH-SET ELIM-BIN GET-INTERSECTION-RANGE VARS-ONLY MATCH-POSS NORMAL-FORM-SUB DECOMPOSE-TERMS OCCURS-IN-RULE MAKE-RULE-FROM-ASS ADD-OPERATOR MAKE-NEW-RULE CTX-DOMINANT-RULE IS-VALID-CONDI-RULE RPOST RPOMULT EQUIV PURE-LRPO PRINT-CHOICE-MESSAGE GET-CLAUSE GET-EQUATION ENABLE-RULE DISABLE-RULE NAME2RULENUM AND-LHS-TRUE-RHS WRITE-SEQ-NUM NORM-PROVE-ALL-EQNS PROVE-ALL-EQNS SPLIT-LHS-OR SPLIT-LHS-AND RENAME-OP-RULES CLEAN-HISTORY UNDO INSERT CNTH ATTACH PRINC0 IF* SELECTQ CASEQ EQ-IN-MONOMIAL PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE TR-ADD EQ-JOIN EQ-ADD REDUCE-EQ-TERM CYCLE-PAIRS SYMMETRY-TERMS CYCLE-REDUCE-AT-ROOT-2 CYCLE-OUT-RED CYCLE-REDUCE-TERM MAKE-CYCLE-RULE IS-SYMMETRY-EQN UNIT-RULE MAKE-PAIRS PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-SUP-TERM PURE-SUP-TERM SUP-TERM CONSISTENT-PAIR IS-INCONSI-PAIR RELATED-VARS2 TRACE-REMOVE-IRRELEVANT4 GOOD-UNIT-CLAUSE REMOVE-IRRELEVANT2 MAKE-ONE-DOWN-HILL HEAD-LESS-THAN-PRES RESTORE-EQUATION MAKE-ONE-BUILD BUILD-EQN-FROM-PRES SUBSUMED-PREMISES ADD-EXTRA-PREMISE COVER-CONDI-NORM PRE-CRIT-CHECKEQ NORM-BUT-ROOT PRINT-NORMALIZED-EQN COMMUNE-TERMS2 IS-SORTED SORT-OP-ARGS REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT MAKE-P-COMMUT-RULE C-PERMUTATION DIVISIBLE-AC-CHECK IS-FREE-TERM FREE-SUBTERMS IS-ELIM-TERM ONE-ELIM-SUBTERM ELIMINABLE-TERMS REMOVE-VAR-PRES CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT HAS-HINT-TERM HAVE-BOOLEAN-CONSTANT FIRST-SPEC-TERM FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHER-RULES INDUC-ADD-RULE GET-SKO-FUNC HASQUANT SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS REMOVE-QUAN-ARGS SKOLEMIZE NEGATE-XOR-ARGS NEGATE-PREDICATE TRIVIAL-SIMPLIFY BREAK-AT-OR PROCESS-ASS AND-OF-MONOMIALS SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT P-XOR-P M-XOR-P P-AND-P M-AND-P M-AND-M DECANON-XOR CANONICALIZE FIRST-TRANS BA-SIMPLIFY NEW-FIRST-TRANS AUTO-ORIENT ALL-PLAUS PLAUSIBLE RES1 ACUNI UNIFY-WITH-AC FIND-OUT-BIG-EQ-SUBS ACO-LRPO= ACO-LEXICO-COMP-RL ACO-LEXICO-COMP-LR ACO-RPOMULT>= ACO-RPOMULT> TWO-KILL-ONE ACO-HARD> ACO-LPRO>= ACO-LRPO> AC-DISTRI ACLRPO ONE-COMPOSITION FLATTEN-RULES MAKE-FLAT FLATTEN-PREMISES SUB-NONVARS2 EQN-SUB-NONVARS HANDLE-AND WRITE-COMMENT-PREMISES WRITE-COMMENT-RHS))
(setf (callers-list 'GET-POSITION :callers) '(MERGEBLE-TERMS))
(setf (callers-list 'ADD-TO-ARGS :callers) '(POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE REDUCE-AT-ROOT-BOOL REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list 'MORE-VARS-PREMISE :callers) '(INDUC-ADD-RULE))
(setf (callers-list 'PROGN :callers) '(SUCC-END-INDUC EXT-TYPE-RELATION CONSTRUCTORS-CHECK IS-PARTIAL-OP PARSE-LOOP-FOR FCLOAD CHOOSE-CONSTRUCTORS UNCONDI-PROVE PROVE CHOOSE-BY-HAND WRITE-F-PREMISES OPEN-WRITE-FILE WRITEF-SYS ASK-USER BRAKE-CHOICE FASTKB-CHOICES EXT-EQUIVALENCE EXT-PRECEDENCE FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS INVALID-RULE GET-ATOM DELETE-SYS QUERY-ADD-EQN))
(setf (callers-list 'BA-SIMP-NOT :callers) '(NEGATE-ONE-PRE MAKE-BETTER-PRE SIMPLIFY-COND-TERM REDUCE-COND-TERM SIMPLIFY-MY-EQ-TERM SPLIT-RHS-OR SPLIT-RHS-AND COVER-NORM-UNCONDI-EQN BA-SIMPLIFY))
(setf (callers-list 'IS-INCONSI-PAIR :callers) '(IS-VALID-RULE))
(setf (callers-list 'MERGE-PREMISES :callers) '(FORM-SUBGOALS-FROM-PATTERNS MERGE-TWO-PATTERNS HANDLE-CONDITIONS))
(setf (callers-list 'PURE-REDUCE-BY-ONE-AT-ROOT :callers) '(PURE-REDUCE-BY-ONE-RULE))
(setf (callers-list 'ACO-RPOMULT> :callers) '(ACO-LRPO>))
(setf (callers-list 'SYMMETRY-TERMS :callers) '(GET-SYMMETRY-TERMS))
(setf (callers-list 'GET-CODOMAIN-TYPES :callers) '(DISPLAY-ONE-ARITY2 WELL-TYPED3 TYPE-ALL-VARS ONE-TYPE-ALL-VARS ONE-EXTENSIBLE-TYPE-POINT))
(setf (callers-list 'CHANGE-LHS :callers) '(REDUCE-EQN-BY-ONE-RULE REFUTE-EQN LAST-CONSISTENCY-CHECK ADD-OPERATOR))
(setf (callers-list '(INITIALLY FINALLY) :callers) '(PARSE-NO-BODY))
(setf (callers-list 'GET-DOMAIN-TYPE :callers) '(GET-TERM-TYPE INSTANTIATE-LHS EXT-CONSTRUCTOR SUBSTVARFOR))
(setf (callers-list 'APPEND1 :callers) '(PROOF-UNDER-NEW-PREMISES SPLIT-RHS-OR SPLIT-RHS-AND TRACE-INCONSISTENCY OR-CONDI-EQN POSTPONE-OR-UNDO))
(setf (callers-list 'SUBTYPEP :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'ADD-SUGG1 :callers) '(ADD-SUGG))
(setf (callers-list 'MARK-SUPERPOSED :callers) '(AC-SUPERPOSITION SUPERPOSITION))
(setf (callers-list 'FIRST-ARG :callers) '(PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM COMPLETE-WELL-TYPED WELL-TYPED2 FREE-VARS EXPECTING-PREDICATES EXPECTING-FUNCTIONS REVERSE-PREMISE MAKE-BETTER-PRE SIMPLIFY-ONE-PRE FIRST-CTX-TRANS IS-HOMOGENEOUS-TERM IS-CHARACTER-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL DETACHMENT-RULE WRITE-TERM-BOOL ORDER-ASS SIMPLIFY-COND-TERM REDUCE-COND-TERM SIMPLIFY-MY-EQ-TERM LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL ASSERTION2EQUATION VARS-ONLY MATCH-POSS NEGATE-LITERAL GET-CLAUSE GET-EQUATION SPLIT-RHS-OR SPLIT-RHS-AND CYCLE-REDUCE-AT-ROOT-2 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE INDUC-IDEM-SUPERPOSITION COVER-NORM-UNCONDI-EQN IS-COMMUT-PAIR MAKE-P-COMMUT-RULE INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT REMOVE-LEFT-ARG2 LEFT-ARG2 REMOVE-RIGHT-ARG2 LEFT-ARG REMOVE-RIGHT-ARG IS-ELIM-TERM FIRST-SPEC-TERM SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS TRIVIAL-SIMPLIFY OR-COUNT DECANON-XOR DECANON-AND BA-SIMP-NOT BA-SIMPLIFY ACO-LPRO>= ACO-LRPO> IS-ASSOC-PAIR))
(setf (callers-list 'THE-TYPE :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'GET-RULES-WITH-OP :callers) '(REDUCE-*-TERM REDUCE-+-TERM POLY-REDUCE-AT-ROOT PURE-REWRITE-AT-ROOT REDUCE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE))
(setf (callers-list 'ATTACH :callers) '(NEGATE-ONE-PRE MAKE-PRE-ASS MAKE-EQ-PRE MAKE-BETTER-PRE FIRST-VAR-PRE FIRST-CTX-TRANS PREMISE-INSTANCE EQN2PRE))
(setf (callers-list 'RUNTIME-MAX-WARNING :callers) '(PURE-KNUTH-BENDIX2 KNUTH-BENDIX2))
(setf (callers-list 'FLATTEN :callers) '(FLATTEN-TESTSET BREAK-AT-OR))
(setf (callers-list 'ADD1-MODULO-N :callers) '(ADD1-MODULO-N))
(setf (callers-list 'IS-LINEAR :callers) '(ENCOURAGE))
(setf (callers-list 'TYIPEEK-SPA-CR :callers) '(READ-ATOM))
(setf (callers-list 'DIVISIBLE-CHECK :callers) '(ORIENT-RULE))
(setf (callers-list 'PRED-FUNC-SUPERPOSITION :callers) '(SUPERPOSITION AC-CRITPAIRS))
(setf (callers-list 'SUB1 :callers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 RPL-BY-TERMS2 GET-INSTANCE-TERMS2 ELEMENT-COMBINATION CYCLE-CHECK SUB1-MODULO-N UNKNOWN-SIZE INVALID-RULE CLEAN-RULE INSERT CAN-HAVE-NEW-OP DIO2 DIO SUMYMAX))
(setf (callers-list 'UNLESS :callers) '(PARSE-LOOP-FOR PARSE-LOOP-COLLECT PARSE-LOOP TYIPEEK READC DRAIN))
(setf (callers-list '(TO BELOW ABOVE) :callers) '(IN-ARRAY-SLOOP-FOR))
(setf (callers-list 'OPEN-READ-FILE :callers) '(READFEQNS TEST-RRL RRL-AUX LOAD-RRL))
(setf (callers-list 'ACLRPO :callers) '(LRPO))
(setf (callers-list 'INTRO-RULE :callers) '(PURE-CRITPAIRS CRITPAIRS))
(setf (callers-list 'ENTER-OP :callers) '(SET-UP-ARITY2 ENSURE-PREDICATE EXPECTING-FUNCTIONS))
(setf (callers-list 'COVER-GENE-INDUC-EQN :callers) '(COVER-SET-INDUC-STRA))
(setf (callers-list 'NREVERSE :callers) '(REWRITE-ONCE-BY-HYPO COMPLETE-TEST START-TEST SLOOP-SLOOP-MACRO IN-ARRAY-SLOOP-FOR PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-WHEN PARSE-LOOP-INITIALLY PARSE-LOOP LOOP-LET-BINDINGS LCASE LISTARRAY))
(setf (callers-list 'OPS-EQUIV-TO :callers) '(ADD-SUGG TRANS-STATUS EQOPS WARN-STAT ADD-EQU TRY-MAKE-EQUI ADD-STATUS EXT-STATUS SAME-ARITY AUTO-ADD-STATUS AUTO-MAKE-EQUI MAKE-ASS-COM-OP))
(setf (callers-list 'PPRINT :callers) '(PP))
(setf (callers-list 'SYMBOL-PACKAGE :callers) '(LOOP-ADD-BINDING))
(setf (callers-list 'VALUES :callers) '(FIND-IN-ORDERED-LIST))
(setf (callers-list 'COMPATIBLE-PATTERNS :callers) '(FORM-PATTERNS-SINGLE))
(setf (callers-list 'CHANGE-MONO-SIGN :callers) '(NORM-SIGN-CHANGED-MONOS MOVE-MONOS))
(setf (callers-list 'IN :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'IS-ROOTED-+ :callers) '(NORM-POLY IS-HOMOGENEOUS-TERM POLY-SUPER-DISTRIBUTION MAKE-PAIRS))
(setf (callers-list 'MAKE-EQN :callers) '(DETACHMENT-CRITICAL ORDER-ASS PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE MR MAKE-RULE-FROM-ASS ADD-OPERATOR GET-CLAUSE GET-EQUATION R2E APPLYSUBST-EQN SPLIT-RHS-OR SPLIT-RHS-AND PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 MAKE-ONE-DOWN-HILL JUSTIFY-EQN COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM INDUC-REDUCE-OTHERS-AUX SUBST-EQN))
(setf (callers-list 'DISPLAY-OP-STATS :callers) '(WRITEF-SYS ASK-USER OPERATOR-OPTIONS GIVE-STAT))
(setf (callers-list 'DECANON-AND :callers) '(PRED-CRITICAL-PAIR DECANON-XOR))
(setf (callers-list 'DETACHMENT-RULE :callers) '(CRITPAIRS))
(setf (callers-list 'PROOF-UNDER-NEW-PREMISES :callers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 PROOF-BY-HINT-TERM X_AUTO_INDUC))
(setf (callers-list 'NORM-CTX-AND :callers) '(HANDLE-CONDITIONS))
(setf (callers-list ':NO-BODY :callers) '(LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-ONE-WHEN-CLAUSE PARSE-LOOP1))
(setf (callers-list 'GET-RHS :callers) '(GET-CLAUSE GET-EQUATION))
(setf (callers-list 'IS-VALID-CONDI-RULE :callers) '(ORIENT-RULE))
(setf (callers-list 'STR-CHOOSE-ONE-SCHEME :callers) '(STRUCTURE-INDUC-ON))
(setf (callers-list 'ADD-EQU :callers) '(TRY-MAKE-EQUI AUTO-MAKE-EQUI))
(setf (callers-list 'BLOCK-CHOICE :callers) '(FASTKB-CHOICES))
(setf (callers-list 'WELL-TYPED2 :callers) '(WELL-TYPED))
(setf (callers-list 'MAKE-RULE-SIZE-ORDER :callers) '(MAKE-RULE-FROM-ASS))
(setf (callers-list 'MAKE-TERM-1ARG :callers) '(BA-SIMP-NOT))
(setf (callers-list 'PURE-PROCESS-CRITPAIR :callers) '(PURE-SUP-TERM2))
(setf (callers-list 'FINALLY :callers) '(PARSE-LOOP-INITIALLY))
(setf (callers-list 'W-SIZE :callers) '(W-SIZE POLY-SIZE SPECIAL-SIZE))
(setf (callers-list 'COPYLIST :callers) '(PROOF-BY-HINT-TERM START-HISTORY))
(setf (callers-list 'NEGATE-XOR-ARGS :callers) '(NEGATE-PREDICATE))
(setf (callers-list 'MAKERULES :callers) '(LINEAR))
(setf (callers-list 'FAIL-END-INDUC :callers) '(INDUC-PROVE))
(setf (callers-list 'CHAR-ASCII :callers) '(TYIPEEK READC))
(setf (callers-list 'WRITE-F-RHS :callers) '(WRITE-F-EQN WRITE-F-RULE))
(setf (callers-list 'WHILE :callers) '(PARSE-LOOP1))
(setf (callers-list 'PUSHNEW :callers) '(COLLATE-SLOOP-COLLECT NEVER-SLOOP-COLLECT ALWAYS-SLOOP-COLLECT THEREIS-SLOOP-COLLECT COUNT-SLOOP-COLLECT MINIMIZE-SLOOP-COLLECT MAXIMIZE-SLOOP-COLLECT LOGXOR-SLOOP-COLLECT SUM-SLOOP-COLLECT LOOP-DECLARE-BINDING PARSE-LOOP-COLLECT))
(setf (callers-list '(APPEND NCONC COLLECT) :callers) '(PARSE-LOOP-COLLECT))
(setf (callers-list 'ABOVE :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'CAR :callers) '(SUCC-END-INDUC REDUCTION-PROOF FORM-SUBGOALS-FROM-PATTERNS PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-SET-SCHEME ABSTRACT-PROOF XIN-MENU X_AUTO_INDUC X_AUGMENT X_CLEAN-RULE X_ADD-RULE3 X_REDUCE-BY-ONE-RULE REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE WELL-TYPED-EQN DISPLAY-ONE-ARITY2 GET-DOMAIN-TYPE GET-TERM-TYPE COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2 TYPE-ALL-VARS ONE-TYPE-ALL-VARS LITERAL-NUM PSEUDO-TERM-ORDERING IS-LIMITED RENAME-VARS SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM IS-SUBTERM RPLAT-IN-BY RPLNTHSUBT-IN-BY FREE-VARS W-SIZE SIZE ALL-OPS SET-UP-ARITY2 CHECK-ARITY FIXUP-QUANTIFIED-FORMULA EXPECTING-PREDICATES EXPECTING-FUNCTIONS NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT MAKE-TUPLES TOP-TERM RULE-DESTROYABLE DESTROYABLE GET-DOWN GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN COMPLETE-TEST START-TEST MAP-FRINGE FIND-IN-ORDERED-LIST SLOOP-SLOOP-MACRO IN-ARRAY-SLOOP-FOR PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-FOR ADD-FROM-DATA LOOP-ADD-TEMPS PARSE-LOOP-DECLARE LOOP-DECLARE-BINDING LOOP-ADD-BINDING MAKE-VALUE THE-TYPE PARSE-LOOP-COLLECT PARSE-LOOP-INITIALLY PARSE-LOOP LOOP-LET-BINDINGS LOOP-PEEK DESETQ1 LCASE RENAME-PATTERN MERGE-TWO-PATTERNS ADD-PATTERNS REMOVE-DUP-VARS FORM-PATTERNS-SINGLE MAKE-ONE-SCHEME MERGEBLE-TERMS CHOOSE-HIGHEST-TERM MERGE-DUPLICATE OPS-OF-RULE CAR-LESSP CAR-LENGTH-CDDR CAR-LENGTH-GREAT ENCOURAGE CHOOSE-OFF-CLOSE GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS INDUCTIBLE INDUC-AC-SUBS INDUC-SUBS-TERM INDUC-SUBS-OF-EQN SKOLEM-TERMS ALL-NONVARS GET-INSTANCE-TERMS2 ELEMENT-COMBINATION NEGATE-EQN REFUTE-EQN UNCONDI-PROVE REDUCE-BY-PREMISE-AT-ROOT IS-EQ-FALSE-PRE SUPER-ITSELF-PRE PRE-OPS PRE-VARS NEGATE-ONE-PRE MAKE-PRE-EQN SEPARATE-XOR-ARGS MAKE-PRE-XOR-ARGS REMAKE-PREMISES MAKE-PRE-ASS ONE-PREMISE-IS-TRUE ADD-PREMISE-END ADD-SIMPLIFY-OTHERS MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES FIRST-CTX-TRANS REDUCE-MONO NORM-POLY POLY-ADD-HOMO-RULES IS-HOMOGENEOUS-RULE IS-HOMOGENEOUS-TERM POLY-SIZE IS-CHARACTER-RULE POLY-LRPO MOVE-MONOS MOVE-LHS-ARGS NONLINEAR-VARS-UNDER-* POLY-SUPER-DISTRIBUTION POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* POLY-MATCH-TEST-REST-*-ARGS POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT *-CANONICALIZE +-CANONICALIZE M-*-M P-+-P POLY-SIMPLIFY IS-BIG-ENOUGH-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL DETACHMENT-RULE IDEM-SUPER-COMMU IDEM-SUPERPOSITION PRED-FUNC-SUPERPOSITION PRED-SUPERPOSITION WRITE-DETAIL-RULE PRINT-ATOMS WRITE-ONE-PRE WRITE-F-PREMISES WRITE-PREMISES WRITE-DISJUNCTIONS WRITE-TERM-SIMPLE WRITE-TERM-BOOL WRITE-F-RHS WRITE-RHS WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE TOTAL-ORDER-RES TOTAL-ORDER-PC-RES ORDER-PC-RES COMPARE-TERM ORDER-ASS MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ INSTANTIATE-LHS MANUAL-ORIENT MAKE-EQ COMP-EQN ASK-USER TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN SUPPORT-EQN EXT-DIVISIBLE REDUCE-AT-ROOT-BOOL BOOL-REWRITE-AT-ROOT NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX PURE-REWRITE-AT-ROOT PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST OUTRED1 SIMPLIFY-COND-TERM REDUCE-COND-TERM NORM-RHS PURE-REDUCE-BY-ONE-AT-ROOT PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE ADD-REST-ARGS SIMPLIFY-MY-EQ-TERM TRY-ONE-RULE REDUCE-AT-ROOT REWRITE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE LAST-CONSISTENCY-CHECK PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE SUB-TEST NOT-IN-SET GOAL-RULE-SIZE MR LINEAR CAR-NUM-ORDER SUB1-MODULO-N ADD1-MODULO-N PROPER-PRODUCT-LISTS PRODUCT-LISTS MATCH-PREMISE MATCH-PREMISES EQ-MATCH AC-C-ROOT MATCH-SET-AC ELIM-BIN NEXT-CHOICE VARS-ONLY MATCH-POSS AC-MATCH DECOMPOSE-TERMS IS-CONDI-DOMINATE-RULE OCCURS-IN-RULE MAKE-RULE-FROM-ASS ADD-OPERATOR CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE RPOST EQUIV PURE-LRPO FLATTEN-WITNESS CHECK-WITNESS ADD-RULE3 ADD-RULE-LINEAR FIRST-PROCESS-EQN PROCESS-EQUATION PRINT-CHOICE-MESSAGE READ-THIS-EQN NEXT-TOKEN NEGATE-LITERAL GET-CLAUSE GET-EQUATION ENABLE-RULE DISABLE-RULE DELETE-EQN R2E AND-LHS-TRUE-RHS INDUC-SUBSUMED-BY WRITE-SEQ-NUM SIMILAR-EQN HYPO-SUBSUME-EQN CHANGE-VARS APPLYSUBST-PRE APPLYSUBST-EQN NORMAL-PROVE PREMISE-INSTANCE SPLIT-RHS-OR SPLIT-RHS-AND SPLIT-LHS-OR SPLIT-LHS-AND APPLYSUBST-RULE RENAME-OP-RULES RENAME-PAIR-RULE RENAME-EQN-RULE UNDO1 INSERT ATTACH PRINC0 IF* SELECTQ CASEQ TRACE-PARA EQ-IN-MONOMIAL PARAMODULATE TR-ADD EQ-JOIN EQ-ADD USER-SELECTQ CYCLE-PAIRS SYMMETRY-TERMS IS-SYMMETRY-RULE SYMMETRY-VARS GET-SYMMETRY-TERMS CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 CYCLE-REDUCE-AT-ROOT-2 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE CYCLE-REDUCE-TERM MAKE-CYCLE-RULE IS-SYMMETRY-EQN IS-CYCLE-EQN LOOK-AT-PAIR-AND PAIR-INFO UNIT-RULE MAKE-PAIRS ACCEPTABLE-PAIR NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION INDUC-SUP-TERM INDUC-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 SUP-TERM PURE-SUPERPOSITION FUNC-SUPERPOSITION INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-RULE CONSISTENT-CHECK FACTORIBLE RELATED-VARS2 TRACE-REMOVE-IRRELEVANT4 GOOD-UNIT-CLAUSE REMOVE-IRRELEVANT3 HANDLE-COMMU-HYPO REMOVE-IRRELEVANT MAKE-ONE-DOWN-HILL LRPO-PREMISES BIG-PRE-INFO HEAD-LESS-PRE JUSTIFY-EQN EQN2PRE MAKE-ONE-BUILD LESS-SIZE-CAR SUBSUMED-PREMISES ADD-EXTRA-PREMISE SMALLER-PRE-CAR COVER-CONDI-NORM PRE-CRIT-CHECKEQ COVER-NORM-TERM COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE COVER-NORM-ORDER PRINT-NORMALIZED-EQN COVER-NORMAL-PROOF COMMUNE-TERMS2 COMMUNE-TERMS IS-COMMUT-PAIR P-COMMUT-REDUCE-OTHERS IS-SORTED SORT-OP-ARGS REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT MAKE-P-COMMUT-RULE IS-P-COMMUT-PAIR C-PERMUTATION INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT NEW-RULE-FROM-ASSOC TRACE-DIVISIBLE REMOVE-LEFT-ARG2 LEFT-ARG2 REMOVE-RIGHT-ARG2 RIGHT-ARG2 DIVISIBLE-AC-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK2 DIVISIBLE-CHECK ELIMINATE-SUB FREE-SUBTERMS IS-ELIM-TERM CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT HAVE-BOOLEAN-CONSTANT FIRST-SPEC-TERM FIND-SPECIAL-TERM INDUC-REDUCE-OTHER-RULES QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN HASQUANT SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS REMOVE-QUAN-ARGS SKOLEMIZE NEGATE-XOR-ARGS NEGATE-PREDICATE TRIVIAL-SIMPLIFY OR-COUNT SUBSTVARFOR BREAK-ASS PROCESS-ASS EQN2ASSERTION AND-OF-MONOMIALS SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT P-XOR-P M-XOR-P M-XOR-M M-AND-P M-AND-M CANONICALIZE NOT-ARG FIRST-TRANS BA-SIMP-NOT BA-SIMPLIFY NEW-FIRST-TRANS AUTO-ORIENT ALL-PLAUS PLAUSIBLE RES1 ACUNI UNIFY-WITH-AC CAR-LRPO< FIND-OUT-BIG-EQ-SUBS ACO-LRPO= ACO-RPOMULT>= ACO-RPOMULT> ACO-HARD> ACO-LPRO>= ACO-LRPO> AC-DISTRI ACLRPO ADD-SOLN ONE-COMPOSITION TAKE-OUT IS-ASSOC-PAIR IS-ASSOC-UNDER-C MAKE-FLAT FLATTEN-PREMISES FLATTEN-EQN FLATTEN-RULE IS-HIGHER-TERM SUB-NONVARS2 EQN-SUB-NONVARS SUBST-EQN CAR-LOWER HANDLE-AND WRITE-COMMENT-PREMISES WRITE-COMMENT-RHS WRITE-COMMENT-EQN))
(setf (callers-list 'OR-CONDI-EQN :callers) '(SPLIT-PREMISES ELIMINATE-SUB))
(setf (callers-list 'NODE-STATE :callers) '(ADD_CHILD SHOW-TREE X_INITIAL LIST_NODE))
(setf (callers-list 'SIMILAR-TERM :callers) '(SIMILAR-EQN))
(setf (callers-list 'WRITE-COMMENT-EQN :callers) '(SUCC-END-INDUC PROVE TRACE-SUCC-PROVE))
(setf (callers-list 'SETQ :callers) '(ORIENT-INDUC-HYPO REWRITE-ONCE-BY-HYPO X_COVER-PROOF-PROCESS2 SUCC-END-INDUC X_GET_INDUC_TERM X_READ_TERM X_NAME REDUCTION-PROOF FORM-SUBGOALS-FROM-PATTERNS SPLIT-PREMISES COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-INDUC-PROVE COVER-SET-SCHEME ABSTRACT-PROOF X_FAILURE_HANDLER X_AUTO_INDUC X_AUGMENT X_CLEAN-RULE X_ADD-RULE3 REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE X_INDUC DISPLAY-ONE-ARITY2 DISPLAY-TYPE-ARITY ADD-SUGG-TYPE EXT-TYPE-RELATION WELL-TYPED-VAR WELL-TYPED TYPE-VAR-LIST NEWVARSIN RPL-BY-TERMS2 MAKE-NEW-VARIABLE W-SIZE EXPECT-ARITY EXPECT-ARITY12 SET-UP-ARITY2 ENTER-OP NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT GET-TESTSET-QUASI GET-BASIC-TYPE-TERMS RULE-DESTROYABLE TRACE-TESTSET GET-DOWN GET-DEFINING-DOMAINS GET-TESTSET2 GET-TESTSET FLATTEN-TESTSET CONSTRUCTORS-CHECK TEST-ONE-OP IS-PARTIAL-OP COMPLETE-TEST START-TEST RESOLVE STR-FORMULATE-SCHEME FIND-IN-ORDERED-LIST IN-ARRAY-SLOOP-FOR PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-FOR ADD-FROM-DATA LOOP-ADD-BINDING MAKE-VALUE PARSE-LOOP-COLLECT PARSE-LOOP-WHEN PARSE-ONE-WHEN-CLAUSE PARSE-NO-BODY PARSE-LOOP1 PARSE-LOOP LOOP-POP LCASE MERGE-TWO-PATTERNS ADD-PATTERNS REM-DUP-VARS REMOVE-DUP-VARS ONE-PATTERN FORM-PATTERNS-SINGLE MAKE-ONE-SCHEME MERGEBLE-TERMS DECIDE-MERGE-CONJ MERGE-DUPLICATE PARTI-BY-VARS SET-DEPEND-SCORES GET-RECURSIVE-RETURN-OP HAVE-MANY-RECURSIVE-EQNS GET-RECURSIVE-DEF-TERM ENCOURAGE CHOOSE-MAX-SCORE GET-INDUC-VARS ELIGIBLE-INDUC-TERMS INDUC-SUBS-OF-EQN CHOOSE-BEST-SCHEMES ADD-DEFIN-DEPEND SUBS-OF-SAME-ROOT DECIDE-DEFIN-MODE SET-RIGHT-HYPO-ARGS COVER-SETS INIT-COVER-PROVE INIT-PROVE-GLOBALS GET-INSTANCE-TERMS2 NEGATE-EQN REFUTE-EQN REFUTED-RESULT CHOOSE-CONSTRUCTORS INDUC-PROVE UNCONDI-PROVE PROVE SUBST-VAR-PREMISES NEGATE-ONE-PRE SEPARATE-XOR-ARGS ONE-PREMISE-IS-TRUE SIMPLIFY-PREMISES ADD-PREMISE-END ADD-SIMPLIFY-OTHERS MAKE-BETTER-PRE NORM-ONE-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PREMISES FIRST-PROCESS-PREMISES ADD-SUGG SUGG-PREC TRY-SUGG-PREC NORM-SIGN-CHANGED-MONOS NORM-POLY POLY-INITIALIZE POLY-SIZE IS-CHARACTER-RULE MOVE-MONOS MAKE-RULE-INSTANCES POLY-SUPER-AT-*-0 POLY-MATCH-+ POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE INSERT-SORT-ARG P-*-M MAN-PICK-2ND-RULE MANUAL-PICK DETACHMENT-SUPER DETACHMENT-CRITICAL DETACHMENT-RULE PRED-CRITICAL-PAIR IDEM-SUPER-COMMU IDEM-SUPERPOSITION WRITE-SIGMA WRITE-DETAIL-RULE WRITE-ONE-PRE WRITE-VARIABLE WRITE-TERM-SIMPLE WRITE-TERM WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE OPEN-WRITE-FILE WRITEF-SYS ORDER-ASS INITIALIZE-MANUAL-ORDERING MANUAL-ORIENT MAKE-EQ MAKE-CRIT-RULE ASK-USER TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA SUPPORT-EQN NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA NORMALIZE-BOUND TIME-LIMIT-STRA BRAKE-CHOICE POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE FASTKB-CHOICES ADD-EQU EXT-EQUIVALENCE EXT-AC EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-WEIGHT EXT-PRECEDENCE NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR FOPC-STRA IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS REDUCE-AT-ROOT-BOOL NORM-AND-ARGS NORM-OR-ARGS NORM-XOR-TERM NORM-EQ-ARGS NORM-BOOL-INNERMOST NORM-CTX PURE-NORM-MIXED PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST OUTRED1 SIMPLIFY-COND-TERM POLISH-PREMISES PURE-REDUCE-BY-ONE-AT-ROOT REDUCE-BY-ONE-AT-ROOT CYCLE-CHECK SIMPLIFY-MY-EQ-TERM REDUCE-AT-ROOT-ONE-RULE TRY-ONE-RULE PURE-NORM NORM-TERM LAST-CONSISTENCY-CHECK PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE SUB-TEST NOT-IN-SET GOAL-RULE-SIZE MANUAL-GOAL MAKERULES LINEAR IS-SUBSEQUENCE MATCH-PREMISE EQ-MATCH MATCH-SET-AC NEXT-CHOICE VARS-ONLY AC-MATCH PURE-MATCH MATCH NONAC-UNIFY MAKE-RULE-SIZE-ORDER MAKE-RULE-FROM-ASS AUTO-OPERATOR ASK-FOR-OPERATOR ADD-OPERATOR UNKNOWN-SIZE BODY-PREMISES-SIZE MAKE-NEW-RULE CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE RPOMULT FOUND-WITNESS FLATTEN-WITNESS CHECK-WITNESS CLEAN-RULE RUNTIME-MAX-WARNING ADD-RULE3 REDUCE-POST-ASS ADD-RULE-LINEAR ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE PURE-PROCESS-EQUATION PROCESS-EQUATION KNUTH-BENDIX1 START-KB INVALID-INPUT-WARNING READ-THIS-EQN OK-TO-CONTINUE ASK-A-NUMBER READ-ATOM IS-EMPTY-LINE GET-ATOM SKIP-EOLN NEXT-TOKEN READ-T-TERM GET-TERM-ARGS GET-ITEM GET-RHS CONDI-FROM-CLAUSE GET-CLAUSE GET-EQUATION READ-TYPE-RELATION READ-ARITY READ-EQNS READFEQNS OPEN-READ-FILE READ-INPUT DISPLAY-OPS ENABLE-RULE DISABLE-RULE DISABLE-RULES-AUX TEST-RRL CLOSE-LOG ORDER-EQNS DELETE-EQN DELETE-RULE DELETE-SYS REPORT-CURRENT-TIME RRL-AUX INIT RESET-RRL SYS-FLAG-INIT PRE-INIT HYPO-SUBSUME-EQN IS-PREVIOUS-INDUC-EQN APPLYSUBST-PRE APPLYSUBST-EQN NORMAL-PROVE EQN-INSTANCE PREMISE-INSTANCE PREMISES-INSTANCES SPLIT-RHS-OR SPLIT-RHS-AND SPLIT-LHS-OR PROVE-SPLIT-BOOL RENAME-EQN-RULE RENAME-TERM RESTORE-REST-GLOBALS LOAD-RRL SAVE-RRL CLEAN-HISTORY UNDO1 PUSH-HISTORY-MANUAL PUSH-HISTORY START-HISTORY FILLARRAY TYIPEEK READC INFILE DRAIN INSERT CNTH UCONCAT PRINC0 IF* PARA-SUP-TERM2 TR-TERM REDUCE-EQ-TERM CYCLE-PAIRS GET-SYMMETRY-TERMS CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 MAKE-CYCLE-RULE IS-SYMMETRY-EQN IS-CYCLE-EQN UNIT-RULE MAKE-PAIRS REMOVE-PAIRS-WITH PROCESS-AC-UNIFIER PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR SET-UNIFY PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP AC-SUPERPOSITION INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 PURE-SUPERPOSITION FUNC-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS TRACE-INCONSISTENCY INCONSISTENT-EQN CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-RULE FACTORIBLE HANDLE-FACTOR TRACE-REMOVE-IRRELEVANT4 REMOVE-IRRELEVANT4 REMOVE-IRRELEVANT3 HANDLE-COMMU-HYPO MAKE-ONE-DOWN-HILL DOWN-HILL-ONE LRPO-PREMISES HEAD-LESS-THAN-PRES EQN2PRE RESTORE-EQUATION BUILD-EQN-FROM-PRES BUILD-EQUATION-FROM-PREMS CHECK-HEAD-ROLE SUBSUMED-PREMISES ADD-EXTRA-PREMISE COVER-CONDI-NORM NORM-BUT-ROOT COVER-NORM-TERM COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE COVER-NORM-ORDER PRINT-NORMALIZED-EQN COVER-NORMAL-PROOF REDUCE-BY-P-COMMUT2 MAKE-P-COMMUT-RULE NEW-RULE-FROM-ASSOC REMOVE-ONE-ARG REMOVE-LEFT-ARG2 REMOVE-RIGHT-ARG2 DIVISIBLE-AC-CHECK DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK ELIMINATE-SUB REMOVE-VAR-PRES CHECK-BUILD-RULE RELEASE-PREMISES INDUC-REDUCE-OTHERS-AUX QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN ADD-CONDI-DOMINATE-RULE INDUC-ADD-RULE GET-SKO-FUNC SUBST-QUANT-FORM SKOLEMIZE-AWAY-QUANTS NEGATE-XOR-ARGS TRIVIAL-SIMPLIFY SUBSTVARFOR BREAK-ASS PROCESS-ASS-SIMPLE EQN2ASSERTION INIT-BOOL-OPS SIMP-XOR-SIMP XOR-OF-MONOMIALS SIMP-AND-SIMP AND-OF-MONOMIALS BRT INSERT-AND-REMOVE-PAIRS CANONICALIZE POSTPONE-OR-UNDO POSTPONE-IT CAN-HAVE-NEW-OP AUTO-ORIENT AUTO-KB ACUNI UNIFY UNIFIER UNIFIERS ACO-LEXICO-COMP-RL ACO-LEXICO-COMP-LR ACO-RPOMULT>= ACO-RPOMULT> ACO-HARD> AC-DISTRI DISTR-AC-ORDER PREC-CONSISTENT DIO2 DIO ONE-COMPOSITION TAKE-OUT GENERAL-BASIS-VECTORS FULL-DIO DIO-INITIALIZE ALL-ONES FLATTEN-POST-ASS FLATTEN-RULES MAKE-ASS-COM-OP IS-ASSOC-PAIR FLAT-TERM-FUNC FLATTEN-EQN FLATTEN-RULE SUB-NONVARS2 SUBST-EQN ABSTRACTION HANDLE-AND SET-HANDLE-AND SET-ART-MODE))
(setf (callers-list 'INS-LIS :callers) '(EXTEND-DEF-DOMAIN))
(setf (callers-list 'BASE-DEPTH :callers) '(GET-TESTSET-QUASI))
(setf (callers-list 'QUIT :callers) '(QUIT-RRL))
(setf (callers-list 'STRING< :callers) '(ALPHALESSP))
(setf (callers-list 'IS-HOMOGENEOUS-TERM :callers) '(IS-HOMOGENEOUS-RULE MAKE-PAIRS))
(setf (callers-list 'DESTROYABLE :callers) '(CONSISTENT-CHECK-TESTSET))
(setf (callers-list 'INDUC-REDUCE-OTHER-RULES :callers) '(ADD-RULE-COMPLETE))
(setf (callers-list 'TOTAL-ORDER-RES :callers) '(TOTAL-ORDER-2 TOTAL-ORDER M-XOR-M))
(setf (callers-list 'AC-C-ROOT :callers) '(IS-SUBTERM INDUCTIBLE SET-RIGHT-HYPO-ARGS))
(setf (callers-list 'P-COMMUT-REDUCE-OTHERS :callers) '(MAKE-P-COMMUT-RULE))
(setf (callers-list 'SUBLIS :callers) '(REPVARSIN APPLY-TO MERGE-TWO-PATTERNS SUBST-VAR-PREMISES PRE-PROCESS-PREMISES PRED-CRITICAL-PAIR PURE-REDUCE-BY-ONE-AT-ROOT ADD-TO-ARGS NORMAL-FORM-SUB APPLYSUBST-PRE APPLYSUBST-EQN PREMISE-INSTANCE APPLYSUBST-RULE RENAME-TERM SUBPAIR PARA-SUP-TERM2 IS-SYMMETRY-RULE IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 ADD-EXTRA-PREMISE ELIMINATE-SUB))
(setf (callers-list 'DEPTH :callers) '(DEPTH ORDER-ASS SPECIAL-SIZE BIG-PRE-INFO))
(setf (callers-list 'GET-BASIC-TYPE-TERMS :callers) '(RULE-DESTROYABLE GET-TESTSET2 IS-PARTIAL-OP COMPLETE-TEST))
(setf (callers-list 'IS-ASSOC-UNDER-C :callers) '(IS-VALID-RULE))
(setf (callers-list 'GREATERP :callers) '(TERM-SIZE-ORDER TOTAL-ORDER-ATOM CAR-NUM-ORDER DISPLAY-KB-STAT ACLRPO))
(setf (callers-list 'WRITE-ASSERTION :callers) '(TRACE-PARA TRACE-CRIT))
(setf (callers-list 'SET-HANDLE-AND :callers) '(RUN-KB-OPTIONS))
(setf (callers-list '1- :callers) '(LITERAL-NUM PARSE-LOOP-MAP IS-SUBSEQUENCE NEXT-CHOICE CNTH FULL-DIO ALL-ONES))
(setf (callers-list 'PRINC :callers) '(SHOW-NODE PRINT-NODE WRITE-NODE REWRITE-ONCE-BY-HYPO X_COVER-PROOF-PROCESS2 SUCC-END-INDUC X_GET_INDUC_TERM X_READ_TERM DEBUG-MSG TRACE-GENERATED-RESULT COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-SET-SCHEME HEAD_OF_MANUAL_INDUC HEAD_OF_FAILURE_HANDLER X_AUTO_INDUC LIST_NODE WAIT-RETURN PRINT_STR X_AUGMENT X_PREPARE_RULES X_HYPOTHESIS DISPLAY-ONE-ARITY2 EXT-TYPE-RELATION EXPECT-ARITY EXPECT-ARITY21 EXPECT-ARITY12 EXPECTED CHECK-ARITY ENSURE-PREDICATE INPUT-TYPE-CHECK BAD-TYPED EXPECTING-PREDICATES TRACE-TESTSET TEST-ONE-OP START-TEST REFUTE-EQN REFUTED-RESULT CHOOSE-CONSTRUCTORS INDUC-PROVE UNCONDI-PROVE PROVE PRINT-SUGG-INFO POLY-INITIALIZE LAST-CHECK-2ND-RULE MAN-PICK-2ND-RULE CHOOSE-BY-HAND WRITE-SIGMA WRITE-DETAIL-RULE PRINT-HEAD WRITE-ONE-PRE WRITE-F-PREMISES WRITE-PREMISES WRITE-DISJUNCTIONS WRITE-VARIABLE WRITE-TERM-SIMPLE WRITE-TERM-BOOL WRITE-ASSERTION WRITE-F-RHS WRITE-RHS WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE OPEN-WRITE-FILE WRITEF-SYS DISPLAY ORDER-ASS INSTANTIATE-LHS MANUAL-ORIENT ASK-USER CTX-GT-LHS ORDER-CTX TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA SUPPORT-EQN NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA NORMALIZE-BOUND TIME-LIMIT-STRA BRAKE-CHOICE POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE FASTKB-CHOICES WARN-STAT TRY-MAKE-EQUI EXT-EQUIVALENCE EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-OPERATOR EXT-STATUS EXT-WEIGHT EXT-PRECEDENCE NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR FOPC-STRA IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS PRINT-WARNING MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS DISPLAY-CONSTRUCTORS CYCLE-CHECK NORMALIZE-ONE-EQN ASSERTION2EQUATION NORMALIZE LINEAR ASK-FOR-OPERATOR INVALID-RULE RUNTIME-MAX-WARNING ADD-RULE3 ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE PURE-PROCESS-EQUATION PROCESS-EQUATION START-KB INVALID-INPUT-WARNING PRINT-CHOICE-MESSAGE READ-THIS-EQN OK-TO-CONTINUE ASK-A-NUMBER ASK-A-CHOICE SAVE-WORD-END READ-T-TERM READ-TYPE-RELATION READTEQNS OPEN-READ-FILE DISPLAY-OP-STATS DISPLAY-KB-STAT GIVE-STAT DISABLE-RULES-AUX NAME-LAST-RULE DATE TEST-RRL QUIT-RRL CLOSE-LOG DELETE-EQN DELETE-RULE DELETE-SYS REPORT-CURRENT-TIME RRL-AUX RESET-RRL MARK WRITE-SEQ-NUM TRACE-SUCC-PROVE TRACE-HYPOTHESE PROVE-SPLIT-BOOL LOAD-RRL CLEAN-HISTORY UNDO PUSH-HISTORY TRACE-PARA MAKE-CYCLE-RULE TRACE-CRIT TRACE-AC-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS INCONSISTENT-EQN CONSISTENT-RULE TRACE-FACTOR TRACE-REMOVE-IRRELEVANT4 TRACE-DROPPED-PREMISES MAKE-ONE-DOWN-HILL HEAD-LESS-THAN-PRES PRINT-CURRENT-PREMISES PRINT-NORMALIZED-EQN MAKE-P-COMMUT-RULE TRACE-DIVISIBLE TRACE-BUILDING INDUC-REDUCE-OTHERS-AUX QUERY-ADD-EQN ADD-CONDI-DOMINATE-RULE INDUC-ADD-RULE POSTPONE-OR-UNDO POSTPONE-IT CAN-HAVE-NEW-OP ONE-COMPOSITION MAKE-ASS-COM-OP SET-HANDLE-AND SET-ART-MODE WRITE-COMMENT-PREMISES WRITE-COMMENT-RHS WRITE-COMMENT-EQN))
(setf (callers-list 'GET-TERM-ARGS :callers) '(GET-ITEM))
(setf (callers-list 'GENSYM :callers) '(XIN-MENU IN-CAREFULLY-SLOOP-FOR SLOOP-SLOOP-MACRO IN-ARRAY-SLOOP-FOR REPEAT-SLOOP-MACRO PARSE-LOOP-FOR MAKE-VALUE PARSE-LOOP-COLLECT POINTER-FOR-COLLECT PARSE-LOOP DESETQ ACM-AC-ROOT ACM-AND-EQ FLAT-TERM ADD-ASSOCIATE-LIST ADD-TIME USER-SELECTQ SET-EQN-MARK PROCESS-AC-CRITICAL-PAIR))
(setf (callers-list 'RIGHT-ARG2 :callers) '(RIGHT-ARG2 RIGHT-ARG))
(setf (callers-list 'MAKE-PAIRS :callers) '(ADD-PAIRS))
(setf (callers-list 'ONE-TYPE-ALL-VARS :callers) '(ONE-TYPE-VAR-LIST))
(setf (callers-list 'INCF :callers) '(NEWSYM))
(setf (callers-list 'OPS-OF-RULE :callers) '(ADD-DEFIN-DEPEND))
(setf (callers-list 'DEBUG-MSG :callers) '(X_GENERAL X_SPLIT))
(setf (callers-list 'VAR-CONSISTENCY :callers) '(LAST-CONSISTENCY-CHECK))
(setf (callers-list 'DISTR-AC-ORDER :callers) '(ACLRPO))
(setf (callers-list 'MULT-DIFF :callers) '(RPOMULT ACO-RPOMULT>= ACO-RPOMULT>))
(setf (callers-list '- :callers) '(X_AUTO_INDUC GET-SKELETON2 PARSE-LOOP-FOR REF-INSTANCE-SEEDS INDUC-PROVE PROVE SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-SIZE POLY-MATCH-FIND-REST-*-ARGS POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR ORDER-ASS PURE-ORIENT-AN-EQN ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-AT-ROOT-ONE-RULE CAPITALIZE CON1-NUMS VARS-ONLY PURE-PROCESS-EQUATION PROCESS-EQUATION START-KB REPORT-CURRENT-TIME RRL-AUX APPLYSUBST-PRE TRACE-HYPOTHESE INSERT PARA-SUP-TERM2 IS-SYMMETRY-EQN MAKE-PAIRS PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 COVER-NORM-TERM COVER-NORM-ORDER REDUCE-BY-P-COMMUT2 INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN PROCESS-ASS-SIMPLE BRT UNIFY UNIFIER UNIFIERS FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'PARSE-LOOP1 :callers) '(PARSE-LOOP))
(setf (callers-list 'REMOVE-DUPLICATES :callers) '(STRONG-SUBGOAL-PROOFS INDUC-SUBGOAL-PROOFS TYPE-VAR-LIST ONE-TYPE-VAR-LIST FREE-VARS VAR-LIST OP-LIST MAKE-ONE-SCHEME ADD-DEFIN-DEPEND PRE-OPS PRE-VARS MAKE-RULE-INSTANCES NONLINEAR-VARS-UNDER-* NORM-EQ-ARGS POLISH-PREMISES PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL MAKE-NEW-RULE IS-VALID-CONDI-RULE EQ-ADD SYMMETRY-TERMS SET-UNIFY NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS INDUC-IDEM-SUPERPOSITION MAKE-ONE-DOWN-HILL PRINT-NORMALIZED-EQN COMMUNE-TERMS2 INDUC-REDUCE-OTHERS-AUX PROCESS-ASS-SIMPLE SUB-NONVARS PRE-SUB-NONVARS EQN-SUB-NONVARS))
(setf (callers-list 'ASSERT :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'CYCLE-REDUCE-OTHERS :callers) '(MAKE-CYCLE-RULE))
(setf (callers-list 'PRED-SUPER :callers) '(PRED-SUPERPOSITION))
(setf (callers-list 'RPOMULT :callers) '(PURE-LRPO))
(setf (callers-list 'ASK-NUMBER :callers) '(MAN-PICK-2ND-RULE POST-LIMIT-STRA NEW-RULE-STRA NORMALIZE-BOUND TIME-LIMIT-STRA EXT-CONSTRUCTOR OVER-REWRITE-PREMISES ASS-RULE-BOUND MANUAL-OPTIONS COVER-AUTO-LEVEL))
(setf (callers-list 'SPECIAL-SUBST :callers) '(SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS))
(setf (callers-list 'DATE :callers) '(QUIT-RRL REPORT-CURRENT-TIME))
(setf (callers-list 'GET-SYMMETRY-TERMS :callers) '(ADD-RULE-COMPLETE))
(setf (callers-list 'SET-STATUS :callers) '(POLY-INITIALIZE))
(setf (callers-list 'EQN2PRE :callers) '(RULE-SUBSUMED-PREMISES COVER-CONDI-NORM ELIMINATE-SUB INDUC-ADD-RULE))
(setf (callers-list 'EXTEND-DOM-ARGS :callers) '(EXTEND-DEF-DOMAIN))
(setf (callers-list 'WHEN :callers) '(SHOW-TREE REWRITE-ONCE-BY-HYPO SUCC-END-INDUC PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM X_HYPOTHESIS X_ONE_RULE CONSTRUCTORS-CHECK IS-PARTIAL-OP LOOP-DECLARE-BINDING LOOP-ADD-BINDING PARSE-ONE-WHEN-CLAUSE PARSE-LOOP ELIGIBLE-INDUC-TERMS CLOAD2 CLOAD REFUTE-EQN CHOOSE-CONSTRUCTORS UNCONDI-PROVE PROVE MAKE-PRE-EQN MAKE-BETTER-PRE DETACHMENT-SUPER WRITE-F-EQN OPEN-WRITE-FILE ASK-USER REDUCE-AT-ROOT-ONE-RULE TRY-ONE-CONDI-RULE ASSERTION2EQUATION MAKE-NEW-RULE FLATTEN-WITNESS CHECK-WITNESS SAVE-WORDS SAVE-WORD-END LISTARRAY REMQ TRACE-DROPPED-PREMISES ADD-EXTRA-PREMISE COVER-CONDI-NORM COVER-NORM-TERM COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM PRINT-NORMALIZED-EQN FIRST-BOOLEAN-CONSTANT QUERY-ADD-EQN INDUC-ORIENT-AN-EQN INSERT-AND-REMOVE-PAIRS UNIFY))
(setf (callers-list 'VAR1-LIST :callers) '(CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK))
(setf (callers-list 'WRITE-PREMISES :callers) '(WRITE-F-PREMISES WRITE-RHS))
(setf (callers-list 'PARSE-ONE-WHEN-CLAUSE :callers) '(PARSE-LOOP-WHEN))
(setf (callers-list 'DISP_STRINGS :callers) '(HEAD_OF_MANUAL_INDUC HEAD_OF_FAILURE_HANDLER WAIT-RETURN HEAD_OF_FRI))
(setf (callers-list 'HIGH-OP-POSI :callers) '(HEAD-LESS-PRE))
(setf (callers-list 'SPLIT-PREMISES :callers) '(FORM-SUBGOALS-FROM-PATTERNS))
(setf (callers-list 'GET-TESTSET2 :callers) '(GET-TESTSET))
(setf (callers-list 'MULTI-COM :callers) '(ACUNI))
(setf (callers-list 'CHECK-BUILD-RULE :callers) '(INDUC-REDUCE-OTHER-RULES))
(setf (callers-list 'MAKE-ONE-DOWN-HILL :callers) '(HEAD-LESS-THAN-PRES MAKE-ONE-BUILD INDUC-ADD-RULE))
(setf (callers-list 'SLOOP :callers) '(CURSOR_DOWN SHOW-TREE-INFO SEARCH-TREE WRITE-TREE PEQNS CLEAN-INDHYP REWRITE-ONCE-BY-HYPO X_MATH_IND STRONG-SUBGOAL-PROOFS X_REMOVE_HYP SUCC-END-INDUC COVER-PROOF-PROCESS X_GET_INDUC_TERM X_REAL_VARS X_NAME SPLIT-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-SET-SCHEME ABSTRACT-PROOF INDUC-SUBGOAL-PROOFS X_MANUAL_INDUC X_FAILURE_HANDLER XIN-MENU CLEARSCREEN MENU_FOR_CURSOR PROVE_EQN MOVE_CURSOR X_PROVER X_AUGMENT X_REDUCE-BY-ONE-RULE REDUCE-EQN-BY-ONE-RULE X_CHOOSE_ONE_RULE ONE-RULE-ITERATION X_ONE_RULE X_NORMAL MENU_FOR_NORMAL MENU_FOR_MANUAL_REDUCE WELL-TYPED-EQN DISPLAY-ONE-ARITY2 DISPLAY-ARITY2 DISPLAY-TYPE-ARITY GET-SUBTYPES ADD-SUGG-TYPE1 EXT-TYPE-RELATION GET-CODOMAIN-TYPES COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2 TYPE-ALL-VARS ONE-TYPE-ALL-VARS GROUNDP NON-LINEAR-VARS SUBS-ARE-PRIMITIVE PRIMITIVE-SUBST IS-LIMITED RENAME-VAR1 SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM OCCURS-IN IS-SUBTERM IS-SUBT NEWVARSIN RPL-BY-TERMS2 RPLAT-IN-BY RPLNTHSUBT-IN-BY SUBTAT FREE-VARS IS-GROUND EXPECTED EXPECTING-PREDICATES EXPECTING-FUNCTIONS QUASI-REMOVER NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT SUB-QUASI-REDUCIBLE QUASI-CHECK MAKE-TUPLES BASE-DEPTH TOP-TERM NEW-TOP-TERMS NEW-ARGS ADD-ONE-DEPTH GET-TESTSET-QUASI BASIC-TERM GET-BASIC-TYPE-TERMS PARTITION-OPS-BY-TYPE PARTITION-TERM-BY-TYPE RULE-DESTROYABLE DESTROYABLE TRACE-ADD-TESTSET TRACE-TESTSET GET-DOWN GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE EXTEND-DOM-ARGS DEF-DOMAIN-POINTS DEFINING-DOMAIN GET-DEFINING-DOMAINS EXTEND-SCHEMES GET-TESTSET2 FLATTEN-TESTSET CONSTRUCTORS-CHECK TEST-ONE-OP COMPLETE-TEST APPLY-TO2 COMPOSE2 RESOLVE COMP1 NORM-SUB COMPOSE1 COMPOSE SIZE-UNI STR-FORMULATE-SCHEME STR-CHOOSE-ONE-SCHEME REMOVE-SUBSUMED-PATTERNS MERGE-TWO-TUPLES FIND-MERGE-SIGMA MERGE-TWO-PATTERNS ADD-PATTERNS REM-DUP-VARS REMOVE-DUP-VARS HAS-NONLINEAR-VARS ONE-PATTERN COMPATIBLE-PATTERNS FORM-PATTERNS-SINGLE MAKE-ONE-SCHEME MERGEBLE-TERMS CHOOSE-HIGHEST-TERM DECIDE-MERGE-CONJ MERGE-DUPLICATE PARTI-BY-VARS DEPENDED-OP OPS-OF-RULE ADD-OLD-VARS MAX-DEPEND-GAP DEFINING-POSITIONS SET-DEPEND-SCORES COMPATIBLE-PATTERN GET-RECURSIVE-RETURN-OP HAVE-MANY-RECURSIVE-EQNS GET-RECURSIVE-DEF-TERM ENCOURAGE PICK-MAX-SCORE-OP CHOOSE-LEAST-COVER CHOOSE-MAX-SCORE GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS HAVE-INDUCTIVE-VARS HAS-INDUCTIVE-VAR INDUCTIBLE INDUC-AC-SUBS INDUC-SUBS-TERM INDUC-SUBS-OF-EQN CHOOSE-BEST-SCHEMES ADD-DEFIN-DEPEND SUBS-OF-SAME-ROOT DECIDE-DEFIN-MODE IS-CROSS-OP SET-RIGHT-HYPO-ARGS COVER-SETS GET-COVER-SETS REFUTE-RULE-INSTANCES COLLECT-CDR-WITH-SAME-CAR REF-INSTANCE-SEEDS2 GET-INSTANCE-TERMS2 ELEMENT-COMBINATION REF-INSTANCE-SEEDS GET-INSTANCE-SEEDS NEGATE-EQN SEPARATED FAIL-END-INDUC PROVE SUBST-PREMISES REDUCE-ARGS-BY-PREMISES REDUCE-BY-PREMISES REDUCE-BY-PREMISES-AT-ROOT NORM-BY-PREMISES PRES-SIZE MORE-VARS-PREMISE SUPER-ITSELF-PRE GET-PRES-OPS NEGATE-PREMISES SEPARATE-XOR-ARGS MAKE-PRE-XOR-ARGS REMAKE-PREMISES MAKE-PRE-ASS NOFALSE-PREMISES PREMISES-ARE-TRUE REDUCE-REVERSE-PREMISES SIMPLIFY-PREMISES ADD-SIMPLIFY-OTHERS MAKE-BETTER-PRES FIRST-PROCESS-PREMISES ADD-SUGG1 REMOVE-SUGG SUGG-PREC TRY-SUGG-PREC PRINT-SUGG-INFO STATUS-CANDIDATES TRANS-STATUS REMOVE-EQ-OP OK-PREV-RULES UPDATE-BY-EQ EQUIV-OPS OPS-EQUIV-TO REDUCE-BY-HOMO-RULES REDUCE-MONO NORM-MULT-MONOS NORM-SIGN-CHANGED-MONOS NORM-POLY IS-HOMOGENEOUS-TERM REDUCE-BY-CHARACTER POLY-LRPO MOVE-MONOS MAKE-RULE-INSTANCES MOVE-LHS-ARGS ELES-MORE-THAN-1 NONLINEAR-VARS-UNDER-* POLY-SUPER-DISTRIBUTION COMPACT-LAST-ELEMENTS POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* FIRST-N-ELEMENTS REST-ELEMENTS POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS REDUCE-*-TERM REDUCE-+-TERM INSERT-SORT-ARG MERGE-SORT-ARGS M-+-P P-*-P P-*-M M-*-P SIMPLIFY-* SIMPLIFY-+ MAN-PICK-2ND-RULE CHOOSE-BY-HAND INTRO-RULE PICK-ONE-UNMARKED MANUAL-PICK IS-BIG-ENOUGH-RULE INDUC-PICK-UNMARK PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE DETACHMENT-SUPER BOTH-ADD-PREDICATE IDEM-SUPER-COMMU IDEM-SUPERPOSITION PRED-FUNC-SUP PRED-FUNC-SUPERPOSITION PRED-SUPER SHOW-MESSAGE HELP-FILE WRITE-SIGMA WRITE-DETAIL-RULE PRINT-HEAD PRINT-ATOMS WRITE-F-PREMISES WRITE-PREMISES WRITE-DISJUNCTIONS WRITE-TERM-SIMPLE WRITE-TERM-BOOL WRITE-ASSERTIONS LIST-ASSERTIONS WRITE-EQNS LIST-EQUATIONS WRITE-RULES LIST-RULES TOTAL-ORDER-RES TOTAL-ORDER-PC-RES ORDER-PC-SEQ COMP-TERMS SIZE-COMPARE MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ INSTANTIATE-LHS MAKE-CRIT-RULE SUPPORT-EQN AUTO-OPTIONS WARN-STAT ADD-EQU EXT-CONSTRUCTOR EXT-OPERATOR ADD-STATUS EXT-STATUS EXT-WEIGHT EXT-PRECEDENCE CLEAN-OPS DISPLAY-CONSTRUCTORS GET-FREE-CONSTRUCTORS NON-CONSTANTS GET-CONSTANTS SAME-ARITY EXIST-OP CLEAR-OPERATORS GENNEWSYM REDUCE-AND-TERM REDUCE-XOR-TERM NORM-AND-ARGS NORM-OR-ARGS NORM-XOR-TERM PURE-REWRITE-AT-ROOT PURE-MIXED-REDUCE PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-OUTRED1 OUTRED1 PURE-NORM-OUTERMOST NORM-OUTERMOST EACH POLISH-PREMISES PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE REDUCE-BY-RULES CYCLE-CHECK SIMPLIFY-MY-EQ-TERM TRY-ONE-EXTRA-VAR-RULE REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES REDUCE-AT-ROOT REWRITE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE ANS-MEMBER PICK-SMALL-GOAL MANUAL-GOAL PICK-GOAL MAKERULES LINEAR DEMULT-FORM MULT-FORM MULT-DIFF2 MULT-DIFF MULT-UNION MULT-SORT-MERGE MULT-MERGE MULT-SORT-INSERT MULT-INSERT IS-SUBLIST LIST-DIFF IS-SUBSET SET-DIFF2 SET-DIFF HAVE-COMMON COMMON-ELEMENTS ONE-PRESENTATIVE LONGEST-LIST GET-RULE LESS-VECTOR CON1-NUMS CON-NUMS NTIMES INSERT-LIST N-TUPLES REAL-COLLECT-PRODUCTS PROPER-PRODUCT-LISTS PRODUCT-LISTS GET-POSITION PICKOUT NON-DECREASING-SEQ IS-SUBSEQ-LIST IS-SUBSEQUENCE SPLIT-ALIST MATCH-PREMISES EQ-MATCH CTX-BAD-LUCK MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC IS-AN-INSTANCE MEMBER-TERM REM-ARGS OCCUR-NUM DIVIDED-BY INCREMENT-POS NEXT-CHOICE GET-INTERSECTION-RANGE VARS-ONLY PICK-AN-ARG MATCH-POSS AC-MATCH DECOMPOSE-TERMS OCCURS-IN-RULE CHECK-MISMATCH MAKE-RULE-SIZE-ORDER MAKE-RULE-FROM-ASS AUTO-OPERATOR GET-RULE-LEVEL BODY-PREMISES-SIZE MAKE-NEW-RULE CTX-DOMINANT-RULE IS-VALID-CONDI-RULE LEXICO-COMP RPOMULT EQUIV-LIST EQUIV PURE-LRPO CLEAN-RULE REDUCE-POST-ASS ADD-RULE-LINEAR REDUCE-OTHER-RULES ADD-RULE-COMPLETE PURE-ADD-RULE PROCESS-EQUATION PURE-KNUTH-BENDIX2 KNUTH-BENDIX2 KNUTH-BENDIX1 PRINT-CHOICE-MESSAGE CHOOSE-STR READ-ARGS SAVE-WORDS READ-ATOM GET-TERM-ARGS GET-VARLIST GET-TERM READ-OP-DECLARATION READ-EQNS READ-INPUT DISPLAY-OPS DISPLAY-OP-STATS DISABLE-RULES-AUX NAME-LAST-RULE ORDER-EQNS DELETE-EQN DELETE-RULE RRL START-UP INITIALIZE PRE-INIT AND-LHS-TRUE-RHS INDUC-SUBSUMED-BY SEE WRITE-SEQ-NUM HYPO-SUBSUME-EQN IS-PREVIOUS-INDUC-EQN IS-FAILED-INDUC-EQN CHANGE-VARS EQN-INSTANCE PREMISES-INSTANCES FORM-PREMISES-FROM-CONJ NORM-PROVE-ALL-EQNS PROVE-ALL-EQNS SPLIT-LHS-OR SPLIT-LHS-AND PROVE-SPLIT-BOOL GET-VAR-SUBSTITUTION RENAME-EQN-RULE RESTORE-PROPERTIES GET-ALL-PROPERTIES SAVE-RRL MY-COPYLIST UNDO1 START-HISTORY MERGE-LIST EQ-IN-MONOMIAL PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE IDEM-EQ-CRITICAL TR-TERM TR-CLOSURE TR-FIND EQ-FIND EQ-TR REDUCE-EQ-EXACTLY REDUCE-EQ-TERM USER-SELECTQ CYCLE-PAIRS SYMMETRY-TERMS SYMMETRY-VARS CYCLE-REDUCE-AT-ROOT-2 CYCLE-REWRITE-AT-ROOT CYCLE-OUT-RED CYCLE-REDUCE-TERM CYCLE-NORM-TERM CYCLE-REDUCE-OTHERS SAME-LIST LIST-PAIRS LOOK-AT-PAIR-AND LOOK-AT-PAIRS PICK-AC-PAIR ADD-PAIRS REMOVE-PAIRS-WITH PROCESS-AC-UNIFIER PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR AC-SUP-TERM SET-UNIFY PROCESS-NEW-AC-CP NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-SUP-TERM INDUC-SUPERPOSITION PURE-SUP-TERM SUP-TERM FUNC-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS PICK-OUT-RULE RULE-NUMS-FROM-SOURCE GET-ALL-RULE-NUMS TRACE-INCONSISTENCY CONSISTENT-PAIR HANDLE-FACTOR FACTORIZATION HIGH-OP-POSI RELATED-VARS2 RELATED-VARS TRACE-REMOVE-IRRELEVANT4 GOOD-UNIT-CLAUSE REMOVE-IRRELEVANT4 REMOVE-IRRELEVANT3 HANDLE-COMMU-HYPO TRACE-DROPPED-PREMISES REMOVE-IRRELEVANT2 DOWN-HILL-ONE OR-CONDI-EQN OPS-IN-PRES-OF-RULES PRE-BIGGER-THAN-EQN HEAD-LESS-PRE RESTORE-EQUATION BUILD-EQN-FROM-PRES BUILD-EQUATION-FROM-PREMS CHECK-HEAD-ROLE PICK-OUT-PREMISE SIMPLIFY-ALL-PREMISES RULE-SUBSUMED-PREMISES NO-SUBSUMPTION COVER-CONDI-NORM NORM-BUT-ROOT COVER-NORM-ORDER COMMUNE-TERMS2 COMMUNE-TERMS P-COMMUT-REDUCE-OTHERS IS-SORTED SORT-OP-ARGS REDUCE-BY-P-COMMUT AVOID-COMMON-TERM DIVISIBLE-CHECK ELIMINATE-SUB IS-FREE-TERM IS-ELIM-TERM ONE-ELIM-SUBTERM ELIMINABLE-TERMS REMOVE-VAR-PRES TRACE-BUILDING BUILDING CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT HAS-HINT-TERM HAVE-BOOLEAN-CONSTANT FIRST-SPEC-TERM FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHER-RULES ORDER-ONLY GET-SKO-FUNC HASQUANT SPECIAL-SUBST REMOVE-QUAN-ARGS SKOLEMIZE BREAK-AT-OR SUBSTVARFOR BREAK-ASS PROCESS-ASS INIT-BOOL-OPS EQ-TR-MEMBER SIMP-XOR-SIMP SIMP-XOR XOR-OF-MONOMIALS SIMP-AND-SIMP SIMP-AND AND-OF-MONOMIALS SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT M-XOR-P P-AND-P M-AND-P INSERT-AND-REMOVE-PAIRS MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS DECANON-XOR CANONICALIZE BA-SIMP-OR BA-SIMP-AND END-AUTO-ORDER NOT-AUTO-PREV-RULES AUTO-ADD-STATUS IS-BAD-SUGG POST-FOR-WHILE AUTO-ORIENT AUTO-KB DISPLAY-UNIFY IS-BLOCKED BLOCK-CHECK SET-UNIFICATION TWO-UNIFIER CONTINUE-MAPPING UNICOMPOUND ALL-PLAUS PLAUSIBLE RES1 ACUNI UNIFY-WITH-AC UNIFY FIND-OUT-BIG-EQ-SUBS ACO-EQUIV-LIST ACO-LRPO= ACO-LEXICO-COMP-RL ACO-LEXICO-COMP-LR ACO-RPOMULT>= ACO-RPOMULT> BIGT-TWO-KILL-ONE BIGT-ONE-KILL-ONE ACO-BIGT-PARTITION TWO-KILL-ONE ONE-KILL-ONE ACO-NOBIGT-PARTITION ACO-HARDER ACO-HARD> ACO-LPRO>= ACO-LRPO> AC-DISTRI PREC-CONSISTENT CARDINALITY SYMMETRY-NON-DELETABLE SYM-ARG-POSITIONS DIO2 DIO COMBINATE2 COMBINATE ADD-SOLN TAKE-OUT GET-SOLUTIONS SUMYMAX GET-LCM-SOLNS GENERAL-BASIS-VECTORS HALF-ONES FIND-BASIS-VECTORS CONDENSE-SEQUENCE LOOSE-SYM-SEQUENCE FULL-DIO DIO-INITIALIZE ALL-ONES WASH-DEF-RULES AC-MEMBER MULTI-COM ELIMCOM FLATTEN HAS-ACOP FLATTEN-POST-ASS FLATTEN-RULES2 FLATTEN-RULES MAKE-ASS-COM-OP FLAT-SORT-ARGS FLATTEN-PREMISES OP-POSITION PRE-SUB-NONVARS ABSTRACTION WRITE-COMMENT-PREMISES))
(setf (callers-list 'CTX-GT-LHS :callers) '(ORDER-CTX))
(setf (callers-list 'REDUCE-BY-ONE-AT-ROOT :callers) '(X_REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE))
(setf (callers-list 'TOKEN-TEXT :callers) '(EXPECTED TOKEN-EOLN NEXT-TOKEN GET-TERM-ARGS GET-VARLIST GET-RHS CONDI-FROM-CLAUSE GET-CLAUSE GET-EQUATION CLEAN-RIGHT-BRACKET READ-TYPE-RELATION READ-ARITY))
(setf (callers-list 'CADDAR :callers) '(SUPER-ITSELF-PRE ADD-SIMPLIFY-OTHERS MAKE-ONE-DOWN-HILL))
(setf (callers-list 'REDUCE-EQ-EXACTLY :callers) '(REDUCE-EQ-TERM))
(setf (callers-list 'EXT-EQUIVALENCE :callers) '(ASK-USER OPERATOR-OPTIONS))
(setf (callers-list 'TOKEN-PORT :callers) '(NEXT-TOKEN))
(setf (callers-list 'PURE-NORM-INN :callers) '(PURE-NORM))
(setf (callers-list 'CADR :callers) '(FORM-SUBGOALS-FROM-PATTERNS PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM X_AUGMENT REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE WELL-TYPED-EQN COMPLETE-WELL-TYPED WELL-TYPED2 FREE-VARS EXPECTED EXPECTING-PREDICATES EXPECTING-FUNCTIONS MERGE-TWO-PATTERNS OPS-OF-RULE INDUC-SUBS-OF-EQN NEGATE-EQN UNCONDI-PROVE IS-EQ-TRUE-PRE IS-EQ-FALSE-PRE SUPER-ITSELF-PRE PRE-OPS PRE-VARS NEGATE-ONE-PRE MAKE-PRE-EQN REVERSE-PREMISE ADD-PREMISE-END ADD-SIMPLIFY-OTHERS MAKE-BETTER-PRE NORM-ONE-PRE SIMPLIFY-ONE-PRE FIRST-CTX-TRANS IS-HOMOGENEOUS-TERM REDUCE-BY-CHARACTER IS-CHARACTER-RULE MOVE-MONOS MOVE-LHS-ARGS POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL DETACHMENT-RULE PRED-CRITICAL-PAIR IDEM-SUPER-COMMU PRED-SUPERPOSITION WRITE-ONE-PRE WRITE-TERM-BOOL WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE ORDER-ASS INSTANTIATE-LHS MANUAL-ORIENT ASK-USER TRY-TO-ORIENT ORIENT-RULE SIMPLIFY-COND-TERM REDUCE-COND-TERM PURE-REDUCE-BY-ONE-AT-ROOT ADD-TO-ARGS SIMPLIFY-MY-EQ-TERM LAST-CONSISTENCY-CHECK PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE NOT-IN-SET MATCH-PREMISE VARS-ONLY MATCH-POSS OCCURS-IN-RULE ADD-OPERATOR CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE FLATTEN-WITNESS CHECK-WITNESS ADD-RULE-LINEAR FIRST-PROCESS-EQN PROCESS-EQUATION READ-THIS-EQN TOKEN-EOLN NEXT-TOKEN GET-TERM-ARGS GET-VARLIST GET-RHS NEGATE-LITERAL CONDI-FROM-CLAUSE GET-CLAUSE GET-EQUATION CLEAN-RIGHT-BRACKET READ-TYPE-RELATION READ-ARITY R2E AND-LHS-TRUE-RHS SIMILAR-EQN APPLYSUBST-PRE APPLYSUBST-EQN NORMAL-PROVE PREMISE-INSTANCE SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE RENAME-PAIR-RULE RENAME-EQN-RULE INSERT IF* TRACE-PARA PARA-SUP-TERM2 PARAMODULATE IS-SYMMETRY-RULE CYCLE-REDUCE-AT-ROOT-2 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE MAKE-CYCLE-RULE IS-SYMMETRY-EQN IS-CYCLE-EQN LOOK-AT-PAIR-AND PAIR-INFO MAKE-PAIRS ACCEPTABLE-PAIR PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 PURE-SUPERPOSITION FUNC-SUPERPOSITION AC-CRITPAIRS INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK FACTORIBLE GOOD-UNIT-CLAUSE HANDLE-COMMU-HYPO MAKE-ONE-DOWN-HILL LRPO-PREMISES BIG-PRE-INFO HEAD-LESS-PRE EQN2PRE ADD-EXTRA-PREMISE PRE-CRIT-CHECKEQ COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE PRINT-NORMALIZED-EQN IS-COMMUT-PAIR REDUCE-BY-P-COMMUT MAKE-P-COMMUT-RULE IS-P-COMMUT-PAIR INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT NEW-RULE-FROM-ASSOC TRACE-DIVISIBLE REMOVE-LEFT-ARG2 LEFT-ARG2 REMOVE-RIGHT-ARG2 LEFT-ARG REMOVE-RIGHT-ARG DIVISIBLE-AC-CHECK IS-ELIM-TERM CHECK-BUILD-RULE HAVE-BOOLEAN-CONSTANT FIRST-SPEC-TERM FIND-SPECIAL-TERM INDUC-REDUCE-OTHERS-AUX SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS TRIVIAL-SIMPLIFY OR-COUNT EQN2ASSERTION DECANON-XOR DECANON-AND BA-SIMP-NOT BA-SIMPLIFY NEW-FIRST-TRANS ACUNI ACO-LPRO>= ACO-LRPO> ADD-SOLN ONE-COMPOSITION IS-ASSOC-PAIR FLATTEN-EQN FLATTEN-RULE EQN-SUB-NONVARS SUBST-EQN ABSTRACTION HANDLE-AND WRITE-COMMENT-EQN))
(setf (callers-list 'COVER-AUTO-LEVEL :callers) '(COVER-SET-INDUC-STRA))
(setf (callers-list 'ACO-DELETE-EQUIV :callers) '(ACO-HARDER ACO-HARD>))
(setf (callers-list 'LIST-RULES :callers) '(X_PREPARE_RULES DISPLAY))
(setf (callers-list 'FLOAT :callers) '(DISPLAY-KB-STAT NRM-TIME REPORT-CURRENT-TIME RRL-AUX))
(setf (callers-list 'OCCUR-NUM :callers) '(ELIM-BIN VARS-ONLY))
(setf (callers-list 'AND-LHS-TRUE-RHS :callers) '(PROCESS-EQUATION COVER-NORM-ORDER))
(setf (callers-list 'COVER-STRONG-INDUC-HYPO :callers) '(COVER-SET-INDUC-STRA))
(setf (callers-list 'IS-SUBSEQ-LIST :callers) '(ONE-COMPOSITION))
(setf (callers-list 'GET-DEFINING-DOMAINS :callers) '(IS-PARTIAL-OP START-TEST INDUC-PROVE))
(setf (callers-list 'CADDDR :callers) '(SIMPLIFY-ONE-PRE REDUCE-BY-CHARACTER ORIENT-RULE SIMPLIFY-COND-TERM REDUCE-COND-TERM LAST-CONSISTENCY-CHECK NORMAL-PROVE RENAME-PAIR-RULE AC-CRITPAIRS REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT ADD-SOLN))
(setf (callers-list 'IS-POLY :callers) '(NORM-CTX))
(setf (callers-list 'PRINT-CURRENT-PREMISES :callers) '(MAKE-ONE-BUILD COVER-CONDI-NORM))
(setf (callers-list 'REVERSE :callers) '(SUCC-END-INDUC INDUC-AC-SUBS WRITE-DETAIL-RULE SIZE-COMPARE DISPLAY-CONSTRUCTORS INSERT-LIST RPOST IF* PRINT-NORMALIZED-EQN COMMU-EXCHANGE COMMUE-EXCHANGE INDUC-ADD-RULE))
(setf (callers-list 'CHANGE-LHS-RHS-CTX :callers) '(FIRST-PROCESS-EQN))
(setf (callers-list 'EQUIV-OPS :callers) '(UPDATE-BY-EQ))
(setf (callers-list 'PARSE-LOOP-DO :callers) '(PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-INITIALLY PARSE-NO-BODY PARSE-LOOP1))
(setf (callers-list 'N-TUPLES :callers) '(QUASI-REDUCIBLE QUASI-EQUIVALENT MAKE-TUPLES NEW-ARGS))
(setf (callers-list 'DELETE-SYS :callers) '(RRL-AUX))
(setf (callers-list 'HELPER :callers) '(PARSE-LOOP-MAP PARSE-LOOP-MACRO LOOP-PARSE-ADDITIONAL-COLLECTIONS))
(setf (callers-list 'EQ-TR :callers) '(SIMP-AND-SIMP AND-OF-MONOMIALS))
(setf (callers-list 'ACO-RPOMULT>= :callers) '(ACO-LPRO>=))
(setf (callers-list 'IS-PROP-EQN :callers) '(NORMALIZE))
(setf (callers-list 'ALPHALESSP :callers) '(OPERATOR-ORDERING PSEUDO-TERM-ORDERING ORDER-VARS PC-GRT-PREC TOTAL-ORDER-ATOM COMPARE-SYMBOL INSERT))
(setf (callers-list 'RPOST :callers) '(PURE-LRPO))
(setf (callers-list 'SUPERTERM-COVER :callers) '(RULE-DESTROYABLE))
(setf (callers-list 'IF :callers) '(STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 SUCC-END-INDUC COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM COVER-SET-SCHEME INDUC-SUBGOAL-PROOFS ENTER-OP PARSE-LOOP-FOR LOOP-DECLARE-BINDING MAKE-VALUE DESETQ1 HAVE-MANY-RECURSIVE-EQNS GET-RECURSIVE-DEF-TERM FCLOAD CLOAD2 CLOAD BLOAD FLOAD FILE-DATE UNCONDI-PROVE SUBST-VAR-PREMISES NEGATE-ONE-PRE MAKE-PRE-ASS ADD-PREMISE-END ADD-SIMPLIFY-OTHERS MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE PRE-PROCESS-PREMISES FIRST-CTX-TRANS DEFAULT-PRECEDENCE NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR WRITE-F-PREMISES WRITE-F-EQN WRITEF-SYS ORIENT-RULE ORIENT-AN-EQN BRAKE-CHOICE FASTKB-CHOICES FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS REDUCE-AT-ROOT-BOOL NORM-EQ-ARGS NORM-BOOL-INNERMOST NORM-CTX SIMPLIFY-COND-TERM POLISH-PREMISES REDUCE-BY-ONE-AT-ROOT AC-COMPRESS ADD-REST-ARGS REDUCE-AT-ROOT-ONE-RULE NORMALIZE PROPER-PRODUCT-LISTS PRODUCT-LISTS MATCH-PREMISE MATCH-PREMISES OCCURS-IN-RULE INVALID-RULE CHECK-WITNESS FIRST-PROCESS-EQN IS-EMPTY-LINE GET-ATOM SKIP-EOLN READ-EQNS DISPLAY-KB-STAT ENABLE-RULE DISABLE-RULE NAME2RULENUM DELETE-SYS START-TIMER IS-PREVIOUS-INDUC-EQN APPLYSUBST-PRE PREMISE-INSTANCE SPLIT-RHS-OR INFILE UCONCAT IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS CONSISTENT-PAIR EQN2PRE MAKE-ONE-BUILD COVER-CONDI-NORM COVER-NORM-TERM COVER-NORM-UNCONDI-EQN PRINT-NORMALIZED-EQN HAS-HINT-TERM HAVE-BOOLEAN-CONSTANT FIND-SPECIAL-TERM QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN BA-SIMP-OR BA-SIMP-AND BA-SIMPLIFY FLATTEN-EQN FLATTEN-RULE SUBST-EQN WRITE-COMMENT-EQN))
(setf (callers-list 'PROPER-PRODUCT-LISTS :callers) '(PROPER-PRODUCT-LISTS))
(setf (callers-list 'LOOP-LET-BINDINGS :callers) '(SLOOP-SLOOP-MACRO PARSE-LOOP))
(setf (callers-list 'ORDER-PC :callers) '(SIZE-COMPARE))
(setf (callers-list 'COPY-LIST :callers) '(IN-ARRAY-SLOOP-FOR ADD-FROM-DATA))
(setf (callers-list 'REDUCE-AT-ROOT-ONE-RULE :callers) '(REDUCE-BY-ONE-AT-ROOT CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3))
(setf (callers-list 'TEST-RRL :callers) '(RRL-AUX))
(setf (callers-list 'PRINT-NODE :callers) '(SHOW-NODE WRITE-NODE LIST_NODE))
(setf (callers-list ':SLOOP-MACRO :callers) '(PARSE-NO-BODY))
(setf (callers-list 'FORM-PREMISES-FROM-CONJ :callers) '(FORM-SUBGOALS-FROM-PATTERNS))
(setf (callers-list 'GET-TESTSET-QUASI :callers) '(GET-TESTSET))
(setf (callers-list 'FIND-SPECIAL-TERM :callers) '(BUILD-PREMISES-FROM-BOOL-TERM BUILD-PREMISES-FROM-COND-TERM))
(setf (callers-list 'GET-ITEM :callers) '(GET-ITEM GET-TERM))
(setf (callers-list 'ADD-BIND-TO-SUB :callers) '(DECOMPOSE-TERMS))
(setf (callers-list 'IS-PREVIOUS-INDUC-EQN :callers) '(X_AUTO_INDUC))
(setf (callers-list 'REWRITE-AT-ROOT :callers) '(RWONCE-OUTERMOST REWONCE-AT-ROOT))
(setf (callers-list 'RULENO :callers) '(IS-CHARACTER-RULE MARK-SUPERPOSED NONDO-CRIT LAST-CHECK-2ND-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL PRED-CRITICAL-PAIR IDEM-SUPER-COMMU IDEM-SUPERPOSITION PRED-SUPERPOSITION WRITE-GOAL-RULE WRITE-RULE PURE-REDUCE-BY-ONE-AT-ROOT REDUCE-AT-ROOT-ONE-RULE TRY-ONE-RULE CLEAN-RULE REDUCE-OTHER-RULES PURE-ADD-RULE CYCLE-REDUCE-OTHERS PAIR-INFO MAKE-PAIRS TRACE-AC-SUPERPOSITION PROCESS-NEW-AC-CP AC-SUPERPOSITION INDUC-IDEM-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 PURE-SUPERPOSITION FUNC-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS TRACE-INCONSISTENCY ADD-EXTRA-PREMISE MAKE-P-COMMUT-RULE NEW-RULE-FROM-ASSOC INDUC-REDUCE-OTHERS-AUX INDUC-REDUCE-OTHER-RULES INDUC-ADD-RULE))
(setf (callers-list 'NTHELEM :callers) '(NEXT-CHOICE))
(setf (callers-list 'REDUCE-AT-ROOT :callers) '(SIMPLIFY-COND-TERM REDUCE-COND-TERM SIMPLIFY-MY-EQ-TERM))
(setf (callers-list 'LOOP-ADD-BINDING :callers) '(PARSE-LOOP-FOR LOOP-ADD-TEMPS PARSE-LOOP-COLLECT POINTER-FOR-COLLECT PARSE-LOOP-INITIALLY PARSE-LOOP-WITH))
(setf (callers-list 'ORDER-PC-RES :callers) '(ORDER-PC))
(setf (callers-list 'RULE-SOURCE :callers) '(POLY-SUPER-DISTRIBUTION DETACHMENT-SUPER IDEM-SUPER-COMMU WRITE-DETAIL-RULE WRITE-GOAL-RULE WRITE-RULE R2E ACCEPTABLE-PAIR AC-SUPERPOSITION PURE-SUPERPOSITION FUNC-SUPERPOSITION TRACE-INCONSISTENCY CONSISTENT-RULE CHECK-BUILD-RULE))
(setf (callers-list 'SHOW-MESSAGE :callers) '(RRL-AUX))
(setf (callers-list 'SAVE-WORDS :callers) '(TRY-SUGG-PREC))
(setf (callers-list 'MIN :callers) '(UNKNOWN-SIZE))
(setf (callers-list '1+ :callers) '(X_ADD-RULE3 DEPTH MAKE-NEW-VARIABLE SIZE POLY-SIZE DETACHMENT-CRITICAL PRED-CRITICAL-PAIR WRITE-VARIABLE LIST-ASSERTIONS CON1-NUMS ADD1-MODULO-N VARS-ONLY UNKNOWN-SIZE ADD-RULE3 GET-CLAUSE GET-EQUATION PUSH-HISTORY-MANUAL INSERT PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 POSTPONE-IT ONE-COMPOSITION GET-SOLUTIONS GENERAL-BASIS-VECTORS))
(setf (callers-list 'COMMON-ELEMENTS :callers) '(PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP))
(setf (callers-list 'RPLACD :callers) '(WELL-TYPED-VAR MARK-USED-PRE ADD-EQU INSERT ATTACH TR-ADD))
(setf (callers-list 'BY :callers) '(IN-ARRAY-SLOOP-FOR PARSE-LOOP-FOR))
(setf (callers-list 'PARSE-LOOP-MACRO :callers) '(PARSE-LOOP-FOR PARSE-NO-BODY))
(setf (callers-list 'RULE-NAME :callers) '(WRITE-DETAIL-RULE))
(setf (callers-list 'SUP-TERM2 :callers) '(SUP-TERM))
(setf (callers-list 'ADD-AT-END :callers) '(ADD-EQU))
(setf (callers-list 'TRACE-CRIT :callers) '(PRED-CRITICAL-PAIR PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR))
(setf (callers-list 'ADD-SUGG-TYPE :callers) '(READ-TYPE-RELATION))
(setf (callers-list 'ONE-EXTENSIBLE :callers) '(ONE-EXTENSIBLE-POINT))
(setf (callers-list 'UCONCAT :callers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 X_AUTO_INDUC DISPLAY-ONE-ARITY2 EXT-TYPE-RELATION EXPECT-ARITY21 EXPECT-ARITY12 ENSURE-PREDICATE INPUT-TYPE-CHECK EXPECTING-PREDICATES TRACE-TESTSET TEST-ONE-OP REFUTE-EQN CHOOSE-CONSTRUCTORS LAST-CHECK-2ND-RULE MAN-PICK-2ND-RULE CHOOSE-BY-HAND RULE-NAME WRITE-DETAIL-RULE PRINT-ATOMS WRITE-VARIABLE WRITE-ASSERTION WRITE-GOAL-EQN WRITE-EQN WRITE-GOAL-RULE WRITE-RULE OPEN-WRITE-FILE DISPLAY ORIENT-RULE POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA NORMALIZE-BOUND TIME-LIMIT-STRA POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE WARN-STAT TRY-MAKE-EQUI EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-OPERATOR EXT-PRECEDENCE NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL CYCLE-CHECK LINEAR INVALID-RULE OK-TO-CONTINUE READ-TYPE-RELATION OPEN-READ-FILE DISPLAY-OPS DISPLAY-KB-STAT GIVE-STAT TEST-RRL QUIT-RRL CLOSE-LOG WRITE-SEQ-NUM TRACE-HYPOTHESE UNDO PUSH-HISTORY TRACE-PARA PAIR-INFO TRACE-CRIT TRACE-AC-SUPERPOSITION TRACE-BUILDING INDUC-ADD-RULE MAKE-ASS-COM-OP SET-HANDLE-AND SET-ART-MODE))
(setf (callers-list 'IS-ASSERTION :callers) '(NEGATE-EQN WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN ASSERTION2EQUATION NORMALIZE WRITE-COMMENT-EQN))
(setf (callers-list 'AC-CRITPAIRS :callers) '(CRITPAIRS))
(setf (callers-list 'EQN-SOURCE :callers) '(ABSTRACT-PROOF X_AUGMENT X_HYPOTHESIS X_ONE_RULE WRITE-GOAL-EQN WRITE-EQN MANUAL-ORIENT MAKE-EQ MAKE-CRIT-RULE TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN LAST-CONSISTENCY-CHECK PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE MR ADD-OPERATOR INVALID-RULE IS-VALID-RULE FOUND-WITNESS FIRST-PROCESS-EQN APPLYSUBST-EQN NORMAL-PROVE SPLIT-RHS-OR SPLIT-RHS-AND MAKE-CYCLE-RULE PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK MAKE-ONE-DOWN-HILL JUSTIFY-EQN COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM MAKE-P-COMMUT-RULE INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN MAKE-ASS-COM-OP SUBST-EQN))
(setf (callers-list 'WRITE-EQNS :callers) '(WRITEF-SYS))
(setf (callers-list 'ELSE :callers) '(PARSE-LOOP-WHEN))
(setf (callers-list 'WRITE-VARIABLE :callers) '(STRUCTURE-INDUC-ON COVER-SET-SCHEME WRITE-SIGMA WRITE-DISJUNCTIONS WRITE-TERM-SIMPLE WRITE-TERM-BOOL))
(setf (callers-list 'NORMAL-FORM-SUB :callers) '(NONAC-UNIFY NORMAL-FORM-SUB))
(setf (callers-list 'BELOW :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'CLEAN-LINE :callers) '(HELP-FILE ASK-A-NUMBER ASK-A-CHOICE GET-ATOM))
(setf (callers-list 'GROUNDP :callers) '(IS-VALUE-TERM))
(setf (callers-list 'SLOOP::TYPE-ERROR :callers) '(GET-CODOMAIN-TYPES RPL-BY-TERMS2 TOP-TERM GET-SKELETON2 DECIDE-DEFIN-MODE REFUTE-RULE-INSTANCES POLY-SUPER-AT-*-0 POLY-SUPER-AT-* FIRST-N-ELEMENTS REST-ELEMENTS POLY-MATCH-FIND-REST-*-ARGS WRITE-DISJUNCTIONS LIST-ASSERTIONS CON1-NUMS CON-NUMS NTIMES IS-SUBSEQUENCE INCREMENT-POS SYM-ARG-POSITIONS DIO2 DIO COMBINATE2 COMBINATE ADD-SOLN GET-SOLUTIONS SUMYMAX GET-LCM-SOLNS GENERAL-BASIS-VECTORS ALL-ONES))
(setf (callers-list 'INDUC-SUBGOAL-PROOFS :callers) '(COVER-PROOF-PROCESS2))
(setf (callers-list 'READC :callers) '(TYI))
(setf (callers-list 'RETURN :callers) '(START-TEST MAP-FRINGE FIND-IN-ORDERED-LIST IN-ARRAY-SLOOP-FOR PARSE-LOOP-FOR LOOP-DECLARE-BINDING LOOP-ADD-BINDING PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-DO PARSE-NO-BODY PROVE WRITEF-SYS MANUAL-ORIENT ASK-USER BRAKE-CHOICE FASTKB-CHOICES FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS SUB-TEST NOT-IN-SET ASK-FOR-OPERATOR INVALID-RULE START-KB DELETE-SYS LISTARRAY CNTH IF*))
(setf (callers-list 'MULTIPLE-VALUE-SETQ :callers) '(DATE))
(setf (callers-list 'PARA-SUP-TERM2 :callers) '(PARA-SUP-TERM))
(setf (callers-list 'OP-OF :callers) '(SUCC-END-INDUC PROOF-BY-HINT-TERM X_AUTO_INDUC X_CLEAN-RULE X_ADD-RULE3 X_REDUCE-BY-ONE-RULE GET-TERM-TYPE COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2 TYPE-ALL-VARS ONE-TYPE-ALL-VARS LITERAL-NUM PSEUDO-TERM-ORDERING IS-LIMITED RENAME-VARS SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM IS-SUBTERM RPLAT-IN-BY RPLNTHSUBT-IN-BY FREE-VARS W-SIZE SIZE ALL-OPS CHECK-ARITY EXPECTING-PREDICATES EXPECTING-FUNCTIONS TOP-TERM RULE-DESTROYABLE DESTROYABLE GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN FORM-PATTERNS-SINGLE MAKE-ONE-SCHEME MERGEBLE-TERMS ENCOURAGE GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS INDUCTIBLE INDUC-SUBS-TERM SKOLEM-TERMS ALL-NONVARS REDUCE-BY-PREMISE-AT-ROOT IS-EQ-FALSE-PRE SUPER-ITSELF-PRE NEGATE-ONE-PRE MAKE-PRE-ASS ADD-PREMISE-END MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS PRE-PROCESS-PREMISES FIRST-CTX-TRANS NORM-POLY IS-HOMOGENEOUS-TERM POLY-SIZE IS-CHARACTER-RULE POLY-LRPO NONLINEAR-VARS-UNDER-* POLY-SUPER-DISTRIBUTION POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT *-CANONICALIZE +-CANONICALIZE POLY-SIMPLIFY IS-BIG-ENOUGH-RULE DETACHMENT-SUPER DETACHMENT-RULE IDEM-SUPERPOSITION PRED-SUPERPOSITION WRITE-DISJUNCTIONS WRITE-TERM-SIMPLE WRITE-TERM-BOOL TOTAL-ORDER-PC-RES ORDER-PC-RES COMPARE-TERM ORDER-ASS MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ INSTANTIATE-LHS MAKE-EQ PURE-ORIENT-AN-EQN ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL BOOL-REWRITE-AT-ROOT NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX PURE-REWRITE-AT-ROOT PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST OUTRED1 SIMPLIFY-COND-TERM REDUCE-COND-TERM NORM-RHS PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE ADD-REST-ARGS SIMPLIFY-MY-EQ-TERM REDUCE-AT-ROOT REWRITE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE EQ-MATCH MATCH-SET-AC ELIM-BIN VARS-ONLY MATCH-POSS DECOMPOSE-TERMS MAKE-RULE-FROM-ASS IS-VALID-RULE RPOST EQUIV PURE-LRPO ADD-RULE3 ADD-RULE-LINEAR NEGATE-LITERAL GET-CLAUSE GET-EQUATION ENABLE-RULE DISABLE-RULE AND-LHS-TRUE-RHS NORMAL-PROVE EQ-IN-MONOMIAL PARAMODULATE CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE CYCLE-REDUCE-TERM MAKE-CYCLE-RULE MAKE-PAIRS NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION INDUC-SUP-TERM SUP-TERM2 SUP-TERM CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-CHECK GOOD-UNIT-CLAUSE LRPO-PREMISES HEAD-LESS-PRE EQN2PRE MAKE-ONE-BUILD COVER-CONDI-NORM COVER-NORM-TERM COVER-NORM-UNCONDI-EQN COMMUNE-TERMS2 COMMUNE-TERMS IS-COMMUT-PAIR SORT-OP-ARGS REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT MAKE-P-COMMUT-RULE C-PERMUTATION INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT NEW-RULE-FROM-ASSOC REMOVE-LEFT-ARG2 LEFT-ARG2 REMOVE-RIGHT-ARG2 RIGHT-ARG2 DIVISIBLE-AC-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK ELIMINATE-SUB FREE-SUBTERMS IS-ELIM-TERM CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT FIRST-SPEC-TERM INDUC-REDUCE-OTHER-RULES INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN HASQUANT SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS REMOVE-QUAN-ARGS SKOLEMIZE NEGATE-PREDICATE TRIVIAL-SIMPLIFY OR-COUNT SUBSTVARFOR BREAK-ASS PROCESS-ASS EQN2ASSERTION SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT M-XOR-P M-XOR-M M-AND-P M-AND-M CANONICALIZE NOT-ARG FIRST-TRANS BA-SIMP-NOT BA-SIMPLIFY NEW-FIRST-TRANS PLAUSIBLE ACUNI UNIFY-WITH-AC FIND-OUT-BIG-EQ-SUBS ACO-LRPO= ACO-HARD> ACO-LPRO>= ACO-LRPO> AC-DISTRI IS-ASSOC-PAIR IS-ASSOC-UNDER-C MAKE-FLAT IS-HIGHER-TERM SUB-NONVARS2))
(setf (callers-list 'ATOM :callers) '(MAP-FRINGE MAKE-VALUE DESETQ TOTAL-ORDER-RES TOTAL-ORDER-PC-RES SUB-TEST INSERT CNTH ATTACH))
(setf (callers-list 'APPLY :callers) '(LITERAL-NUM DEPTH W-SIZE SIZE PARSE-LOOP-MAP PARSE-LOOP-MACRO AVERAGE PRES-SIZE POLY-SIZE MULT-LENGTH MAKE-RULE-SIZE-ORDER UCONCAT MAKE-CYCLE-RULE AUTO-KB))
(setf (callers-list 'REDUCE-BY-ONE-RULE :callers) '(CHECK-WITNESS))
(setf (callers-list 'GET-RULE-LEVEL :callers) '(UNKNOWN-SIZE))
(setf (callers-list 'TEST-ONE-OP :callers) '(IS-PARTIAL-OP))
(setf (callers-list 'ADD-SOLN :callers) '(ONE-COMPOSITION))
(setf (callers-list 'FREE-SUBTERMS :callers) '(FREE-SUBTERMS CHECK-BUILD-RULE))
(setf (callers-list 'PRE-BIGGER-THAN-EQN :callers) '(HEAD-LESS-THAN-PRES))
(setf (callers-list 'ALL-OPS :callers) '(ALL-OPS OP-LIST OPS-OF-RULE PRE-OPS SYMMETRY-VARS IS-CYCLE-EQN IS-P-COMMUT-PAIR HAS-ACOP IS-ASSOC-PAIR))
(setf (callers-list 'COMPARE-TERM :callers) '(COMPARE-TERM-RESULT))
(setf (callers-list 'ARRAY-DIMENSIONS :callers) '(LISTARRAY FILLARRAY))
(setf (callers-list 'NODE-CHDLST :callers) '(SEARCH_BY_EQN SEARCH_BY_ID ADD_CHILD CURSOR_DOWN BREADTH-SEARCH CUTTREE SHOW-TREE X_INITIAL COVER-INDUC-PROVE))
(setf (callers-list '*-CANONICALIZE :callers) '(M-*-P M-*-M))
(setf (callers-list 'TRUEP :callers) '(PSEUDO-TERM-ORDERING DESTROYABLE NEGATE-EQN NEGATE-ONE-PRE ONE-PREMISE-IS-TRUE ADD-PREMISE-END MAKE-BETTER-PRE NORM-ONE-PRE FIRST-VAR-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS DETACHMENT-SUPER DETACHMENT-CRITICAL WRITE-F-RHS WRITE-RHS WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN COMPARE-TERM SIZE-COMPARE ORDER-ASS MAKE-EQ NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX SIMPLIFY-COND-TERM REDUCE-COND-TERM SIMPLIFY-MY-EQ-TERM CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE MATCH-PREMISE PROCESS-EQUATION AND-LHS-TRUE-RHS NORMAL-PROVE INDUC-IDEM-SUPERPOSITION CONSISTENT-CHECK-QUASI CONSISTENT-PAIR CONSISTENT-CHECK EQN2PRE ADD-EXTRA-PREMISE COVER-NORM-TERM COVER-NORM-UNCONDI-EQN FIRST-BOOLEAN-CONSTANT TRIVIAL-SIMPLIFY M-AND-P M-AND-M WRITE-COMMENT-RHS WRITE-COMMENT-EQN))
(setf (callers-list 'ACO-RPOSTATUS>= :callers) '(ACO-LPRO>=))
(setf (callers-list 'GET :callers) '(DISPLAY-ONE-ARITY2 GET-CODOMAIN-TYPES GET-DOMAIN-TYPE WELL-TYPED3 EXPECT-ARITY EXPECT-ARITY12 SET-UP-ARITY2 CHECK-ARITY ENSURE-PREDICATE IN-FRINGE-SLOOP-MAP COLLATE-SLOOP-COLLECT FIRST-USE-SLOOP-FOR IN-CAREFULLY-SLOOP-FOR SLOOP-SLOOP-MACRO =-SLOOP-FOR IN-ARRAY-SLOOP-FOR IN-PACKAGE-SLOOP-MAP IN-TABLE-SLOOP-MAP RETURN-SLOOP-MACRO REPEAT-SLOOP-MACRO AVERAGING-SLOOP-MACRO NEVER-SLOOP-COLLECT ALWAYS-SLOOP-COLLECT THEREIS-SLOOP-COLLECT COUNT-SLOOP-COLLECT MINIMIZE-SLOOP-COLLECT MAXIMIZE-SLOOP-COLLECT LOGXOR-SLOOP-COLLECT SUM-SLOOP-COLLECT PARSE-LOOP-MAP PARSE-LOOP-MACRO LOOP-PARSE-ADDITIONAL-COLLECTIONS MAKE-EQ-PRE MAKE-BETTER-PRE TRANS-STATUS DEFAULT-PRECEDENCE POLY-INITIALIZE PRED-SUPERPOSITION WRITE-TERM-SIMPLE ORDER-PC-RES WARN-STAT TRY-MAKE-EQUI EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-CONSTRUCTOR EXT-STATUS GET-ARITY NORM-BOOL-INNERMOST NORM-CTX NORMALIZE LINEAR ASK-FOR-OPERATOR RPOST EQUIV PURE-LRPO ALLSYM NEWSYM INITSYM TR-TERM INSTANCE-DELETE-CONDITION SUP-TERM SUPERPOSITION AC-CRITPAIRS EQN2PRE COVER-NORM-TERM NEW-RULE-FROM-ASSOC REMOVE-LEFT-ARG LEFT-ARG REMOVE-RIGHT-ARG RIGHT-ARG DIVISIBLE-NONAC-CHECK FIRST-BOOLEAN-CONSTANT GET-SKO-FUNC SUBSTVARFOR INIT-BOOL-OPS AUTO-ADD-STATUS AUTO-MAKE-EQUI ACO-LRPO= ACO-LPRO>= ACO-LRPO> MAKE-ASS-COM-OP))
(setf (callers-list 'ERROR :callers) '(FIRST-USE-SLOOP-FOR DEF-LOOP-INTERNAL PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-FOR LOOP-DECLARE-BINDING MAKE-VALUE TYPE-ERROR PARSE-LOOP-COLLECT PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-DO PARSE-LOOP-WITH LOOP-UN-POP DESETQ1 LISTARRAY FILLARRAY INSERT IF*))
(setf (callers-list 'COVER-NORM-UNCONDI-EQN :callers) '(COVER-UNCONDI-NORM))
(setf (callers-list 'TIME-LIMIT-STRA :callers) '(BRAKE-CHOICE))
(setf (callers-list 'RPL-BY-TERMS :callers) '(GET-DOWN))
(setf (callers-list 'X_INITIAL :callers) '(COVER-INDUC-PROVE))
(setf (callers-list 'WRITE-SEQ-NUM :callers) '(STRUCTURE-INDUC-ON COVER-SET-SCHEME WRITE-SEQ-EQN TRACE-SUCC-PROVE))
(setf (callers-list 'NORM-CTX :callers) '(ONE-PREMISE-IS-TRUE MAKE-EQ NORM-CTX-AND NORM-CTX NORM-RHS SIMPLIFY-MY-EQ-TERM CHECKEQ-NORMAL PROCESS-ASS-SIMPLE HANDLE-AND))
(setf (callers-list 'CASEQ :callers) '(LITERAL-NUM POLY-SIZE NONLINEAR-VARS-UNDER-* POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT POLY-SIMPLIFY INTRO-RULE PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE WRITE-DETAIL-RULE WRITE-TERM-BOOL WRITEF-SYS ORDER-CTX TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE BRAKE-CHOICE FASTKB-CHOICES FOPC-STRA PROOF-METHODS COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS MATCH-SET-AC UNKNOWN-SIZE SPECIAL-SIZE INVALID-RULE RPOST GET-ATOM NEXT-TOKEN GET-ITEM GET-LOW-OPS GET-TERM GET-RHS CONDI-FROM-CLAUSE GET-CLAUSE GET-EQUATION GIVE-STAT DELETE-SYS TRACE-CRIT ACCEPTABLE-PAIR PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR TRACE-AC-SUPERPOSITION RULE-NUMS-FROM-SOURCE CONSISTENT-RULE BIG-PRE-INFO NEW-RULE-FROM-ASSOC SKOLEMIZE NEGATE-PREDICATE TRIVIAL-SIMPLIFY PROCESS-ASS EQN2ASSERTION SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT DECANON-XOR DECANON-AND FIRST-TRANS ACUNI))
(setf (callers-list 'GENNEWSYM :callers) '(GET-SKO-FUNC SUBSTVARFOR))
(setf (callers-list 'REPORT-CURRENT-TIME :callers) '(RRL-AUX))
(setf (callers-list 'POLY-INITIALIZE :callers) '(POLY-CHOICE))
(setf (callers-list 'CONSISTENT-CHECK :callers) '(ORIENT-AN-EQN))
(setf (callers-list 'SHOW-TREE-INFO :callers) '(LIST_TREE))
(setf (callers-list 'SYMEVAL :callers) '(PSEUDO-TERM-ORDERING ORDER-VARS PC-GRT-PREC TOTAL-ORDER-ATOM COMPARE-SYMBOL))
(setf (callers-list 'FLATTEN-EQN :callers) '(PROOF-UNDER-NEW-PREMISES X_AUGMENT X_HYPOTHESIS X_ONE_RULE FLATTEN-WITNESS READ-THIS-EQN APPLYSUBST-EQN SUP-TERM2 COVER-NORMAL-PROOF FLATTEN-RULES))
(setf (callers-list 'PUSH :callers) '(ORIENT-INDUC-HYPO STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES INDUC-SUBGOAL-PROOFS X_AUTO_INDUC X_ADD-RULE3 WELL-TYPED-VAR ENTER-OP IN-ARRAY-SLOOP-FOR PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-FOR LOOP-ADD-BINDING POINTER-FOR-COLLECT PARSE-LOOP-DO PARSE-LOOP1 PARSE-LOOP LOOP-UN-POP LCASE REFUTE-EQN ADD-PREMISE-END POLY-ADD-HOMO-RULES POLY-INITIALIZE IS-CHARACTER-RULE MARK-SUPERPOSED WRITE-VARIABLE ORDER-ASS MANUAL-ORIENT ASK-USER ORIENT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN ADD-EQU EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-DIVISIBLE EXT-CONSTRUCTOR PURE-REDUCE-BY-ONE-AT-ROOT REDUCE-AT-ROOT-ONE-RULE TRY-ONE-RULE INS-LIS ASK-FOR-OPERATOR ADD-OPERATOR IS-VALID-RULE CLEAN-RULE ADD-RULE3 ENABLE-RULE TEST-RRL PUSH-HISTORY LISTARRAY ALLSYM IF* MAKE-CYCLE-RULE MAKE-PAIRS PURE-SUP-TERM SUP-TERM ADD-EXTRA-PREMISE MAKE-P-COMMUT-RULE INDUC-REDUCE-OTHERS-AUX INDUC-ORIENT-AN-EQN SKOLEMIZE-AWAY-QUANTS CAN-HAVE-NEW-OP ACUNI MAKE-ASS-COM-OP))
(setf (callers-list 'RUN-KB-OPTIONS :callers) '(RRL-AUX))
(setf (callers-list 'OK-TO-CONTINUE :callers) '(IS-PARTIAL-OP CHOOSE-CONSTRUCTORS PROVE OPEN-WRITE-FILE ASK-USER EXT-TRANSITIVE EXT-DIVISIBLE EXT-CONSTRUCTOR PICK-STRATEGY LINEAR RUNTIME-MAX-WARNING ADD-RULE3 RRL-AUX LOAD-RRL QUERY-ADD-EQN))
(setf (callers-list 'SYMBOL-VALUE :callers) '(PSEUDO-TERM-ORDERING ORDER-VARS PC-GRT-PREC TOTAL-ORDER-ATOM COMPARE-SYMBOL))
(setf (callers-list 'TRACE-AC-SUPERPOSITION :callers) '(AC-SUPERPOSITION))
(setf (callers-list 'SIMP-AND :callers) '(NORM-CTX-AND SIMPLIFY))
(setf (callers-list 'EQUAL :callers) '(SEARCH_BY_EQN SEARCH_BY_ID ADD_CHILD BREADTH-SEARCH SHOW-TREE STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 X_READ_TERM REDUCTION-PROOF FORM-SUBGOALS-FROM-PATTERNS COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM COVER-INDUC-PROVE ABSTRACT-PROOF INDUC-SUBGOAL-PROOFS HEAD_OF_FAILURE_HANDLER CHECK_AND_ADD X_AUTO_INDUC X_AUGMENT X_PREPARE_RULES X_CLEAN-RULE X_REDUCE-BY-ONE-RULE REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE X_INDUC WELL-TYPED-EQN TYPE-VAR-LIST ONE-TYPE-VAR-LIST GROUNDP PSEUDO-TERM-ORDERING IS-LIMITED IS-SUBTERM IS-SUBT VAR-LIST OP-LIST SET-UP-ARITY2 CHECK-ARITY ENSURE-PREDICATE DESTROYABLE GET-DOWN DEF-DOMAIN-POINTS GET-DEFINING-DOMAINS GET-TESTSET EMPTY-SUB L-EQUAL REMOVE-DUP-VARS MAKE-ONE-SCHEME MERGEBLE-TERMS DECIDE-MERGE-CONJ OPS-OF-RULE INDUC-SUBS-OF-EQN ADD-DEFIN-DEPEND NEGATE-EQN REFUTE-EQN PROVE REDUCE-BY-PREMISE-AT-ROOT PRE-OPS PRE-VARS NEGATE-ONE-PRE MAKE-PRE-EQN ONE-PREMISE-IS-TRUE ADD-PREMISE-END MAKE-BETTER-PRE NORM-ONE-PRE FIRST-VAR-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS IS-REL-PREC DEFAULT-PRECEDENCE POLY-INITIALIZE IS-CHARACTER-RULE POLY-SUPER-AT-*-1 POLY-MATCH-+ POLY-REDUCE-AT-ROOT-ONE-RULE M-+-P M-+-M P-*-M M-*-P M-*-M MARK-SUPERPOSED PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL DETACHMENT-RULE IDEM-SUPER-COMMU PRED-FUNC-SUPERPOSITION PRED-SUPERPOSITION WRITE-DETAIL-RULE WRITE-ONE-PRE WRITE-F-PREMISES WRITE-VARIABLE WRITE-F-RHS WRITE-RHS WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE TOTAL-ORDER-PC-RES ORDER-PC-RES COMPARE-TERM SIZE-COMPARE ORDER-ASS MAKE-EQ COMP-EQN COMP-RULE MAKE-CRIT-RULE ASK-USER TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE ORIENT-AN-EQN ADD-EQU EXT-DIVISIBLE IS-CONSTANT-OP REDUCE-AT-ROOT-BOOL NORM-EQ-ARGS NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX SIMPLIFY-COND-TERM REDUCE-COND-TERM REDUCE-BY-ONE-AT-ROOT SIMPLIFY-MY-EQ-TERM TRY-ONE-EXTRA-VAR-RULE TRY-ONE-RULE PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE SUB-TEST NOT-IN-SET GOAL-RULE-SIZE LINEAR INSERT-LIST SUB1-MODULO-N ADD1-MODULO-N N-TUPLES INS-LIS ADD-AT-END MATCH-PREMISE MATCH-BOOL-NEW MATCH-SET-AC ELIM-BIN DECOMPOSE-TERMS OCCURS-IN-RULE MAKE-RULE-FROM-ASS ASK-FOR-OPERATOR ADD-OPERATOR CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE EQUIV FLATTEN-WITNESS CLEAN-RULE RUNTIME-MAX-WARNING ADD-RULE-COMPLETE ADD-RULE FIRST-PROCESS-EQN PROCESS-EQUATION TOKEN-EOLN NEXT-TOKEN READ-T-TERM GET-TERM-ARGS NEGATE-LITERAL GET-CLAUSE DISABLE-RULE RRL-AUX R2E AND-LHS-TRUE-RHS IS-PREVIOUS-INDUC-EQN APPLYSUBST-EQN NORMAL-PROVE SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE GET-VAR-SUBSTITUTION RENAME-EQN-RULE UNDO1 INSERT CASEQ PARA-SUP-TERM2 TR-TERM TR-ADD EQ-ADD SYMMETRY-TERMS IS-SYMMETRY-RULE CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE IS-SYMMETRY-EQN IS-CYCLE-EQN UNIT-RULE MAKE-PAIRS ACCEPTABLE-PAIR AC-SUP-TERM SET-UNIFY NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION SUP-TERM2 PURE-SUP-TERM SUP-TERM PURE-SUPERPOSITION FUNC-SUPERPOSITION SUPERPOSITION AC-CRITPAIRS CRITPAIRS TRACE-INCONSISTENCY INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-CHECK FACTORIBLE REMOVE-IRRELEVANT3 MAKE-ONE-DOWN-HILL OR-CONDI-EQN HEAD-LESS-THAN-PRES JUSTIFY-EQN EQN2PRE MAKE-ONE-BUILD ADD-EXTRA-PREMISE COVER-CONDI-NORM PRE-CRIT-CHECKEQ COVER-NORM-TERM COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE PRINT-NORMALIZED-EQN IS-P-COMMUT-PAIR NEW-RULE-FROM-ASSOC AVOIDABLE DIVISIBLE-AC-CHECK DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK ELIMINATE-SUB ELIMINABLE-TERMS REMOVE-VAR-PRES CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT HAVE-BOOLEAN-CONSTANT FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHERS-AUX QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE GET-SKO-FUNC NEGATE-XOR-ARGS TRIVIAL-SIMPLIFY OR-COUNT PROCESS-ASS-SIMPLE EQN2ASSERTION SIMP-AND-SIMP AND-OF-MONOMIALS BRT-IF M-AND-P M-AND-M OR-ARGS BA-SIMP-OR BA-SIMP-AND AUTO-ADD-STATUS AUTO-MAKE-EQUI AUTO-ORIENT PLAUSIBLE UNIFY-WITH-AC ACO-LRPO= ACLRPO FLATTEN-RULES MAKE-ASS-COM-OP IS-ASSOC-PAIR FLATTEN-EQN SUB-NONVARS EQN-SUB-NONVARS SUBST-EQN HANDLE-AND WRITE-COMMENT-RHS WRITE-COMMENT-EQN))
(setf (callers-list 'SIMPLIFY-MY-EQ-TERM :callers) '(NORM-BOOL-INNERMOST REWRITE-AT-ROOT))
(setf (callers-list '(FROM DOWNFROM) :callers) '(IN-ARRAY-SLOOP-FOR))
(setf (callers-list 'IS-HOMOGENEOUS-RULE :callers) '(POLY-SUPER-DISTRIBUTION ADD-RULE))
(setf (callers-list 'IS-FAILED-INDUC-EQN :callers) '(X_AUTO_INDUC))
(setf (callers-list 'NORMALIZE-BOUND :callers) '(BRAKE-CHOICE))
(setf (callers-list 'SORT-OP-ARGS :callers) '(REDUCE-BY-P-COMMUT2))
(setf (callers-list 'COMMUNE-TERMS :callers) '(IDEM-SUPER-COMMU PRED-FUNC-SUPERPOSITION AC-SUPERPOSITION INDUC-SUPERPOSITION FUNC-SUPERPOSITION))
(setf (callers-list 'REMAKE-PREMISES :callers) '(SUBST-EQN))
(setf (callers-list 'MANUAL-OPTIONS :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'FIRST-PROCESS-PREMISES :callers) '(X_ONE_RULE))
(setf (callers-list 'TOTAL-ORDER-ATOM :callers) '(TOTAL-ORDER-RES))
(setf (callers-list 'MERGE-SORT-ARGS :callers) '(M-*-M P-+-P))
(setf (callers-list 'CTX :callers) '(STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 FORM-SUBGOALS-FROM-PATTERNS COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM INDUC-SUBGOAL-PROOFS X_AUTO_INDUC X_AUGMENT REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE WELL-TYPED-EQN OPS-OF-RULE INDUC-SUBS-OF-EQN PROVE POLY-REDUCE-AT-ROOT-ONE-RULE DETACHMENT-SUPER DETACHMENT-RULE IDEM-SUPER-COMMU PRED-SUPERPOSITION WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE MAKE-EQ COMP-EQN COMP-RULE MAKE-CRIT-RULE ASK-USER ORIENT-RULE ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL REDUCE-BY-ONE-AT-ROOT TRY-ONE-EXTRA-VAR-RULE TRY-ONE-RULE OCCURS-IN-RULE ADD-OPERATOR CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE FIRST-PROCESS-EQN R2E AND-LHS-TRUE-RHS IS-PREVIOUS-INDUC-EQN APPLYSUBST-EQN SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE RENAME-EQN-RULE IS-CYCLE-EQN ACCEPTABLE-PAIR AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION SUP-TERM2 PURE-SUPERPOSITION FUNC-SUPERPOSITION INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK REMOVE-IRRELEVANT3 OR-CONDI-EQN HEAD-LESS-THAN-PRES ADD-EXTRA-PREMISE COVER-CONDI-NORM PRE-CRIT-CHECKEQ COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE PRINT-NORMALIZED-EQN NEW-RULE-FROM-ASSOC ELIMINABLE-TERMS REMOVE-VAR-PRES CHECK-BUILD-RULE HAVE-BOOLEAN-CONSTANT FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHERS-AUX QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE AUTO-ORIENT FLATTEN-EQN EQN-SUB-NONVARS SUBST-EQN WRITE-COMMENT-EQN))
(setf (callers-list 'PSEUDO-TERM-ORDERING :callers) '(MAKE-EQ-PRE MAKE-BETTER-PRE EQN2PRE COMPRESS-FLAT))
(setf (callers-list 'RESTORE-PROPERTIES :callers) '(LOAD-RRL))
(setf (callers-list 'REMOVE-EQ-OP :callers) '(SUGG-PREC))
(setf (callers-list 'CADDR :callers) '(STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 FORM-SUBGOALS-FROM-PATTERNS COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM INDUC-SUBGOAL-PROOFS X_AUTO_INDUC X_AUGMENT REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE WELL-TYPED-EQN FREE-VARS EXPECTING-PREDICATES EXPECTING-FUNCTIONS OPS-OF-RULE INDUC-SUBS-OF-EQN PROVE REVERSE-PREMISE MAKE-BETTER-PRE SIMPLIFY-ONE-PRE POLY-REDUCE-AT-ROOT-ONE-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL DETACHMENT-RULE IDEM-SUPER-COMMU PRED-SUPERPOSITION WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE ORDER-ASS MAKE-EQ COMP-EQN COMP-RULE MAKE-CRIT-RULE ASK-USER ORIENT-RULE ORIENT-AN-EQN REDUCE-AT-ROOT-BOOL SIMPLIFY-COND-TERM REDUCE-COND-TERM REDUCE-BY-ONE-AT-ROOT SIMPLIFY-MY-EQ-TERM TRY-ONE-EXTRA-VAR-RULE TRY-ONE-RULE LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL ASSERTION2EQUATION MATCH-POSS OCCURS-IN-RULE ADD-OPERATOR CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE FLATTEN-WITNESS FIRST-PROCESS-EQN NEXT-TOKEN GET-ITEM GET-TERM CLEAN-RIGHT-BRACKET R2E AND-LHS-TRUE-RHS IS-PREVIOUS-INDUC-EQN APPLYSUBST-EQN SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE RENAME-PAIR-RULE RENAME-EQN-RULE IS-CYCLE-EQN PAIR-INFO ACCEPTABLE-PAIR AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION SUP-TERM2 PURE-SUPERPOSITION FUNC-SUPERPOSITION SUPERPOSITION AC-CRITPAIRS INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK REMOVE-IRRELEVANT3 OR-CONDI-EQN HEAD-LESS-THAN-PRES ADD-EXTRA-PREMISE COVER-CONDI-NORM PRE-CRIT-CHECKEQ COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE PRINT-NORMALIZED-EQN IS-COMMUT-PAIR REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT NEW-RULE-FROM-ASSOC REMOVE-LEFT-ARG2 REMOVE-RIGHT-ARG2 RIGHT-ARG2 REMOVE-LEFT-ARG RIGHT-ARG ELIMINATE-SUB ELIMINABLE-TERMS REMOVE-VAR-PRES CHECK-BUILD-RULE HAVE-BOOLEAN-CONSTANT FIND-SPECIAL-TERM RELEASE-PREMISES INDUC-REDUCE-OTHERS-AUX QUERY-ADD-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN INDUC-ADD-RULE SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS TRIVIAL-SIMPLIFY OR-COUNT AUTO-ORIENT ADD-SOLN IS-ASSOC-PAIR FLATTEN-EQN EQN-SUB-NONVARS SUBST-EQN WRITE-COMMENT-EQN))
(setf (callers-list 'STRING-DOWNCASE :callers) '(OPEN-WRITE-FILE OPEN-READ-FILE))
(setf (callers-list 'FILE-DATE :callers) '(BIN-IS-CURRENT))
(setf (callers-list 'MAKE-TUPLES :callers) '(NAIL-QUASI-REDUCIBLE))
(setf (callers-list 'LOOP :callers) '(HANDLE-AND))
(setf (callers-list 'INVALID-INPUT-WARNING :callers) '(MANUAL-ORIENT ASK-USER ASK-A-NUMBER ASK-A-CHOICE))
(setf (callers-list 'LAMBDA :callers) '(UCONCAT SELECTQ CASEQ))
(setf (callers-list 'GET-ARITY2 :callers) '(DISPLAY-ONE-ARITY2 GET-CODOMAIN-TYPES GET-DOMAIN-TYPE WELL-TYPED3 EXPECT-ARITY EXPECT-ARITY12 SET-UP-ARITY2 EXT-CONSTRUCTOR))
(setf (callers-list '(UPFROM FROM) :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'COMMUNE-TERMS2 :callers) '(COMMUNE-TERMS2 COMMUNE-TERMS))
(setf (callers-list 'PROCESS-CRITPAIR :callers) '(DETACHMENT-CRITICAL PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION SUP-TERM2))
(setf (callers-list 'WELL-TYPED-EQN :callers) '(PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION SUP-TERM2))
(setf (callers-list 'WITH :callers) '(PARSE-LOOP-WITH PARSE-NO-BODY))
(setf (callers-list 'COVER-MULTI-TERM-INDUC :callers) '(COVER-SET-INDUC-STRA))
(setf (callers-list 'DELETE-RULE :callers) '(DELETE-SYS))
(setf (callers-list 'LUCID-RUNTIME-SUPPORT:BQ-CONS :callers) '(XIN-MENU SLOOP-SLOOP-MACRO PARSE-LOOP-WHEN PARSE-LOOP LCASE ACM-AC-ROOT MAKE-RULE-FROM-ASS TIMES LESSP GREATERP DIFF IF* SELECTQ CASEQ TRACE-PARA ASK-CHOICE ASK-NUMBER ADD-TIME USER-SELECTQ SKOLEMP REM-SKOLEM SET-SKOLEM PREDICATEP REM-PREDICATE SET-PREDICATE REM-ARITY2 GET-ARITY2 REM-ARITY SET-ARITY INFIXP REM-INFIX SET-INFIX TRACE-CRIT TRIVIAL-SIMPLIFY FIRST-TRANS NEW-FIRST-TRANS LOOP-RETURN WHEN-ART-WITH-INPUT-FROM-TERMINAL))
(setf (callers-list 'FLOAD :callers) '(LRRL))
(setf (callers-list 'OR :callers) '(REDUCTION-PROOF X_HYPOTHESIS X_ONE_RULE IS-EXIST-TYPE-NAME IS-SUBTYPE TYPE-COHERE GET-CODOMAIN-TYPES PSEUDO-TERM-ORDERING IS-SUBTERM NEWVARSIN RPL-BY-TERMS2 SIZE IS-VALID-OP TOP-TERM DESTROYABLE GET-SKELETON2 SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT TEST-ONE-OP APPLY-TO2 COMPOSE FIRST-USE-SLOOP-FOR IN-ARRAY-SLOOP-FOR DEF-LOOP-INTERNAL PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-FOR ADD-FROM-DATA LOOP-DECLARE-BINDING LOOP-ADD-BINDING MAKE-VALUE THE-TYPE POINTER-FOR-COLLECT PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-DO PARSE-LOOP-WITH PARSE-NO-BODY PARSE-LOOP LOOP-LET-BINDINGS LOOP-COLLECT-KEYWORD-P LCASE FORM-PATTERNS-SINGLE MERGEBLE-TERMS GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS INDUCTIBLE INDUC-AC-SUBS INDUC-SUBS-TERM DECIDE-DEFIN-MODE FILE-DATE REFUTE-RULE-INSTANCES NEGATE-EQN PROVE REDUCE-BY-PREMISE-AT-ROOT NEGATE-ONE-PRE ONE-PREMISE-IS-TRUE ADD-PREMISE-END MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE FIRST-VAR-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS IS-REL-PREC DEFAULT-PRECEDENCE IS-CHARACTER-RULE POLY-LRPO POLY-SUPER-DISTRIBUTION POLY-SUPER-AT-*-0 POLY-SUPER-AT-* FIRST-N-ELEMENTS REST-ELEMENTS POLY-MATCH-FIND-REST-*-ARGS REDUCE-*-TERM REDUCE-+-TERM P-+-P POLY-SIMPLIFY DETACHMENT-SUPER DETACHMENT-CRITICAL IDEM-SUPERPOSITION PRED-SUPERPOSITION WRITE-DISJUNCTIONS LIST-ASSERTIONS WRITE-F-RHS WRITE-RHS WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN OPEN-WRITE-FILE DISPLAY TOTAL-ORDER-PC-RES ORDER-PC-RES COMPARE-TERM SIZE-COMPARE ORDER-ASS MAKE-EQ ORIENT-RULE ORIENT-AN-EQN NORM-STRATEGY EXIST-OP REDUCE-AND-TERM REDUCE-XOR-TERM BOOL-REWRITE-AT-ROOT NORM-BOOL-INNERMOST NORM-CTX-AND NORM-CTX SIMPLIFY-COND-TERM REDUCE-COND-TERM REWONCE-AT-ROOT ADD-REST-ARGS SIMPLIFY-MY-EQ-TERM REDUCE-AT-ROOT LAST-CONSISTENCY-CHECK CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE CON1-NUMS CON-NUMS NTIMES IS-SUBSEQUENCE MATCH-PREMISE AC-C-ROOT MATCH-BOOL-NEW MATCH-SET INCREMENT-POS MATCH-POSS AC-MATCH APPLIES PURE-MATCH MATCH OCCURS-IN-RULE ASK-FOR-OPERATOR LRPO CHECK-WITNESS ADD-RULE-LINEAR REDUCE-OTHER-RULES PROCESS-EQUATION IS-PURE-INPUT KNUTH-BENDIX1 START-KB READ-THIS-EQN READ-ATOM NEGATE-LITERAL READ-ARITY OPEN-READ-FILE NAME2RULENUM ORDER-EQNS AND-LHS-TRUE-RHS APPLYSUBST-EQN NORMAL-PROVE PREMISE-INSTANCE LOAD-RRL START-HISTORY ALLSYM TYI TAB CNTH REDUCE-EQ-TERM IS-CYCLE-EQN UNIT-RULE MAKE-PAIRS ACCEPTABLE-PAIR INDUC-IDEM-SUPERPOSITION SUP-TERM2 SUPERPOSITION AC-CRITPAIRS PICK-OUT-RULE CONSISTENT-CHECK-QUASI CONSISTENT-PAIR CONSISTENT-CHECK IS-INCONSI-PAIR TRACE-DROPPED-PREMISES MAKE-ONE-DOWN-HILL HEAD-LESS-PRE EQN2PRE MAKE-ONE-BUILD ADD-EXTRA-PREMISE COVER-NORM-TERM COVER-NORM-UNCONDI-EQN PRINT-NORMALIZED-EQN DIVISIBLE-CHECK2 IS-ELIM-TERM ELIMINABLE-TERMS FIRST-BOOLEAN-CONSTANT HAVE-BOOLEAN-CONSTANT FIRST-SPEC-TERM FIND-SPECIAL-TERM TRIVIAL-SIMPLIFY SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT M-AND-P M-AND-M BA-SIMPLIFY POST-FOR-WHILE CAN-HAVE-NEW-OP AUTO-KB ACUNI UNIFY-WITH-AC UNIFIERS TWO-KILL-ONE AC-DISTRI SYM-ARG-POSITIONS DIO2 DIO COMBINATE2 COMBINATE ADD-SOLN GET-SOLUTIONS SUMYMAX GET-LCM-SOLNS GENERAL-BASIS-VECTORS ALL-ONES SUB-NONVARS2 HANDLE-AND WRITE-COMMENT-RHS WRITE-COMMENT-EQN))
(setf (callers-list 'UPDATE-BY-EQ :callers) '(ADD-SUGG ADD-EQU))
(setf (callers-list ':SLOOP-FOR :callers) '(PARSE-LOOP-FOR))
(setf (callers-list 'FUNC-SUPERPOSITION :callers) '(SUPERPOSITION))
(setf (callers-list 'SAME-ARITY :callers) '(AUTO-MAKE-EQUI))
(setf (callers-list 'OBJ-NAME :callers) '(FCLOAD CLOAD2 CLOAD BLOAD FLOAD BIN-IS-CURRENT))
(setf (callers-list 'CDDDR :callers) '(FORM-SUBGOALS-FROM-PATTERNS PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM X_ONE_RULE MAKE-PRE-ASS PRE-PROCESS-PREMISES CHOOSE-BY-HAND IDEM-SUPERPOSITION WRITE-DETAIL-RULE WRITE-DISJUNCTIONS MINI-EXPAND-EQ NORM-BOOL-INNERMOST ASSERTION2EQUATION ADD-OPERATOR FIRST-PROCESS-EQN APPLYSUBST-RULE PRINT-NORMALIZED-EQN COMMUNE-TERMS IS-COMMUT-PAIR FLATTEN-EQN))
(setf (callers-list 'MERGE-AND-REMOVE-DUPS :callers) '(M-AND-M))
(setf (callers-list 'PARSE-LOOP-FOR :callers) '(SLOOP-SLOOP-MACRO PARSE-LOOP1))
(setf (callers-list 'MAKE-TERM :callers) '(STRUCTURE-INDUC-ON COVER-SET-SCHEME RENAME-VARS RPLAT-IN-BY RPLNTHSUBT-IN-BY FIXUP-QUANTIFIED-FORMULA TOP-TERM BASIC-TERM GET-SKELETON2 DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN INDUC-AC-SUBS REDUCE-BY-PREMISE-AT-ROOT M-*-M P-+-P POLY-SIMPLIFY MAKE-EQ NORM-EQ-ARGS PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST AC-COMPRESS ADD-REST-ARGS SIMPLIFY-MY-EQ-TERM NEW-TERM IS-VALID-RULE GET-TERM-ARGS GET-ITEM MAKE-ONE-DOWN-HILL SORT-OP-ARGS C-PERMUTATION SPECIAL-SUBST REMOVE-QUAN-ARGS NEGATE-XOR-ARGS AND-OF-MONOMIALS SIMPLIFY-FLAT P-XOR-P M-XOR-M M-AND-M DECANON-XOR CANONICALIZE FIRST-TRANS BA-SIMPLIFY NEW-FIRST-TRANS ACO-BIGT-PARTITION COMPRESS-FLAT))
(setf (callers-list 'LOOP-PARSE-ADDITIONAL-COLLECTIONS :callers) '(PARSE-LOOP-COLLECT))
(setf (callers-list 'REDUCE-SYSTEM-STR :callers) '(RUN-KB-OPTIONS))
(setf (callers-list 'RHS :callers) '(FORM-SUBGOALS-FROM-PATTERNS PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM X_AUGMENT REDUCE-EQN-BY-ONE-RULE X_HYPOTHESIS X_ONE_RULE WELL-TYPED-EQN OPS-OF-RULE INDUC-SUBS-OF-EQN NEGATE-EQN UNCONDI-PROVE IS-CHARACTER-RULE MOVE-MONOS POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE DETACHMENT-SUPER DETACHMENT-CRITICAL PRED-CRITICAL-PAIR IDEM-SUPER-COMMU PRED-SUPERPOSITION WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE INSTANTIATE-LHS MANUAL-ORIENT ASK-USER TRY-TO-ORIENT ORIENT-RULE PURE-REDUCE-BY-ONE-AT-ROOT ADD-TO-ARGS LAST-CONSISTENCY-CHECK PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL NORMALIZE NOT-IN-SET OCCURS-IN-RULE ADD-OPERATOR CTX-DOMINANT-RULE INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE FLATTEN-WITNESS CHECK-WITNESS ADD-RULE-LINEAR FIRST-PROCESS-EQN PROCESS-EQUATION READ-THIS-EQN R2E AND-LHS-TRUE-RHS SIMILAR-EQN APPLYSUBST-EQN NORMAL-PROVE SPLIT-RHS-OR SPLIT-RHS-AND APPLYSUBST-RULE RENAME-EQN-RULE PARA-SUP-TERM2 PARAMODULATE IS-SYMMETRY-RULE MAKE-CYCLE-RULE IS-CYCLE-EQN MAKE-PAIRS PROCESS-NEW-AC-CP AC-SUPERPOSITION INSTANCE-DELETE-CONDITION INDUC-IDEM-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 PURE-SUPERPOSITION FUNC-SUPERPOSITION INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK HANDLE-COMMU-HYPO HEAD-LESS-PRE EQN2PRE ADD-EXTRA-PREMISE PRE-CRIT-CHECKEQ COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE PRINT-NORMALIZED-EQN MAKE-P-COMMUT-RULE NEW-RULE-FROM-ASSOC TRACE-DIVISIBLE CHECK-BUILD-RULE HAVE-BOOLEAN-CONSTANT FIND-SPECIAL-TERM INDUC-REDUCE-OTHERS-AUX EQN2ASSERTION FLATTEN-EQN FLATTEN-RULE EQN-SUB-NONVARS SUBST-EQN ABSTRACTION WRITE-COMMENT-EQN))
(setf (callers-list 'PP :callers) '(PP2))
(setf (callers-list 'NORM-RHS :callers) '(CHECKEQ-NORMAL))
(setf (callers-list 'R2E :callees) '(NTH RULE-SOURCE CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CADR RHS CAR LHS LIST MAKE-EQN))
(setf (callers-list 'MY-PROBEF :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MAKE-RULE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'EXT-WEIGHT :callees) '(MACROLET SLOOP READ-ARGS SETQ TERPRI PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'SET-NO-REDUCTION-MARK :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'DIVISIBLE-NONAC-CHECK :callees) '(DIVISIBLE-LEFT-CHECK DIVISIBLE-RIGHT-CHECK QUOTE GET NUMBERP GET-STATUS EQ CONSP NONVARP NOT REMOVE-RIGHT-ARG RIGHT-ARG LIST REMOVE-LEFT-ARG CAR OP-OF SETQ LEFT-ARG EQUAL AVOIDABLE AND COND IF*))
(setf (callers-list 'REPEAT-SLOOP-MACRO :callees) '(GET SETF QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM LET))
(setf (callers-list 'BRT :callees) '(- + SETQ SIMPLIFY SIMPLIFY-ALMOST-FLAT PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME COND IF*))
(setf (callers-list 'WAIT-RETURN :callees) '(PRINC QUOTE DISP_STRINGS TERPRI))
(setf (callers-list 'BIG-PRE-INFO :callees) '(CONS DEPTH CADR SIZE + CAR PRE-VARS LIST CASE CASEQ))
(setf (callers-list 'OR-ARGS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST BRT EQUAL AND NOT COND))
(setf (callers-list 'NEXT-CHOICE :callees) '(MACROLET SLOOP CONS CAR 1- NTH NTHELEM = LIST COND IF* INCREMENT-POS SETQ LENGTH LET))
(setf (callers-list 'EQUIV :callees) '(MACROLET LET SLOOP QUOTE GET NUMBERP GET-STATUS IF* CDR ARGS-OF LENGTH CAR OP-OF EQOPS AND EQUAL SYMBOLP VARIABLEP COND))
(setf (callers-list 'CHANGE-RHS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SPLIT-LHS-OR :callees) '(MACROLET CAR LHS ARGS-OF CDR LET SLOOP SETQ))
(setf (callers-list 'ASK-A-CHOICE :callees) '(CLEAN-LINE INVALID-INPUT-WARNING SAVE-WORD-END MEMQ QUOTE READ-ATOM DO PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'TIMES :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-CONS))
(setf (callers-list 'SET-SKOLEM :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CONSTANT? :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'FOPC-STRA :callees) '(RETURN NOT IF PRINC EQ PARAMOD-STR BOOL-MATCH-STR POST-ASS-LIST RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CASE CASEQ NUMBERP COND IF* READ-ATOM CHOOSE-STR QUOTE PRINT-HEAD PROGN SETQ DO TERPRI LET USER-SELECTQ))
(setf (callers-list 'GET-DEF-DOMAIN :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'VAR? :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NEXT-TOKEN :callees) '(IS-VALID-OP IS-VALID-VAR NUMBERP CASE CASEQ SETF CAR TOKEN-PORT GET-ATOM SETQ LET EQUAL NEQ PROG1 EXPECTED TOKEN-EOLN QUOTE CADR TOKEN-TEXT EQ CADDR TOKEN-TYPE MEMQ NOT AND COND IF*))
(setf (callers-list 'RELEASE-PREMISES :callees) '(MACROLET CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CDR SETQ LET SLOOP))
(setf (callers-list 'INDUC-ADD-RULE :callees) '(ADD-CONDI-DOMINATE-RULE ORDER-ONE-NORM-OTHERS WRITE-EQN RULENO FORMAT UCONCAT R2E MAKE-ONE-DOWN-HILL FUNCTION REMOVE REMOVE0 EQN2PRE NEGATE-ONE-PRE CONS WRITE-ONE-PRE WRITE-RULE PRINC TERPRI NCONS NCONC PUSH-END CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX CDR REVERSE LHS-VARS MORE-VARS-PREMISE SETQ IS-CONDI-DOMINATE-RULE NOT AND ADD-RULE-COMPLETE NTH NULL IS-REDUCTION COND IF*))
(setf (callers-list 'POSTPONE-OR-UNDO :callees) '(UNDO + CONS APPEND APPEND1 IF* PRINC TERPRI = QUOTE SETQ POSTPONE-IT COND))
(setf (callers-list 'REMOVE-IRRELEVANT4 :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'TRY-TO-ORIENT :callees) '(BREAK THROW *THROW ASK-USER CASE CASEQ WRITE-EQN PRINC TERPRI MAKE-CYCLE-RULE IS-CYCLE-EQN MAKE-P-COMMUT-RULE CADR RHS CAR LHS IS-P-COMMUT-PAIR LRPO NTH EQN-SOURCE MAKE-NEW-RULE > IF* SIZE SETQ EQUAL NOT NEQUAL AND MANUAL-ORIENT QUOTE EQ COND))
(setf (callers-list 'ORDER-ASS :callees) '(ADD-RULE - + MAKE-RULE-FROM-ASS PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME INSERT LUCID-RUNTIME-SUPPORT:BQ-LIST* PUSH DEPTH SETQ CADDR SECOND-ARG CADR FIRST-ARG LIST MAKE-EQN PROCESS-EQUATION WRITE-TERM PRINC TERPRI > IF* LENGTH = REFUTED-RESULT CAR OP-OF EQ SYMBOLP NOT AND FALSEP NULL QUOTE EQUAL OR TRUEP COND))
(setf (callers-list 'QUASI-REDUCIBLE :callees) '(MACROLET CAR LENGTH N-TUPLES LET SLOOP C-PERMUTATION TYPE-VAR-LIST SETQ NULL CONSP NONVARP COND IF*))
(setf (callers-list 'X_INDUC :callees) '(ENDP SETQ QUOTE EQUAL COND IF* COVER-PROOF-PROCESS2 SETF CLEAN-INDHYP))
(setf (callers-list 'GROUNDP :callees) '(MACROLET CDR ARGS-OF LET SLOOP EQUAL FUNCTION MEMBER MEMBER0 SYMBOLP VARIABLEP COND))
(setf (callers-list 'INPUT-CHECK :callees) '(CATCH *CATCH COND IF*))
(setf (callers-list 'COVER-UNCONDI-NORM :callees) '(NTH EQN-SOURCE LIST MAKE-EQN JUSTIFY-EQN CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX CADR RHS CAR LHS CONSISTENT-PAIR COND IF* WHEN COVER-NORM-UNCONDI-EQN SETQ))
(setf (callers-list 'MATCH-POSS :callees) '(MACROLET ARGS-OF LET SLOOP CADDR SECOND-ARG CADR FIRST-ARG MATCH-POSS OR QUOTE AND CDR LENGTH <= MEMQ AC-OP-P AC-ROOT CAR OP-OF EQ SAME-OP SYMBOLP VARIABLEP COND))
(setf (callers-list 'ADD-ASSOCIATE-LIST :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM LET))
(setf (callers-list 'PRIME-ACU-CHOICE :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'REDUCE-BY-ONE-RULE :callees) '(MACROLET CDR ARGS-OF LET SLOOP REDUCE-BY-ONE-AT-ROOT LHS CAR OP-OF EQ SAME-ROOT AND SYMBOLP VARIABLEP COND))
(setf (callers-list 'COVER-NORMALIZE :callees) '(COVER-UNCONDI-NORM COVER-CONDI-NORM CDDR RPLACA QUOTE CADDR EQN-CTX CTX CADR RHS CAR LHS EQUAL COND IF* SETQ))
(setf (callers-list 'TRACE-DROPPED-PREMISES :callees) '(MACROLET LET SLOOP WRITE-EQN PRINC TERPRI OR > AND WHEN))
(setf (callers-list 'SPLIT-RHS-OR :callees) '(BA-SIMP-NOT NTH EQN-SOURCE MAKE-PRE-ASS CONS APPEND APPEND1 CDDR RPLACA QUOTE COND IF* EQN-CTX CTX CAR LHS MAKE-EQN LIST EQUAL FUNCTION REMOVE REMOVE0 CADDR SECOND-ARG LENGTH = IF RHS CADR FIRST-ARG SETQ))
(setf (callers-list 'SYMMETRY-NON-DELETABLE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'BAD-TYPED :callees) '(THROW *THROW SYNERR TERPRI PRINC WRITE-TERM))
(setf (callers-list 'READ-OP-DECLARATION :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'GET-VARLIST :callees) '(MACROLET QUOTE LIST LET SLOOP NEXT-TOKEN CADR TOKEN-TEXT CHAR= COND IF*))
(setf (callers-list 'MINUS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'COMPARE-ITEM :callees) '(HALF-CANONICALIZE-AND-EXPAND-EQ COMP-TERMS))
(setf (callers-list 'COVER-NORM-ORDER :callees) '(MACROLET SPLIT-LHS-AND SLOOP AND-LHS-TRUE-RHS CAR NULL COND - + COVER-NORMALIZE PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME SETQ))
(setf (callers-list 'HELP-FILE :callees) '(MACROLET LET SLOOP CLEAN-LINE))
(setf (callers-list 'UNIFY-WITH-AC :callees) '(MACROLET ARGS-OF LET SLOOP CDR LENGTH = MAKE-FLAT ACUNI MEMQ AC-OP-P AC-ROOT CAR OP-OF NOT CONS QUOTE EQ AND NCONS EQUAL IF* OCCURS-IN SYMBOLP VARIABLEP NULL OR COND))
(setf (callers-list 'PRE-INIT :callees) '(MACROLET LET SLOOP BOUNDP COND IF* OUTFILE QUOTE SETQ))
(setf (callers-list 'CON-NUMS :callees) '(MACROLET + SLOOP::TYPE-ERROR QUOTE TYPEP OR LET SLOOP))
(setf (callers-list 'PROPER-PRODUCT-LISTS :callees) '(MACROLET SLOOP PROPER-PRODUCT-LISTS LET CAR NCONS MAPCAR CDR NULL IF))
(setf (callers-list 'END-AUTO-ORDER :callees) '(MACROLET LET SLOOP CONS RPLACA COND IF*))
(setf (callers-list 'MAKE-RRL-IMAGE :callees) '(QUOTE DISKSAVE))
(setf (callers-list 'TOKEN-EOLN :callees) '(NEXT-TOKEN QUOTE EQUAL NOT NEQ CADR TOKEN-TEXT DO))
(setf (callers-list 'MAKE-ONE-BUILD :callees) '(CDR BUILD-EQUATION-FROM-PREMS CAR OP-OF EQ SYMBOLP AND FALSEP PRINT-CURRENT-PREMISES IF SIMPLIFY-ALL-PREMISES CDDR EQN2ASSERTION PROCESS-PRE-ASS QUOTE FIRST REDUCIBLE NOT FUNCTION DELETE DELETE0 MAKE-ONE-DOWN-HILL EQUAL NULL OR COND IF*))
(setf (callers-list 'X_ONE_RULE :callees) '(MACROLET SLOOP OR CDDDR FIRST-PROCESS-PREMISES LIST* CHANGE-CTX WHEN FLATTEN-EQN APPEND READ-THIS-EQN NTH EQN-SOURCE CDDR RPLACA CADDR EQUAL IF* EQN-CTX CTX CADR RHS CAR LHS MAKE-NEW-RULE SETQ QUOTE EQ COND LIST SEARCH_BY_EQN SETF))
(setf (callers-list 'INSERT-TERM-AT-LEFT :callees) '(CADDR SECOND-ARG CADR FIRST-ARG INSERT-TERM-AT-LEFT LIST CAR OP-OF EQ CONSP NONVARP AND COND IF*))
(setf (callers-list 'IS-POLY :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ELIMINATE-SUB :callees) '(MACROLET LET SLOOP EQN2PRE NCONS LHS VAR-LIST OR-CONDI-EQN RPLACA QUOTE CADDR EQUAL EQN-CTX IS-CONDI-RULE SUBLIS CDDR EQ APPLYSUBST SECOND APPLIES CAR OP-OF ASSOC SETQ COND IF*))
(setf (callers-list 'GET-ATOM :callees) '(GET-ATOM2 CLEAN-LINE QUOTE PROGN EQ GET-ATOM READ-CHAR PEEK-CHAR CASE CASEQ SETQ NULL IF))
(setf (callers-list 'FIND-BASIS-VECTORS :callees) '(MACROLET LET SLOOP COND IF*))
(setf (callers-list 'REM-ARITY2 :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'HAS-NONLINEAR-VARS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ACO-RPOSTATUS> :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PURE-MATCH :callees) '(OR QUOTE DECOMPOSE-TERMS LET SETQ EQ COND IF*))
(setf (callers-list 'IN-CAREFULLY-SLOOP-FOR :callees) '(GET SETF LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM LET))
(setf (callers-list 'M-AND-P :callees) '(MACROLET NCONS IF* HALF-CANONICALIZE LENGTH LET SLOOP EQUAL OR TRUEP CAR OP-OF EQ SYMBOLP NOT AND FALSEP QUOTE NULL COND CDR ARGS-OF))
(setf (callers-list 'MANY-ARGS2 :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SUB-OR-EQ-TERM :callees) '(MACROLET CDR ARGS-OF LET SLOOP CAR OP-OF EQ SAME-OP SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'REDUCE-BY-PREMISES-AT-ROOT :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ADD1-MODULO-N :callees) '(1+ RPLACA CDR ADD1-MODULO-N CONS CAR EQUAL THROW *THROW NULL COND))
(setf (callers-list 'TRUEP :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PRINT-NORMALIZED-EQN :callees) '(CDDDR CADR RHS LHS LIST* CHANGE-CTX CDDR RPLACA QUOTE CADDR IF* EQN-CTX CTX IF WRITE-SEQ-EQN REVERSE DOLIST NOT PRINC CDR COND TERPRI CAR NULL OR > AND WHEN EQUAL FUNCTION REMOVE-DUPLICATES REM-DUPS SETQ))
(setf (callers-list 'EQ-JOIN :callees) '(CONS CDR UNION EQ-JOIN CAR HAVE-COMMON LIST NULL COND))
(setf (callers-list 'HYPO-SUBSUME-EQN :callees) '(MACROLET LET SLOOP CAR LHS APPLIES SETQ AND))
(setf (callers-list 'DELETE-SYS :callees) '(RETURN NOT IF PRINC EQ DELETE-RULE DISPLAY DELETE-EQN CASE CASEQ NUMBERP COND IF* READ-ATOM CHOOSE-STR QUOTE PRINT-HEAD PROGN SETQ DO TERPRI LET USER-SELECTQ))
(setf (callers-list 'DIVISIBLE-AC-CHECK :callees) '(CDR ARGS-OF AVOID-COMMON-TERM CAR OP-OF EQ SAME-OP CONSP NONVARP LIST CADR CDDR NULL REMOVE REMOVE0 SETQ EQUAL FUNCTION MEMBER MEMBER0 AVOIDABLE AND COND IF*))
(setf (callers-list 'BUILD-EQUATION-FROM-PREMS :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'ADD-RULE3 :callees) '(LIST PUSH NCONS NCONC LHS CAR OP-OF ASSQ LET ADD-ASSOCIATE-LIST 1+ RESET OK-TO-CONTINUE NOT UNDO SETQ PRINC TERPRI > COND IF*))
(setf (callers-list 'WRITE-COMMENT-RHS :callees) '(CDR WRITE-COMMENT-PREMISES CAR EQ AND IS-PREMISE-SET WRITE-DISJUNCTIONS PRINC NULL QUOTE EQUAL OR TRUEP COND IF*))
(setf (callers-list 'SIMP-XOR-SIMP :callees) '(MACROLET SLOOP POP TOTAL-ORDER SORT SETQ LET))
(setf (callers-list 'CTX-BAD-LUCK :callees) '(MACROLET LET SLOOP MEMQ AND))
(setf (callers-list 'BIGT-TWO-KILL-ONE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SUMYMAX :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE TYPEP OR LET SLOOP * SUB1 + AREF SETF ASET))
(setf (callers-list 'COMP-EQN :callees) '(CAR LHS SIZE < LESSP CDDR RPLACA QUOTE CADDR EQUAL IF* EQN-CTX CTX NULL NULL-CTX COND))
(setf (callers-list 'REVERSE-PREMISE :callees) '(CADR FIRST-ARG CONS CADDR SECOND-ARG SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'ADD-FROM-DATA :callees) '(SETF CAR AND NULL CDR DO QUOTE COPY-LIST SETQ OR))
(setf (callers-list 'INC :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CONDI-FROM-CLAUSE :callees) '(EXPECTED CONDI-FROM-CLAUSE LIST NEXT-TOKEN CADR TOKEN-TEXT CASE CASEQ QUOTE GET-TERM NEGATE-LITERAL SETQ))
(setf (callers-list 'IM-DEL-RULES :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'READ-THIS-EQN :callees) '(FLATTEN-EQN WRITE-F-EQN CDDR CAR LHS LIST* CHANGE-RHS CADR RHS NULL OR CATCH *CATCH QUOTE TOKEN-EOLN EQ NOT MAKE-BUFFER SETQ TERPRI PRINC FORMAT IS-EMPTY-LINE COND IF* LET))
(setf (callers-list 'REWRITE-ONCE-BY-HYPO :callees) '(MACROLET LET SLOOP WRITE-RULE PRINC TERPRI > WHEN NREVERSE SETQ COND IF* ORIENT-INDUC-HYPO SETF))
(setf (callers-list 'FLAT-SORT-ARGS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'EQ-IN-MONOMIAL :callees) '(MACROLET NCONS CDR ARGS-OF QUOTE CAR OP-OF EQ COND IF* HALF-CANONICALIZE LET SLOOP))
(setf (callers-list 'INSERT-TERM-AT-RIGHT :callees) '(CADDR SECOND-ARG INSERT-TERM-AT-RIGHT CADR FIRST-ARG LIST CAR OP-OF EQ CONSP NONVARP AND COND IF*))
(setf (callers-list 'MATCH :callees) '(OR QUOTE DECOMPOSE-TERMS LET SETQ EQ COND IF*))
(setf (callers-list 'SEARCH_BY_ID :callees) '(APPEND SEARCH_BY_ID NODE-CHDLST AND NODE-SEQNO EQUAL QUOTE SETF ENDP COND REST FIRST LET))
(setf (callers-list 'GET-SKELETON2 :callees) '(MACROLET SLOOP::TYPE-ERROR + TYPEP OR SLOOP > IF* LENGTH - LET CDR ARGS-OF GET-SKELETON2 MAPCAR NCONC CONS MAKE-TERM CAR OP-OF MEMQ SYMBOLP VARIABLEP QUOTE NEWSYM NULL COND))
(setf (callers-list 'PARTITION-TERM-BY-TYPE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ASET :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'BLOAD :callees) '(FORMAT IF COMPILE-FILE SOURCE-NAME LOAD OBJ-NAME PROBE-FILE COND))
(setf (callers-list 'POLY-MATCH-* :callees) '(POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS COND IF* POP CDR ARGS-OF LET))
(setf (callers-list 'APPLYSUBST-EQN :callees) '(FLATTEN-EQN OR NTH EQN-SOURCE LIST MAKE-EQN SETQ CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX CADR RHS SUBLIS CAR LHS EQ COND IF* APPLYSUBST LET))
(setf (callers-list 'ACTUAL-UNIFY-ACTION :callees) '(QUOTE))
(setf (callers-list 'AC-ROOT :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'TWO-UNIFIER :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'TR-TERM :callees) '(MACROLET LET SLOOP DELETE DELETE0 SETQ QUOTE GET EQUAL FUNCTION MEMBER MEMBER0 COND))
(setf (callers-list 'IN-FRINGE-SLOOP-MAP :callees) '(GET SETF LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'WRITE-F-RHS :callees) '(CDR WRITE-F-PREMISES CAR EQ AND IS-PREMISE-SET WRITE-TERM-SIMPLE PRINC NULL QUOTE EQUAL OR TRUEP COND IF*))
(setf (callers-list 'HAS-ACOP :callees) '(MACROLET ALL-OPS LET SLOOP))
(setf (callers-list 'PRE-PROCESS-PREMISES :callees) '(BRT BA-SIMPLIFY C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SYMBOLP VARIABLEP SUBLIS EQ APPLYSUBST LET FLAT-TERM SETQ ARGS-OF PRE-PROCESS-PREMISES MAPCAR CDR QUOTE CONS PRE-PROCESS-PRE-ASS CDDDR NULL IF CAR OP-OF CASE COND IF*))
(setf (callers-list 'UNDO1 :callees) '(MACROLET SLOOP R2E SETQ QUOTE EQUAL IF* POP CAR COND LET))
(setf (callers-list 'ASSERTIONP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NOT-ARG :callees) '(M-XOR-P CAR OP-OF EQ SYMBOLP NOT AND FALSEP QUOTE NULL NULL-CTX COND))
(setf (callers-list 'SHOW-TREE-INFO :callees) '(MACROLET SLOOP SETF))
(setf (callers-list 'IS-P-COMMUT-PAIR :callees) '(IS-COMMUT-PAIR EQUAL FUNCTION CDDR CADR REMOVE REMOVE0 NULL ALL-OPS SAME-LIST CAR MEMQ AC-OP-P AC-ROOT AND))
(setf (callers-list 'SET-UNIFICATION :callees) '(MACROLET SLOOP POP PROG))
(setf (callers-list 'START-HISTORY-MANUAL :callees) '(START-HISTORY = COND IF*))
(setf (callers-list 'ACM-POLY-* :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'QUASI-CHECK :callees) '(MACROLET SLOOP))
(setf (callers-list 'ASK-USER :callees) '(TRY-SUGG-PREC INVALID-INPUT-WARNING NUMBERP UNDO EXT-STATUS IS-SUBSET PUSH CADR RHS CAR LHS VAR-LIST ADD-OPERATOR MAKE-CRIT-RULE MAKE-EQ OK-TO-CONTINUE NOT PRINT-WARNING HELP-FILE REMOVE-SUGG TRY-TO-ORIENT2 PUSH-HISTORY-MANUAL EXT-EQUIVALENCE GO DISPLAY-OP-STATS READ-ATOM CHOOSE-STR CASE SELECTQ AUTO-ORIENT RETURN TERPRI PRINC CDDR QUOTE CADDR EQUAL EQN-CTX CTX PRINT-SUGG-INFO NCONS RPLACA OP-LIST SUGG-PREC POP AND COND IF* START-HISTORY-MANUAL PROG PROGN UNWIND-PROTECT SETQ ART? LET WHEN-ART-WITH-INPUT-FROM-TERMINAL NULL WHEN))
(setf (callers-list 'RESTORE-PROPERTIES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'COMPARE-TERM :callees) '(PC-GRT-PREC LRPO VAR-LIST IS-SUBSET OP-OF SAME-OP CDR ARGS-OF COMP-TERMS CAR EQ AND ALL-VARS MEMQ NULL QUOTE EQUAL TRUEP SYMBOLP VARIABLEP OR COND IF*))
(setf (callers-list 'AC-MEMBER :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'CLOAD :callees) '(FORMAT LOAD OBJ-NAME IF COMPILE-FILE BIN-IS-CURRENT NOT WHEN SOURCE-NAME PROBE-FILE COND))
(setf (callers-list 'MAKE-PRE-XOR-ARGS :callees) '(MACROLET CDR CAR LET SLOOP))
(setf (callers-list 'VARIABLEP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'DESTROYABLE :callees) '(MACROLET LET SLOOP IS-PRIMITIVE CAR OP-OF EQ SYMBOLP NOT AND FALSEP NULL QUOTE EQUAL TRUEP OR COND IF*))
(setf (callers-list 'LHS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SIMPLIFY-ALL-PREMISES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'START-HISTORY :callees) '(MACROLET LET SLOOP APPEND COPYLIST MY-COPYLIST CONS LIST NCONC SETQ NOT OR NULL AND COND IF*))
(setf (callers-list 'BA-SIMPLIFY :callees) '(QUOTE CONS MAKE-TERM CADR FIRST-ARG BA-SIMP-NOT BA-SIMP-OR BA-SIMPLIFY MAPCAR BA-SIMP-AND CAR OP-OF CASE CDR ARGS-OF SYMBOLP VARIABLEP NULL OR IF))
(setf (callers-list 'CLEAN-OPS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'DOMAIN-RULEP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ABSTRACT-PROOF :callees) '(MACROLET LET SLOOP ABSTRACTION SETQ QUOTE NTH EQN-SOURCE CAR EQUAL NOT NEQ AND COND IF*))
(setf (callers-list 'INSERT-AND-REMOVE-PAIRS :callees) '(MACROLET LET SLOOP QUOTE SETQ WHEN CONS NULL COND))
(setf (callers-list 'COLLATE-SLOOP-COLLECT :callees) '(GET SETF PUSHNEW LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NEW-FIRST-CTX-TRANS :callees) '(FIRST-CTX-TRANS QUOTE CONS))
(setf (callers-list 'X_NAME :callees) '(MACROLET LET SLOOP SYMBOL-NAME GET_PNAME SETQ))
(setf (callers-list 'COMMU-EXCHANGE :callees) '(REVERSE SECOND FIRST TOTAL-ORDER COND IF*))
(setf (callers-list 'SAME-PNAME :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'EQN-SUB-NONVARS :callees) '(FUNCTION CDR PRE-SUB-NONVARS EQ CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX COND IF* CADR RHS CAR LHS SUB-NONVARS2 NCONC REMOVE-DUPLICATES REM-DUPS))
(setf (callers-list 'NONVARP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'REPORT-CURRENT-TIME :callees) '(SETQ START-TIMER GET-INTERNAL-RUN-TIME - RUN-TIME FLOAT / TIME-IN-SEC FORMAT DATE PRINC))
(setf (callers-list 'TOKEN-PORT :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'RENAME-VARY :callees) '(RENAME-VAR1 QUOTE INITSYM))
(setf (callers-list 'INITIALIZE :callees) '(MACROLET LET SLOOP CLEAR-OPERATORS))
(setf (callers-list 'INDUCTIBLE :callees) '(MACROLET SLOOP AC-C-ROOT NOT FIRST ARGS-OF HAS-INDUCTIVE-VAR COND IF* CAR OP-OF ASSOC OR COVER-OF CDR LET))
(setf (callers-list 'IS-PROP-EQN :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ONE-PREMISE-IS-TRUE :callees) '(NULL QUOTE OR TRUEP CAR EQUAL COND IF* SECOND FIRST NORM-CTX SETQ))
(setf (callers-list 'WRITE-F-RULE :callees) '(TERPRI CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CADR RHS WRITE-F-RHS PRINC CAR LHS WRITE-TERM-SIMPLE SETQ))
(setf (callers-list 'SUBS-ARE-PRIMITIVE :callees) '(MACROLET LET SLOOP CDR ARGS-OF NULL COND))
(setf (callers-list 'REAL-COLLECT-PRODUCTS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'X_GENERAL :callees) '(DEBUG-MSG))
(setf (callers-list 'ACCEPTABLE-PAIR :callees) '(CDDR RPLACA CADDR EQUAL COND IF* EQN-CTX CTX CASE CASEQ RULE-SOURCE CADR MEMQ NTH CAR EQN-SOURCE-TYPE QUOTE EQ IS-SOURCE-TYPE NOT NULL OR AND))
(setf (callers-list '*-CANONICALIZE :callees) '(NCONS CDR ARGS-OF QUOTE CAR OP-OF EQ CONSP NONVARP AND COND IF*))
(setf (callers-list 'PRE-PROCESS-PRE-ASS :callees) '(MAKE-PRE-ASS MAKE-PRE-EQN ADD-PREMISE-END NULL EQUAL OR TRUEP ARGS-OF PRE-PROCESS-PRE-ASS MAPCAR CDR CONS SETF VARIABLEP QUOTE CAR OP-OF EQ SYMBOLP NOT AND FALSEP COND IF*))
(setf (callers-list 'XIN-MENU :callees) '(MACROLET SLOOP LUCID-RUNTIME-SUPPORT:BQ-APPEND LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM CAR MAPCAR QUOTE LIST* LET))
(setf (callers-list 'P-+-P :callees) '(CAR CONS MAKE-TERM QUOTE CDR ARGS-OF MERGE-SORT-ARGS LET OR COND IF*))
(setf (callers-list 'FLATTEN-RULE :callees) '(CDDR CADR RHS BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SETQ SYMBOLP VARIABLEP COND IF* CAR LHS LET FLAT-TERM LIST* CHANGE-LHS-RHS))
(setf (callers-list 'SIMPLIFY-ONE-PRE :callees) '(FIRST-ARG NEGATE-PREDICATE CADDDR PRE-PROCESS-PRE-ASS CADDR SECOND-ARG CADR EQUAL OR TRUEP SUBST-VAR-PREMISES ADD-SIMPLIFY-OTHERS VARIABLEP NCONC CDR CONS QUOTE CAR OP-OF EQ SYMBOLP NOT AND FALSEP NULL COND IF* NORM-ONE-PRE SETQ))
(setf (callers-list 'ENABLE-RULES :callees) '(DISABLE-RULES-AUX))
(setf (callers-list 'SET-CRIT-MARK :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MAKESYM :callees) '(FORMAT INTERN))
(setf (callers-list 'REDUCE-BY-RULES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'DELETE0 :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'HAVE-COMMON :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'POLY-SIZE :callees) '(ASSOC SETQ W-SIZE LENGTH - * TIMES MAX CDR ARGS-OF POLY-SIZE MAPCAR + APPLY 1+ CAR OP-OF CASE CASEQ SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'ONE-PRESENTATIVE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SLOOP-SWAP :callees) '(QUOTE))
(setf (callers-list 'APPLY-TO2 :callees) '(MACROLET SLOOP LET ARGS-OF NULL ASSOC CDR OR SYMBOLP VARIABLEP COND))
(setf (callers-list 'MOVE-MONOS :callees) '(MACROLET SLOOP CHANGE-MONO-SIGN NCONC MULT-DIFF2 +-CANONICALIZE MULT-FORM NORM-MULT-MONOS SETQ CADR RHS CAR LHS LET))
(setf (callers-list 'LOCAL-FINISH :callees) '(DEFMACRO QUOTE))
(setf (callers-list 'IS-SYMMETRY-RULE :callees) '(CAR LHS SUBLIS CADR RHS EQ COND IF* APPLYSUBST MAKE-FLAT EQUAL AND QUOTE CONS LIST LET))
(setf (callers-list 'WRITE-NODE :callees) '(NODE-INFO WRITE-EQN PRINC PRINT-NODE))
(setf (callers-list 'GRT-PREC :callees) '(DEFAULT-PRECEDENCE > ASSOC CDR MEMBER COND IF*))
(setf (callers-list 'POLISH-PREMISES :callees) '(MACROLET LET SLOOP REMOVE-DUPLICATES REM-DUPS ALL-PRE-VARS NTH REF-PRES-VARS NTHCDR SETQ CDR AND IF))
(setf (callers-list 'COMPOSE1 :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'INDUC-SUP-TERM :callees) '(MACROLET CDR ARGS-OF LET SLOOP CAR OP-OF MEMQ NOT AND COND IF*))
(setf (callers-list 'RRL-AUX :callees) '(GO - RUN-TIME FLOAT / TIME-IN-SEC FORMAT WRITEF-SYS CLOSE-LOG CATCH *CATCH REPORT-CURRENT-TIME TEST-RRL START-TEST GIVE-STAT SAVE-RRL REFUTE-EQN QUIT-RRL PROVE OPERATOR-OPTIONS RUN-KB-OPTIONS NAME-LAST-RULE X_PROVER ORDER-EQNS APPEND OPEN-WRITE-FILE LOAD-RRL DISPLAY START-KB OK-TO-CONTINUE TERPRI INITIALIZE START-PUSH-HISTORY HELP-FILE ENABLE-RULES DISABLE-RULES DELETE-SYS GET-COVER-SETS CLEAN-HISTORY BREAK OPEN-READ-FILE AUTO-KB EQUAL COND IF* READ-INPUT NCONC READ-ATOM CHOOSE-STR CASE SELECTQ PRINC QUOTE SHOW-MESSAGE GET-INTERNAL-RUN-TIME SETQ START-TIMER PROG))
(setf (callers-list 'CAR-LESSP :callees) '(CAR < LESSP))
(setf (callers-list 'IS-GENERAL-RULE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'TRANSLATE-NAME :callees) '(QUOTE MEMBER CDAR SYMBOLP AND COND))
(setf (callers-list 'X_AUTO_INDUC :callees) '(- X_COVER-PROOF-PROCESS2 FORMAT UCONCAT < ABSTRACT-PROOF PUSH WRITE-EQN INDUC-SUBSUMED-BY BUILD-PREMISES-FROM-BOOL-TERM PROOF-UNDER-NEW-PREMISES BUILD-PREMISES-FROM-COND-TERM CDR REMOVE-IRRELEVANT2 CDDR RPLACA CADDR EQUAL EQN-CTX CTX SETQ IS-FAILED-INDUC-EQN IS-PREVIOUS-INDUC-EQN NODE-SOURCE NODE-STATUS SEARCH-TREE LIST SEARCH_BY_EQN ENDP WRITE-SEQ-EQN PRINC TERPRI > QUOTE OP-OF EQ CAR LHS SYMBOLP NOT FALSEP SETF NULL AND COND IF*))
(setf (callers-list 'NORM-STRATEGY :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT IS-EMPTY-LINE AND PRINT-CHOICE-MESSAGE LET ASK-CHOICE OR NOT COND IF* PRINC TERPRI))
(setf (callers-list 'ADD-ONE-DEPTH :callees) '(MACROLET SLOOP LET))
(setf (callers-list 'IS-VALID-RULE :callees) '(INVALID-RULE < LESSP NOT IS-SUBSET = AND LENGTH VAR-LIST SETQ PUSH IS-ASSOC-PAIR IS-ASSOC-UNDER-C RESET-KB MEMQ OP-OF MAKE-ASS-COM-OP IS-COMMUT-PAIR NTH EQN-SOURCE LIST COMMU-EXCHANGE CONS MAKE-TERM MAKE-NEW-RULE ADD-RULE INCONSISTENT-EQN CDDR RPLACA QUOTE CADDR EQN-CTX CTX EQUAL IF* IS-INCONSI-PAIR COND CADR RHS CAR LHS LET))
(setf (callers-list 'RENAME-VAR :callees) '(RENAME-VAR1 QUOTE INITSYM))
(setf (callers-list 'CRITPAIRS :callees) '(MACROLET NTH RULENO LET SLOOP INTRO-RULE SETQ DETACHMENT-CRITICAL DETACHMENT-RULE WRITE-RULE PRINC TERPRI > AC-CRITPAIRS INDUC-SUPERPOSITION QUOTE EQUAL NOT NEQ AND COND IF*))
(setf (callers-list 'TYPE-COHERE :callees) '(IS-SUBTYPE EQ OR))
(setf (callers-list 'X_REMOVE_HYP :callees) '(MACROLET REST LET SLOOP FIRST CONS SETF))
(setf (callers-list 'GET-LOW-OPS :callees) '(QUOTE CASE CASEQ))
(setf (callers-list 'COVER-SET-SCHEME :callees) '(MACROLET CDR LET SLOOP WRITE-VARIABLE WRITE-F-EQN WRITE-SEQ-NUM WRITE-TERM PRINC TERPRI QUOTE CONS MAKE-TERM CAR X_REMOVE_HYP SETF NULL COND IF* CHOOSE-BEST-SCHEMES X_GET_INDUC_TERM LIST MAKE-ONE-SCHEME IF SETQ))
(setf (callers-list 'COMPLETE-TEST :callees) '(MACROLET NREVERSE NULL CONS CAR MEMQ NOT CDR DO GET-NONCONS LET SLOOP GET-BASIC-TYPE-TERMS QUOTE EQ COND IF* SETQ GET-TESTSET))
(setf (callers-list 'HALF-CANONICALIZE-AND-EXPAND-EQ :callees) '(MACROLET CDR ARGS-OF LET SLOOP QUOTE CAR OP-OF EQ COND IF*))
(setf (callers-list 'TOTAL-ORDER :callees) '(TOTAL-ORDER-RES CASE SELECTQ))
(setf (callers-list 'X_SPLIT :callees) '(DEBUG-MSG))
(setf (callers-list 'NEGATE-ONE-PRE :callees) '(MAKE-PRE-ASS LIST VARIABLEP CONS BA-SIMP-NOT ATTACH MAKE-PRE OP-OF EQ CADR SYMBOLP NOT AND FALSEP QUOTE CAR EQUAL OR TRUEP COND IF* CDDR SETQ NULL IF))
(setf (callers-list 'REMOVE-RIGHT-ARG2 :callees) '(CADR FIRST-ARG LIST CADDR SECOND-ARG REMOVE-RIGHT-ARG2 SETQ CAR OP-OF EQ SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'CYCLE-REDUCE-AT-ROOT-1 :callees) '(CYCLE-REDUCE-AT-ROOT-3 CYCLE-REDUCE-AT-ROOT-2 EQUAL FUNCTION CDDR REMOVE REMOVE0 NULL CADR FIRST-ARG CONSP NONVARP OP-OF MEMQ AND COND IF* CAR LHS))
(setf (callers-list 'POSTPONE-IT :callees) '(NCONS NCONC 1+ QUOTE CONS SETQ TERPRI PRINC LENGTH < > AND COND))
(setf (callers-list 'COMPACT-LAST-ELEMENTS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ORDER-EQNS :callees) '(MACROLET LET SLOOP OR COND IF* SETQ))
(setf (callers-list 'ADD-STATUS :callees) '(MACROLET OPS-EQUIV-TO LET SLOOP))
(setf (callers-list 'BREAK-AT-OR :callees) '(MACROLET SLOOP CDR ARGS-OF QUOTE FLATTEN LET))
(setf (callers-list 'IS-SYMMETRY-EQN :callees) '(BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SYMBOLP VARIABLEP SUBLIS EQ APPLYSUBST LET FLAT-TERM EQUAL CADR CAR CONS LIST SETQ CDR CDDR COND IF*))
(setf (callers-list 'LOOK-AT-PAIR-AND :callees) '(MACROLET CADR CAR LET SLOOP))
(setf (callers-list 'REDUCE-EQ-TERM :callees) '(MACROLET LENGTH LET SLOOP REDUCE-EQ-EXACTLY APPEND AND COND IF* QUOTE ASSQ CDR RULES-WITH-OP OR SETQ))
(setf (callers-list 'LOOP-PEEK :callees) '(CAR))
(setf (callers-list 'INIT-BOOL-OPS :callees) '(MACROLET LET SLOOP SET-INFIX SET-ARITY GET SETF PUTPROP SETQ QUOTE NUMBERP COND SET-ARITY2))
(setf (callers-list 'TRACE-SUCC-PROVE :callees) '(WRITE-COMMENT-EQN WRITE-SEQ-EQN WRITE-SEQ-NUM PRINC TERPRI))
(setf (callers-list 'REM-STATUS :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SUBST-VAR-PREMISES :callees) '(BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SETQ SYMBOLP VARIABLEP SUBLIS EQ APPLYSUBST LET FLAT-TERM COND IF*))
(setf (callers-list 'PLAUSIBLE :callees) '(MACROLET CDR ARGS-OF LET SLOOP QUOTE EQ AND MEMQ AC-OP-P AC-ROOT CAR OP-OF EQUAL NOT NEQ COND))
(setf (callers-list 'HAVE-MANY-RECURSIVE-EQNS :callees) '(MACROLET CDDR LET SLOOP ASSOC SETQ IF))
(setf (callers-list 'PRIMITIVE-SUBST :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'MAKE-FLAT :callees) '(MAKE-FLAT MAPCAR CAR OP-OF COMPRESS-FLAT CDR ARGS-OF NULL SYMBOLP VARIABLEP COND))
(setf (callers-list 'NTHSUBT :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CYCLE-NORM-TERM :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SHOW-NODE :callees) '(NODE-INFO WRITE-EQN PRINC PRINT-NODE))
(setf (callers-list 'GET-CLAUSE :callees) '(EXPECTED CDR FIRST GET-RHS EQUAL NOT NEQ CONDI-FROM-CLAUSE MAKE-EQN FIRST-ARG CAR OP-OF EQ COND IF* NEXT-TOKEN CADR TOKEN-TEXT CASE CASEQ 1+ SETQ INC LIST QUOTE GET-TERM LET))
(setf (callers-list 'EXT-AC :callees) '(FLATTEN-RULES PUSH SETQ SYS-FLAG-INIT FORMAT UCONCAT TERPRI PRINC QUOTE GET MEMQ NOT COND IF*))
(setf (callers-list 'DEMULT-FORM :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'RHS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'GET-SUBTYPES :callees) '(MACROLET LET SLOOP QUOTE EQ COND IF*))
(setf (callers-list 'MARK :callees) '(COND IF* PRINC TERPRI))
(setf (callers-list 'CAR-LOWER :callees) '(CAR IS-HIGHER-TERM))
(setf (callers-list 'RIGHT-ARG :callees) '(CADDR SECOND-ARG RIGHT-ARG2 QUOTE GET NUMBERP GET-STATUS EQ MEMQ AND COND IF*))
(setf (callers-list 'COLLECT-CDR-WITH-SAME-CAR :callees) '(MACROLET CAAR POP CDR NCONS LET SLOOP))
(setf (callers-list 'UNICOMPOUND :callees) '(MACROLET LIST LET SLOOP))
(setf (callers-list 'PURE-REDUCE-BY-ONE-RULE :callees) '(MACROLET CDR ARGS-OF LET SLOOP PURE-REDUCE-BY-ONE-AT-ROOT LHS CAR OP-OF EQ SAME-ROOT AND SYMBOLP VARIABLEP COND))
(setf (callers-list 'MAKE-NEW-VARIABLE :callees) '(1+ SET QUOTE COND IF* COPY-SYMBOL COPYSYMBOL SETQ))
(setf (callers-list 'RELATED-VARS2 :callees) '(MACROLET CDR CAR NCONS LET SLOOP))
(setf (callers-list 'IS-VALID-VAR :callees) '(QUOTE SYMBOL-NAME CHAR MEMBER SYMBOLP AND))
(setf (callers-list 'IS-PURE-INPUT :callees) '(OR NOT))
(setf (callers-list 'PRINT-WARNING :callees) '(PRINC TERPRI))
(setf (callers-list 'APPLY-TO :callees) '(SUBLIS EQ COND IF* APPLYSUBST))
(setf (callers-list 'EQN-SOURCE-TYPE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'IS-CONSTANT-TERM :callees) '(CDR ARGS-OF NULL CONSP NONVARP AND))
(setf (callers-list 'CLEAN-RIGHT-BRACKET :callees) '(CADDR TOKEN-TYPE QUOTE CADR TOKEN-TEXT SETF))
(setf (callers-list 'START-TIMER :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST* IF))
(setf (callers-list 'PUSH-HISTORY :callees) '(FORMAT UCONCAT PRINC TERPRI NOT LENGTH MAX SETQ PUSH COND IF*))
(setf (callers-list 'NORMALIZE-ONE-EQN :callees) '(PRINC TERPRI))
(setf (callers-list 'ADD-CONDI-DOMINATE-RULE :callees) '(WRITE-RULE PRINC TERPRI NCONS NCONC SETQ PUSH-END))
(setf (callers-list 'IS-EMPTY-LINE :callees) '(IS-EMPTY-LINE READ-CHAR PEEK-CHAR CASE SETQ NULL IF))
(setf (callers-list 'SET-CONSTRUCTOR :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'TRY-SUGG-PREC :callees) '(MACROLET LET SLOOP COPY-TREE COPY READ-ARGS CONS NCONS SAVE-WORD-END IS-EMPTY-LINE COND IF* SETQ LIST SAVE-WORDS PROG))
(setf (callers-list 'DEPENDED-OP :callees) '(MACROLET LET SLOOP ASSOC CDR MEMQ COND IF*))
(setf (callers-list 'X_REAL_VARS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'MATCH-SET-NONAC :callees) '(MACROLET SLOOP POP PROG))
(setf (callers-list 'SLOOP-SLOOP-MACRO :callees) '(GET CDR LOOP-LET-BINDINGS LUCID-RUNTIME-SUPPORT:BQ-LIST* DOLIST LUCID-RUNTIME-SUPPORT:BQ-APPEND LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST SUBSTITUTE-SLOOP-BODY AND NREVERSE CATCH COND NULL DO PARSE-LOOP-FOR SLOOP-SWAP LOOP-POP SETF GENSYM LET FOR CAR LCASE))
(setf (callers-list 'MATCH-SET :callees) '(CDR ARGS-OF MATCH-SET-NONAC MATCH-SET-AC OR COND IF*))
(setf (callers-list 'CAPITALIZE :callees) '(- LOWER-CASE-P AND COND IF*))
(setf (callers-list 'CHECKEQ-NORMAL :callees) '(LAST-CONSISTENCY-CHECK REMOVE-DUPLICATES REM-DUPS NTH EQN-SOURCE APPEND LIST MAKE-EQN EQUAL-TERM NEGATE-PREDICATE FUNCTION MEMBER MEMBER0 FIRST-ARG CADDR SECOND-ARG ALL-VARS IS-SUBSET OP-OF EQ NULL QUOTE OR TRUEP CONSP NONVARP AND NORM-RHS NORM-CTX CADR RHS CAR LHS EQUAL NOT COND IF* SETQ))
(setf (callers-list 'CROSS-PRODUCT :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'DEFINING-POSITIONS :callees) '(MACROLET ASSOC SECOND LET SLOOP))
(setf (callers-list 'REWONCE-AT-ROOT :callees) '(REWRITE-AT-ROOT OR))
(setf (callers-list 'CON1-NUMS :callees) '(MACROLET - 1+ SLOOP::TYPE-ERROR QUOTE TYPEP OR + LET SLOOP))
(setf (callers-list 'OUTRED1 :callees) '(MACROLET LET SLOOP CDR ARGS-OF MULT-FORM SETQ MEMQ AC-OP-P AC-ROOT QUOTE CAR OP-OF MEMBER COND))
(setf (callers-list 'PURE-NORM-WITH-BIN :callees) '(MACROLET ARGS-OF LET SLOOP CAR OP-OF CONS MAKE-TERM SETQ ASSQ CDR SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'FLATTEN-RULES :callees) '(MACROLET LET SLOOP CDR NULL QUOTE EQ AND FLATTEN-EQN MAPCAR FLATTEN-RULES2 FLATTEN-POST-ASS COND IF* EQUAL FUNCTION DELETE DELETE0 SETQ))
(setf (callers-list 'EQ-MATCH :callees) '(MACROLET SLOOP SECOND SETQ QUOTE CONS LIST NCONC INSERT-POLY-SIGMA AC-MATCH CDR ARGS-OF NULL LET ACM-AND-EQ CAR OP-OF EQ SAME-OP COND IF*))
(setf (callers-list 'CYCLE-CHECK :callees) '(MACROLET LET SLOOP FORMAT UCONCAT PRINC TERPRI SUB1 SETQ EQ COND IF*))
(setf (callers-list 'QUASI-EQUIVALENT :callees) '(MACROLET CAR LENGTH N-TUPLES LET SLOOP TYPE-VAR-LIST SETQ NULL COND IF*))
(setf (callers-list 'C-MATCH :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ENSURE-PREDICATE :callees) '(SETF PUTPROP SET-PREDICATE FORMAT UCONCAT PRINC TERPRI GET NUMBERP PREDICATEP QUOTE EQUAL NOT NEQ AND ENTER-OP COND IF*))
(setf (callers-list 'PREC-CONSISTENT :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'AC-COMPRESS :callees) '(BRT BA-SIMPLIFY IF QUOTE MEMBER COMMU-EXCHANGE CONS MAKE-TERM MEMQ COMMUTATIVEP COMPRESS-FLAT COND))
(setf (callers-list 'FILLARRAY :callees) '(ERROR SECOND POP SETQ NULL COND IF* AREF SETF FIRST DOTIMES LENGTH CASE ARRAY-DIMENSIONS LET))
(setf (callers-list 'PICK-ONE-UNMARKED :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'REDUCIBLE :callees) '(MACROLET APPEND AND IF* CAR OP-OF ASSQ CDR GET-RULES-WITH-OP LET SLOOP SYMBOLP VARIABLEP COND))
(setf (callers-list 'EXT-OPERATOR :callees) '(MACROLET READ-ARGS LET SLOOP FORMAT UCONCAT PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'MAKE-ASS-COM-OP :callees) '(MACROLET LET SLOOP NTH EQN-SOURCE FLATTEN-WITNESS SETQ PUSH EQUAL FUNCTION OPS-EQUIV-TO DELETE DELETE0 REMPROP QUOTE GET WRITE-EQN COND IF* FORMAT UCONCAT PRINC TERPRI START-PUSH-HISTORY))
(setf (callers-list 'QUERY-ADD-EQN :callees) '(IF QUERY-ADD-EQN RETURN-FROM INDUC-ORIENT-AN-EQN CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX NORM-BUT-ROOT CAR LHS SETF OK-TO-CONTINUE PRINC PROGN UNWIND-PROTECT SETQ ART? WHEN LET WHEN-ART-WITH-INPUT-FROM-TERMINAL))
(setf (callers-list 'CUR-VAL :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MINI-EXPAND-EQ :callees) '(MACROLET CDR ARGS-OF LET SLOOP CDDDR QUOTE CAR OP-OF EQ AND COND IF*))
(setf (callers-list 'MENU_FOR_MANUAL_REDUCE :callees) '(MACROLET SLOOP QUOTE SETF))
(setf (callers-list 'EQN2ASS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MAKE-TERM :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'IS-ASSOC-PAIR :callees) '(CADDR SECOND-ARG FIRST-ARG NOT NEQUAL IS-SUBSET EQUAL VAR-LIST CADR EQ ALL-OPS SETQ LENGTH CAR OP-OF GET-ARITY = CONSP NONVARP AND))
(setf (callers-list 'REST-ELEMENTS :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR LET SLOOP))
(setf (callers-list 'EACH :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'DOWN-HILL-ONE :callees) '(MACROLET LET SLOOP SETQ QUOTE EQ NOT COND IF*))
(setf (callers-list 'COMPARE-ITEM-RESULT :callees) '(COMPARE-ITEM COND))
(setf (callers-list 'BUILD-PREMISES-FROM-BOOL-TERM :callees) '(QUOTE FIND-SPECIAL-TERM))
(setf (callers-list 'INSERT-LIST :callees) '(MACROLET REVERSE LET SLOOP EQUAL FUNCTION MEMBER MEMBER0 COND IF*))
(setf (callers-list 'PROCESS-ASS-SIMPLE :callees) '(ORDER-ASS EQUAL FUNCTION REMOVE-DUPLICATES REM-DUPS APPEND - + NORM-CTX SETQ PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME COND IF*))
(setf (callers-list 'HEAD-LESS-PRE :callees) '(MACROLET LHS OP-LIST HIGH-OP-POSI LET SLOOP QUOTE CAR OP-OF EQ SYMBOLP NOT FALSEP CADR RHS CONSP NONVARP AND OR))
(setf (callers-list 'POST-ASS-LIST :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'PROCESS-ASS :callees) '(MACROLET CDR ARGS-OF LET SLOOP REFUTED-RESULT CAR OP-OF CASE CASEQ COND IF*))
(setf (callers-list 'ARITY-EQ-STRATEGY :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'PRED-FUNC-SUP :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'RENAME-OP-RULES :callees) '(CDR RENAME-EQN-RULE MAPCAR CAR CONS))
(setf (callers-list 'ACO-LRPO= :callees) '(MACROLET LET SLOOP QUOTE GET NUMBERP GET-STATUS IF* CDR ARGS-OF LENGTH CAR OP-OF EQOPS AND EQUAL SYMBOLP VARIABLEP COND))
(setf (callers-list 'SUBST0 :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'ART? :callees) '(QUOTE EQ))
(setf (callers-list 'AUTO-OPERATOR :callees) '(MACROLET SLOOP NEWSYM SETQ QUOTE INITSYM LET))
(setf (callers-list 'NORM-RHS :callees) '(CDR ARGS-OF MAPCAR SIMP-AND-SIMP QUOTE CAR OP-OF EQ SUBST-VAR-PREMISES SYMBOLP VARIABLEP NORM-CTX NOT COND IF*))
(setf (callers-list 'NOT-IN-SET :callees) '(GO RHS LHS UNIFIER SUB-TEST CADR EQUAL AND CDR CAR SETQ RETURN NULL COND IF* PROG))
(setf (callers-list '*CATCH :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MULT-SORT-INSERT :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SUBST-QUANT-FORM :callees) '(SKOLEMIZE-AWAY-QUANTS PROCESS-ASS2 QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST SETQ))
(setf (callers-list 'SET-DEPEND-SCORES :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'SUBST-PREMISES :callees) '(MACROLET LET SLOOP QUOTE CONS CDR AND COND IF*))
(setf (callers-list 'AUTO-MAKE-EQUI :callees) '(TRANS-STATUS OPS-EQUIV-TO INTERSECTION ADD-EQU GET NUMBERP IF* GET-STATUS EQUAL SAME-ARITY QUOTE EQ AND IS-REL-PREC EQOPS COND))
(setf (callers-list 'GET-ALL-RULE-NUMS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'PRODUCT-LISTS :callees) '(MACROLET PRODUCT-LISTS LET SLOOP CAR NCONS MAPCAR CDR NULL IF))
(setf (callers-list 'LHSIZE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'TOTAL-ORDER-PC-RES :callees) '(MACROLET LET SLOOP LITERAL-NUM > QUOTE CAR OP-OF MEMBER OR PC-GRT-PREC EQUAL ATOM IF* NULL COND))
(setf (callers-list 'IS-SUBTYPE :callees) '(ASSOC MEMQ QUOTE EQ OR))
(setf (callers-list 'CLEAR-OPERATORS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'WRITE-COMMENT-PREMISES :callees) '(MACROLET LET SLOOP CAR WRITE-ONE-PRE PRINC TERPRI CDR COND IF*))
(setf (callers-list 'IS-BOOL-OP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'GET-TERM-TYPE :callees) '(CAR OP-OF GET-DOMAIN-TYPE QUOTE SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'IS-TYPE-PREDICATE :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'REMOVE-PAIRS-WITH :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'NEQUAL :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'STATUS-CANDIDATES :callees) '(MACROLET LET SLOOP))
(setf (callers-list '*THROW :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'RELATED-VARS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'PURE-NORM-MIXED :callees) '(PURE-MIXED-REDUCE SETQ COND IF*))
(setf (callers-list 'CLOAD2 :callees) '(LOAD OBJ-NAME IF COMPILE-FILE BIN-IS-CURRENT NOT SOURCE-NAME PROBE-FILE AND WHEN))
(setf (callers-list 'TWO-KILL-ONE :callees) '(MACROLET CDR * LET SLOOP OR))
(setf (callers-list 'GOOD-LUCK-CONDI :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'BUILD-PREMISES-FROM-COND-TERM :callees) '(QUOTE FIND-SPECIAL-TERM))
(setf (callers-list 'SET-EXTRA-PRE-VARIABLES :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'INSERT-SORT-ARG :callees) '(MACROLET LET SLOOP QUOTE SETQ IF* NCONS NULL COND))
(setf (callers-list 'NORM-MULT-MONOS :callees) '(MACROLET SLOOP))
(setf (callers-list 'EXT-PRECEDENCE :callees) '(MACROLET SLOOP MEMBER READ-ARGS FORMAT UCONCAT PROGN SETQ QUOTE READ-ATOM LET TERPRI PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'RESOLVE :callees) '(MACROLET SLOOP SETQ LET))
(setf (callers-list 'REMOVE-LEFT-ARG2 :callees) '(CADDR SECOND-ARG LIST CADR FIRST-ARG REMOVE-LEFT-ARG2 SETQ CAR OP-OF EQ SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'CLEARSCREEN :callees) '(MACROLET SLOOP QUOTE SETF))
(setf (callers-list 'ORDER-PC-SEQ :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'GET-CONSTANTS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'IS-SKOLEM-OP :callees) '(QUOTE ALLSYM MEMQ))
(setf (callers-list 'LINEAR :callees) '(MACROLET LHS FREE-VARS SLOOP START-KB MR NCONS MAKERULES EQUAL FUNCTION DELETE DELETE0 NCONC LAST CAR PRINT-ATOMS ASK-A-CHOICE FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND PRINT-CHOICE-MESSAGE LET ASK-CHOICE EQ READ-INPUT SETQ OK-TO-CONTINUE NOT IF* QUOTE GET SETF PUTPROP NUMBERP COND SET-PREDICATE))
(setf (callers-list 'WRITE-EQN :callees) '(TERPRI FORMAT UCONCAT NTH EQN-SOURCE SETQ CTX RHS WRITE-RHS PRINC NULL CADR TRUEP IS-ASSERTION NOT CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX IS-CONDI-EQN OR COND IF* CAR LHS WRITE-TERM))
(setf (callers-list 'PURE-ORIENT-AN-EQN :callees) '(- + PURE-ADD-RULE PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME RESET PUSH CATCH *CATCH SETQ NTH EQN-SOURCE REFUTED-RESULT QUOTE OP-OF EQ CAR LHS SYMBOLP NOT AND FALSEP COND IF*))
(setf (callers-list 'MY-COPYLIST2 :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'MULT-UNION :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'LR-RL-STRATEGY :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'CDR-GREAT :callees) '(CDR >))
(setf (callers-list 'X_AUTO_NORMAL :callees) '(LIST))
(setf (callers-list 'PRINC0 :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST CDR LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE CAR EQ CONSP AND COND MACROEXPAND SETQ))
(setf (callers-list 'WRITE-TERM-BOOL :callees) '(MACROLET ARGS-OF CDR LET SLOOP CADR FIRST-ARG WRITE-TERM-BOOL PRINC CAR OP-OF CASE CASEQ WRITE-VARIABLE SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'P-*-M :callees) '(MACROLET LET SLOOP SETQ EQUAL QUOTE CDR ARGS-OF NULL COND))
(setf (callers-list 'LOOP-UN-POP :callees) '(QUOTE SETF PUSH ERROR CASE))
(setf (callers-list 'CAR-LENGTH-CDDR :callees) '(CDDR < LESSP = COND IF* CAR LENGTH LET))
(setf (callers-list 'CYCLE-REWRITE-RULE :callees) '(CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-2 EQUAL FUNCTION CDDR REMOVE REMOVE0 NULL CADR FIRST-ARG CONSP NONVARP MEMQ OP-OF EQ SAME-OP AND COND IF* CAR LHS))
(setf (callers-list 'HALF-CANONICALIZE :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'RESET-KB :callees) '(THROW *THROW))
(setf (callers-list 'CUTTREE :callees) '(NODE-CHDLST SETF))
(setf (callers-list 'IS-SUB-NONVAR-TERM :callees) '(MACROLET SET-DIFF LET SLOOP CDR ARGS-OF CAR OP-OF EQ SAME-OP SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'RULES-WITH-OP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'AUTO-ADD-STATUS :callees) '(MACROLET LET SLOOP OPS-EQUIV-TO INTERSECTION EQUAL NOT QUOTE GET NUMBERP IF* GET-STATUS COND))
(setf (callers-list 'BRT-IF :callees) '(BRT EQUAL COND IF*))
(setf (callers-list 'NORM-OR-ARGS :callees) '(MACROLET CDR ARGS-OF LET SLOOP SETQ))
(setf (callers-list 'SET-DIFF2 :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ACM-POLY-ONE-TO-MANY :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'GET-LCM-SOLNS :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR LET SLOOP))
(setf (callers-list 'IS-LINEAR :callees) '(NON-LINEAR-VARS NULL))
(setf (callers-list 'WRITE-SEQ-NUM :callees) '(MACROLET CDR LET SLOOP CAR FORMAT UCONCAT PRINC COND IF*))
(setf (callers-list 'ORDER-PC-RES :callees) '(LRPO-RESULT COMPARE-TERM-RESULT GET NUMBERP PREDICATEP TOTAL-ORDER-PC-RES COMPARE-ITEM-RESULT CASE SELECTQ QUOTE CAR OP-OF MEMQ OR LISTP AND EQUAL COND))
(setf (callers-list 'X_CLEAN-RULE :callees) '(LHS CAR OP-OF ASSQ MEMBER MEMBER0 COND IF* EQUAL FUNCTION DELETE DELETE0 SETQ))
(setf (callers-list 'TRY-TO-ORIENT2 :callees) '(NOT AND LRPO COND IF*))
(setf (callers-list 'X_PROVER :callees) '(MACROLET SLOOP HEAD_OF_FRI))
(setf (callers-list 'WRITE-TERM-SIMPLE :callees) '(MACROLET LET SLOOP CAAR WRITE-TERM-SIMPLE PRINC CDAR > CDR ARGS-OF MULT-FORM EQ NOT QUOTE GET CAR OP-OF SETQ NUMBERP INFIXP AND WRITE-VARIABLE SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'EXT-TRANSITIVE :callees) '(PUSH QUOTE GET SETF PUTPROP OK-TO-CONTINUE TERPRI FORMAT UCONCAT PRINC MEMQ NOT COND IF*))
(setf (callers-list 'LESSP-SIZE-BINDINGS :callees) '(CAAR <))
(setf (callers-list 'LIST-ASSERTIONS :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE TYPEP OR 1+ LET SLOOP))
(setf (callers-list 'LHS-VARS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ARGUMENTS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'AC-SUP-TERM :callees) '(MACROLET LET SLOOP EQUAL FUNCTION MEMBER MEMBER0 COND IF*))
(setf (callers-list 'AVERAGE :callees) '(LENGTH CDR MAPCAR + APPLY TRUNCATE QUOTIENT))
(setf (callers-list 'MULT-DIFF2 :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'TRY-TO-ORIENT-CONDI :callees) '(THROW *THROW ASK-USER CASE CASEQ WRITE-EQN PRINC TERPRI INSTANTIATE-LHS CAR LHS SYMBOLP VARIABLEP ORDER-CTX LRPO NTH EQN-SOURCE MAKE-NEW-RULE > IF* SIZE SETQ EQUAL NOT NEQUAL AND MANUAL-ORIENT QUOTE EQ COND))
(setf (callers-list 'IS-SUBTERM :callees) '(MACROLET LET SLOOP IS-SUBSET AC-C-ROOT CAR OP-OF EQ SAME-OP CONSP NONVARP AND CDR ARGS-OF NULL SYMBOLP VARIABLEP OR EQUAL COND IF*))
(setf (callers-list 'WRITE-GOAL-EQN :callees) '(TERPRI FORMAT UCONCAT NTH EQN-SOURCE SETQ CTX RHS WRITE-RHS PRINC NULL CADR TRUEP IS-ASSERTION NOT CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX IS-CONDI-EQN OR COND IF* CAR LHS WRITE-TERM))
(setf (callers-list 'PUSH-END :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PARSE-LOOP-DO :callees) '(ERROR LOOP-UN-POP QUOTE RETURN OR PUSH LISTP COND LOOP-POP DO))
(setf (callers-list 'REM-SKOLEM :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MAXIMIZE-SLOOP-COLLECT :callees) '(GET SETF PUSHNEW LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'DESETQ1 :callees) '(DEFMACRO ERROR LIST CDR IF CAR DESETQ1 LUCID-RUNTIME-SUPPORT:BQ-LIST* CONSP QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST AND SYMBOLP COND))
(setf (callers-list 'ADD-SIMPLIFY-OTHERS :callees) '(MACROLET LET SLOOP CADDAR GET-PRE-RHS CADAR QUOTE CAAR EQ CADR COND IF* GET-PRE-LHS CAR SYMBOLP VARIABLEP IF SETQ))
(setf (callers-list 'LONGEST-LIST :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'BUILD-EQN-FROM-PRES :callees) '(MACROLET LET SLOOP SETQ CDR COND IF*))
(setf (callers-list 'FASTKB-CHOICES :callees) '(RETURN NOT IF PRINC EQ SYMMETRY-CHOICE RESTRICT-CRIT-STRA PRIME-ACU-CHOICE POLY-CHOICE BLOCK-CHOICE CASE CASEQ NUMBERP COND IF* READ-ATOM CHOOSE-STR QUOTE PRINT-HEAD PROGN SETQ DO TERPRI LET USER-SELECTQ))
(setf (callers-list 'L-EQUAL :callees) '(QUOTE MEMBER LISTP SYMBOL-NAME EQUAL COND SYMBOLP AND))
(setf (callers-list 'WRITE-GOAL-RULE :callees) '(TERPRI RULE-SOURCE SETQ CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX CADR RHS WRITE-RHS CAR LHS WRITE-TERM NTH RULENO < COND IF* FORMAT UCONCAT PRINC))
(setf (callers-list 'RPLAT-IN-BY :callees) '(MACROLET CDR ARGS-OF LET SLOOP CAR OP-OF CONS MAKE-TERM NULL COND))
(setf (callers-list 'MULT-INSERT :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'INSTANTIATE-LHS :callees) '(MACROLET CADR RHS CAR OP-OF GET-DOMAIN-TYPE LET SLOOP WRITE-EQN PRINC TERPRI))
(setf (callers-list 'BLOCK-CHECK :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'INIT :callees) '(RRL INITIALIZE SETQ))
(setf (callers-list 'DIVISIBLE-LEFT-CHECK :callees) '(LIST REMOVE-LEFT-ARG SETQ REDUCIBLE NOT AVOIDABLE LEFT-ARG EQUAL AND COND IF*))
(setf (callers-list 'BOOLEAN-OPP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'SIZE-DEPTH-STR :callees) '(EQ PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'PROCESS-EQUATION :callees) '(MACROLET SPLIT-LHS-AND SLOOP AND-LHS-TRUE-RHS - + NORMALIZE PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME SETQ NOT WRITE-EQN PRINC TERPRI = COVER-NORM-ORDER QUOTE TRUEP NULL AND CADR RHS CAR LHS EQUAL OR EQUAL-TERM COND IF*))
(setf (callers-list 'GOAL-RULE-SIZE :callees) '(NTH LHSIZE IF* CAR LHS FREE-VARS LENGTH SETQ QUOTE EQUAL COND))
(setf (callers-list 'GET-TERM :callees) '(MACROLET SLOOP CADDR TOKEN-TYPE CASE CASEQ GET-ITEM LET TOKEN-EOLN))
(setf (callers-list 'ACO-LEXICO-COMP-RL :callees) '(MACROLET SLOOP CDR LENGTH SETQ))
(setf (callers-list 'SIMP-FIRST-TRANS :callees) '(FIRST-TRANS SIMPLIFY SYMBOLP VARIABLEP NULL COND))
(setf (callers-list 'ONE-EXTENSIBLE-POINT :callees) '(ONE-EXTENSIBLE DELETE))
(setf (callers-list 'OPERATOR-OPTIONS :callees) '(RETURN NOT IF PRINC EQ EXT-WEIGHT EXT-STATUS EXT-PRECEDENCE EXT-EQUIVALENCE DISPLAY-OP-STATS EXT-OPERATOR CASE CASEQ NUMBERP COND IF* READ-ATOM CHOOSE-STR QUOTE PRINT-HEAD PROGN SETQ DO TERPRI LET USER-SELECTQ))
(setf (callers-list 'PICK-UNMARKED-RULE-DUMMY :callees) '(MACROLET LET SLOOP CASE CASEQ POP INDUC-PICK-UNMARK EQUAL NOT NEQ AND MANUAL-PICK QUOTE EQ COND IF*))
(setf (callers-list 'WRITE-DISJUNCTIONS :callees) '(MACROLET SLOOP::TYPE-ERROR + TYPEP OR LET SLOOP PRINC TERPRI CDDDR QUOTE CAR OP-OF EQ AND WRITE-VARIABLE SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'NORM-POLY :callees) '(MACROLET SLOOP OP-OF EQ CONSP NONVARP IS-ROOTED-+ AND CAR SIMPLIFY-+ CDR QUOTE NULL DEMULT-FORM BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SYMBOLP VARIABLEP COND IF* LET FLAT-TERM +-CANONICALIZE MULT-FORM NORM-MULT-MONOS SETQ))
(setf (callers-list 'COMP-TERMS :callees) '(MACROLET SLOOP NULL COND IF* SET-DIFF LET))
(setf (callers-list 'FIRST-PROCESS-PREMISES :callees) '(MACROLET LET SLOOP APPEND PRE-PROCESS-PREMISES QUOTE NCONS SETQ))
(setf (callers-list 'NRM-TIME :callees) '(FLOAT /))
(setf (callers-list 'GUIDE-REDUCIBLE :callees) '(MACROLET APPEND AND IF* CAR OP-OF ASSQ CDR GET-RULES-WITH-OP LET SLOOP SYMBOLP VARIABLEP COND))
(setf (callers-list 'SUBST-EQN :callees) '(NTH EQN-SOURCE LIST MAKE-EQN REMAKE-PREMISES NOT NEQUAL CDDR RPLACA QUOTE CADDR EQN-CTX CTX CADR RHS BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SYMBOLP VARIABLEP COND IF* EQUAL FUNCTION CAR LHS SUBST SUBST0 LET FLAT-TERM SETQ))
(setf (callers-list 'MEMBER-EQUAL :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'X_READ_TERM :callees) '(TERPRI WRITE-TERM FIRST EQUAL NEQUAL AND CATCH *CATCH SETQ QUOTE TOKEN-EOLN EQ NOT MAKE-BUFFER LET PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'PROCESS-NEW-AC-CP :callees) '(MACROLET SET-UNIFY SLOOP PROCESS-CRITPAIR WELL-TYPED-EQN MAKE-EQN CDDR NULL BRT BA-SIMPLIFY IF C-PERMUTATION - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SYMBOLP VARIABLEP APPEND FLAT-TERM NCONS CADR RHS SET-DIFF CDR COMMON-ELEMENTS SUBLIS EQ COND IF* APPLYSUBST MAKE-FLAT 1+ SETQ NTH RULENO LIST LET))
(setf (callers-list 'ARRANGE-EQ-ARGS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MAKE-PRE-ASS :callees) '(MACROLET LET SLOOP QUOTE MAKE-PRE-XOR-ARGS COMMU-EXCHANGE CONS ATTACH MAKE-PRE CDDDR IF CDR ARGS-OF MAKE-PRE-EQN CAR OP-OF CASE COND IF*))
(setf (callers-list 'MATCH-BOOL-XOR :callees) '(MACROLET SLOOP POP PROG))
(setf (callers-list 'REM-PREDICATE :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'REDUCE-COND-TERM :callees) '(REDUCE-AT-ROOT LIST CONSP NONVARP BA-SIMP-NOT CADDDR CAR OP-OF EQ SYMBOLP NOT AND FALSEP CADDR SECOND-ARG NULL QUOTE EQUAL OR TRUEP COND CADR FIRST-ARG LET))
(setf (callers-list 'SELECTQ :callees) '(CDR LUCID-RUNTIME-SUPPORT:BQ-LIST LUCID-RUNTIME-SUPPORT:BQ-CONS CAR EQ COND LAMBDA :UNNAMED-LAMBDA MAPCAR QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'EQUAL-TERM :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SYMMETRY-CHOICE :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'REDUCE-POST-ASS :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'SIMPLIFY-FLAT :callees) '(MACROLET LET SLOOP QUOTE CONS MAKE-TERM CDR ARGS-OF SIMP-AND-SIMP CAR OP-OF CASE CASEQ SYMBOLP VARIABLEP NULL OR COND IF*))
(setf (callers-list 'WHEN-ART-WITH-INPUT-FROM-TERMINAL :callees) '(LUCID-RUNTIME-SUPPORT:BQ-CONS LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'WRITE-RHS :callees) '(CDR WRITE-PREMISES CAR EQ AND IS-PREMISE-SET WRITE-DISJUNCTIONS PRINC NULL QUOTE EQUAL OR TRUEP COND IF*))
(setf (callers-list 'START-TEST :callees) '(COMPLETE-TEST GET-DEFINING-DOMAINS SETQ NREVERSE CONS CAR MEMQ NOT CDR DO GET-NONCONS STEP CONSTRUCTORS-CHECK NULL RETURN TERPRI PRINC COND IF* PROG))
(setf (callers-list 'MERGEBLE-TERMS :callees) '(MACROLET ASSOC OR COVER-OF CDDR LET SLOOP EQUAL GET-POSITION LENGTH = GET-INDUC-VARS INTERSECTION SETQ CAR OP-OF EQ SAME-OP COND IF*))
(setf (callers-list 'MAKE-NEW-RULE :callees) '(MACROLET CDR LET SLOOP REMOVE-DUPLICATES REM-DUPS ALL-PRE-VARS AND WHEN VAR-LIST SETQ))
(setf (callers-list 'M-+-M :callees) '(LIST TOTAL-ORDER-2 IF* QUOTE EQUAL COND))
(setf (callers-list 'PRINT-CHOICE-MESSAGE :callees) '(MACROLET CDR LET SLOOP CAR PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'EQ-TR-MEMBER :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'NEGATE-EQN :callees) '(MACROLET FREE-VARS LET SLOOP RHS LIST EQN2ASS CAR LHS NULL QUOTE CADR EQUAL OR TRUEP IS-ASSERTION COND IF* SETQ))
(setf (callers-list 'AUTO-ADD-PREC :callees) '(ADD-SUGG > GET-ARITY = AND GRT-PREC EQOPS COND))
(setf (callers-list 'ONE-KILL-ONE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'PARTITION-OPS-BY-TYPE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'FLATTEN-TESTSET :callees) '(MACROLET LET SLOOP FLATTEN MAPCAR SETQ))
(setf (callers-list 'COVER-ORIENT-EQN :callees) '(- + ADD-RULE PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME MEMQ CATCH *CATCH NTH EQN-SOURCE REFUTED-RESULT OP-OF EQ CAR LHS SYMBOLP NOT AND FALSEP RELEASE-PREMISES SETQ CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX IF))
(setf (callers-list 'NARGS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'DIVIDED-BY :callees) '(MACROLET MULT-FORM LET SLOOP = COND IF*))
(setf (callers-list 'PRE-OPS :callees) '(EQUAL FUNCTION CADR CAR ALL-OPS NCONC REMOVE-DUPLICATES REM-DUPS))
(setf (callers-list 'ACUNI :callees) '(MACROLET SLOOP CONSP NONVARP IF* UNIFY-WITH-AC OR NCONS NULL AND COND ACTUAL-UNIFY-ACTION NCONC SPLIT-ALIST MULTI-COM QUOTE PUSH CASE CASEQ CADR ELIMCOM SETQ CAR OP-OF CDR ARGS-OF LET))
(setf (callers-list 'M-XOR-P :callees) '(MACROLET CDR ARGS-OF LET SLOOP QUOTE CAR OP-OF EQ SYMBOLP NOT AND FALSEP COND IF*))
(setf (callers-list 'BRAKE-CHOICE :callees) '(RETURN NOT IF PRINC EQ TIME-LIMIT-STRA NEW-RULE-STRA POST-LIMIT-STRA NORMALIZE-BOUND OVER-REWRITE-PREMISES CASE CASEQ NUMBERP COND IF* READ-ATOM CHOOSE-STR QUOTE PRINT-HEAD PROGN SETQ DO TERPRI LET USER-SELECTQ))
(setf (callers-list 'ASSERTION2EQUATION :callees) '(WRITE-EQN PRINC TERPRI COND IF* NTH EQN-SOURCE CADDR SECOND-ARG FIRST-ARG LIST MAKE-EQN SETQ CDDDR LHS CAR OP-OF EQ NULL QUOTE CADR EQUAL OR TRUEP IS-ASSERTION AND WHEN))
(setf (callers-list 'PURE-MIXED-REDUCE :callees) '(MACROLET LET SLOOP CONSP NONVARP COND IF*))
(setf (callers-list 'LETTERP :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'REM-DUPS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'EQN2ASSERTION :callees) '(P-XOR-P SETQ M-XOR-M M-XOR-P OP-OF CASE CASEQ LET QUOTE CADR RHS CAR LHS EQUAL COND IF*))
(setf (callers-list 'REDUCIBLE-TIME :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ADD-PREMISE-END :callees) '(APPEND CDR CONS SUBST SUBST0 SETQ PUSH FUNCTION NCONS MEMBER MEMBER0 QUERY-INSERT MEMQ SETF NULL CADR EQUAL OR TRUEP IF VARIABLEP BREAK QUOTE CAR OP-OF EQ SYMBOLP NOT AND FALSEP COND IF*))
(setf (callers-list 'SAME-OP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ACO-LRPO> :callees) '(MACROLET LET SLOOP GRT-PREC ACO-RPOMULT> ACO-LEXICO-COMP-LR ACO-LEXICO-COMP-RL ACO-RPOSTATUS> LENGTH GET NUMBERP IF* GET-STATUS AND CDR ARGS-OF NULL ACO-HARD> MEMQ AC-OP-P AC-ROOT EQOPS CADR FIRST-ARG ACO-LRPO> QUOTE CAR OP-OF EQ IS-SUBT SYMBOLP VARIABLEP COND))
(setf (callers-list 'BODY-PREMISES-SIZE :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'SUPERTERM-COVER :callees) '(MACROLET CDR ARGS-OF LET SLOOP COMM-OP-P COMM-ROOT AC-OP-P AC-ROOT OR IF* CAR OP-OF MEMQ NULL SYMBOLP VARIABLEP COND))
(setf (callers-list 'PAIRSWITH :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'STRONG-SUBGOAL-PROOFS :callees) '(MACROLET CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CDR LET SLOOP REMOVE-DUPLICATES REM-DUPS ALL-PRE-VARS IS-SUBSET IF EQN-AS-RULE-INFO CONS PUSH))
(setf (callers-list 'IS-CYCLE-EQN :callees) '(LRPO ALL-VARS CADR RHS ALL-OPS SAME-LIST LHS SETQ CAR MEMQ AC-OP-P AC-ROOT OR CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX NOT AND))
(setf (callers-list 'MAKE-CYCLE-RULE :callees) '(CYCLE-REDUCE-OTHERS WRITE-RULE PRINC TERPRI LIST PUSH OP-OF ASSQ ADD-ASSOCIATE-LIST NCONS NCONC PUSH-END NTH EQN-SOURCE MAKE-NEW-RULE TOTAL-ORDER < ARGS-OF MULT-FORM CDR MAPCAR MAX APPLY SETQ > MEMQ AC-OP-P AC-ROOT = COND IF* CADR RHS CAR LHS SIZE LET))
(setf (callers-list 'X_ADD-RULE3 :callees) '(LIST PUSH NCONS NCONC COND IF* LHS CAR OP-OF ASSQ LET ADD-ASSOCIATE-LIST 1+ SETQ))
(setf (callers-list 'IS-ELIM-TERM :callees) '(MACROLET CDR ARGS-OF LET SLOOP CADR FIRST-ARG SYMBOLP VARIABLEP QUOTE EQ OR CAR OP-OF ASSOC CONSP NONVARP AND COND IF*))
(setf (callers-list 'WRITE-RULE :callees) '(TERPRI RULE-SOURCE SETQ CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX CADR RHS WRITE-RHS CAR LHS WRITE-TERM NTH RULENO < COND IF* FORMAT UCONCAT PRINC))
(setf (callers-list 'CONSISTENT-CHECK-TESTSET :callees) '(APPLIES NOT SETQ NTH EQN-SOURCE CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX SEPARATED EQ OP-OF AND DESTROYABLE IF* VAR1-LIST MEMBER INCONSISTENT-EQN SYMBOLP VARIABLEP COND CADR RHS CAR LHS LET))
(setf (callers-list 'MULT-SORT-MERGE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'DECIDE-DEFIN-MODE :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR GET-ARITY LET SLOOP SETQ))
(setf (callers-list 'OVER-REWRITE-PREMISES :callees) '(ASK-A-NUMBER SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-NUMBER))
(setf (callers-list 'SORT-OF :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'COMPATIBLE-PATTERN :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'PREDICATEP :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SKOLEMP :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NON-DECREASING-SEQ :callees) '(MACROLET CDR LET SLOOP))
(setf (callers-list 'ONE-ARG :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CONSTRUCTORS-CHECK :callees) '(MACROLET SLOOP PROGN UNWIND-PROTECT SETQ ART? WHEN LET WHEN-ART-WITH-INPUT-FROM-TERMINAL))
(setf (callers-list 'HANDLE-AND :callees) '(NORM-CTX LENGTH = LIST APPEND SETQ CADR EQUAL OR CDR LOOP LET QUOTE CAR EQ COND IF*))
(setf (callers-list 'M-XOR-M :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST CONS MAKE-TERM TOTAL-ORDER-RES CASE SELECTQ QUOTE CAR OP-OF EQ SYMBOLP NOT AND FALSEP COND))
(setf (callers-list 'NORM-ONE-PRE :callees) '(MAKE-BETTER-PRE COVER-NORM-TERM SETQ AND FALSEP NULL EQUAL TRUEP OR NOT IF QUOTE OP-OF EQ FIRST-VAR-PRE SYMBOLP VARIABLEP COND IF* CDDR CADR CAR))
(setf (callers-list 'PICK-UNMARKED-RULE :callees) '(MACROLET LET SLOOP CASE CASEQ PICK-AC-PAIR INDUC-PICK-UNMARK EQUAL NOT NEQ AND MANUAL-PICK QUOTE EQ COND IF*))
(setf (callers-list 'QUANTIFIERP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'FORM-PATTERNS-SINGLE :callees) '(MACROLET LET SLOOP COMPATIBLE-PATTERNS CAR OP-OF ASSOC OR COVER-OF CDR SETQ))
(setf (callers-list 'INDUC-REDUCE-OTHERS-AUX :callees) '(SETQ FUNCTION REMOVE-DUPLICATES REM-DUPS NTH RULENO APPEND CDDR RPLACA QUOTE CADDR EQN-CTX CTX LIST MAKE-EQN PUSH CADR RHS EQUAL NOT NEQUAL CLEAN-RULE WRITE-RULE PRINC TERPRI > COND IF*))
(setf (callers-list 'CANONICALIZE :callees) '(MACROLET LET SLOOP CONS MAKE-TERM NCONS CDR ARGS-OF SETQ QUOTE CAR OP-OF EQ COND IF*))
(setf (callers-list 'REF-SYMMETRY-TERMS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MINI-HALF-CANONICALIZE-AND-EXPAND-EQ :callees) '(MACROLET CDR ARGS-OF SLOOP QUOTE CAR OP-OF EQ COND IF* LET))
(setf (callers-list 'THEREIS-SLOOP-COLLECT :callees) '(GET SETF PUSHNEW QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NEGATE-XOR-ARGS :callees) '(M-XOR-P CAR CONS MAKE-TERM CDR NULL REMOVE REMOVE0 SETQ EQUAL FUNCTION QUOTE MEMBER MEMBER0 COND IF*))
(setf (callers-list 'EXPECTING-FUNCTIONS :callees) '(MACROLET CDR ARGS-OF LET SLOOP BAD-TYPED CADDR SECOND-ARG CADR FIRST-ARG GET-TERM-TYPE TYPE-COHERE NOT QUOTE MEMQ CAR OP-OF ENTER-OP CHECK-ARITY CONSP NONVARP COND IF*))
(setf (callers-list 'SUGG-PREC :callees) '(MACROLET LET SLOOP REMOVE-EQ-OP SETQ))
(setf (callers-list 'PURE-CRITPAIRS :callees) '(MACROLET NTH RULENO LET SLOOP INTRO-RULE SETQ WRITE-RULE PRINC TERPRI > COND IF*))
(setf (callers-list 'SAME-NONVAR :callees) '(MATCH COND IF*))
(setf (callers-list 'INDUC-PROVE :callees) '(SUCC-END-INDUC RESET FAIL-END-INDUC QUOTE EQ CATCH *CATCH WRITE-EQN PRINC TERPRI GET-TESTSET GET-DEFINING-DOMAINS CHOOSE-CONSTRUCTORS PROG - + SETQ COVER-INDUC-PROVE PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME COND IF*))
(setf (callers-list 'INSTANCE-DELETE-CONDITION :callees) '(MACROLET CDDR RPLACA CADDR EQUAL EQN-CTX CTX CDR LET SLOOP LIST QUOTE GET OP-OF NUMBERP PREDICATEP COND IF* CADR RHS CAR LHS LET*))
(setf (callers-list 'PNTLEN :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NORM-BUT-ROOT :callees) '(MACROLET CDR ARGS-OF LET SLOOP SETQ))
(setf (callers-list 'RENAME-PAIR-RULE :callees) '(CADDDR CADDR CADR RENAME-EQN-RULE CAR LIST))
(setf (callers-list 'ADD-OLD-VARS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'POLY-MAKE-PAIRS :callees) '(QUOTE))
(setf (callers-list 'INIT-PROVE-GLOBALS :callees) '(SETQ))
(setf (callers-list 'MAKE-BETTER-PRE :callees) '(LIST CONSISTENT-PAIR CDR ARGS-OF MAKE-BETTER-PRES MAKE-EQ-PRE RETURN-FROM CADDR SECOND-ARG MAKE-BETTER-PRE GET NUMBERP PREDICATEP CONSP NONVARP BA-SIMP-NOT FALSEP CADR FIRST-ARG CAR OP-OF EQ WHEN SETQ NULL QUOTE OR TRUEP PSETF PSEUDO-TERM-ORDERING ARRANGE-EQ-ARGS OCCURS-IN NOT AND CONS ATTACH MAKE-PRE EQUAL COND IF* PSETQ SYMBOLP VARIABLEP IF))
(setf (callers-list 'POLY-CHOICE :callees) '(POLY-INITIALIZE PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'RENAME-VARS :callees) '(CDR ARGS-OF RENAME-VARS MAPCAR CAR OP-OF CONS MAKE-TERM MAKE-NEW-VARIABLE SYMBOLP VARIABLEP COND))
(setf (callers-list 'IS-CHARACTER-RULE :callees) '(OP-OF CDR ARGS-OF LENGTH LIST SETQ PUSH RHS IS-CONSTANT-TERM EQUAL FUNCTION CDDR REMOVE REMOVE0 NULL CADR FIRST-ARG SYMBOLP VARIABLEP MEMQ AC-OP-P AC-ROOT AND ASSOC CAR LHS NTH RULENO LET OR COND IF*))
(setf (callers-list 'GET-REST-GLOBALS :callees) '(LIST))
(setf (callers-list 'STR-CHOOSE-ONE-SCHEME :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'FULL-DIO :callees) '(MACROLET LET SLOOP 1- DIO-INITIALIZE AND SETQ LIST MAKE-ARRAY NCONC LENGTH FIND-BASIS-VECTORS LET*))
(setf (callers-list 'DIFF :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-CONS))
(setf (callers-list 'ADD-POSITIVE :callees) '(+ < COND IF*))
(setf (callers-list 'ADD-RULE :callees) '(ADD-CRIT-RULE ADD-RULE-COMPLETE NTH NULL IS-REDUCTION INDUC-ADD-RULE QUOTE EQUAL NOT NEQ ADD-RULE-LINEAR POLY-ADD-HOMO-RULES IS-HOMOGENEOUS-RULE AND COND IF*))
(setf (callers-list 'DEF-DOMAIN-POINTS :callees) '(MACROLET CDR ARGS-OF LET SLOOP CAR OP-OF NCONS CONS MAKE-TERM EQUAL FUNCTION MEMBER MEMBER0 IF* SYMBOLP VARIABLEP COND))
(setf (callers-list 'IS-USED-PRE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'TRY-MAKE-EQUI :callees) '(WARN-STAT OPS-EQUIV-TO INTERSECTION ADD-EQU TERPRI FORMAT UCONCAT PRINC EQ IF* AND COND QUOTE GET LET))
(setf (callers-list 'ANS-MEMBER :callees) '(MACROLET LET SLOOP NOT COND IF*))
(setf (callers-list 'PURE-NORM-OUTERMOST :callees) '(MACROLET LET SLOOP SYMBOLP VARIABLEP COND))
(setf (callers-list 'DEF-LOOP-FOR :callees) '(DEFMACRO QUOTE DEF-LOOP-INTERNAL))
(setf (callers-list 'MERGE-TWO-TUPLES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'CHOOSE-STR :callees) '(MACROLET LET SLOOP SYMBOLP COND IF*))
(setf (callers-list 'LOOSE-SYM-SEQUENCE :callees) '(MACROLET LET SLOOP CONDENSE-SEQUENCE NOT CDDR AND))
(setf (callers-list 'EQN-AS-RULE-INFO :callees) '(QUOTE))
(setf (callers-list 'FIRST-SPEC-TERM :callees) '(MACROLET CDR ARGS-OF LET SLOOP CADR FIRST-ARG FIRST-SPEC-TERM OR CAR OP-OF MEMBER SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'DETACHMENT-CRITICAL :callees) '(MAKE-NEW-VARIABLE PROCESS-CRITPAIR CADDR SECOND-ARG LIST MAKE-EQN 1+ SETQ NULL QUOTE RHS EQUAL OR TRUEP COND IF* CAR LHS CADR FIRST-ARG NTH RULENO LET))
(setf (callers-list 'CHECK-ARITY :callees) '(QUOTE GET SETF PUTPROP NUMBERP SET-ARITY THROW *THROW SYNERR TERPRI PRINC CDR ARGS-OF LENGTH EQUAL NOT NEQUAL CAR OP-OF GET-ARITY COND IF*))
(setf (callers-list 'PURE-REWRITE-AT-ROOT :callees) '(MACROLET APPEND AND COND IF* ASSQ CDR GET-RULES-WITH-OP CAR OP-OF LET SLOOP))
(setf (callers-list 'DISPLAY-ARITY2 :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'RUN-KB :callees) '(CATCH *CATCH COND IF*))
(setf (callers-list 'MR :callees) '(NTH EQN-SOURCE SECOND QUOTE FREE-VARS CONS CAR LHS SKOLEMIZE LIST MAKE-EQN NULL COND))
(setf (callers-list 'PRED-SUPERPOSITION :callees) '(CANONICALIZE PRED-SUPER MEMQ GET LHS CAR OP-OF NUMBERP PREDICATEP CDDR RPLACA QUOTE CADDR EQN-CTX CTX UNITP < OR CADR RHS EQUAL NOT NEQUAL AND IDEM-SUPERPOSITION IF* NTH RULENO = COND))
(setf (callers-list 'CRIT-MARKED :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'IDEM-SUPERPOSITION :callees) '(MACROLET CDR ARGS-OF SLOOP BOTH-ADD-PREDICATE LIST IDEM-SUPER-COMMU CDDDR NULL QUOTE EQ AND OP-OF SETQ MEMQ OR COND IF* NTH RULENO CAR LHS CANONICALIZE LET))
(setf (callers-list 'SUPPORT-EQN :callees) '(MACROLET LET SLOOP GO DISPLAY QUOTE CAR EQ READ-ARGS SETQ PRINC IS-EMPTY-LINE COND IF* PROG))
(setf (callers-list 'MAKE-ONE-SCHEME :callees) '(MACROLET FORM-PATTERNS-SINGLE LET SLOOP EQUAL FUNCTION GET-INDUC-VARS MAPCAN REMOVE-DUPLICATES REM-DUPS NCONS CAR OP-OF HAVE-MANY-RECURSIVE-EQNS CDR AND ELIGIBLE-INDUC-TERMS SETQ COND IF*))
(setf (callers-list 'PURE-SUP-TERM :callees) '(MACROLET CDR ARGS-OF LET SLOOP PURE-SUP-TERM2 PUSH EQUAL FUNCTION MEMBER MEMBER0 NOT COND IF*))
(setf (callers-list 'AC-KB-CHOICE :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'FREE-VARS :callees) '(MACROLET CDR ARGS-OF LET SLOOP REMOVE-DUPLICATES REM-DUPS CADDR SECOND-ARG FREE-VARS CADR FIRST-ARG DELETE QUOTE CAR OP-OF MEMQ NCONS SYMBOLP VARIABLEP COND))
(setf (callers-list 'RULE-DESTROYABLE :callees) '(MACROLET LET SLOOP GET-BASIC-TYPE-TERMS NON-LINEAR-VARS EXTEND-DEF-DOMAIN SETF SETQ CAR OP-OF ASSQ CDR GET-DEF-DOMAIN SUPERTERM-COVER NOT IS-PRIMITIVE COND IF*))
(setf (callers-list 'ADD-CRIT-RULE :callees) '(NCONS NCONC SETQ PUSH-END NTH SETF SET-NO-REDUCTION-MARK WRITE-RULE PRINC TERPRI > COND IF*))
(setf (callers-list 'SEARCH_BY_EQN :callees) '(APPEND SEARCH_BY_EQN NODE-CHDLST AND NODE-INFO EQUAL QUOTE SETF ENDP COND REST FIRST LET))
(setf (callers-list 'REDUCE-BY-HOMO-RULES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'LEFT-ARG2 :callees) '(CADR FIRST-ARG LEFT-ARG2 CAR OP-OF EQ SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'VAR-CONSISTENCY :callees) '(ALL-VARS CDR PRE-VARS MAPCAR RELATED-VARS AND))
(setf (callers-list 'START-RRL :callees) '(START-UP))
(setf (callers-list 'COMPRESS-FLAT :callees) '(COMMU-EXCHANGE COMMUTATIVEP PSETF SECOND FIRST PSEUDO-TERM-ORDERING ARRANGE-EQ-ARGS QUOTE EQ FLAT-SORT-ARGS MEMQ AC-OP-P COND IF* CONS MAKE-TERM))
(setf (callers-list 'PRES-SIZE :callees) '(MACROLET CDR LET SLOOP + APPLY))
(setf (callers-list 'REMOVE0 :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'ADD-OPERATOR :callees) '(THROW *THROW NTH EQN-SOURCE RPLACA QUOTE CADDR EQUAL IF* EQN-CTX CTX LIST MAKE-EQN CDDDR CHANGE-CTX CDDR CAR LHS LIST* CHANGE-RHS PUSH CDR CADR RHS CONS CHANGE-LHS NEW-TERM SETQ IS-SUBSET COND START-PUSH-HISTORY LET))
(setf (callers-list 'IS-CROSS-OP :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ORIENT-RULE :callees) '(TRY-TO-ORIENT IS-VALID-RULE LIST* EXCHANGE-LR TRY-TO-ORIENT-CONDI CADDDR OR IS-ONEWAY IS-VALID-CONDI-RULE CASE CASEQ CDDR RPLACA CADDR EQUAL EQN-CTX CTX NULL IF REMOVE-ONE-ARG PROCESS-EQUATION WRITE-EQN > NTH EQN-SOURCE FORMAT UCONCAT PRINC TERPRI PUSH QUOTE EQ CADR RHS CAR LHS DIVISIBLE-CHECK SETQ COND IF*))
(setf (callers-list 'IS-FREE-TERM :callees) '(MACROLET CDR ARGS-OF LET SLOOP CONSP NONVARP AND))
(setf (callers-list 'GET-BASIC-TYPE-TERMS :callees) '(MACROLET PARTITION-OPS-BY-TYPE LET SLOOP SETQ))
(setf (callers-list 'LOOP-ADD-TEMPS :callees) '(CDR CAR LOOP-ADD-TEMPS LISTP LOOP-ADD-BINDING SYMBOLP NULL COND))
(setf (callers-list 'IS-CONSTANT :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PRED-RULEP :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'EXPECT-ARITY :callees) '(EXPECTED SETF PUTPROP SET-ARITY2 QUOTE GET NUMBERP GET-ARITY2 SETQ DISPLAY-ONE-ARITY2 PRINC IS-VALID-VAR COND IF*))
(setf (callers-list 'LESS-VECTOR :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'NORM-BOOL-INNERMOST :callees) '(NORM-BOOL-INNERMOST MEMQ CONSP NONVARP NORM-TERM WELL-TYPED3 STRING-EQUAL SYMBOL-NAME LENGTH > GET-ARITY GET NUMBERP PREDICATEP IS-TYPE-PREDICATE CDR ARGS-OF NORM-EQ-ARGS SIMPLIFY-MY-EQ-TERM CDDDR IF NORM-XOR-TERM NORM-OR-ARGS BOOL-REWRITE-AT-ROOT NORM-AND-ARGS CASE CAR OP-OF EQ NOT AND FALSEP SYMBOLP VARIABLEP NULL QUOTE EQUAL TRUEP OR COND IF* SETQ))
(setf (callers-list 'AC-EQUAL :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MERGE-AND-REMOVE-PAIRS :callees) '(MACROLET LET SLOOP QUOTE))
(setf (callers-list 'DRAIN :callees) '(CLEAR-OUTPUT SETQ UNLESS))
(setf (callers-list 'IS-ROOTED-+ :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'IS-BLOCKED :callees) '(MACROLET LET SLOOP EQ COND IF*))
(setf (callers-list 'IS-HYPO-PRE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CHANGE-RULENO :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NULL-CTX :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PURE-OUTRED1 :callees) '(MACROLET CDR ARGS-OF LET SLOOP COND))
(setf (callers-list 'NEW-RULE-FROM-ASSOC :callees) '(ADD-RULE NTH RULENO LIST CDDR RPLACA CADDR EQUAL EQN-CTX CTX MAKE-NEW-RULE CADR RHS REDUCIBLE NOT INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT CASE CASEQ MAKE-NEW-VARIABLE QUOTE GET NUMBERP GET-STATUS LHS CAR OP-OF SETQ MEMQ AND COND IF*))
(setf (callers-list 'IS-NORMAL :callees) '(REDUCIBLE NOT))
(setf (callers-list 'NONAC-UNIFY :callees) '(NORMAL-FORM-SUB QUOTE DECOMPOSE-TERMS LET SETQ EQ COND IF*))
(setf (callers-list 'ACO-HARDER :callees) '(MACROLET LET SLOOP ACO-DELETE-EQUIV))
(setf (callers-list 'X_GET_INDUC_TERM :callees) '(MACROLET SLOOP SETQ WRITE-EQN TERPRI PRINC SETF))
(setf (callers-list 'IS-FAILED-INDUC-EQN :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'COMMUE-EXCHANGE :callees) '(REVERSE SECOND FIRST TOTAL-ORDER COND IF*))
(setf (callers-list 'COVER-NORM-TERM :callees) '(COVER-NORM-TERM BRT BA-SIMPLIFY C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME LET FLAT-TERM REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES WHEN NORM-TERM NORM-BOOL-INNERMOST GET NUMBERP PREDICATEP SUBST-VAR-PREMISES SETQ IF CAR OP-OF EQ NOT AND FALSEP NULL QUOTE EQUAL TRUEP SYMBOLP VARIABLEP OR COND IF*))
(setf (callers-list 'NCONS :callees) '(CONS))
(setf (callers-list 'X_CHOOSE_ONE_RULE :callees) '(MACROLET SLOOP SETF))
(setf (callers-list 'OUTFILE :callees) '(STRING OPEN))
(setf (callers-list 'CYCLE-REDUCE-OTHERS :callees) '(MACROLET NTH RULENO LET SLOOP))
(setf (callers-list 'CLEAN-INDHYP :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'LRPO-RESULT :callees) '(LRPO COND))
(setf (callers-list 'ENABLE-RULE :callees) '(LIST PUSH COND IF* LHS CAR OP-OF ASSQ LET ADD-ASSOCIATE-LIST NCONS NCONC SETQ PUSH-END NTH CDR REF-EXTRA-PRE-VARIABLES IF))
(setf (callers-list 'EQ-FIND :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'NORM-AND-ARGS :callees) '(MACROLET CDR ARGS-OF LET SLOOP SETQ))
(setf (callers-list 'REDUCE-+-TERM :callees) '(MACROLET APPEND AND COND IF* QUOTE ASSQ CDR GET-RULES-WITH-OP OR LET SLOOP))
(setf (callers-list 'REMOVE-QUAN-ARGS :callees) '(MACROLET CDR ARGS-OF LET SLOOP CAR OP-OF CONS MAKE-TERM))
(setf (callers-list 'DEF-LOOP-MACRO :callees) '(DEFMACRO QUOTE DEF-LOOP-INTERNAL))
(setf (callers-list 'ADD-TO-ARGS :callees) '(APPLY-TO CDR SUBLIS APPLYSUBST ADD-REST-ARGS QUOTE ASSQ CADR RHS EQ COND IF*))
(setf (callers-list 'SMALLER-PRE-CAR :callees) '(CAR SIZE <))
(setf (callers-list 'LAST-CONSISTENCY-CHECK :callees) '(CDR CONS CHANGE-LHS SYMBOLP FALSEP VAR-CONSISTENCY CADDR SECOND-ARG FIRST-ARG CONSISTENT-PAIR ALL-VARS NULL OP-OF CONSP NONVARP CDDR LIST* EXCHANGE-LR SETQ LHS CADR RHS LRPO NTH EQN-SOURCE CAR QUOTE EQ CADDDR OR IS-ONEWAY NOT AND COND IF*))
(setf (callers-list 'WRITE-SEQ-EQN :callees) '(WRITE-F-EQN WRITE-SEQ-NUM))
(setf (callers-list 'TYIPEEK-SPA-CR :callees) '(PEEK-CHAR))
(setf (callers-list 'IS-VALID-OP :callees) '(LISTP MEMQ IS-VALID-VAR NULL OR NOT))
(setf (callers-list 'ENTER-OP :callees) '(NCONS NCONC SETQ PUSH-END PUSH MEMBER IS-BOOL-OP NOT AND IF MEMQ COND IF*))
(setf (callers-list 'LIST-DIFF :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'REMAKE-PREMISES :callees) '(MACROLET CDR LET SLOOP CONS QUOTE CAR EQ COND IF*))
(setf (callers-list 'LAST-CHECK-2ND-RULE :callees) '(LIST NTH RULENO FORMAT UCONCAT PRINC TERPRI NONDO-CRIT NOT COND IF*))
(setf (callers-list 'IS-PREMISE-SET :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'POST-FOR-WHILE :callees) '(MACROLET LET SLOOP AND = OR COND))
(setf (callers-list 'CAN-HAVE-NEW-OP :callees) '(ADD-OPERATOR PUSH MEMBER-TERM OR UNDO TERPRI PRINC SUB1 SETQ OP-LIST > LENGTH < NULL AND COND IF* VAR-LIST LET))
(setf (callers-list 'DIVISIBLE-CHECK :callees) '(MACROLET LET SLOOP NCONS LIST THIRD SECOND CAR OP-OF ASSOC SETQ CONSP NONVARP AND COND IF*))
(setf (callers-list 'ASK-FOR-OPERATOR :callees) '(RETURN PUSH SET-INFIX = IS-INFIX-OP GET SETF PUTPROP SET-ARITY EQUAL NEQUAL NUMBERP AND IS-VALID-OP NOT OR GO MEMBER TERPRI QUOTE READ-ATOM SETQ PRINC IS-EMPTY-LINE COND IF* PROG))
(setf (callers-list 'PURE-REDUCE-BY-ONE-AT-ROOT :callees) '(SUBLIS CADR RHS EQ APPLYSUBST NTH RULENO PUSH CAR LHS PURE-MATCH SETQ IF* SYMBOLP VARIABLEP COND))
(setf (callers-list 'SYMMETRY-TERMS :callees) '(MACROLET EQUAL FUNCTION CDR ARGS-OF REMOVE-DUPLICATES REM-DUPS LET SLOOP CAR MEMQ AC-OP-P AC-ROOT SYMBOLP VARIABLEP COND))
(setf (callers-list 'DECANON-AND :callees) '(CADR FIRST-ARG QUOTE LENGTH CASE CASEQ))
(setf (callers-list 'DETACHMENT-RULE :callees) '(MEMQ CADR FIRST-ARG SETQ CONSP NONVARP LHS CAR OP-OF EQ CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX NULL AND))
(setf (callers-list 'IS-VALID-CONDI-RULE :callees) '(MACROLET CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CDR SLOOP REMOVE-DUPLICATES REM-DUPS ALL-PRE-VARS CADR RHS CAR LHS VAR-LIST LET))
(setf (callers-list 'POLY-REDUCE-AT-ROOT :callees) '(REDUCE-*-TERM APPEND AND COND IF* QUOTE ASSQ CDR GET-RULES-WITH-OP REDUCE-+-TERM CAR OP-OF CASE CASEQ))
(setf (callers-list 'BA-SIMP-NOT :callees) '(CADR FIRST-ARG CAR OP-OF CASE QUOTE LIST MAKE-TERM-1ARG SYMBOLP VARIABLEP NULL COND))
(setf (callers-list 'MAKE-EQN :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ADD-EQU :callees) '(MACROLET SLOOP UPDATE-BY-EQ CDR UNION RPLACD ASSOC APPEND FUNCTION DELETE DELETE0 SETQ ADD-AT-END LIST PUSH NCONS EQUAL COND IF* OPS-EQUIV-TO LET))
(setf (callers-list 'GET-RULES-WITH-OP :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'EQUIV-LIST :callees) '(MACROLET SLOOP LET))
(setf (callers-list 'NORM-CTX :callees) '(NORM-CTX BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME LET FLAT-TERM REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES NORM-TERM NORM-BOOL-INNERMOST GET NUMBERP PREDICATEP SUBST-VAR-PREMISES SETQ NORM-POLY CONSP NONVARP IS-POLY CAR OP-OF EQ NOT AND FALSEP NULL QUOTE EQUAL TRUEP SYMBOLP VARIABLEP OR COND IF*))
(setf (callers-list 'X_MATH_IND :callees) '(MACROLET LET SLOOP SETF))
(setf (callers-list 'MAKE-BUFFER :callees) '(NEXT-TOKEN LIST LET))
(setf (callers-list 'MAKERULES :callees) '(MACROLET SLOOP SETQ))
(setf (callers-list 'FAIL-END-INDUC :callees) '(MACROLET LET SLOOP COND IF*))
(setf (callers-list 'COPYLIST :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'GET-INSTANCE-TERMS2 :callees) '(MACROLET REST-ELEMENTS SUB1 CDR FIRST-N-ELEMENTS LET SLOOP CAR < COND IF* REF-INSTANCE-SEEDS2 SETQ))
(setf (callers-list 'REDUCE-AT-ROOT-BOOL :callees) '(ADD-TO-ARGS CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX POLISH-PREMISES APPLIES REDUCE-EQ-TERM CDR ARGS-OF REDUCE-XOR-TERM BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SETQ SYMBOLP VARIABLEP NCONS REDUCE-AND-TERM LET FLAT-TERM CASE SELECTQ LHS CAR OP-OF EQ SAME-OP COND IF*))
(setf (callers-list 'BLOCK-CHOICE :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'PRE-VARS :callees) '(EQUAL FUNCTION CADR COND IF* CAR ALL-VARS NCONC REMOVE-DUPLICATES REM-DUPS))
(setf (callers-list 'ACLRPO :callees) '(CAR > GREATERP CDR EQUAL DISTR-AC-ORDER LET OP-LIST UNION PREC-CONSISTENT IF* ACO-LRPO> QUOTE EQ PURE-LRPO NULL COND))
(setf (callers-list 'OPEN-READ-FILE :callees) '(TERPRI FORMAT UCONCAT INFILE OR QUOTE READ-ATOM STRING-DOWNCASE SETQ PRINC IS-EMPTY-LINE COND IF* LET))
(setf (callers-list 'INTRO-RULE :callees) '(MACROLET LET SLOOP CHOOSE-BY-HAND CASE CASEQ COND IF*))
(setf (callers-list 'DISPLAY-OPS :callees) '(MACROLET LET SLOOP POP FORMAT UCONCAT SETQ PROG COND IF*))
(setf (callers-list 'PICK-MAX-SCORE-OP :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'DISABLE-RULE :callees) '(LHS CAR OP-OF ASSQ EQUAL FUNCTION DELETE DELETE0 SETQ NTH CDR REF-EXTRA-PRE-VARIABLES IF))
(setf (callers-list 'MAKE-TERM-1ARG :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NORM-PROVE-ALL-EQNS :callees) '(MACROLET LET SLOOP CDR COND IF*))
(setf (callers-list 'GET-RHS :callees) '(QUOTE EXPECTED CONS SETQ NEXT-TOKEN NCONS CADR TOKEN-TEXT CASE CASEQ GET-TERM LET))
(setf (callers-list 'WRITE-COMMENT-EQN :callees) '(TERPRI CTX RHS WRITE-COMMENT-RHS PRINC NTH EQN-SOURCE-TYPE EQ IS-SOURCE-TYPE IF NULL CADR TRUEP IS-ASSERTION NOT CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX IS-CONDI-EQN OR COND IF* CAR LHS WRITE-TERM-SIMPLE))
(setf (callers-list 'OR-CONDI-EQN :callees) '(MACROLET CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX NEGATE-PREMISES LET SLOOP APPEND APPEND1))
(setf (callers-list 'INCREMENT-POS :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE TYPEP OR LET SLOOP))
(setf (callers-list 'CODE :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'GET-TERM-ARGS :callees) '(MACROLET LET SLOOP CONS MAKE-TERM SETQ NEXT-TOKEN CADR TOKEN-TEXT EQUAL COND IF*))
(setf (callers-list 'AC-C-ROOT :callees) '(COMM-OP-P COMM-ROOT CAR MEMQ AC-OP-P AC-ROOT OR))
(setf (callers-list 'COVER-MULTI-TERM-INDUC :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'CARDINALITY :callees) '(MACROLET LET SLOOP COND IF*))
(setf (callers-list 'MAKE-PAIRS :callees) '(EQUAL NEQUAL > - CDR LENGTH < IS-HOMOGENEOUS-TERM SAME-ROOT MEMQ AC-OP-P AC-ROOT PUSH IS-CHARACTER-RULE NOT RULENO = * TIMES LIST NCONS NCONC PUSH-END OR QUOTE OP-OF EQ CADR RHS CONSP NONVARP AND IS-ROOTED-+ SETQ LET POLY-MAKE-PAIRS NTH LHSIZE + CAR LHS LET* ACCEPTABLE-PAIR COND IF*))
(setf (callers-list 'ONE-COMPOSITION :callees) '(CDR ADD-SOLN < IS-SUBSEQ-LIST 1+ SETQ INC PRINC TERPRI = CADR CAR SYMMETRY-NON-DELETABLE NOT AND COND IF*))
(setf (callers-list 'ALWAYS-SLOOP-COLLECT :callees) '(GET SETF PUSHNEW LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'IS-ASSOC-UNDER-C :callees) '(CAR OP-OF MEMQ IS-ASSOC-PAIR AND))
(setf (callers-list 'POLY-MATCH-+ :callees) '(CONS CDR EQUAL FUNCTION REMOVE REMOVE0 QUOTE ASSOC POP LET LIST NCONS AC-MATCH SETQ COND IF*))
(setf (callers-list 'WELL-TYPED2 :callees) '(MACROLET CDR ARGS-OF CADR FIRST-ARG GET-TERM-TYPE LET SLOOP QUOTE CAR OP-OF MEMQ COND IF*))
(setf (callers-list 'PRED-SUPER :callees) '(MACROLET CDR LET SLOOP))
(setf (callers-list 'PROCESS-ASSERTION :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'DISPLAY-KB-STAT :callees) '(* TRUNCATE > GREATERP NRM-TIME QUOTE EQ COND IF* LENGTH TERPRI FORMAT UCONCAT PRINC IF FLOAT LET))
(setf (callers-list 'ACM-AND-EQ :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM LET))
(setf (callers-list 'LOOP-DECLARE-BINDING :callees) '(ERROR RETURN CDR SECOND LIST QUOTE EQ CONSP IF PUSHNEW CAR ASSOC COND DOLIST NULL OR WHEN LOOP-DECLARE-BINDING GETF SETF MEMBER AND))
(setf (callers-list 'REMOVE-SUGG :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'WRITE-ASSERTION :callees) '(TERPRI CADAR CAAR FORMAT UCONCAT PRINC CDR WRITE-TERM))
(setf (callers-list 'CONSISTENT-CHECK :callees) '(NTH EQN-SOURCE CDDR RPLACA CADDR EQN-CTX CTX SEPARATED OP-OF EQ AND FALSEP NULL QUOTE EQUAL OR TRUEP NOT IF* VAR1-LIST MEMBER INCONSISTENT-EQN SYMBOLP VARIABLEP COND CADR RHS CAR LHS LET))
(setf (callers-list 'TOTAL-ORDER-RES :callees) '(MACROLET LET SLOOP LENGTH > QUOTE CAR EQ TOTAL-ORDER-ATOM ATOM IF* NULL COND))
(setf (callers-list 'LIST_TREE :callees) '(SHOW-TREE-INFO TERPRI))
(setf (callers-list 'INDUC-REDUCE-OTHER-RULES :callees) '(MACROLET LHS CAR OP-OF ASSQ CDR RULES-WITH-OP NTH RULENO LET SLOOP CHECK-BUILD-RULE))
(setf (callers-list 'MAX-DEPEND-GAP :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ASSOC0 :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'PARSE-LOOP1 :callees) '(PARSE-LOOP-DO UNTIL QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST* PUSH WHILE PARSE-LOOP-FOR FOR :NO-BODY NULL AND DO T SETQ LOOP-POP NAMED LOOP-PEEK LCASE))
(setf (callers-list 'SPECIAL-SIZE :callees) '(SIZE UNKNOWN-SIZE LITERAL-NUM COND IF* TRUNCATE QUOTIENT DEPTH TIMES W-SIZE * + CASE CASEQ))
(setf (callers-list 'BASE-DEPTH :callees) '(MACROLET SLOOP LET))
(setf (callers-list 'ASK-A-NUMBER :callees) '(CLEAN-LINE PRINC INVALID-INPUT-WARNING SAVE-WORD-END SETQ < COND IF* NUMBERP QUOTE READ-ATOM DO))
(setf (callers-list 'GET-NONCONS :callees) '(QUOTE))
(setf (callers-list 'NORM-WITH-BIN :callees) '(MACROLET ARGS-OF LET SLOOP CAR OP-OF CONS MAKE-TERM SETQ ASSQ CDR SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'PROOF-UNDER-NEW-PREMISES :callees) '(AND POP NEGATE-ONE-PRE MAPCAR NTH APPEND1 COVER-PROOF-PROCESS SETF CDDDR RHS LHS LIST* CHANGE-CTX FLATTEN-EQN CONS APPEND CDDR RPLACA COND IF* EQN-CTX CTX EQUAL FUNCTION CADDR SECOND-ARG SUBST SUBST0 COPY-TREE COPY WRITE-TERM-SIMPLE WRITE-SEQ-EQN PRINC TERPRI > WHEN NCONS CDR QUOTE CAR EQ IF MAKE-PRE-ASS SETQ CADR FIRST-ARG PUSH))
(setf (callers-list 'M-*-M :callees) '(CAR CONS MAKE-TERM CDR APPEND *-CANONICALIZE MERGE-SORT-ARGS MEMQ IF* LET QUOTE EQUAL NULL COND))
(setf (callers-list 'ORIENT-INDUC-HYPO :callees) '(PUSH ENABLE-RULE MEMQ QUOTE EQ COND CATCH *CATCH SETQ))
(setf (callers-list 'RIGHT-ARG2 :callees) '(CADDR SECOND-ARG RIGHT-ARG2 CAR OP-OF EQ SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'DEPTH :callees) '(DEPTH MAPCAR MAX APPLY 1+ CDR ARGS-OF NULL SYMBOLP VARIABLEP COND))
(setf (callers-list 'TR-FIND :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'DIVISIBLE-CHECK2 :callees) '(DIVISIBLE-NONAC-CHECK DIVISIBLE-AC-CHECK COMM-OP-P COMM-ROOT CAR MEMQ AC-OP-P AC-ROOT OR COND IF*))
(setf (callers-list 'AND-LHS-TRUE-RHS :callees) '(MACROLET CDR LET SLOOP CDDR RPLACA CADDR EQN-CTX CTX NULL CADR RHS EQUAL OR TRUEP QUOTE LHS CAR OP-OF EQ AND COND IF*))
(setf (callers-list 'GET-SYMMETRY-TERMS :callees) '(CAR LHS SYMMETRY-TERMS CONS SYMMETRY-VARS SETQ COND IF*))
(setf (callers-list 'VAR1-LIST :callees) '(ALL-VARS))
(setf (callers-list 'SPECIAL-SUBST :callees) '(MACROLET CDR ARGS-OF LET SLOOP CONS MAKE-TERM CADDR SECOND-ARG SPECIAL-SUBST LIST CADR FIRST-ARG QUOTE CAR OP-OF MEMQ EQ IF* SYMBOLP VARIABLEP COND))
(setf (callers-list 'SLOOP :callees) '(DEFMACRO PARSE-LOOP))
(setf (callers-list 'RPOMULT :callees) '(MACROLET SLOOP NULL COND POP CDR ARGS-OF MULT-FORM MULT-DIFF SETQ LET))
(setf (callers-list 'NORMALIZE-BY-PREMISES :callees) '(CDR NORM-BY-PREMISES))
(setf (callers-list 'EQUIV-OPS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'KNUTH-BENDIX1 :callees) '(MACROLET LET SLOOP SETQ OR COND IF*))
(setf (callers-list 'PURE-NORM-INN :callees) '(MACROLET ASSQ RULES-WITH-OP LET SLOOP CDR ARGS-OF NORM-INN MAPCAR CAR OP-OF CONS MAKE-TERM SETQ SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'ARGS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CHANGE-CTX :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'WRITE-F-PREMISES :callees) '(MACROLET LET SLOOP CAR WRITE-ONE-PRE PRINC TERPRI CDR COND IF* PROGN WRITE-PREMISES EQUAL IF))
(setf (callers-list 'ADD-END :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'REDUCE-AT-ROOT-ONE-RULE :callees) '(BRT BA-SIMPLIFY C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SYMBOLP VARIABLEP COND IF* ADD-TO-ARGS LET FLAT-TERM NTH RULENO PUSH IF TRY-ONE-RULE SETQ WHEN))
(setf (callers-list 'EXTEND-DOM-ARGS :callees) '(MACROLET SLOOP NCONC LENGTH LET))
(setf (callers-list 'LOOP-PARSE-ADDITIONAL-COLLECTIONS :callees) '(:NO-BODY LCASE NULL LOOP-POP DO HELPER FUNCALL LET GET QUOTE FIND LET*))
(setf (callers-list 'WRITE-VARIABLE :callees) '(CONS PUSH 1+ FORMAT UCONCAT SETQ EQUAL FUNCTION SYMBOL-NAME GET_PNAME MEMBER MEMBER0 CDR PRINC ASSOC COND IF*))
(setf (callers-list 'EXPECT-ARITY12 :callees) '(EXPECTED DISPLAY-ONE-ARITY2 SETF PUTPROP SET-ARITY2 QUOTE GET NUMBERP COND GET-ARITY2 SETQ TERPRI GET-ARITY FORMAT UCONCAT PRINC))
(setf (callers-list 'MULTI-COM :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'TOKEN-TEXT :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'GET-INDUC-VARS :callees) '(MACROLET CDR ARGS-OF LET SLOOP CAR OP-OF ASSOC OR COVER-OF SECOND SETQ))
(setf (callers-list 'TEST-RRL :callees) '(TERPRI PRINC OUTFILE QUOTE TRUENAME FORMAT UCONCAT COND IF* OPEN-READ-FILE SETQ PUSH))
(setf (callers-list 'GUIDE-REDUCIBLE-TIME :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'REWRITE-AT-ROOT :callees) '(MACROLET SLOOP AND SIMPLIFY-COND-TERM SIMPLIFY-MY-EQ-TERM EQ QUOTE MEMQ CAR OP-OF LET CONSP NONVARP COND IF*))
(setf (callers-list 'ADD-SUGG-TYPE1 :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'MANUAL-OPTIONS :callees) '(ASK-A-NUMBER SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-NUMBER))
(setf (callers-list 'PRINT-CURRENT-PREMISES :callees) '(PRINC TERPRI))
(setf (callers-list 'TRACE-GENERATED-RESULT :callees) '(WRITE-SEQ-EQN PRINC COND IF* TERPRI))
(setf (callers-list 'IS-SUBSEQ-LIST :callees) '(MACROLET POP LET SLOOP))
(setf (callers-list 'SAME-LIST :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'CLEAN-LINE :callees) '(READ-LINE))
(setf (callers-list 'GET-DEFINING-DOMAINS :callees) '(MACROLET LET SLOOP SETQ EQUAL COND IF*))
(setf (callers-list 'COVER-AUTO-LEVEL :callees) '(QUOTE MEMBER ASK-A-NUMBER SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-NUMBER))
(setf (callers-list 'FLAT-TERM-FUNC :callees) '(BRT C-PERMUTATION MAKE-FLAT SETQ SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'IS-BIG-ENOUGH-RULE :callees) '(MACROLET OP-OF ASSOC CDR CAR LHS LET SLOOP))
(setf (callers-list 'RPOST :callees) '(REVERSE LEXICO-COMP QUOTE GET CAR OP-OF NUMBERP COND IF* GET-STATUS CASE CASEQ CDR ARGS-OF LET))
(setf (callers-list 'LOOP-RETURN :callees) '(DEFMACRO LENGTH <= COND BLOCK LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'BIGT-ONE-KILL-ONE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'EQN-SOURCE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'GREATER-ARITY :callees) '(GET-ARITY >))
(setf (callers-list 'FORM-PREMISES-FROM-CONJ :callees) '(MACROLET LET SLOOP QUOTE CONS))
(setf (callers-list 'ADD-SUGG-TYPE :callees) '(NCONC ADD-SUGG-TYPE1 ASSOC LIST NCONS SETQ NULL COND))
(setf (callers-list 'PROCESS-AC-CRITICAL-PAIR :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM LET))
(setf (callers-list 'TYPE-ERROR :callees) '(ERROR))
(setf (callers-list 'ALWAYS :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PARA-SUP-TERM2 :callees) '(MACROLET CDR ARGS-OF SLOOP SUBLIS CADR RHS EQ APPLYSUBST EQUAL FUNCTION REMOVE REMOVE0 REMONCE QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST RPLAT-IN-BY LET* - + UNIFIER PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME SETQ COND IF*))
(setf (callers-list 'IS-ASSERTION :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ADD-BIND-TO-SUB :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SET-COMMUTATIVE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'SIMPLIFY-PREMISES :callees) '(MACROLET LET SLOOP QUOTE SETQ COND IF*))
(setf (callers-list 'DECANON-XOR :callees) '(MACROLET CDR ARGS-OF LET SLOOP CONS MAKE-TERM CADR FIRST-ARG DECANON-AND QUOTE LENGTH CASE CASEQ))
(setf (callers-list 'DISP_STRINGS :callees) '(PRINT_STR DOLIST))
(setf (callers-list 'SET-EQN-MARK :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM LET))
(setf (callers-list 'NTIMES :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR LET SLOOP))
(setf (callers-list 'REMOVE-RIGHT-ARG :callees) '(REMOVE-RIGHT-ARG2 CADR FIRST-ARG QUOTE GET NUMBERP GET-STATUS EQ COND IF*))
(setf (callers-list 'ASK-NUMBER :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'TRACE-CRIT :callees) '(WRITE-SIGMA WRITE-EQN LUCID-RUNTIME-SUPPORT:BQ-CONS WRITE-ASSERTION COND IF* SECOND FORMAT UCONCAT PRINC FIRST CASE CASEQ TERPRI))
(setf (callers-list 'CURSOR_DOWN :callees) '(MACROLET SLOOP FIRST NODE-CHDLST REST SETF))
(setf (callers-list 'RENAME-TERM :callees) '(SUBLIS EQ COND IF* APPLYSUBST GET-VAR-SUBSTITUTION QUOTE INITSYM SETQ))
(setf (callers-list 'ADD_CHILD :callees) '(LIST APPEND NODE-CHDLST NODE-PARENT NODE-STATUS NODE-STATE NODE-SEQNO NODE-SOURCE MAKE-NODE SETF NODE-INFO NODE-LABEL EQUAL AND COND IF*))
(setf (callers-list 'CYCLE-REWRITE-AT-ROOT :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'FLATTEN-EQN :callees) '(CDDDR FLATTEN-PREMISES CHANGE-CTX RPLACA QUOTE CADDR EQUAL EQN-CTX CTX CDDR CADR RHS BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SYMBOLP VARIABLEP COND IF* CAR LHS LET FLAT-TERM LIST* CHANGE-LHS-RHS SETQ))
(setf (callers-list 'REF-SYMMETRY-VARS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CTX-GT-LHS :callees) '(THROW *THROW WRITE-EQN PRINC TERPRI))
(setf (callers-list 'SET-SYMMETRY-MARK :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'LOOK-AT-PAIRS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SUB-QUASI-REDUCIBLE :callees) '(MACROLET CDR ARGS-OF LET SLOOP))
(setf (callers-list 'REDUCE-EQN-BY-ONE-RULE :callees) '(MACROLET LET SLOOP MY-COPYLIST LIST* CHANGE-RHS CADR RHS CONSP NONVARP AND CDR CONS CHANGE-LHS CAR LHS X_REDUCE-BY-ONE-RULE CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX SETQ))
(setf (callers-list 'PRE-BIGGER-THAN-EQN :callees) '(MACROLET BIG-PRE-INFO LET SLOOP))
(setf (callers-list 'PUSH-HISTORY-MANUAL :callees) '(1+ SETQ PUSH-HISTORY = COND IF*))
(setf (callers-list 'CONTINUE-MAPPING :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'RUN-KB-OPTIONS :callees) '(RETURN NOT IF PRINC EQ EXT-TYPE-RELATION TRACE-OPTIONS SUPPORT-EQN INSTANT-CHOICE REDUCE-SYSTEM-STR PROOF-METHODS ORDER-STR OPERATOR-OPTIONS NORM-STRATEGY MANUAL-OPTIONS DISPLAY COVER-SET-INDUC-STRA UNDO-STRATEGY FOPC-STRA FASTKB-CHOICES CYCLE-CHOICE CRIT-STRATEGY-OPTIONS BRAKE-CHOICE AUTO-OPTIONS SET-ART-MODE SET-HANDLE-AND AC-KB-CHOICE CASE CASEQ NUMBERP COND IF* READ-ATOM CHOOSE-STR QUOTE PRINT-HEAD PROGN SETQ DO TERPRI LET USER-SELECTQ))
(setf (callers-list 'TRACE-AC-SUPERPOSITION :callees) '(NTH RULENO FORMAT UCONCAT CASE CASEQ PRINC TERPRI))
(setf (callers-list 'COMPOSE :callees) '(MACROLET LET SLOOP APPEND EMPTY-SUB NULL OR COND IF*))
(setf (callers-list 'COVER-NORM-UNCONDI-EQN :callees) '(LAST-CONSISTENCY-CHECK IF NTH EQN-SOURCE CDDR RPLACA EQN-CTX CTX LIST MAKE-EQN EQUAL-TERM BA-SIMP-NOT FIRST-ARG CADDR SECOND-ARG ALL-VARS IS-SUBSET OP-OF EQ NULL QUOTE OR TRUEP CONSP NONVARP AND WHEN COVER-NORM-TERM CADR RHS CAR LHS EQUAL NOT COND IF* SETQ))
(setf (callers-list 'CASEQ :callees) '(CDR LUCID-RUNTIME-SUPPORT:BQ-LIST LUCID-RUNTIME-SUPPORT:BQ-CONS EQUAL FUNCTION CAR MEMBER MEMBER0 COND LAMBDA :UNNAMED-LAMBDA MAPCAR QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'POLY-LRPO :callees) '(MACROLET CDR SLOOP = LENGTH LET SAME-ROOT QUOTE CAR OP-OF EQ AND SYMBOLP VARIABLEP OR LRPO COND IF*))
(setf (callers-list 'COMMUNE-TERMS :callees) '(MACROLET COMMUNE-TERMS2 LET SLOOP CDDDR NULL QUOTE CAR OP-OF MEMQ AND NCONS SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'POLY-SUPER-DISTRIBUTION :callees) '(MACROLET REF-SYMMETRY-VARS NONLINEAR-VARS-UNDER-* ONE-PRESENTATIVE LET SLOOP IS-HOMOGENEOUS-RULE OP-OF LHS CONSP NONVARP AND IS-ROOTED-+ QUOTE NTH RULE-SOURCE CAR EQ NOT OR COND IF*))
(setf (callers-list 'POST-POSI-STRA :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'SIMPLIFY-MY-EQ-TERM :callees) '(MACROLET CDR ARGS-OF LET SLOOP CONS MAKE-TERM NEQ CONSISTENT-PAIR NORM-CTX REDUCE-AT-ROOT BA-SIMP-NOT CAR OP-OF EQ SYMBOLP NOT AND FALSEP NULL QUOTE OR TRUEP EQUAL COND IF* CADDR SECOND-ARG CADR FIRST-ARG SETQ))
(setf (callers-list 'NO-SUBSUMPTION :callees) '(MACROLET LET SLOOP NOT))
(setf (callers-list 'FACTORIZATION :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'TOTAL-ORDER-ATOM :callees) '(SYMBOL-VALUE SYMEVAL BOUNDP AND SYMBOLP NOT ALPHALESSP > GREATERP IF* NUMBERP EQ COND))
(setf (callers-list 'COPYSYMBOL :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ELIM-BIN :callees) '(REMQ EQUAL FUNCTION REMOVE REMOVE0 OCCUR-NUM >= ARGS-OF REM-ARGS OP-OF EQ SAME-OP CAR MEMQ AC-OP-P AC-ROOT AND CONSP NONVARP COND IF* ASSQ CDR LET))
(setf (callers-list 'SYMEVAL :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'GET-ARITY2 :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NORM-TERM :callees) '(NORM-OUTERMOST SETQ))
(setf (callers-list 'X_INITIAL :callees) '(+ NODE-CHDLST NODE-PARENT NODE-INFO NODE-STATUS QUOTE NODE-STATE NODE-SEQNO NODE-SOURCE NODE-LABEL SETF))
(setf (callers-list 'REMOVE-EQ-OP :callees) '(MACROLET SLOOP LET))
(setf (callers-list 'PRINT-NODE :callees) '(LAST FIRST BUTLAST DOLIST NODE-SEQNO PRINC NODE-LABEL ENDP COND))
(setf (callers-list 'PARSE-NO-BODY :callees) '(QUOTE RETURN LOOP-UN-POP SETF COND T PARSE-LOOP-MACRO :SLOOP-MACRO WITH-UNIQUE END-TEST PARSE-LOOP-DO APPEND INCREMENT SETQ NODECLARE DECLARE PARSE-LOOP-WITH WITH NIL PARSE-LOOP-INITIALLY (INITIALLY FINALLY) LCASE OR NULL LOOP-POP DO))
(setf (callers-list 'CHECK-MISMATCH :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'STR-FORMULATE-SCHEME :callees) '(MACROLET LET SLOOP NCONS CONS BASIC-TERM MAPCAR SETQ))
(setf (callers-list 'SIMP-AND :callees) '(MACROLET QUOTE LET SLOOP))
(setf (callers-list 'FIRST-N-ELEMENTS :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR LET SLOOP))
(setf (callers-list 'SIZE-UNI :callees) '(MACROLET LET SLOOP NCONS EQ COND IF*))
(setf (callers-list 'DEFINING-DOMAIN :callees) '(MACROLET ASSQ CDR RULES-WITH-OP SLOOP NCONS LET))
(setf (callers-list 'DELETE-RULE :callees) '(MACROLET SLOOP SETQ READ-ARGS LET PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'PAIR-INFO :callees) '(CADDR CADR NTH RULENO COND IF* CAR FORMAT UCONCAT))
(setf (callers-list 'RULE-SUBSUMED-PREMISES :callees) '(MACROLET EQN2PRE NEGATE-ONE-PRE LET SLOOP))
(setf (callers-list 'REDUCE-BY-P-COMMUT :callees) '(MACROLET CDR ARGS-OF MULT-FORM CADDDR CADDR LET SLOOP CAR OP-OF CADR EQ COND IF*))
(setf (callers-list 'DISPLAY-ONE-ARITY2 :callees) '(MACROLET CDR LET SLOOP CAR GET-CODOMAIN-TYPES SETQ FORMAT UCONCAT PRINC QUOTE GET NUMBERP GET-ARITY2 COND IF*))
(setf (callers-list 'FUNC-SUPERPOSITION :callees) '(MACROLET COMMUNE-TERMS NOT NEQUAL LET SLOOP RULE-SOURCE CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX CADR RHS CAR LHS MAKE-NEW-RULE IS-GENERAL-RULE INDUC-IDEM-SUPERPOSITION NTH RULENO = COND IF* SETQ))
(setf (callers-list 'PP :callees) '(PPRINT))
(setf (callers-list 'OBJ-NAME :callees) '(QUOTE CONCATENATE))
(setf (callers-list 'SET-INFIX :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NAME2RULENUM :callees) '(NUMBERP IF ASSOC CDR OR))
(setf (callers-list 'MINIMIZE-SLOOP-COLLECT :callees) '(GET SETF PUSHNEW LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CRRL :callees) '(CLOAD2 DOLIST))
(setf (callers-list 'EXT-STATUS :callees) '(MACROLET OPS-EQUIV-TO SLOOP TERPRI GET MEMBER QUOTE READ-ATOM LET PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'COMPATIBLE-PATTERNS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'FREE-SUBTERMS :callees) '(CDR ARGS-OF FREE-SUBTERMS MAPCAN NCONS CAR OP-OF ASSOC IS-FREE-TERM AND SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'IS-PRIMITIVE :callees) '(IS-LIMITED))
(setf (callers-list 'IN-TABLE-SLOOP-MAP :callees) '(GET SETF LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'BREADTH-SEARCH :callees) '(APPEND BREADTH-SEARCH NODE-CHDLST AND NODE-LABEL EQUAL QUOTE SETF ENDP COND REST FIRST LET))
(setf (callers-list 'NEW-ARGS :callees) '(MACROLET APPEND N-TUPLES SLOOP LET))
(setf (callers-list 'C-PERMU :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PARSE-LOOP-FOR :callees) '(COPY-TREE + - LUCID-RUNTIME-SUPPORT:BQ-LIST* ERROR SUBTYPEP CONSP PROGN GETF NOT IF NULL THE-TYPE CONSTANTP FOURTH NTH LOOP-UN-POP OR T PARSE-LOOP-MAP :SLOOP-MAP RETURN TRANSLATE-NAME PARSE-LOOP-MACRO :SLOOP-FOR TO ABOVE BELOW THIRD EQ ASSERT SECOND CAR LISTP AND BY DOWNFROM ADD-FROM-DATA (UPFROM FROM) EQL UNLESS SYMBOLP COND ON SETQ SETF QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST PUSH LOOP-ADD-BINDING LOOP-ADD-TEMPS GENSYM LET IN LCASE DO LOOP-POP LET*))
(setf (callers-list 'NEW-TOP-TERMS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'FLATTEN-WITNESS :callees) '(FOUND-WITNESS CADDR LIST EQ COND IF* QUOTE CONS CADR RHS CAR LHS EQUAL WHEN FLATTEN-EQN SETQ))
(setf (callers-list 'SUP-TERM2 :callees) '(PROCESS-CRITPAIR WELL-TYPED-EQN 1+ FLATTEN-EQN NTH RULENO SUBLIS CADR RHS RPLAT-IN-BY APPLYSUBST LIST MAKE-EQN OP-OF EQ SYMBOLP AND FALSEP NOT NOT-FALSEP HANDLE-CONDITIONS CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX OR COND IF* - + CAR LHS UNIFIER SETQ PROG1 GET-INTERNAL-RUN-TIME ADD-TIME LET))
(setf (callers-list 'THE-TYPE :callees) '(LIST COND SECOND QUOTE CAR EQ CONSP KEYWORDP NOT GETF OR SETF AND))
(setf (callers-list 'X_FAILURE_HANDLER :callees) '(MACROLET SLOOP TERPRI SETF HEAD_OF_FAILURE_HANDLER NODE-SEQNO SETQ))
(setf (callers-list 'READC :callees) '(CHAR-CODE CHAR-ASCII NULL COND IF* READ-CHAR LET SETQ UNLESS))
(setf (callers-list 'SAME-ARITY :callees) '(MACROLET OPS-EQUIV-TO LET SLOOP))
(setf (callers-list 'MATCH-BOOL-NEW :callees) '(MACROLET LET SLOOP QUOTE EQUAL NOT AND OR COND IF* POP PROG))
(setf (callers-list 'POST-LIMIT-STRA :callees) '(ASK-A-NUMBER SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-NUMBER))
(setf (callers-list 'IS-CONDI-DOMINATE-RULE :callees) '(CAR NULL CONSP AND NTH))
(setf (callers-list 'FCLOAD :callees) '(FORMAT LOAD OBJ-NAME COMPILE-FILE PROGN SOURCE-NAME PROBE-FILE IF))
(setf (callers-list 'AUTO-OPTIONS :callees) '(MACROLET SLOOP LET))
(setf (callers-list 'BOTH-ADD-PREDICATE :callees) '(MACROLET CDR ARGS-OF LET SLOOP))
(setf (callers-list 'ALL-PLAUS :callees) '(MACROLET CDR CAR AREF LET SLOOP))
(setf (callers-list 'NEGATE-LITERAL :callees) '(CADR FIRST-ARG LIST QUOTE CAR OP-OF EQUAL NOT NEQ SYMBOLP VARIABLEP OR COND IF*))
(setf (callers-list 'WRITE-DETAIL-RULE :callees) '(MACROLET REVERSE BUTLAST LET SLOOP CDR CDDDR CDDDDR TERPRI CAR CDDR EQ MEMQ RULE-NAME POP QUOTE THIRD EQUAL NOT NEQ COND IF* SECOND FORMAT UCONCAT PRINC FIRST CASE CASEQ NTH RULE-SOURCE SETQ))
(setf (callers-list 'PROOF-METHODS :callees) '(CASE CASEQ PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'SET-UNIFY :callees) '(MACROLET LET SLOOP EQUAL FUNCTION REMOVE-DUPLICATES REM-DUPS SETQ))
(setf (callers-list 'HANDLE-CONDITIONS :callees) '(BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SYMBOLP VARIABLEP SUBLIS EQ APPLYSUBST LET FLAT-TERM NORM-CTX-AND MERGE-PREMISES NOFALSE-PREMISES SETQ COND IF*))
(setf (callers-list 'GET-SCHEMES :callees) '(EXTEND-SCHEMES NCONS NULL COND IF* ASSQ CDR GET-DEF-DOMAIN BASIC-TERM LET))
(setf (callers-list 'NAME-LAST-RULE :callees) '(MACROLET SLOOP PRINC TERPRI))
(setf (callers-list 'INCONSISTENT-EQN :callees) '(THROW *THROW NCONS NCONC WRITE-RULE PRINC TERPRI NTH EQN-SOURCE CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CADR RHS CAR LHS MAKE-NEW-RULE SETQ))
(setf (callers-list 'CHAR-HANDLER :callees) '(CHAR-HANDLER SET-MACRO-CHARACTER))
(setf (callers-list 'FIRST-BOOLEAN-CONSTANT :callees) '(MACROLET LET SLOOP FUNCTION MEMBER MEMBER0 EQ FALSEP EQUAL OR TRUEP NOT QUOTE GET CAR OP-OF NUMBERP PREDICATEP AND WHEN CDR ARGS-OF NULL SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'BOOL-MATCH-STR :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'SIMP-XOR :callees) '(MACROLET QUOTE LET SLOOP))
(setf (callers-list 'IS-SUBT :callees) '(MACROLET CDR ARGS-OF LET SLOOP EQUAL COND IF*))
(setf (callers-list 'TOTAL-ORDER-PC :callees) '(TOTAL-ORDER-PC-RES CASE SELECTQ))
(setf (callers-list 'COUNT-SLOOP-COLLECT :callees) '(GET SETF PUSHNEW LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'W-SIZE :callees) '(ARGS-OF W-SIZE MAPCAR APPLY CDR CAR OP-OF ASSOC SETQ IF* + SYMBOLP VARIABLEP NULL COND))
(setf (callers-list 'RESUME-RRL :callees) '(RRL))
(setf (callers-list 'PARSE-LOOP-MAP :callees) '(HELPER APPLY CONS LOOP-UN-POP L-EQUAL NULL LOOP-POP DO SETQ CDR SETF CAR PUSH NREVERSE LENGTH 1- DOTIMES LET* QUOTE MEMBER COND OR GET LET ERROR AND))
(setf (callers-list 'NEGATE-PREMISES :callees) '(MACROLET CDR LET SLOOP))
(setf (callers-list 'AC-DISTRI :callees) '(MACROLET CAR OP-OF LET SLOOP AC-DISTRI MAPCAR SETQ CDR ARGS-OF NULL SYMBOLP VARIABLEP OR COND IF*))
(setf (callers-list 'N-TUPLES :callees) '(MACROLET LET SLOOP EQUAL COND))
(setf (callers-list 'SUB-NONVARS :callees) '(EQUAL FUNCTION SUB-NONVARS2 REMOVE-DUPLICATES REM-DUPS))
(setf (callers-list 'LIST-EQUATIONS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'CHANGE-RULE-SOURCE-TYPE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'COVER-CONDI-NORM :callees) '(MACROLET LET SLOOP SIMPLIFY-ALL-PREMISES PRINT-CURRENT-PREMISES IF ADD-PREMISE-END MAPCAR CHECK-HEAD-ROLE COVER-CONDI-NORM RETURN-FROM OP-OF SYMBOLP NOT FALSEP EQN2PRE NEGATE-ONE-PRE HANDLE-AND HANDLE-AND? WHEN SMALLER-PRE-CAR SORT CDR SETF PRE-PROCESS-PREMISES NCONS SETQ CAR EQ CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX AND IS-PREMISE-SET COND IF*))
(setf (callers-list 'WELL-TYPED-VAR :callees) '(CONS PUSH RPLACD CDR MEMQ ASSOC SETQ QUOTE EQ COND IF*))
(setf (callers-list 'EXT-COMMUTATIVE :callees) '(FLATTEN-RULES PUSH SYS-FLAG-INIT FORMAT UCONCAT TERPRI PRINC QUOTE GET MEMQ NOT COND IF*))
(setf (callers-list 'QUOTIENT :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ADD-TIME :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM LET))
(setf (callers-list 'LESSP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-CONS))
(setf (callers-list 'PREMISE-INSTANCE :callees) '(CDDR CONS ATTACH MAKE-PRE MAKE-FLAT OR QUOTE LIST NOT SYMBOLP VARIABLEP AND IF CADR SUBLIS CAR EQ COND IF* APPLYSUBST SETQ))
(setf (callers-list 'COVER-SET-INDUC-STRA :callees) '(RETURN NOT IF PRINC EQ COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-GENE-INDUC-EQN COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL CASE CASEQ NUMBERP COND IF* READ-ATOM CHOOSE-STR QUOTE PRINT-HEAD PROGN SETQ DO TERPRI LET USER-SELECTQ))
(setf (callers-list 'ACM-VARIABLE :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'BIN-IS-CURRENT :callees) '(OBJ-NAME SOURCE-NAME FILE-DATE <))
(setf (callers-list 'CHOOSE-MAX-SCORE :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'INT-RULE-STRAT :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'DISABLE-RULES-AUX :callees) '(MACROLET READ-ARGS LET SLOOP SETQ PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'COVER-OF :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'HAVE-INDUCTIVE-VARS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'GET-DOMAIN-TYPE :callees) '(PREDICATEP NOT AND CAR QUOTE GET NUMBERP GET-ARITY2 COND))
(setf (callers-list 'LESS-SIZE-CAR :callees) '(CAR SIZE <))
(setf (callers-list 'INFIXP :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MERGE-AND-REMOVE-DUPS :callees) '(MACROLET LET SLOOP QUOTE))
(setf (callers-list 'DEF-LOOP-MAP :callees) '(DEFMACRO QUOTE DEF-LOOP-INTERNAL))
(setf (callers-list 'ALL-NONVARS :callees) '(ALL-NONVARS MAPCAN CONS QUOTE MEMQ NOT CDR ARGS-OF NULL NCONS CAR OP-OF IS-SKOLEM-OP SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'BASIC-TERM :callees) '(MACROLET SLOOP CONS MAKE-TERM NCONS = COND GET-ARITY LET))
(setf (callers-list 'COMP1 :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'POLY-MATCH-ONE-TO-* :callees) '(POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS COND IF* POP CDR ARGS-OF NCONS LET))
(setf (callers-list 'GREATERP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-CONS))
(setf (callers-list 'INFILE :callees) '(OPEN PROBE-FILE IF STRING SETQ))
(setf (callers-list 'CHOOSE-BEST-SCHEMES :callees) '(MACROLET LET SLOOP INDUC-SUBS-OF-EQN SETQ))
(setf (callers-list 'FLATTEN-POST-ASS :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'BA-SIMP-AND :callees) '(MACROLET LET SLOOP EQUAL FUNCTION MEMBER MEMBER0 IF))
(setf (callers-list 'READ-T-TERM :callees) '(WRITE-TERM FIRST EQUAL NEQUAL AND CATCH *CATCH SETQ QUOTE TOKEN-EOLN EQ NOT MAKE-BUFFER LET PRINC TERPRI IS-EMPTY-LINE COND IF*))
(setf (callers-list 'LIST-PAIRS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'TRACE-INCONSISTENCY :callees) '(MACROLET SLOOP TERPRI NULL COND IF* CONS APPEND APPEND1 EQUAL FUNCTION RULENO DELETE DELETE0 NTH RULE-SOURCE RULE-NUMS-FROM-SOURCE GET-ALL-RULE-NUMS SETQ LET))
(setf (callers-list 'INDUC-SUBS-OF-EQN :callees) '(MACROLET CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CDR LET SLOOP CADR RHS CAR LHS INDUC-SUBS-TERM APPEND SETQ))
(setf (callers-list 'CTX-DOMINANT-RULE :callees) '(MACROLET CADR RHS ALL-VARS CAR LHS VAR-LIST UNION LET SLOOP CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX CDR SETQ AND COND IF*))
(setf (callers-list 'SUB-NONVARS2 :callees) '(CONS CAR OP-OF MEMQ OR CDR ARGS-OF SUB-NONVARS2 MAPCAN SETQ IS-GROUND NOT SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'SET-UP-ARITY2 :callees) '(SET-PREDICATE CAR EQ ENTER-OP SET-ARITY EXPECT-ARITY12 SETF PUTPROP SETQ SET-ARITY2 CDR LENGTH = GET-ARITY EXPECT-ARITY EQUAL NOT NEQUAL QUOTE GET NUMBERP GET-ARITY2 COND IF*))
(setf (callers-list 'LAST-LETTER :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'CYCLE-REDUCE-TERM :callees) '(MACROLET ASSQ CDR RULES-WITH-OP LET SLOOP CAR OP-OF ASSOC SYMBOLP VARIABLEP COND))
(setf (callers-list 'SYS-FLAG-INIT :callees) '(SETQ))
(setf (callers-list 'INDUC-AC-SUBS :callees) '(MACROLET CAR LET SLOOP CDR REVERSE CONS MAKE-TERM LIST LENGTH = MEMQ OR COND IF*))
(setf (callers-list 'DIO-INITIALIZE :callees) '(MACROLET LET SLOOP QUOTE FILLARRAY SETQ))
(setf (callers-list 'REMONCE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'RENAME-PATTERN :callees) '(QUOTE CONS NEWVARSIN CDR CAR COND IF*))
(setf (callers-list 'WRITE-ASSERTIONS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'X_AUGMENT :callees) '(MACROLET SLOOP LIST APPEND NTH EQN-SOURCE CDDR RPLACA CADDR EQN-CTX CTX CADR RHS CAR LHS MAKE-NEW-RULE FLATTEN-EQN SETQ READ-THIS-EQN EQUAL COND IF* QUOTE READ-ATOM SETF PRINC))
(setf (callers-list 'IS-PREVIOUS-INDUC-EQN :callees) '(MACROLET LET SLOOP SETQ CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX IF))
(setf (callers-list 'NOT-AUTO-PREV-RULES :callees) '(MACROLET SLOOP LET))
(setf (callers-list 'WRITE-ONE-PRE :callees) '(SYMBOLP VARIABLEP CAR WRITE-TERM-BOOL PRINC QUOTE CADR EQUAL SETQ COND IF*))
(setf (callers-list 'MAKE-VALUE :callees) '(IF LUCID-RUNTIME-SUPPORT:BQ-LIST* GENSYM ATOM LUCID-RUNTIME-SUPPORT:BQ-LIST LIST ERROR TYPEP OR SUBST EVAL LET CONSTANTP SECOND QUOTE CAR CONSP GETF SETQ EQ NOT AND COND))
(setf (callers-list 'WITH-STRATEGY :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'OPS-IN-PRES-OF-RULES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SECOND-ARG :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PRE-CRIT-CHECKEQ :callees) '(CDR DOWN-HILL-ONE CDDR RPLACA QUOTE CADDR EQN-CTX CTX CADR RHS CAR LHS CONSISTENT-PAIR SECOND FIRST EQUAL COND IF*))
(setf (callers-list 'REDUCE-XOR-TERM :callees) '(MACROLET APPEND AND COND IF* QUOTE ASSQ CDR RULES-WITH-OP OR LET SLOOP))
(setf (callers-list 'IS-SUBSET :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ACO-PULL-OUT-BIG-EQ-SUBS :callees) '(QUOTE))
(setf (callers-list 'TRACE-BUILDING :callees) '(MACROLET LET SLOOP WRITE-SEQ-EQN FORMAT UCONCAT PRINC TERPRI))
(setf (callers-list 'BREAK-ASS :callees) '(MACROLET SLOOP SETQ QUOTE CAR OP-OF MEMQ QUANTIFIERP COND IF*))
(setf (callers-list 'GET-INTERSECTION-RANGE :callees) '(MACROLET CDR LET SLOOP))
(setf (callers-list 'TOP-TERM :callees) '(MACROLET SLOOP::TYPE-ERROR + TYPEP OR SLOOP QUOTE MAKE-NEW-VARIABLE CONS MAKE-TERM LENGTH LESSP IF* LET FLAT-TERM MEMQ AC-OP-P AC-ROOT CAR OP-OF BASIC-TERM < CDR ARGS-OF NULL SYMBOLP VARIABLEP COND))
(setf (callers-list 'PURE-CHECKEQ-NORMAL :callees) '(LAST-CONSISTENCY-CHECK NOT FUNCTION REMOVE-DUPLICATES REM-DUPS NTH EQN-SOURCE APPEND LIST MAKE-EQN EQUAL COND IF* CADR RHS CAR LHS PURE-NORM SETQ))
(setf (callers-list 'GET-PREMISES :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MAKE-P-COMMUT-RULE :callees) '(P-COMMUT-REDUCE-OTHERS CDR ARGS-OF LENGTH OP-OF RULENO LIST PUSH WRITE-RULE PRINC TERPRI > NCONS NCONC PUSH-END NTH EQN-SOURCE MAKE-NEW-RULE SETQ FIRST-ARG TOTAL-ORDER COND IF* CADR RHS CAR LHS))
(setf (callers-list 'POLY-REDUCE-AT-ROOT-ONE-RULE :callees) '(ADD-TO-ARGS APPLIES REDUCE-+-TERM BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME NCONS REDUCE-*-TERM LET FLAT-TERM CASE CASEQ CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX POLISH-PREMISES SETQ LHS CAR OP-OF EQ SAME-OP SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'PROOF-BY-HINT-TERM :callees) '(MACROLET VAR-LIST LET SLOOP AND LIST PROOF-UNDER-NEW-PREMISES OP-OF CASE FIRST-ARG CDDDR CADR RHS CAR LHS LIST* CHANGE-CTX APPEND COPYLIST CDR NULL IF CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX DELETE SETQ WRITE-ONE-PRE WRITE-SEQ-EQN PRINC TERPRI > WHEN))
(setf (callers-list 'NEW-FIRST-TRANS :callees) '(CONS MAKE-TERM CADR LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-CONS CAR OP-OF CASE CDR ARGS-OF NEW-FIRST-TRANS MAPCAR LET SYMBOLP VARIABLEP NULL COND))
(setf (callers-list 'LCASE :callees) '(DEFUN NREVERSE LUCID-RUNTIME-SUPPORT:BQ-LIST MEMBER QUOTE LUCID-RUNTIME-SUPPORT:BQ-CONS EQL COND PUSH CAR SETQ NULL OR CDR DO LET))
(setf (callers-list 'CYCLE-PAIRS :callees) '(MACROLET CDR LET SLOOP CAR SETQ))
(setf (callers-list 'RUN-TIME :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'HAS-HINT-TERM :callees) '(MACROLET CDR LET SLOOP IF))
(setf (callers-list 'MENU_FOR_NORMAL :callees) '(MACROLET SLOOP QUOTE SETF))
(setf (callers-list 'FIND-MERGE-SIGMA :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'TRY-ONE-CONDI-RULE :callees) '(DECF > WHEN))
(setf (callers-list '=-SLOOP-FOR :callees) '(GET SETF T QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST LOOP-POP THEN LOOP-PEEK LCASE))
(setf (callers-list 'KNUTH-BENDIX2 :callees) '(MACROLET SLOOP RUNTIME-MAX-WARNING))
(setf (callers-list 'PURE-SUP-TERM2 :callees) '(PURE-PROCESS-CRITPAIR 1+ NTH RULENO SUBLIS CADR RHS RPLAT-IN-BY EQ APPLYSUBST LIST MAKE-EQN COND IF* - + CAR LHS NONAC-UNIFY SETQ PROG1 GET-INTERNAL-RUN-TIME ADD-TIME LET))
(setf (callers-list 'CLEAN-HISTORY :callees) '(LAST SETQ CDDR PRINC CDR NULL COND IF* TERPRI))
(setf (callers-list 'GET-ARITY :callees) '(QUOTE GET NUMBERP COND IF*))
(setf (callers-list 'REM-ARGS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ADD-RULE-LINEAR :callees) '(MACROLET LET SLOOP NCONS NCONC ADD-RULE3 SETQ ALL-VARS NULL OR QUOTE CADR RHS SYMBOLP FALSEP LHS CAR OP-OF EQ NOT NOT-IN-SET AND COND IF*))
(setf (callers-list 'IS-RULE-SOURCE-TYPE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'INDUC-SUBS-TERM :callees) '(MACROLET LET SLOOP CDR ARGS-OF INDUC-SUBS-TERM MAPCAN CAR OP-OF ASSOC OR COVER-OF NOT SYMBOLP VARIABLEP NULL COND IF*))
(setf (callers-list 'LITERAL-NUM :callees) '(LENGTH 1- CDR ARGS-OF LITERAL-NUM MAPCAR + APPLY CAR OP-OF CASE CASEQ))
(setf (callers-list 'PRINT-ATOMS :callees) '(MACROLET CDR SLOOP CAR FORMAT UCONCAT LET COND IF*))
(setf (callers-list 'MERGE-TWO-PATTERNS :callees) '(MACROLET CDDR LET SLOOP MERGE-TWO-TUPLES CAR MERGE-PREMISES SUBLIS EQ APPLYSUBST COND IF* CADR FIND-MERGE-SIGMA SETQ))
(setf (callers-list 'POINTER-FOR-COLLECT :callees) '(CONS PUSH GENSYM LOOP-ADD-BINDING LET ASSOC CDR OR))
(setf (callers-list 'OPERATOR-STRA :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'LEFT-ARG :callees) '(CADR FIRST-ARG LEFT-ARG2 QUOTE GET NUMBERP GET-STATUS EQ MEMQ AND COND IF*))
(setf (callers-list 'PARSE-LOOP-WITH :callees) '(LOOP-UN-POP WITH-UNIQUE PARSE-LOOP-WITH WITH AND LOOP-ADD-TEMPS T NOT LOOP-ADD-BINDING ERROR SYMBOLP OR = LOOP-PEEK LCASE LOOP-POP LET))
(setf (callers-list 'PROCESS-AC-UNIFIER :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'IS-EXIST-TYPE-NAME :callees) '(ASSOC QUOTE MEMQ OR))
(setf (callers-list 'POLY-SIMPLIFY :callees) '(CONS MAKE-TERM SIMPLIFY-* CDR ARGS-OF POLY-SIMPLIFY MAPCAR SIMPLIFY-+ CAR OP-OF CASE CASEQ SYMBOLP VARIABLEP NULL OR COND IF*))
(setf (callers-list 'TRACE-PARA :callees) '(LUCID-RUNTIME-SUPPORT:BQ-CONS WRITE-ASSERTION CADR CAR FORMAT UCONCAT PRINC TERPRI))
(setf (callers-list 'SLOOP::LOOP-FINISH :callees) '(QUOTE))
(setf (callers-list 'REDUCE-*-TERM :callees) '(MACROLET APPEND AND COND IF* QUOTE ASSQ CDR GET-RULES-WITH-OP OR LET SLOOP))
(setf (callers-list 'OPEN-WRITE-FILE :callees) '(TERPRI OUTFILE OK-TO-CONTINUE PROGN UNWIND-PROTECT ART? WHEN WHEN-ART-WITH-INPUT-FROM-TERMINAL STRING PROBE-FILE MY-PROBEF NOT OR FORMAT UCONCAT STRING-DOWNCASE QUOTE READ-ATOM SETQ PRINC IS-EMPTY-LINE COND IF* LET))
(setf (callers-list 'REDUCE-BY-P-COMMUT2 :callees) '(- LIST CONS NCONS TRUNCATE QUOTIENT * TIMES SORT-OP-ARGS SETQ QUOTE CDR ARGS-OF IS-SORTED NOT CAR OP-OF EQ CONSP NONVARP >= AND COND IF* CADDDR CADDR LET))
(setf (callers-list 'PRINT-SUGG-INFO :callees) '(MACROLET LET SLOOP NOT COND IF* WRITE-TERM-BOOL WRITE-TERM PRINC TERPRI))
(setf (callers-list 'PARTI-BY-VARS :callees) '(MACROLET LET SLOOP MERGE-DUPLICATE SETQ))
(setf (callers-list 'TIME-IN-SEC :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'TRACE-ADD-TESTSET :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'HIGH-OP-POSI :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'REPVARSIN :callees) '(SUBLIS EQ APPLYSUBST COND IF*))
(setf (callers-list 'IS-BOOL-ROOT :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'DISPLAY-TYPE-ARITY :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'SEARCH-TREE :callees) '(MACROLET SLOOP LIST BREADTH-SEARCH SETF))
(setf (callers-list 'REDUCTION-PROOF :callees) '(NODE-STATUS NODE-SOURCE QUOTE EQUAL SEARCH-TREE LIST SEARCH_BY_EQN SETF ENDP CAR NULL OR COND IF* PRINT-NORMALIZED-EQN COVER-NORMALIZE SETQ))
(setf (callers-list 'SUBTAT :callees) '(MACROLET LET SLOOP COND IF*))
(setf (callers-list 'CHANGE-LHS-RHS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'M-+-P :callees) '(MACROLET CDR ARGS-OF LET SLOOP QUOTE EQUAL COND IF*))
(setf (callers-list 'HEAD_OF_FRI :callees) '(QUOTE DISP_STRINGS TERPRI))
(setf (callers-list 'IS-REDUCTION :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'POLY-SUPER-AT-*-0 :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE TYPEP OR LET SLOOP APPEND SETQ ARGS-OF IS-SUBSET COND IF* CDR LENGTH CADR RHS CAR LHS LET*))
(setf (callers-list 'CHECK_AND_ADD :callees) '(BUTLAST SEARCH-TREE + ADD_CHILD ENDP QUOTE EQUAL COND IF* LIST SEARCH_BY_EQN SETF))
(setf (callers-list 'INIT-COVER-PROVE :callees) '(SETQ))
(setf (callers-list 'IF* :callees) '(PUSH SETQ EQ REVERSE CDDR LUCID-RUNTIME-SUPPORT:BQ-CONS RETURN NULL CDR DO CAR QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST CADR MEMQ NOT = AND ERROR < COND LENGTH LET))
(setf (callers-list 'NEW-RULE-STRA :callees) '(ASK-A-NUMBER SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-NUMBER))
(setf (callers-list 'EXT-TYPE-RELATION :callees) '(MACROLET CONS SLOOP READ-ARGS FORMAT UCONCAT PROGN SETQ QUOTE READ-ATOM LET TERPRI PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'POLY-SIGMA :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SAVE-WORD-END :callees) '(TERPRI PRINC WHEN))
(setf (callers-list 'FIXUP-QUANTIFIED-FORMULA :callees) '(CDR FIXUP-QUANTIFIED-FORMULA LIST CONS MAKE-TERM FREE-VARS CAR MEMQ NOT NULL COND IF*))
(setf (callers-list 'DESETQ :callees) '(DEFMACRO QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM LET DESETQ1 ATOM COND))
(setf (callers-list 'WRITE-F-EQN :callees) '(TERPRI AND WHEN CTX RHS WRITE-F-RHS PRINC NTH EQN-SOURCE-TYPE EQ IS-SOURCE-TYPE IF CADR TRUEP IS-ASSERTION NOT CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX IS-CONDI-EQN OR CAR LHS WRITE-TERM-SIMPLE SETQ NULL COND IF*))
(setf (callers-list 'TYI :callees) '(READC OR))
(setf (callers-list 'GET-ATOM2 :callees) '(READ-PRESERVING-WHITESPACE READ-CHAR QUOTE MEMBER COND PEEK-CHAR LET))
(setf (callers-list 'UNKNOWN-SIZE :callees) '(SIZE * TIMES + SUB1 MAX CASE CASEQ GET-RULE-LEVEL MIN 1+ SECOND FIRST NUMBERP AND COND IF* SETQ))
(setf (callers-list 'INDUC-ORIENT-AN-EQN :callees) '(- + INDUC-ADD-RULE PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME MEMQ RESET PUSH CATCH *CATCH WHEN NTH EQN-SOURCE REFUTED-RESULT OP-OF EQ CAR LHS SYMBOLP NOT AND FALSEP RELEASE-PREMISES SETQ CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX IF))
(setf (callers-list 'SUCC-END-INDUC :callees) '(MACROLET SLOOP > REVERSE CATCH *CATCH QUERY-ADD-EQN QUOTE LHS CAR OP-OF EQ IF NULL COND WRITE-COMMENT-EQN WRITE-EQN PRINC TERPRI PROGN UNWIND-PROTECT SETQ ART? WHEN LET WHEN-ART-WITH-INPUT-FROM-TERMINAL))
(setf (callers-list '+-CANONICALIZE :callees) '(NCONS CDR ARGS-OF QUOTE CAR OP-OF EQ CONSP NONVARP COND IF*))
(setf (callers-list 'MOVE-LHS-ARGS :callees) '(MACROLET SLOOP COND IF* LHS CDR ARGS-OF MULT-FORM CADR CAR LET))
(setf (callers-list 'OPERATOR-ORDERING :callees) '(ALPHALESSP < LESSP NUMBERP AND GRT-PREC COND IF*))
(setf (callers-list 'MAKE-PRE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'FOUND-WITNESS :callees) '(THROW *THROW NTH EQN-SOURCE APPEND MAKE-NEW-RULE SETQ))
(setf (callers-list 'TAKE-OUT :callees) '(MACROLET AREF SLOOP CAR SETQ LET COND IF*))
(setf (callers-list 'DEFAULT-FLAG :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'DECOMPOSE-TERMS :callees) '(MACROLET ARGS-OF SLOOP LENGTH = CAR OP-OF SAME-OP? AND DECOMPOSE-TERMS EQ CONS ADD-BIND-TO-SUB QUOTE CDR EQUAL IF* CASE ASSQ LET SYMBOLP VAR? COND))
(setf (callers-list 'PROCESS-PRE-ASS :callees) '(MAKE-PRE-EQN ADD-SIMPLIFY-OTHERS))
(setf (callers-list 'IS-LIMITED :callees) '(MACROLET LET SLOOP CDR ARGS-OF NULL EQUAL FUNCTION CAR OP-OF MEMBER MEMBER0 NOT SYMBOLP VARIABLEP COND))
(setf (callers-list 'GET-ALL-PROPERTIES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SUBSTVARFOR :callees) '(MACROLET SLOOP CAR OP-OF GET-DOMAIN-TYPE CONS SETQ SET-ARITY2 LENGTH SET-ARITY QUOTE GET SETF PUTPROP NUMBERP SET-PREDICATE COND IF* FREE-VARS GENNEWSYM LET))
(setf (callers-list 'TRY-ONE-RULE :callees) '(NTH RULENO PUSH CAR LHS APPLIES SETQ DECF EQ CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX COND IF*))
(setf (callers-list 'DISPLAY-OP-STATS :callees) '(MACROLET LET SLOOP PRINC COND IF* TERPRI))
(setf (callers-list 'LIST_NODE :callees) '(NODE-INFO WRITE-EQN NODE-STATUS NODE-STATE NODE-SOURCE FORMAT PRINT-NODE PRINC TERPRI))
(setf (callers-list 'PURE-SUPERPOSITION :callees) '(AND NOT NEQUAL IS-GENERAL-RULE PURE-SUP-TERM RULE-SOURCE CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX CADR RHS CAR LHS MAKE-NEW-RULE NTH RULENO = COND IF* SETQ))
(setf (callers-list 'MAKE-BETTER-PRES :callees) '(MACROLET SLOOP))
(setf (callers-list 'GET_PNAME :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'REMOVE-ONE-ARG :callees) '(CDDR APPEND SETQ))
(setf (callers-list 'REM-ARITY :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CYCLE-REDUCE-AT-ROOT-2 :callees) '(MACROLET MULT-FORM CDR ARGS-OF LENGTH CAR LHS CADR FIRST-ARG LET SLOOP))
(setf (callers-list 'MAN-PICK-2ND-RULE :callees) '(MACROLET SLOOP QUOTE MEMQ NOT ASK-A-NUMBER FORMAT UCONCAT PRINC IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-NUMBER SETQ TERPRI))
(setf (callers-list 'SUB-TEST :callees) '(GO CONS EQUAL FUNCTION MEMBER MEMBER0 ATOM NOT CDR CAR RETURN SETQ PROG NULL COND IF*))
(setf (callers-list 'LOAD-RRL :callees) '(TERPRI PRINC CLOSE RESTORE-REST-GLOBALS RESTORE-PROPERTIES UNDO1 READ OPEN-READ-FILE SETQ OK-TO-CONTINUE NULL OR COND IF*))
(setf (callers-list 'AVOID-COMMON-TERM :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'GET-PRE-RHS :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'PUTPROP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ELIGIBLE-INDUC-TERMS :callees) '(MACROLET SLOOP SETQ WHEN CAR OP-OF ASSOC OR COVER-OF CDR LET))
(setf (callers-list 'MANUAL-PICK :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'GET-COVER-SETS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ORDER-STR :callees) '(INITIALIZE-MANUAL-ORDERING EQ PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'UNDO-STRATEGY :callees) '(RETURN NOT IF PRINC EQ CASE CASEQ NUMBERP COND IF* READ-ATOM CHOOSE-STR QUOTE PRINT-HEAD PROGN SETQ DO TERPRI LET USER-SELECTQ))
(setf (callers-list 'X_COVER-PROOF-PROCESS2 :callees) '(STRONG-SUBGOAL-PROOFS COVER-SET-SCHEME FORMAT UCONCAT PUSH NODE-SOURCE NODE-STATUS SEARCH-TREE SETF WRITE-SEQ-EQN PRINC TERPRI CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX LENGTH > < ABSTRACT-PROOF SUB1 BUILDING BUILD-PREMISES-FROM-BOOL-TERM PROOF-UNDER-NEW-PREMISES BUILD-PREMISES-FROM-COND-TERM AND NULL COND IF* SETQ LET COVER-PROOF-PROCESS2 NOT IF))
(setf (callers-list 'IS-COMMUT-PAIR :callees) '(CADDR SECOND-ARG CADR FIRST-ARG SYMBOLP VARIABLEP CAR OP-OF EQ SAME-OP CDDDR NULL CONSP NONVARP AND))
(setf (callers-list 'ADD-EXTRA-PREMISE :callees) '(NULL CADR RHS OR TRUEP NOT SUBLIS CAR LHS EQ APPLYSUBST LIST SIMPLIFY-ONE-PRE NTH RULENO PUSH SUBSUMED-PREMISES SETQ CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CDR LENGTH <= AND WHEN))
(setf (callers-list 'SET-PREDICATE :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CLEAN-RULE :callees) '(MACROLET LET SLOOP SUB1 > COND IF* EQUAL FUNCTION DELETE DELETE0 NTH RULENO SETQ PUSH))
(setf (callers-list 'EXPECT-ARITY21 :callees) '(QUOTE EXPECTED TERPRI FORMAT UCONCAT DISPLAY-ONE-ARITY2 PRINC))
(setf (callers-list 'GET-RECURSIVE-RETURN-OP :callees) '(MACROLET ASSQ CDR RULES-WITH-OP LET SLOOP GET-RECURSIVE-DEF-TERM SETQ COND IF*))
(setf (callers-list 'IS-EQ-TRUE-PRE :callees) '(QUOTE CAAR EQ CADR NULL AND))
(setf (callers-list 'NEQ :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PICK-GOAL :callees) '(MACROLET LET SLOOP QUOTE EQ POP COND IF*))
(setf (callers-list 'REF-INSTANCE-SEEDS2 :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'INDUC-IDEM-SUPERPOSITION :callees) '(PROCESS-CRITPAIR WELL-TYPED-EQN 1+ FUNCTION REMOVE-DUPLICATES REM-DUPS NTH RULENO APPEND BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT POLY-SIMPLIFY VARIABLEP SUBLIS APPLYSUBST FLAT-TERM LIST MAKE-EQN SYMBOLP FALSEP NOT-FALSEP CDDR RPLACA EQN-CTX CTX NOFALSE-PREMISES - + CADDR SECOND-ARG FIRST-ARG UNIFIER PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME NULL CADR RHS EQUAL TRUEP NOT AND IDEM-SUPER-COMMU MEMQ QUOTE LHS CAR OP-OF SETQ EQ OR COND IF*))
(setf (callers-list 'SKOLEMIZE :callees) '(MACROLET CDR ARGS-OF SLOOP LET SKOLEMIZE-AWAY-QUANTS SKOLEMIZE CAR OP-OF CASE CASEQ))
(setf (callers-list 'GET-SKO-FUNC :callees) '(MACROLET SLOOP CDR CONS SETQ SET-ARITY2 ASSOC IF* LENGTH GET SETF PUTPROP NUMBERP COND SET-ARITY EQUAL FUNCTION FREE-VARS REMOVE REMOVE0 REMONCE QUOTE GENNEWSYM LET))
(setf (callers-list 'SUBSUMED-PREMISES :callees) '(CONS APPEND CDR SUBSUMED-PREMISES FIRST SECOND MATCH SETQ AND NULL COND CAR))
(setf (callers-list 'AVOIDABLE :callees) '(ALL-VARS EQUAL SYMBOLP VARIABLEP NULL COND IF*))
(setf (callers-list 'POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE :callees) '(ADD-TO-ARGS APPLIES REDUCE-+-TERM BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME NCONS REDUCE-*-TERM LET FLAT-TERM CASE CASEQ CADR RHS VAR-LIST LIST SETQ LHS CAR OP-OF EQ SAME-OP SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'SPLIT-RHS-AND :callees) '(NTH EQN-SOURCE BA-SIMP-NOT MAKE-PRE-ASS CONS APPEND APPEND1 CDDR RPLACA QUOTE EQN-CTX CTX CAR LHS MAKE-EQN LIST EQUAL FUNCTION REMOVE REMOVE0 CADDR SECOND-ARG LENGTH = COND IF* RHS CADR FIRST-ARG SETQ))
(setf (callers-list 'UNDO :callees) '(TERPRI LENGTH FORMAT UCONCAT UNDO1 THROW *THROW IF* CDR PRINC NULL COND))
(setf (callers-list 'READTEQNS :callees) '(READ-EQNS TERPRI PRINC))
(setf (callers-list 'QUIT-RRL :callees) '(QUIT DATE FORMAT UCONCAT PRINC TERPRI CLOSE-LOG))
(setf (callers-list 'DIO2 :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR SUB1 SLOOP PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME SETQ LET*))
(setf (callers-list 'ADD-RULE-COMPLETE :callees) '(MACROLET LET SLOOP = INDUC-REDUCE-OTHER-RULES QUOTE EQUAL NEQ NTH SETF SET-SYMMETRY-MARK GET-SYMMETRY-TERMS AND CHECK-WITNESS NCONS NCONC ADD-RULE3 SETQ IS-CHARACTER-RULE NOT CONSISTENT-RULE WRITE-RULE PRINC TERPRI > COND IF*))
(setf (callers-list 'WRITE-RULES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'LOOP-COLLECT-KEYWORD-P :callees) '(FIND QUOTE MEMBER OR))
(setf (callers-list 'SHOW-TREE :callees) '(LAST FIRST CONCATENATE SHOW-TREE BUTLAST DOLIST NODE-CHDLST WHEN FORMAT NULL LENGTH > STRING= QUOTE EQUAL COND IF* NODE-SOURCE NODE-STATUS NODE-STATE SETF))
(setf (callers-list 'WELL-TYPED :callees) '(WELL-TYPED2 SETQ SYMBOLP VARIABLEP NULL COND IF*))
(setf (callers-list 'AND-OF-MONOMIALS :callees) '(MACROLET SLOOP POP LET CONS MAKE-TERM CAR CDR NULL IF* ANS-MEMBER EQUAL FUNCTION QUOTE MEMBER MEMBER0 COND TOTAL-ORDER EQ-TR SORT SETQ))
(setf (callers-list 'EQ-PRE-STRAT :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'DISPLAY-CONSTRUCTORS :callees) '(MACROLET REVERSE CDR LET SLOOP CDDR COND IF* PRINC TERPRI))
(setf (callers-list 'RESTORE-REST-GLOBALS :callees) '(POP SETQ))
(setf (callers-list 'COVER-SETS :callees) '(MACROLET ASSQ CDR RULES-WITH-OP LET SLOOP SETQ))
(setf (callers-list 'ACO-LPRO>= :callees) '(MACROLET LET SLOOP GRT-PREC ACO-RPOMULT>= ACO-LEXICO-COMP-LR ACO-LEXICO-COMP-RL ACO-RPOSTATUS>= LENGTH GET NUMBERP IF* GET-STATUS AND CDR ARGS-OF NULL EQOPS CADR FIRST-ARG ACO-LRPO> QUOTE CAR OP-OF IS-SUBT EQ SYMBOLP VARIABLEP COND))
(setf (callers-list 'TRACE-DIVISIBLE :callees) '(CADR RHS CAR LHS WRITE-TERM-SIMPLE WRITE-TERM PRINC TERPRI > COND IF*))
(setf (callers-list 'CHANGE-MONO-SIGN :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'FIND-SPECIAL-TERM :callees) '(MACROLET CDR LET SLOOP CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX IF CADR RHS CAR LHS FIRST-SPEC-TERM OR))
(setf (callers-list 'M-*-P :callees) '(MACROLET *-CANONICALIZE LENGTH LET SLOOP MEMQ EQUAL QUOTE CDR ARGS-OF NULL COND))
(setf (callers-list 'ONE-PATTERN :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'ACO-HARD> :callees) '(MACROLET LET SLOOP ACO-DELETE-EQUIV CDR ARGS-OF MULT-FORM SETQ CAR OP-OF))
(setf (callers-list 'GET-EQUATION :callees) '(EXPECTED CDR FIRST GET-RHS FIRST-ARG CAR OP-OF NEXT-TOKEN MAKE-EQN ASS2EQN CADR TOKEN-TEXT CASE CASEQ 1+ SETQ INC LIST GET-TERM LET GET-CLAUSE QUOTE EQ COND IF*))
(setf (callers-list 'HEAD-LESS-THAN-PRES :callees) '(WRITE-F-EQN PRINC TERPRI > FUNCTION REMOVE REMOVE0 NEGATE-ONE-PRE CONS MAKE-ONE-DOWN-HILL CDR PRE-BIGGER-THAN-EQN SETQ CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX AND COND IF*))
(setf (callers-list 'NON-LINEAR-VARS :callees) '(MACROLET ALL-VARS LET SLOOP))
(setf (callers-list 'TERM-SIZE-ORDER :callees) '(SIZE > GREATERP NOT))
(setf (callers-list 'SET-ART-MODE :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'SIMPLIFY-* :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'NORMAL-PROVE :callees) '(NCONS CDDR LIST* EXCHANGE-LR LRPO NTH EQN-SOURCE CADDDR IS-ONEWAY NULL CADR RHS EQUAL TRUEP NOT QUOTE OP-OF EQ LHS SYMBOLP VARIABLEP OR CAR COVER-NORMALIZE SETQ AND COND IF*))
(setf (callers-list 'PROVE-ALL-EQNS :callees) '(MACROLET LET SLOOP CDR COND IF*))
(setf (callers-list 'READ-ARGS :callees) '(MACROLET SLOOP QUOTE READ-ATOM CONS LET))
(setf (callers-list 'AC-OP-P :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'ORDER-ONE-NORM-OTHERS :callees) '(CATCH *CATCH))
(setf (callers-list 'GET-VAR-SUBSTITUTION :callees) '(MACROLET SLOOP SYMBOL-NAME GET_PNAME MEMBER MEMBER0 EQUAL FUNCTION ASSOC ASSOC0 SYMBOLP VARIABLEP AND COND IF*))
(setf (callers-list 'LOOP-POP :callees) '(QUOTE POP SETQ COND))
(setf (callers-list 'SEE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ORDER-CTX :callees) '(THROW *THROW ASK-USER CASE CASEQ WRITE-EQN PRINC TERPRI CTX-GT-LHS LRPO COND))
(setf (callers-list 'RESTRICT-CRIT-STRA :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'IN-PACKAGE-SLOOP-MAP :callees) '(GET SETF LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'ACO-LEXICO-COMP-LR :callees) '(MACROLET SLOOP CDR ARGS-OF SETQ))
(setf (callers-list 'JUSTIFY-EQN :callees) '(NTH EQN-SOURCE SECOND FIRST LIST MAKE-EQN QUOTE CAR EQUAL NOT NEQ AND COND IF*))
(setf (callers-list 'EQOPS :callees) '(OPS-EQUIV-TO MEMBER))
(setf (callers-list 'EXCHANGE-LR :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MAKE-RULE-FROM-ASS :callees) '(MACROLET LET SLOOP MAKE-RULE-SIZE-ORDER LUCID-RUNTIME-SUPPORT:BQ-LIST ARGS-OF LUCID-RUNTIME-SUPPORT:BQ-CONS EQUAL FUNCTION CDR DELETE DELETE0 MEMBER QUOTE CAR OP-OF EQ ORIENT-AN-EQN MAKE-RULE-FROM-ASS RETURN-FROM LIST MAKE-EQN ASSERTION2EQUATION SETQ COND IF*))
(setf (callers-list 'NEWVARSIN :callees) '(MACROLET ORDER-VARS VAR-LIST OR SORT LET SLOOP SETQ))
(setf (callers-list 'GET-PRES-OPS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'INSERT :callees) '(- GO SUB1 CDDR CADR = RPLACA CDR CONS RPLACD NOT CAR COMPAREFN FUNCALL < CNTH 1+ TRUNCATE LENGTH PROG ALPHALESSP SETQ EQUAL FUNCTION MEMBER MEMBER0 AND ERROR ATOM LIST NULL COND))
(setf (callers-list 'CHOOSE-HIGHEST-TERM :callees) '(MACROLET CDR CAR LET SLOOP))
(setf (callers-list 'RESTORE-EQUATION :callees) '(MACROLET CDR LET SLOOP SETQ))
(setf (callers-list 'PROCESS-ASS1 :callees) '(BREAK-ASS SKOLEMIZE QUOTE EQ COND IF* PROCESS-ASS2))
(setf (callers-list 'EXIST-OP :callees) '(MACROLET LET SLOOP OR))
(setf (callers-list 'PROVE-SPLIT-BOOL :callees) '(MACROLET LET SLOOP WRITE-SEQ-EQN PRINC TERPRI BREAK SPLIT-RHS-OR SPLIT-LHS-OR SPLIT-RHS-AND SPLIT-LHS-AND CASE SETQ))
(setf (callers-list 'RPL-BY-TERMS2 :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR SUB1 SLOOP SETQ POP CDR ARGS-OF LET NULL COND))
(setf (callers-list 'SUPERPOSITION :callees) '(PRED-FUNC-SUPERPOSITION PRED-SUPERPOSITION CAAR GET PRED-RULEP FUNC-SUPERPOSITION CDDR RPLACA CADDR EQUAL EQN-CTX IS-CONDI-RULE OR MARK-SUPERPOSED QUOTE MEMQ NONDO-CRIT COND IF*))
(setf (callers-list 'COMM-ROOT :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'IS-CONDI-EQN :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'READ-TYPE-RELATION :callees) '(EXPECTED TERPRI FORMAT UCONCAT PRINC ADD-SUGG-TYPE CLEAN-RIGHT-BRACKET QUOTE EQ CADR TOKEN-TEXT SETQ IS-EXIST-TYPE-NAME AND COND IF* NEXT-TOKEN))
(setf (callers-list 'SIMPLIFY-ALMOST-FLAT :callees) '(MACROLET LET SLOOP SIMP-XOR-SIMP CDR ARGS-OF SIMP-AND-SIMP CAR OP-OF CASE CASEQ SYMBOLP VARIABLEP NULL OR COND IF*))
(setf (callers-list 'CONSISTENT-PAIR :callees) '(MACROLET CDR ARGS-OF LET SLOOP SETQ EQ AND FALSEP NULL QUOTE TRUEP IS-SUBTERM IS-PRIMITIVE CAR OP-OF MEMQ IS-FREE-CONSTRUCTOR NOT OR IF* EQUAL COND PSETQ SYMBOLP VARIABLEP IF))
(setf (callers-list 'SKIP-EOLN :callees) '(READ-CHAR LIST MEMBER NOT PEEK-CHAR DO SETQ NULL IF))
(setf (callers-list 'SIMPLIFY :callees) '(MACROLET CDR ARGS-OF LET SLOOP SIMP-AND CAR OP-OF CASE CASEQ SYMBOLP VARIABLEP NULL OR COND IF*))
(setf (callers-list 'PICK-STRATEGY :callees) '(OK-TO-CONTINUE EQ PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'PURE-PROCESS-EQUATION :callees) '(PURE-ORIENT-AN-EQN - + PURE-CHECKEQ-NORMAL PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME SETQ WRITE-EQN PRINC TERPRI = COND IF*))
(setf (callers-list 'FIND-OUT-BIG-EQ-SUBS :callees) '(MACROLET CDR ARGS-OF LET SLOOP EQOPS CAR OP-OF GRT-PREC COND IF*))
(setf (callers-list 'TR-ADD :callees) '(CONS CDR UNION RPLACD COND IF* EQUAL FUNCTION CAR ASSOC ASSOC0 LET))
(setf (callers-list 'UNIFY :callees) '(MACROLET SLOOP WHEN - + NOT UNIFY-WITH-AC SETQ PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME))
(setf (callers-list 'AVERAGING-SLOOP-MACRO :callees) '(GET SETF LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'UNITP :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'ADD-PAIRS :callees) '(MACROLET MAKE-PAIRS LET SLOOP))
(setf (callers-list 'INDUC-SUPERPOSITION :callees) '(MACROLET CAR LHS COMMUNE-TERMS LET SLOOP))
(setf (callers-list 'MEMBER-TERM :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'RES1 :callees) '(MACROLET CDR CAR AREF NCONS LET SLOOP))
(setf (callers-list 'SUBPAIR :callees) '(CONS MAPCAR SUBLIS))
(setf (callers-list 'MERGE-LIST :callees) '(MACROLET LET SLOOP NULL COND IF*))
(setf (callers-list 'STRUCTURE-INDUC-ON :callees) '(MACROLET CDR LET SLOOP WRITE-VARIABLE WRITE-F-EQN WRITE-SEQ-NUM WRITE-TERM PRINC TERPRI QUOTE CONS MAKE-TERM CAR STR-CHOOSE-ONE-SCHEME SETQ COND IF*))
(setf (callers-list 'SAME-ROOT :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'HALF-ONES :callees) '(MACROLET LENGTH LET SLOOP))
(setf (callers-list 'MULT-FORM :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'START :callees) '(START-UP))
(setf (callers-list 'ACO-EQUIV-LIST :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'COMMUNE-TERMS2 :callees) '(MACROLET COMMUNE-TERMS2 SLOOP REMOVE-DUPLICATES REM-DUPS MEMBER NULL CDR ARGS-OF CAR OP-OF LET NCONS SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'OK-TO-CONTINUE :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND PRINT-CHOICE-MESSAGE LET ASK-CHOICE MEMBER COND IF*))
(setf (callers-list 'QUASI-REMOVER :callees) '(MACROLET LET SLOOP PROG COND IF*))
(setf (callers-list 'REMOVE-IRRELEVANT2 :callees) '(MACROLET CDR LET SLOOP))
(setf (callers-list 'NEGATE-PREDICATE :callees) '(M-XOR-M CDR ARGS-OF NEGATE-XOR-ARGS QUOTE CAR OP-OF CASE CASEQ COND IF*))
(setf (callers-list 'COLLECT-IF :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ACO-BIGT-PARTITION :callees) '(MACROLET CONS MAKE-TERM LET SLOOP))
(setf (callers-list 'CRIT-STRATEGY-OPTIONS :callees) '(RETURN NOT IF PRINC EQ WITH-STRATEGY SIZE-DEPTH-STR RESTRICT-CRIT-STRA PICK-STRATEGY PARAMOD-STR INT-RULE-STRAT IM-DEL-RULES CASE CASEQ NUMBERP COND IF* READ-ATOM CHOOSE-STR QUOTE PRINT-HEAD PROGN SETQ DO TERPRI LET USER-SELECTQ))
(setf (callers-list 'CONSTRUCTORP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'NORM-EQ-ARGS :callees) '(QUOTE CONS MAKE-TERM CDR IF EQUAL FUNCTION TOTAL-ORDER NORM-TERM MAPCAR SORT REMOVE-DUPLICATES REM-DUPS SETQ))
(setf (callers-list 'NON-CONSTANTS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'NEW-TERM :callees) '(ASK-FOR-OPERATOR LENGTH AUTO-OPERATOR COND IF* CONS MAKE-TERM INTERSECTION LET))
(setf (callers-list 'IS-AN-INSTANCE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'OR-COUNT :callees) '(CADDR SECOND-ARG CADR FIRST-ARG OR-COUNT + QUOTE CAR OP-OF EQUAL COND IF*))
(setf (callers-list 'FORM-SUBGOALS-FROM-PATTERNS :callees) '(FORM-PREMISES-FROM-CONJ CDDDR RHS LHS LIST* CHANGE-CTX NCONS SPLIT-PREMISES MERGE-PREMISES CDDR RPLACA CADDR EQUAL EQN-CTX CTX COND IF* QUOTE SETF CADR EQN-INSTANCE CAR SETQ))
(setf (callers-list 'MAKE-PRE-EQN :callees) '(MAKE-BETTER-PRE CADR CAR EQUAL NOT NEQUAL AND WHEN))
(setf (callers-list 'USER-SELECTQ :callees) '(MACROLET SLOOP LUCID-RUNTIME-SUPPORT:BQ-APPEND LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM CAR MAPCAR QUOTE LIST* LET))
(setf (callers-list 'PURE-KNUTH-BENDIX2 :callees) '(MACROLET SLOOP RUNTIME-MAX-WARNING))
(setf (callers-list 'ORDER-VARS :callees) '(SYMBOL-VALUE SYMEVAL < LESSP BOUNDP AND IF* ALPHALESSP COND))
(setf (callers-list 'PRE-SUB-NONVARS :callees) '(MACROLET LET SLOOP REMOVE-DUPLICATES REM-DUPS))
(setf (callers-list 'GET-FREE-CONSTRUCTORS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'TOKEN-TYPE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'BOOL-REWRITE-AT-ROOT :callees) '(REDUCE-BY-PREMISES-AT-ROOT REDUCE-EQ-TERM REDUCE-AND-TERM CDR ARGS-OF REDUCE-XOR-TERM CAR OP-OF CASE SELECTQ OR))
(setf (callers-list 'SET-HANDLE-AND :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'REMOVE-IRRELEVANT3 :callees) '(MACROLET LET SLOOP APPEND CAR LHS OP-LIST SETQ CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX NULL COND IF*))
(setf (callers-list 'INDUC-PICK-UNMARK :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'X_NORMAL :callees) '(MACROLET SLOOP MENU_FOR_NORMAL SETF))
(setf (callers-list 'REDUCE-BY-PREMISES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'FIND-IN-ORDERED-LIST :callees) '(SETQ ORDER-FUNCTION FUNCALL RETURN CAR EQL COND VALUES NULL CDR DO))
(setf (callers-list 'ABSTRACTION :callees) '(MACROLET LET SLOOP CADR RHS SUB-NONVARS SETQ))
(setf (callers-list 'PARAMODULATE :callees) '(MACROLET LET SLOOP ARGS-OF CDR NULL QUOTE CAR OP-OF EQ CADR RHS SYMBOLP NOT FALSEP AND COND IF*))
(setf (callers-list 'TYPE-ALL-VARS :callees) '(MACROLET CDR ARGS-OF CAR OP-OF GET-CODOMAIN-TYPES LET SLOOP))
(setf (callers-list 'DATE :callees) '(TERPRI CASE PRINC GET-DECODED-TIME MULTIPLE-VALUE-SETQ LET))
(setf (callers-list 'DEBUG-MSG :callees) '(TERPRI PRINC DOLIST COND IF*))
(setf (callers-list 'SPLIT-PREMISES :callees) '(MACROLET LET SLOOP OR-CONDI-EQN SETQ))
(setf (callers-list 'RUNTIME-MAX-WARNING :callees) '(RESET * TIMES SETQ OK-TO-CONTINUE PRINC TERPRI < EQUAL NOT NEQUAL AND COND IF*))
(setf (callers-list 'REF-INSTANCE-SEEDS :callees) '(MACROLET CDR - REF-INSTANCE-SEEDS LET SLOOP NCONS = CDAR ELEMENT-COMBINATION CAAR < NULL COND IF*))
(setf (callers-list 'RULE-NUMS-FROM-SOURCE :callees) '(MACROLET CDDR LET SLOOP LIST SECOND NCONS FIRST CASE CASEQ NCONC COND IF*))
(setf (callers-list 'REDUCE-REVERSE-PREMISES :callees) '(MACROLET CDR LET SLOOP))
(setf (callers-list 'PP2 :callees) '(PP MAPCAR))
(setf (callers-list 'LISTARRAY :callees) '(NREVERSE ERROR SECOND AREF PUSH DECF RETURN ZEROP COND IF* WHEN FIRST DOTIMES LENGTH CASE ARRAY-DIMENSIONS LET))
(setf (callers-list 'X_PREPARE_RULES :callees) '(X_CLEAN-RULE PICK-OUT-RULE EQUAL NOT COND IF* QUOTE READ-ATOM SETF PRINC LIST-RULES))
(setf (callers-list 'ALL-PRE-VARS :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'REFUTE-RULE-INSTANCES :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR LENGTH LET SLOOP))
(setf (callers-list 'COMMUTATIVEP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'SUP-TERM :callees) '(MACROLET CDR ARGS-OF LET SLOOP QUOTE GET LHS CAR OP-OF NUMBERP PREDICATEP SUP-TERM2 PUSH EQUAL FUNCTION MEMBER MEMBER0 NOT COND IF*))
(setf (callers-list 'READ-EQNS :callees) '(MACROLET SLOOP MAKE-BUFFER LET SETQ NULL IF))
(setf (callers-list 'COMPOSE2 :callees) '(MACROLET LET SLOOP COND IF*))
(setf (callers-list 'GET-POSITION :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'LEXICO-COMP :callees) '(MACROLET SLOOP))
(setf (callers-list 'SUM-SLOOP-COLLECT :callees) '(GET SETF PUSHNEW LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'GET-RECURSIVE-DEF-TERM :callees) '(MACROLET CDDR LET SLOOP ASSOC SETQ IF))
(setf (callers-list 'PARSE-LOOP-COLLECT :callees) '(NCONC ERROR LOOP-PARSE-ADDITIONAL-COLLECTIONS FIND TRANSLATE-NAME LUCID-RUNTIME-SUPPORT:BQ-LIST* COLLECT LIST (NCONC APPEND) NOT CAR EQL LISTP UNLESS APPEND QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST PUSHNEW POINTER-FOR-COLLECT (APPEND NCONC COLLECT) GENSYM SETF COND LOOP-UN-POP T SETQ LOOP-ADD-BINDING INTO LCASE LOOP-POP LET THROW AND))
(setf (callers-list 'PRINT-HEAD :callees) '(MACROLET CDR SLOOP PRINC LET IS-EMPTY-LINE COND IF*))
(setf (callers-list 'ALL-VARS :callees) '(CDR ARGS-OF ALL-VARS MAPCAN LIST SYMBOLP VARIABLEP NULL COND))
(setf (callers-list 'REF-PRES-VARS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'LRPO-PREMISES :callees) '(OPERATOR-ORDERING OP-OF EQ SAME-OP NOT CADR > QUOTE MEMQ CAR LRPO IS-SUBSET AND COND IF* POP SETQ))
(setf (callers-list 'AC-CRITICAL-SOURCE :callees) '(QUOTE))
(setf (callers-list 'GET-TESTSET :callees) '(PARTITION-TERM-BY-TYPE APPEND GET-TESTSET2 GET-TESTSET-QUASI EQ FUNCTION QUOTE REMOVE REMOVE0 SETQ EQUAL NOT NEQUAL COND IF*))
(setf (callers-list 'REDUCE-OTHER-RULES :callees) '(MACROLET NTH RULENO LET SLOOP ADD-PAIRS = AND OR COND IF*))
(setf (callers-list 'IS-SORTED :callees) '(MACROLET CDR CAR LET SLOOP))
(setf (callers-list 'PRINT-NAME :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ADD-REST-ARGS :callees) '(APPEND CDR ARGS-OF CONS MAKE-TERM CAR OP-OF EQ SAME-OP NOT SYMBOLP VARIABLEP OR IF))
(setf (callers-list 'COPY :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PURE-ADD-RULE :callees) '(MACROLET NTH RULENO LET SLOOP CHECK-WITNESS NCONS NCONC ADD-RULE3 SETQ WRITE-RULE PRINC TERPRI > COND IF*))
(setf (callers-list 'FLOAD :callees) '(FORMAT OBJ-NAME LOAD BIN-IS-CURRENT IF SOURCE-NAME PROBE-FILE COND))
(setf (callers-list 'TYIPEEK :callees) '(CHAR-CODE CHAR-ASCII NULL COND IF* PEEK-CHAR LET SETQ UNLESS))
(setf (callers-list 'REFUTE-EQN :callees) '(PUSH CDR CONS CHANGE-LHS GET-INSTANCE-SEEDS LHS SKOLEMIZE NEGATE-EQN EQUAL FUNCTION DELETE DELETE0 APPEND LAST CAR WHEN PRINT-ATOMS ASK-A-CHOICE FORMAT UCONCAT AND PRINT-CHOICE-MESSAGE LET ASK-CHOICE QUOTE EQ READ-INPUT SETQ TERPRI PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'ADD-SUGG :callees) '(UPDATE-BY-EQ NCONC ADD-SUGG1 ASSOC OPS-EQUIV-TO CONS NCONS SETQ NULL COND))
(setf (callers-list 'NOFALSE-PREMISES :callees) '(MACROLET CDR LET SLOOP CONS QUOTE EQ COND IF*))
(setf (callers-list 'ACO-COMPUTE-SIZES :callees) '(QUOTE))
(setf (callers-list 'UNIFIER :callees) '(- + IS-BLOCKED PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME QUOTE EQ NONAC-UNIFY SETQ COND IF*))
(setf (callers-list 'APPLYSUBST-PRE :callees) '(CDDR CADR BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SETQ SYMBOLP VARIABLEP SUBLIS CAR EQ COND IF* APPLYSUBST LET FLAT-TERM CONS))
(setf (callers-list 'TRACE-TESTSET :callees) '(MACROLET LET SLOOP LENGTH SETQ FORMAT UCONCAT PRINC TERPRI))
(setf (callers-list 'READ-INPUT :callees) '(MACROLET SLOOP SETQ NOT READFEQNS READTEQNS COND IF* LET))
(setf (callers-list 'APPLYSUBST-RULE :callees) '(CDDDR CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX CADR RHS SUBLIS CAR LHS EQ COND IF* APPLYSUBST LIST APPEND))
(setf (callers-list 'LRPO :callees) '(ACLRPO PURE-LRPO NULL OR COND IF*))
(setf (callers-list 'ORIENT-AN-EQN :callees) '(- + ADD-RULE PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME MEMQ THROW *THROW OR PUSH CATCH *CATCH CONSISTENT-CHECK RELEASE-PREMISES SETQ CDDR RPLACA CADDR EQUAL EQN-CTX CTX COND IF* NTH EQN-SOURCE REFUTED-RESULT QUOTE OP-OF EQ CAR LHS SYMBOLP NOT AND FALSEP IF))
(setf (callers-list 'GET-SKELETON :callees) '(GET-SKELETON2 QUOTE INITSYM))
(setf (callers-list 'CONSISTENT-CHECK-QUASI :callees) '(QUASI-EQUIVALENT LRPO NTH EQN-SOURCE CDDR RPLACA CADDR EQN-CTX CTX SEPARATED OP-OF EQ FALSEP NULL QUOTE EQUAL OR TRUEP QUASI-REDUCIBLE NOT IS-LIMITED AND IF* VAR1-LIST MEMBER INCONSISTENT-EQN SYMBOLP VARIABLEP COND CADR RHS CAR LHS LET))
(setf (callers-list 'INITIALIZE-MANUAL-ORDERING :callees) '(PRINT-WARNING SETQ))
(setf (callers-list 'IS-SUBSEQUENCE :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR 1- LET SLOOP SETQ < IF* STRING= = CHAR CHAR= NOT COND LENGTH SYMBOL-NAME LET*))
(setf (callers-list 'WRITE-TREE :callees) '(MACROLET SLOOP SETF))
(setf (callers-list 'SWITCH_RULE_LR :callees) '(CONS REST SECOND FIRST SETF))
(setf (callers-list 'CYCLE-CHOICE :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'COMPARE-SYMBOL :callees) '(SYMBOL-VALUE SYMEVAL < LESSP BOUNDP AND IF* ALPHALESSP COND))
(setf (callers-list 'EQN-CTX :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'READFEQNS :callees) '(CLOSE READ-EQNS PROG1 OPEN-READ-FILE SETQ COND IF*))
(setf (callers-list 'MEMBER0 :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'HAVE-BOOLEAN-CONSTANT :callees) '(MACROLET CDR LET SLOOP CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX IF CADR RHS CAR LHS FIRST-BOOLEAN-CONSTANT OR))
(setf (callers-list 'ENCOURAGE :callees) '(MACROLET CDR ARGS-OF LET SLOOP IS-LINEAR CAR OP-OF GET-RECURSIVE-DEF-TERM SETQ AND COND IF*))
(setf (callers-list 'SET-ARITY2 :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SIMILAR-EQN :callees) '(CADR RHS CAR LHS QUOTE LIST SIMILAR-TERM))
(setf (callers-list 'SUBSTITUTE-SLOOP-BODY :callees) '(AND QUOTE CONS SUBST LIST SETF COND))
(setf (callers-list 'PARSE-LOOP-INITIALLY :callees) '(APPEND FINALLY CONS SETF LOOP-ADD-BINDING THIRD CONSTANTP SECOND SYMBOLP LENGTH EQL QUOTE CAR MEMBER LISTP AND COND NREVERSE DOLIST PARSE-LOOP-DO LET INITIALLY LCASE))
(setf (callers-list 'ACM-AC-ROOT :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM LET))
(setf (callers-list 'GET-SCHEME-VARS :callees) '(MACROLET CAR OP-OF ASSOC OR COVER-OF SECOND CDR ARGS-OF LET SLOOP))
(setf (callers-list 'START-UP :callees) '(MACROLET QUOTE LET SLOOP TERPRI))
(setf (callers-list 'SAVE-RRL :callees) '(MACROLET LET SLOOP RENAME-OP-RULES RENAME-EQN-RULE MAPCAR OPEN-WRITE-FILE SETQ COND IF*))
(setf (callers-list 'COMBINATE :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR LET SLOOP NCONS = COND IF*))
(setf (callers-list 'WRITEF-SYS :callees) '(RETURN NOT IF EQ DISPLAY-KB-STAT DISPLAY DISPLAY-OP-STATS DISPLAY-CONSTRUCTORS DEFVAR WRITE-RULES PRINC CLOSE WRITE-ASSERTIONS APPEND WRITE-EQNS DISPLAY-TYPE-ARITY OPEN-WRITE-FILE CASE CASEQ NUMBERP COND IF* READ-ATOM CHOOSE-STR QUOTE PRINT-HEAD PROGN SETQ DO TERPRI LET USER-SELECTQ))
(setf (callers-list 'FLATTEN-PREMISES :callees) '(MACROLET CDR LET SLOOP CONS QUOTE CAR EQ COND IF*))
(setf (callers-list 'MARK-USED-PRE :callees) '(CDDR QUOTE CONS CDR RPLACD))
(setf (callers-list 'ELES-MORE-THAN-1 :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'MY-TYIPEEK :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'PARSE-LOOP-WHEN :callees) '(AND NREVERSE LUCID-RUNTIME-SUPPORT:BQ-CONS LUCID-RUNTIME-SUPPORT:BQ-LIST* T ELSE LOOP-PEEK LCASE PARSE-ONE-WHEN-CLAUSE SETQ LOOP-POP LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE L-EQUAL COND LET))
(setf (callers-list 'NORM-XOR-TERM :callees) '(MACROLET CDR ARGS-OF LET SLOOP SETQ))
(setf (callers-list 'CHOOSE-CONSTRUCTORS :callees) '(OK-TO-CONTINUE DISPLAY-OPS FORMAT UCONCAT TERPRI PRINC START-TEST NOT IF* COND PROGN UNWIND-PROTECT SETQ ART? WHEN LET WHEN-ART-WITH-INPUT-FROM-TERMINAL))
(setf (callers-list 'FIRST-PROCESS-EQN :callees) '(SIMP-FIRST-TRANS CDDDR LIST* CHANGE-LHS-RHS-CTX CADR RHS LHS NEW-TRANS-SIMP NEW-FIRST-CTX-TRANS CDDR RPLACA CADDR EQUAL COND IF* EQN-CTX CTX LET QUOTE NTH EQN-SOURCE CAR MEMQ IF))
(setf (callers-list 'NAIL-QUASI-REDUCIBLE :callees) '(MACROLET LENGTH MAKE-TUPLES LET SLOOP TYPE-VAR-LIST AND CAR SETQ IS-AN-INSTANCE COND IF*))
(setf (callers-list 'ELEMENT-COMBINATION :callees) '(MACROLET SUB1 CAR LET SLOOP CDR ELEMENT-COMBINATION NCONC NCONS MAPCAR = COND IF*))
(setf (callers-list 'FILE-DATE :callees) '(FILE-WRITE-DATE OR PROBE-FILE IF))
(setf (callers-list 'DEFAULT-PRECEDENCE :callees) '(SKOLEMP PREDICATEP IS-BOOL-OP EQ QUOTE GET EQUAL NUMBERP OR IS-CONSTANT IF MEMQ COND))
(setf (callers-list 'REMOVE-SUBSUMED-PATTERNS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'PC-GRT-PREC :callees) '(SYMBOL-VALUE SYMEVAL BOUNDP SYMBOLP ALPHALESSP EQ NUMBERP < > DEFAULT-PRECEDENCE LET ASSOC CDR MEMBER COND IF*))
(setf (callers-list 'GET-PRE-LHS :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'FLATTEN-RULES2 :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'CHOOSE-OFF-CLOSE :callees) '(CAR CDR COND IF*))
(setf (callers-list 'UNIT-RULE :callees) '(CAR NOT NEQUAL EQUAL FUNCTION ARGS-OF REMOVE REMOVE0 SETQ AND CDR NULL SYMBOLP VARIABLEP OR COND IF*))
(setf (callers-list 'CHOOSE-BY-HAND :callees) '(MACROLET LET SLOOP PROG QUOTE EQ LENGTH FORMAT UCONCAT CDR PRINC TERPRI CDDDR RPLACA PROGN SET-CRIT-MARK NULL COND IF*))
(setf (callers-list 'OK-PREV-RULES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'CRIT-PAIR-PROCESS :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'REF-EXTRA-PRE-VARIABLES :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PURE-NORM-INNERMOST :callees) '(CDR ARGS-OF PURE-NORM-INNERMOST MAPCAR CAR OP-OF CONS MAKE-TERM PURE-REWRITE-AT-ROOT SETQ SYMBOLP VARIABLEP COND))
(setf (callers-list 'PROVE_EQN :callees) '(MACROLET SLOOP SETF PROVE))
(setf (callers-list 'CHANGE-VARS :callees) '(MACROLET CAR LHS VAR-LIST INTERSECTION SLOOP LET))
(setf (callers-list 'EQ-ADD :callees) '(EQ-ADD CONS CDR UNION EQ-JOIN CAR INTERSECTION EQUAL FUNCTION REMOVE-DUPLICATES REM-DUPS NCONS NULL COND))
(setf (callers-list 'GENERAL-BASIS-VECTORS :callees) '(MACROLET SLOOP::TYPE-ERROR + TYPEP OR LET SLOOP SETQ QUOTE CONS FILLARRAY LUCID-RUNTIME-SUPPORT:BQ-LIST MAKE-ARRAY 1+ LENGTH LET*))
(setf (callers-list 'LIST-RULES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'DRAIN-IT :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'OCCUR-NUM :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'IS-GROUND :callees) '(MACROLET CDR ARGS-OF LET SLOOP SYMBOLP VARIABLEP NULL COND))
(setf (callers-list 'COVER-NORMAL-PROOF :callees) '(QUERY-ADD-EQN CAR AND COND IF* PRINT-NORMALIZED-EQN COVER-NORMALIZE SETQ FLATTEN-EQN))
(setf (callers-list 'BUILDING :callees) '(MACROLET NULL AND ELIMINABLE-TERMS LET SLOOP))
(setf (callers-list 'CLOSE-LOG :callees) '(TERPRI OUTFILE SETQ CLOSE TRUENAME FORMAT UCONCAT PRINC COND IF*))
(setf (callers-list 'APPLIES :callees) '(MATCH NULL LIST NCONS AC-MATCH MATCH-POSS AND OR QUOTE EQ COND IF*))
(setf (callers-list 'WELL-TYPED-EQN :callees) '(MACROLET CDR LET SLOOP EQ IS-PREMISE-SET CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX COND IF* CADR RHS CAR LHS WELL-TYPED AND))
(setf (callers-list 'INITSYM :callees) '(QUOTE GET SETF MAKESYM))
(setf (callers-list 'INSERT-POLY-SIGMA :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'EXTEND-DEF-DOMAIN :callees) '(EXTEND-DOM-ARGS CAR OP-OF INS-LIS DEF-DOMAIN-POINTS NULL CDR ARGS-OF CONS MAKE-TERM MEMQ IF* SYMBOLP VARIABLEP COND))
(setf (callers-list 'MAKE-EQ :callees) '(CDDR RPLACA CADDR EQN-CTX CTX MAKE-NEW-RULE ADD-RULE NTH EQN-SOURCE REFUTED-RESULT CAR OP-OF EQ SYMBOLP NOT AND FALSEP NULL EQUAL OR TRUEP NORM-CTX LIST COMMU-EXCHANGE QUOTE CONS MAKE-TERM COND IF* SETQ))
(setf (callers-list 'PREMISES-ARE-TRUE :callees) '(MACROLET CDR LET SLOOP))
(setf (callers-list 'EMPTY-SUB :callees) '(EQUAL))
(setf (callers-list 'TRACE-FACTOR :callees) '(WRITE-ONE-PRE WRITE-EQN PRINC TERPRI > COND IF*))
(setf (callers-list 'EXPECTED :callees) '(MACROLET CDR LET SLOOP CADR TOKEN-TEXT PRINC COND IF* TERPRI))
(setf (callers-list 'EXTEND-SCHEMES :callees) '(MACROLET SLOOP NCONS LET))
(setf (callers-list 'MANUAL-GOAL :callees) '(MACROLET LET SLOOP SETQ COND IF*))
(setf (callers-list 'IS-REL-PREC :callees) '(DEFAULT-PRECEDENCE EQUAL NOT NEQ ASSOC CDR MEMBER EQOPS OR))
(setf (callers-list 'FLAT-TERM :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST GENSYM LET))
(setf (callers-list 'HEAD_OF_MANUAL_INDUC :callees) '(QUOTE DISP_STRINGS WRITE-SEQ-EQN PRINC TERPRI))
(setf (callers-list 'INFIX-LETTER :callees) '(QUOTE MEMQ))
(setf (callers-list 'SYMMETRY-VARS :callees) '(MACROLET VAR-LIST LET SLOOP CAR LHS ALL-OPS HAVE-COMMON COND IF*))
(setf (callers-list 'READ-ATOM :callees) '(MACROLET SLOOP OR POP SETQ CLOSE TYIPEEK-SPA-CR EQ AND READ-PRESERVING-WHITESPACE COND IF*))
(setf (callers-list 'SIMPLIFY-COND-TERM :callees) '(REDUCE-AT-ROOT LIST PSETQ CONSP NONVARP IF BA-SIMP-NOT SETQ CAR OP-OF EQ SYMBOLP NOT AND FALSEP NULL QUOTE EQUAL OR TRUEP COND CADDDR CADDR SECOND-ARG CADR FIRST-ARG COVER-NORM-TERM LET))
(setf (callers-list 'RESET :callees) '(THROW))
(setf (callers-list 'MY-COPYLIST :callees) '(MACROLET LET SLOOP APPEND = COND IF*))
(setf (callers-list 'REDUCE-BY-CHARACTER :callees) '(MACROLET CDR ARGS-OF MULT-FORM CADDDR CADR LET SLOOP))
(setf (callers-list 'EXPECTING-PREDICATES :callees) '(MACROLET CDR ARGS-OF LET SLOOP BAD-TYPED CADDR SECOND-ARG CADR FIRST-ARG GET-TERM-TYPE TYPE-COHERE QUOTE MEMQ CHECK-ARITY CAR OP-OF ENSURE-PREDICATE THROW *THROW SYNERR NOT TERPRI FORMAT UCONCAT PRINC SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'DEF-LOOP-COLLECT :callees) '(DEFMACRO QUOTE DEF-LOOP-INTERNAL))
(setf (callers-list 'PICK-OUT-RULE :callees) '(MACROLET LET SLOOP OR))
(setf (callers-list 'START-KB :callees) '(DISPLAY-KB-STAT - + RUN-KB PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME SETQ START-PUSH-HISTORY SYS-FLAG-INIT OR NOT RETURN TERPRI PRINC IF* COND PROG))
(setf (callers-list 'ONE-ELIM-SUBTERM :callees) '(MACROLET CDR ARGS-OF LET SLOOP IS-ELIM-TERM SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'HAS-INDUCTIVE-VAR :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'NORM-INN :callees) '(MACROLET APPEND AND ASSQ RULES-WITH-OP LET SLOOP CDR ARGS-OF NORM-INN MAPCAR CAR OP-OF CONS MAKE-TERM SETQ SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'MAKE-TERMS :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ALLSYM :callees) '(MAKESYM PUSH QUOTE GET OR DOTIMES))
(setf (callers-list 'PICK-AN-ARG :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'NOT-FALSEP :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'POLY-MATCH-FIND-REST-*-ARGS :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR - LENGTH LET SLOOP))
(setf (callers-list 'INDUC-SUBSUMED-BY :callees) '(MACROLET CAR LHS LET SLOOP))
(setf (callers-list 'AC-MATCH :callees) '(MACROLET CAR LET SLOOP GOOD-LUCK-CONDI OR AND NULL SETQ EQ COND IF*))
(setf (callers-list 'COVER-CASE-COND-FLAG :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'DISPLAY :callees) '(LIST-RULES LENGTH LIST-ASSERTIONS APPEND LIST-EQUATIONS OR DISPLAY-OPS FORMAT UCONCAT PRINC TERPRI COND IF* DISPLAY-TYPE-ARITY))
(setf (callers-list 'MY-FIRST-CTX-TRANS :callees) '(FIRST-CTX-TRANS QUOTE CONS))
(setf (callers-list 'IS-CONSTANT-OP :callees) '(GET-ARITY EQUAL))
(setf (callers-list 'P-AND-P :callees) '(MACROLET CDR ARGS-OF QUOTE LET SLOOP))
(setf (callers-list 'ORDER-ONLY :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'DELETE-EQN :callees) '(MACROLET LENGTH LET SLOOP GO DISPLAY QUOTE CAR EQ READ-ARGS SETQ PRINC IS-EMPTY-LINE COND IF* PROG))
(setf (callers-list 'START-PUSH-HISTORY :callees) '(PUSH-HISTORY START-HISTORY))
(setf (callers-list 'PEQNS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'FIRST-CTX-TRANS :callees) '(MAKE-PRE-ASS CADR FIRST-ARG NEW-TRANS-SIMP CDR ARGS-OF FIRST-CTX-TRANS MAPCAN CAR OP-OF CASE CONS ATTACH MAKE-PRE LIST SYMBOLP VARIABLEP IF))
(setf (callers-list 'M-AND-M :callees) '(CONS MAKE-TERM MERGE-AND-REMOVE-DUPS LET APPEND AND-OF-MONOMIALS EQ-TR-MEMBER SYMBOLP NOT AND FALSEP NULL EQUAL OR TRUEP NCONS CDR ARGS-OF QUOTE CAR OP-OF EQ COND IF* HALF-CANONICALIZE))
(setf (callers-list 'FIRST-VAR-PRE :callees) '(COVER-NORM-TERM CONS ATTACH MAKE-PRE NULL QUOTE EQUAL OR TRUEP COND IF*))
(setf (callers-list 'IDEM-SUPER-COMMU :callees) '(MACROLET COMMUNE-TERMS LET SLOOP NOT NEQUAL RULENO NTH RULE-SOURCE CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CADR RHS CAR LHS MAKE-NEW-RULE SETQ))
(setf (callers-list 'DISABLE-RULES :callees) '(DISABLE-RULES-AUX))
(setf (callers-list 'POLY-SUPER-AT-*-1 :callees) '(MACROLET NTH REF-SYMMETRY-VARS LET SLOOP EQUAL FUNCTION MEMBER MEMBER0 NOT SYMBOLP VARIABLEP AND COND IF* LAST CDR LENGTH CADR RHS CAR LHS LET*))
(setf (callers-list 'NEW-AC-SUPER-SAME :callees) '(MACROLET EQUAL FUNCTION CDR ARGS-OF REMOVE-DUPLICATES REM-DUPS SLOOP QUOTE MAKE-NEW-VARIABLE LHS CAR OP-OF LET))
(setf (callers-list 'LOOP-ADD-BINDING :callees) '(LOOP-DECLARE-BINDING RETURN CAR DOLIST CONSTANTP SYMBOL-PACKAGE MAKE-VALUE CDR SETF AND CAAR ASSOC SETQ COND CONS PUSH NULL OR WHEN))
(setf (callers-list 'ELIMINABLE-TERMS :callees) '(MACROLET CDR LET SLOOP CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX COND IF* OR))
(setf (callers-list 'MULT-LENGTH :callees) '(CDR MAPCAR + APPLY))
(setf (callers-list 'NEWSYM :callees) '(QUOTE GET INCF MAKESYM))
(setf (callers-list 'DIO :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR SUB1 SLOOP PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME SETQ LET*))
(setf (callers-list 'X_HYPOTHESIS :callees) '(ONE-RULE-ITERATION OR WRITE-RULE TERPRI PRINC WHEN LIST APPEND NTH EQN-SOURCE CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX CADR RHS CAR LHS MAKE-NEW-RULE FLATTEN-EQN SETQ COND IF* SETF))
(setf (callers-list 'UNIFIERS :callees) '(- + NCONS UNIFIER SETQ PROG1 GET-INTERNAL-RUN-TIME LET ADD-TIME LESSP-SIZE-BINDINGS UNIFY SORT OR COND IF*))
(setf (callers-list 'MERGE-DUPLICATE :callees) '(MACROLET CDR CAR NCONS LET SLOOP CDR-GREAT SORT SETQ))
(setf (callers-list 'CURSOR_UP :callees) '(NODE-PARENT SETF))
(setf (callers-list 'EXT-CONSTRUCTOR :callees) '(MACROLET SLOOP ASK-A-CHOICE ASK-CHOICE RESET OK-TO-CONTINUE GET-DOMAIN-TYPE GET-ARITY2 QUOTE GET SETF PUTPROP NUMBERP SET-ARITY PUSH ASK-A-NUMBER PRINC TERPRI IS-EMPTY-LINE AND FORMAT UCONCAT PRINT-CHOICE-MESSAGE LET ASK-NUMBER SETQ MEMBER MEMQ CONSTRUCTORP NOT COND IF*))
(setf (callers-list 'MENU_FOR_CURSOR :callees) '(MACROLET SLOOP QUOTE SETF))
(setf (callers-list 'REM-INFIX :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'LOGXOR-SLOOP-COLLECT :callees) '(GET SETF PUSHNEW LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'IS-SUBLIST :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'AUTO-KB :callees) '(MACROLET SLOOP MAX APPLY SETQ OR COND IF* LET))
(setf (callers-list 'MULT-MERGE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'TRACE-HYPOTHESE :callees) '(WRITE-EQN MAPCAR - MINUS + FORMAT UCONCAT PRINC TERPRI))
(setf (callers-list 'ASS2EQN :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SIZE :callees) '(1+ SIZE MAPCAR APPLY CDR ARGS-OF LENGTH + QUOTE EQ AND CAR OP-OF MEMQ OR SYMBOLP VARIABLEP NULL COND))
(setf (callers-list 'SEPARATE-XOR-ARGS :callees) '(MACROLET CDR LET SLOOP CAR SETQ))
(setf (callers-list 'DECIDE-MERGE-CONJ :callees) '(MACROLET LET SLOOP EQUAL FUNCTION DELETE DELETE0 CHOOSE-HIGHEST-TERM SETQ CDR COND IF*))
(setf (callers-list 'MATCH-SET-AC :callees) '(CONS CDR EQUAL FUNCTION DELETE DELETE0 QUOTE CAR OP-OF CASE CASEQ ASSQ LIST NCONS AC-MATCH SETQ COND IF*))
(setf (callers-list 'SUBS-OF-SAME-ROOT :callees) '(MACROLET CDR ARGS-OF LET SLOOP SETQ CONSP NONVARP COND IF*))
(setf (callers-list 'SET-DIFF :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'WARN-STAT :callees) '(MACROLET OPS-EQUIV-TO LET SLOOP TERPRI QUOTE GET FORMAT UCONCAT PRINC))
(setf (callers-list 'ADD-AT-END :callees) '(NCONS NCONC EQUAL FUNCTION MEMBER MEMBER0 COND IF*))
(setf (callers-list 'COVER-PROOF-PROCESS2 :callees) '(IF LIST HAVE-BOOLEAN-CONSTANT STRUCTURE-INDUC-ON INDUC-SUBGOAL-PROOFS COVER-SET-SCHEME FORMAT UCONCAT PUSH WRITE-SEQ-EQN PRINC TERPRI LENGTH < ABSTRACT-PROOF SUB1 BUILDING BUILD-PREMISES-FROM-BOOL-TERM PROOF-UNDER-NEW-PREMISES BUILD-PREMISES-FROM-COND-TERM PROOF-BY-HINT-TERM CDDR RPLACA CADDR EQUAL EQN-CTX CTX HAS-HINT-TERM SETQ NODE-SOURCE NODE-STATUS SEARCH-TREE QUOTE SETF > NULL AND COND IF*))
(setf (callers-list 'KEEP-RULE-STRATEGY :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'REDUCE-BY-PREMISE-AT-ROOT :callees) '(LIST-DIFF CONS MAKE-TERM MAKE-FLAT IS-SUBLIST MEMQ AC-OP-P AC-ROOT CAR OP-OF EQ SAME-OP AND SYMBOLP VARIABLEP OR EQUAL COND IF*))
(setf (callers-list 'IS-HIGHER-TERM :callees) '(CAR OP-OF OP-POSITION < LESSP IS-SUBTERM COND IF*))
(setf (callers-list 'TOTAL-ORDER-2 :callees) '(TOTAL-ORDER-RES CASE SELECTQ))
(setf (callers-list 'GET-INSTANCE-SEEDS :callees) '(MACROLET OP-LIST LET SLOOP))
(setf (callers-list 'QUERY-INSERT :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'XOR-OF-MONOMIALS :callees) '(MACROLET SLOOP POP TOTAL-ORDER SORT SETQ LET))
(setf (callers-list 'NORM-SUB :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SIMP-AND-SIMP :callees) '(MACROLET SLOOP POP EQUAL FUNCTION QUOTE MEMBER MEMBER0 COND IF* TOTAL-ORDER EQ-TR SORT SETQ))
(setf (callers-list 'NTHELEM :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NORM-BY-PREMISES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'DISPLAY-UNIFY :callees) '(MACROLET UNIFY LET SLOOP))
(setf (callers-list 'C-PERMUTATION :callees) '(CDR ARGS-OF C-PERMUTATION MAPCAR COMMU-EXCHANGE CONS MAKE-TERM CAR OP-OF MEMQ COMMUTATIVEP SYMBOLP VARIABLEP COND))
(setf (callers-list 'IS-INFIX-OP :callees) '(GET-ARITY = IS-VALID-OP AND))
(setf (callers-list 'IS-EQ-FALSE-PRE :callees) '(CAAR QUOTE CAR OP-OF EQ SYMBOLP NOT FALSEP CADR CONSP NONVARP AND))
(setf (callers-list 'REM-DUP-VARS :callees) '(MACROLET CDR LET SLOOP FIRST SETQ))
(setf (callers-list 'REMAINDER :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'COVER-CASE-BOOL-FLAG :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'IS-ONEWAY :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SOURCE-NAME :callees) '(QUOTE CONCATENATE))
(setf (callers-list 'GET-STATUS :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MANUAL-ORIENT :callees) '(INVALID-INPUT-WARNING UNDO THROW *THROW PUSH MAKE-CRIT-RULE NTH EQN-SOURCE MAKE-NEW-RULE PUSH-HISTORY-MANUAL HELP-FILE GO GIVE-STAT RETURN CADR RHS CAR LHS VAR-LIST ADD-OPERATOR QUOTE READ-ATOM CHOOSE-STR SETQ CASE SELECTQ WRITE-EQN PRINC COND IF* TERPRI START-HISTORY-MANUAL PROG))
(setf (callers-list 'CHECK-HEAD-ROLE :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'FIRST-TRANS :callees) '(CONS MAKE-TERM LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST* CAR OP-OF CASE CASEQ CDR ARGS-OF FIRST-TRANS MAPCAR LET SYMBOLP VARIABLEP NULL COND))
(setf (callers-list 'P-*-P :callees) '(MACROLET CDR ARGS-OF QUOTE LET SLOOP))
(setf (callers-list 'CHAR-ASCII :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SIZE-COMPARE :callees) '(MACROLET SLOOP ORDER-PC HALF-CANONICALIZE-AND-EXPAND-EQ SORT REVERSE LET NULL QUOTE EQUAL OR TRUEP COND IF*))
(setf (callers-list 'CHECK-WITNESS :callees) '(FOUND-WITNESS CHECKEQ-NORMAL COVER-NORMALIZE IF SETQ CADR RHS CAR LHS REDUCE-BY-ONE-RULE OR WHEN))
(setf (callers-list 'SUPER-ITSELF-PRE :callees) '(MACROLET CDR ARGS-OF SLOOP OP-OF CONSP NONVARP AND CADDAR GET-PRE-RHS CADAR QUOTE CAAR EQ CADR CAR SYMBOLP VARIABLEP COND IF* GET-PRE-LHS LET))
(setf (callers-list 'HANDLE-AND? :callees) '(QUOTE EQ))
(setf (callers-list 'INSERT1 :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'EQN2PRE :callees) '(LIST EQUAL OR TRUEP NOT PSEUDO-TERM-ORDERING GET OP-OF NUMBERP PREDICATEP NCONS CADR RHS CONS ATTACH MAKE-PRE CAR LHS SYMBOLP VARIABLEP COND IF* QUOTE SETQ NULL IF))
(setf (callers-list 'MAKE-RULE-SIZE-ORDER :callees) '(MACROLET LET SLOOP LITERAL-NUM MAPCAR MAX APPLY NULL COND IF* ANS-MEMBER SET-DIFF SETQ))
(setf (callers-list 'WRITE-TERM :callees) '(WRITE-TERM-BOOL SETQ))
(setf (callers-list 'HASQUANT :callees) '(MACROLET CDR ARGS-OF LET SLOOP QUOTE CAR OP-OF MEMQ QUANTIFIERP SYMBOLP VARIABLEP COND))
(setf (callers-list 'ACM-ONE-VAR :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'HEAD_OF_FAILURE_HANDLER :callees) '(DISP_STRINGS QUOTE EQUAL COND WRITE-SEQ-EQN NODE-SEQNO PRINC TERPRI))
(setf (callers-list 'REMQ :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST WHEN QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'LRRL :callees) '(FLOAD DOLIST))
(setf (callers-list 'PICK-AC-PAIR :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'ACO-COLLECT-BIGT :callees) '(QUOTE))
(setf (callers-list 'ACO-NOBIGT-PARTITION :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SAME-OP? :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'IS-BAD-SUGG :callees) '(MACROLET SLOOP LET))
(setf (callers-list 'MY-UNTYI :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ACO-RPOMULT> :callees) '(MACROLET LET SLOOP NULL COND CAR CDR ARGS-OF MULT-FORM MULT-DIFF SETQ))
(setf (callers-list 'INPUT-TYPE-CHECK :callees) '(TERPRI FORMAT UCONCAT PRINC WELL-TYPED COND IF*))
(setf (callers-list 'VARS-ONLY :callees) '(MACROLET QUOTE LET SLOOP POP GET-INTERSECTION-RANGE COND IF* LENGTH - DIFF TRUNCATE QUOTIENT 1+ SECOND CDR ARGS-OF DIVIDED-BY OCCUR-NUM CADR FIRST-ARG CAR OP-OF FIRST SETQ))
(setf (callers-list 'COMM-OP-P :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'P-XOR-P :callees) '(CAR CONS MAKE-TERM COND IF* QUOTE CDR ARGS-OF MERGE-AND-REMOVE-PAIRS LET))
(setf (callers-list 'ARGS-OF :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'IS-HOMOGENEOUS-RULE :callees) '(CAR LHS IS-HOMOGENEOUS-TERM))
(setf (callers-list 'COMBINATE2 :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR LET SLOOP CONS))
(setf (callers-list 'MAKE-CRIT-RULE :callees) '(MACROLET LET SLOOP CDDR RPLACA CADDR EQUAL COND IF* EQN-CTX CTX MAKE-NEW-RULE LIST NTH EQN-SOURCE QUOTE CONS SETQ))
(setf (callers-list 'REDUCE-ARGS-BY-PREMISES :callees) '(MACROLET CDR ARGS-OF LET SLOOP SYMBOLP VARIABLEP COND))
(setf (callers-list 'TYIPEEK-SPACE :callees) '(PEEK-CHAR))
(setf (callers-list 'ONE-EXTENSIBLE-TYPE-POINT :callees) '(MACROLET GET-CODOMAIN-TYPES CDR ARGS-OF LET SLOOP LENGTH = AC-OP-P AC-ROOT NOT OR CAR OP-OF MEMQ AND COND IF*))
(setf (callers-list 'WELL-TYPED3 :callees) '(MACROLET CDR ARGS-OF GET-CODOMAIN-TYPES LET SLOOP QUOTE GET CAR OP-OF NUMBERP GET-ARITY2 COND IF*))
(setf (callers-list 'REFUTED-RESULT :callees) '(THROW *THROW NCONS NCONC COND IF* WRITE-RULE PRINC TERPRI QUOTE MAKE-NEW-RULE SETQ))
(setf (callers-list 'CYCLE-REDUCE-AT-ROOT-3 :callees) '(TOTAL-ORDER REDUCE-AT-ROOT-ONE-RULE SETQ POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE QUOTE CAR OP-OF MEMQ AND COND IF*))
(setf (callers-list 'TRACE-REMOVE-IRRELEVANT4 :callees) '(MACROLET CDR LET SLOOP CAR PRINC TERPRI SETQ > COND IF*))
(setf (callers-list 'SKOLEMIZE-AWAY-QUANTS :callees) '(SKOLEMIZE-AWAY-QUANTS MEMQ QUANTIFIERP SPECIAL-SUBST GET-SKO-FUNC CDR CONS PUSH ASSOC MAKE-NEW-VARIABLE SETQ QUOTE EQ COND IF* CADDR SECOND-ARG CADR FIRST-ARG CAR OP-OF LET))
(setf (callers-list 'COMPARE-TERM-RESULT :callees) '(COMPARE-TERM COND))
(setf (callers-list 'APPLYSUBST :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'X_MANUAL_INDUC :callees) '(MACROLET SLOOP HEAD_OF_MANUAL_INDUC CUTTREE MY-COPYLIST QUOTE LIST SEARCH_BY_ID SETF))
(setf (callers-list 'WRITE-SIGMA :callees) '(MACROLET CDR LET SLOOP CDAR WRITE-TERM-SIMPLE PRINC CAAR WRITE-VARIABLE SETQ COND IF*))
(setf (callers-list 'PROCESS-NEW-AC-CP2 :callees) '(PROCESS-CRITPAIR WELL-TYPED-EQN LIST MAKE-EQN CADR CDDR NULL BRT BA-SIMPLIFY IF C-PERMUTATION - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SYMBOLP VARIABLEP APPEND LET FLAT-TERM SET-DIFF CDR COMMON-ELEMENTS SUBLIS EQ COND IF* APPLYSUBST MAKE-FLAT 1+ SETQ))
(setf (callers-list 'TRANS-STATUS :callees) '(MACROLET OPS-EQUIV-TO SLOOP QUOTE GET NUMBERP COND IF* GET-STATUS LET))
(setf (callers-list 'RPLNTHSUBT-IN-BY :callees) '(MACROLET CDR ARGS-OF LET SLOOP CAR OP-OF CONS MAKE-TERM))
(setf (callers-list 'HANDLE-FACTOR :callees) '(MACROLET LET SLOOP QUOTE CONS SETQ))
(setf (callers-list 'SET-ARITY :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CAR-NUM-ORDER :callees) '(CAR > GREATERP NOT))
(setf (callers-list 'COVER-PROOF-PROCESS :callees) '(MACROLET SLOOP SETF CHECK_AND_ADD))
(setf (callers-list 'ASK-CHOICE :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-CONS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'COMPLETE-WELL-TYPED :callees) '(MACROLET CDR ARGS-OF CADR FIRST-ARG GET-TERM-TYPE LET SLOOP QUOTE CAR OP-OF MEMQ SYMBOLP VARIABLEP NULL COND IF*))
(setf (callers-list 'IS-PARTIAL-OP :callees) '(OK-TO-CONTINUE PROGN UNWIND-PROTECT ART? WHEN LET WHEN-ART-WITH-INPUT-FROM-TERMINAL TEST-ONE-OP AND GET-DEFINING-DOMAINS GET-BASIC-TYPE-TERMS SETQ ASSQ CDR GET-DEF-DOMAIN NOT COND IF*))
(setf (callers-list 'NONDO-CRIT :callees) '(PAIRSWITH MEMQ NOT NTH RULENO < LESSP COND IF*))
(setf (callers-list 'IS-INCONSI-PAIR :callees) '(CDR ARGS-OF NULL SYMBOLP VARIABLEP AND OR))
(setf (callers-list 'ADD-SUGG1 :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'FLATTEN :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SUB1-MODULO-N :callees) '(SUB1 RPLACA CDR SUB1-MODULO-N CONS CAR EQUAL NULL COND))
(setf (callers-list 'OP-LIST :callees) '(EQUAL FUNCTION ALL-OPS REMOVE-DUPLICATES REM-DUPS))
(setf (callers-list 'MERGE-PREMISES :callees) '(CDR APPEND NULL COND IF*))
(setf (callers-list 'ATTACH :callees) '(RPLACA CDR CAR CONS RPLACD ATOM COND))
(setf (callers-list 'BREAK-ASS-STR :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'IS-CONDI-RULE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CYCLE-REDUCE-AT-ROOT-4 :callees) '(TOTAL-ORDER REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE QUOTE CAR OP-OF MEMQ AND SETQ COND IF*))
(setf (callers-list 'CNTH :callees) '(GO 1- CDR SETQ RETURN = ATOM OR PROG CONS > COND))
(setf (callers-list 'CHANGE-LHS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'MORE-VARS-PREMISE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SKOLEM-TERMS :callees) '(CDR ARGS-OF SKOLEM-TERMS MAPCAN NCONS CAR OP-OF IS-SKOLEM-OP SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'AC-CRITPAIRS :callees) '(PRED-FUNC-SUPERPOSITION PRED-SUPERPOSITION CAAR GET PRED-RULEP AC-SUPERPOSITION CDDR RPLACA QUOTE EQUAL EQN-CTX IS-CONDI-RULE NULL OR COND IF* CADDDR CADDR CADR LET))
(setf (callers-list 'COVER-GENE-INDUC-EQN :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'PROVE :callees) '(MACROLET SLOOP EQ WRITE-COMMENT-EQN - + COVER-NORMAL-PROOF PROG1 GET-INTERNAL-RUN-TIME ADD-TIME CDDR RPLACA CADDR EQN-CTX CTX AND FIRST-PROCESS-EQN READ-THIS-EQN INIT-PROVE-GLOBALS INDUC-PROVE START-KB OK-TO-CONTINUE WRITE-EQN OR RETURN QUOTE EQUAL NOT NEQ COND IF* TERPRI PRINC NULL PROGN UNWIND-PROTECT SETQ ART? WHEN LET WHEN-ART-WITH-INPUT-FROM-TERMINAL PROG))
(setf (callers-list 'FIRST-ARG :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'DEF-LOOP-INTERNAL :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST LUCID-RUNTIME-SUPPORT:BQ-APPEND QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST* <= ERROR LENGTH >= OR AND FORMAT INTERN))
(setf (callers-list 'PURE-RWONCE-OUTERMOST :callees) '(PURE-OUTRED1 PURE-REWRITE-AT-ROOT SYMBOLP VARIABLEP COND))
(setf (callers-list 'MARK-SUPERPOSED :callees) '(PUSH EQUAL FUNCTION PAIRSWITH MEMBER MEMBER0 QUERY-INSERT NTH RULENO < LESSP COND IF*))
(setf (callers-list 'PRED-FUNC-SUPERPOSITION :callees) '(MACROLET CDR ARGS-OF SLOOP COMMUNE-TERMS CAR LHS COPY-TREE COPY CANONICALIZE LET EQUAL NOT NEQUAL COND IF*))
(setf (callers-list 'MAKE-RULE-INSTANCES :callees) '(MACROLET LET SLOOP REMOVE-DUPLICATES REM-DUPS SETQ COND IF*))
(setf (callers-list 'NORM-CTX-AND :callees) '(LIST SIMP-AND CAR OP-OF EQ SYMBOLP NOT AND FALSEP NORM-CTX NULL QUOTE EQUAL OR TRUEP COND))
(setf (callers-list 'ADD-DEFIN-DEPEND :callees) '(MACROLET EQUAL FUNCTION OPS-OF-RULE MAPCAN REMOVE-DUPLICATES REM-DUPS LET SLOOP SETQ))
(setf (callers-list 'CONDENSE-SEQUENCE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'TEST-ONE-OP :callees) '(MACROLET SLOOP QUASI-REMOVER QUOTE EQ OR GET-SCHEMES SETQ FORMAT UCONCAT PRINC TERPRI NULL COND IF* ASSQ CDR GET-DEF-DOMAIN LET))
(setf (callers-list 'OCCURS-IN-RULE :callees) '(MACROLET CDR LET SLOOP CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX IF CADR RHS CAR LHS OCCURS-IN OR))
(setf (callers-list 'OPS-EQUIV-TO :callees) '(MACROLET SLOOP LET))
(setf (callers-list 'APPEND1 :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'ONE-TYPE-VAR-LIST :callees) '(EQUAL FUNCTION ONE-TYPE-ALL-VARS REMOVE-DUPLICATES REM-DUPS NCONS SYMBOLP VARIABLEP COND))
(setf (callers-list 'ONE-RULE-ITERATION :callees) '(MACROLET SLOOP))
(setf (callers-list 'COVER-INDUC-PROVE :callees) '(CATCH *CATCH GET-COVER-SETS NODE-STATUS NODE-CHDLST FIRST + QUOTE ADD_CHILD EQUAL NOT COND IF* SETQ SETF X_INITIAL))
(setf (callers-list 'DETACHMENT-SUPER :callees) '(MACROLET FIRST-ARG UNIFIERS SLOOP NULL OR TRUEP RULE-SOURCE CDDR RPLACA CADDR EQUAL COND IF* EQN-CTX CTX CADR RHS MAKE-NEW-RULE SETQ = NTH RULENO LIST LET QUOTE LHS CAR OP-OF EQ WHEN))
(setf (callers-list 'RETURN-SLOOP-MACRO :callees) '(GET SETF QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'REMOVE-VAR-PRES :callees) '(MACROLET CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CDR LET SLOOP SETQ))
(setf (callers-list 'PRINT_STR :callees) '(TERPRI PRINC))
(setf (callers-list 'ONE-TYPE-ALL-VARS :callees) '(MACROLET CDR ARGS-OF CAR OP-OF GET-CODOMAIN-TYPES LET SLOOP))
(setf (callers-list 'HANDLE-COMMU-HYPO :callees) '(MACROLET LET SLOOP CADR RHS CAR LHS SETQ))
(setf (callers-list 'IS-FREE-CONSTRUCTOR :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'IS-VALUE-TERM :callees) '(GROUNDP IS-LIMITED AND))
(setf (callers-list 'SIMILAR-TERM :callees) '(APPLIES AND))
(setf (callers-list 'FACTORIBLE :callees) '(CAR UNIFIERS SETQ CADR EQUAL AND COND IF*))
(setf (callers-list 'OCCURS-IN :callees) '(MACROLET CDR ARGS-OF LET SLOOP SYMBOLP VARIABLEP EQ COND IF*))
(setf (callers-list 'PURE-PROCESS-CRITPAIR :callees) '(MACROLET SLOOP THROW *THROW CASE CASEQ CATCH *CATCH SETQ NTH EQN-SOURCE TRACE-CRIT = COND IF*))
(setf (callers-list 'TAB :callees) '(OR FORMAT))
(setf (callers-list 'OPS-OF-RULE :callees) '(MACROLET CDR LET SLOOP CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX COND IF* CADR RHS CAR LHS ALL-OPS APPEND))
(setf (callers-list 'EXT-DIVISIBLE :callees) '(LIST PUSH CAR PRINT-ATOMS ASK-A-CHOICE IS-EMPTY-LINE AND PRINT-CHOICE-MESSAGE LET ASK-CHOICE CDR GET-CONSTANTS SETQ FORMAT UCONCAT OK-TO-CONTINUE ASSOC PRINC TERPRI GET-ARITY EQUAL NOT NEQ COND IF*))
(setf (callers-list 'GET-SOLUTIONS :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR SLOOP 1+ MAKE-ARRAY LET))
(setf (callers-list 'RULE-SOURCE-TYPE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'COMP-RULE :callees) '(NTH LHSIZE < LESSP CDDR RPLACA QUOTE CADDR EQUAL IF* EQN-CTX CTX NULL NULL-CTX COND))
(setf (callers-list 'REMOVE-DUP-VARS :callees) '(MACROLET LET SLOOP EQUAL FUNCTION NTH DELETE DELETE0 CDR CAR HAS-NONLINEAR-VARS SETQ COND IF*))
(setf (callers-list 'MAKE-EQ-PRE :callees) '(LIST MAKE-BETTER-PRE QUOTE GET CAR OP-OF NUMBERP COND PREDICATEP CONS ATTACH MAKE-PRE OCCURS-IN NOT AND PSETQ PSEUDO-TERM-ORDERING SYMBOLP VARIABLEP OR IF))
(setf (callers-list 'X_REDUCE-BY-ONE-RULE :callees) '(MACROLET CDR ARGS-OF LET SLOOP REDUCE-BY-ONE-AT-ROOT LHS CAR OP-OF EQ SAME-ROOT EQUAL FUNCTION MEMBER MEMBER0 NOT AND COND))
(setf (callers-list 'DIVISIBLE-RIGHT-CHECK :callees) '(LIST REMOVE-RIGHT-ARG REDUCIBLE NOT AVOIDABLE RIGHT-ARG SETQ EQUAL AND COND IF*))
(setf (callers-list 'P-COMMUT-REDUCE-OTHERS :callees) '(MACROLET CAR LET SLOOP))
(setf (callers-list 'MAKE-TUPLES :callees) '(MACROLET N-TUPLES SLOOP CAR LET))
(setf (callers-list 'PARSE-ONE-WHEN-CLAUSE :callees) '(LOOP-UN-POP T ERROR PARSE-LOOP-DO DO PARSE-LOOP-WHEN WHEN PARSE-LOOP-COLLECT APPEND GO EQL OR :COLLECT :NO-BODY LCASE LOOP-POP SETQ RETURN NULL AND PROG QUOTE))
(setf (callers-list 'IS-HOMOGENEOUS-TERM :callees) '(MACROLET CDDR CDR ARGS-OF LET SLOOP CADR FIRST-ARG QUOTE CAR OP-OF EQ CONSP NONVARP IS-ROOTED-+ AND))
(setf (callers-list 'PICK-SMALL-GOAL :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'VAR-LIST :callees) '(EQUAL FUNCTION ALL-VARS REMOVE-DUPLICATES REM-DUPS))
(setf (callers-list 'REDUCE-BY-ONE-AT-ROOT :callees) '(REDUCE-AT-ROOT-BOOL REDUCE-AT-ROOT-ONE-RULE CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX POLY-REDUCE-AT-ROOT-ONE-RULE IF* SYMBOLP VARIABLEP COND SETQ IF))
(setf (callers-list 'IN-ARRAY-SLOOP-FOR :callees) '(GET LUCID-RUNTIME-SUPPORT:BQ-APPEND LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST NCONC OR PUSH NREVERSE RETURN COPY-LIST SETQ T BY (TO BELOW ABOVE) (FROM DOWNFROM) LCASE CDDR DO GENSYM SECOND CAR SETF LISTP COND LET))
(setf (callers-list 'MULT-DIFF :callees) '(MACROLET SLOOP LET))
(setf (callers-list 'REMOVE-LEFT-ARG :callees) '(REMOVE-LEFT-ARG2 CADDR SECOND-ARG QUOTE GET NUMBERP GET-STATUS EQ COND IF*))
(setf (callers-list 'DISTR-AC-ORDER :callees) '(CONS AC-DISTRI SETQ))
(setf (callers-list 'PARSE-LOOP :callees) '(CDR LUCID-RUNTIME-SUPPORT:BQ-APPEND LOOP-LET-BINDINGS DOLIST COPY-TREE LUCID-RUNTIME-SUPPORT:BQ-CONS CONS SUBSTITUTE-SLOOP-BODY COND NREVERSE APPEND SETQ LUCID-RUNTIME-SUPPORT:BQ-LIST* LUCID-RUNTIME-SUPPORT:BQ-LIST EQL GENSYM SETF OR WHEN PARSE-LOOP1 PUSH CAR SYMBOLP AND UNLESS QUOTE LET))
(setf (callers-list 'SPLIT-LHS-AND :callees) '(MACROLET CAR LHS CDR ARGS-OF LET SLOOP))
(setf (callers-list 'MAKE-ONE-DOWN-HILL :callees) '(INCONSISTENT-EQN CDR DOWN-HILL-ONE WRITE-EQN PRINC TERPRI = AND > OR CONSISTENT-PAIR EQUAL FUNCTION REMOVE-DUPLICATES REM-DUPS NTH EQN-SOURCE APPEND LIST MAKE-EQN CONS MAKE-TERM CADDAR GET-PRE-RHS CADAR QUOTE CAAR EQ CADR CAR SYMBOLP VARIABLEP COND IF* GET-PRE-LHS SETQ NEGATE-ONE-PRE LET))
(setf (callers-list 'REDUCE-EQ-EXACTLY :callees) '(MACROLET LENGTH LET SLOOP))
(setf (callers-list 'TR-CLOSURE :callees) '(MACROLET SLOOP LET))
(setf (callers-list 'SET-STATUS :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'SUBSUMED-TUPLE :callees) '(SECOND QUOTE CONS APPLIES CDDR NULL AND))
(setf (callers-list 'THEREIS :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'INSTANT-CHOICE :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'NONLINEAR-VARS-UNDER-* :callees) '(MACROLET CDR ARGS-OF LET SLOOP ELES-MORE-THAN-1 CAR OP-OF CASE CASEQ REMOVE-DUPLICATES REM-DUPS SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'RENAME-VAR1 :callees) '(MACROLET LET SLOOP SYMBOLP VARIABLEP COND))
(setf (callers-list 'GET-INSTANCE-TERMS :callees) '(REF-INSTANCE-SEEDS))
(setf (callers-list 'EQ-TR :callees) '(MACROLET SLOOP LET))
(setf (callers-list 'SPLIT-ALIST :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'PROCESS-DEL-RULE :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'WRITE-PREMISES :callees) '(MACROLET LET SLOOP CAR WRITE-ONE-PRE PRINC TERPRI CDR COND IF*))
(setf (callers-list 'EQN-INSTANCE :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'ALPHALESSP :callees) '(STRINGP SYMBOL-NAME STRING< SYMBOLP COND))
(setf (callers-list 'INS-LIS :callees) '(PUSH EQUAL FUNCTION MEMBER MEMBER0 COND IF*))
(setf (callers-list 'CHECK-BUILD-RULE :callees) '(MACROLET OP-OF OP-POSITION LET SLOOP CDR LHS FREE-SUBTERMS SETQ NTH RULE-SOURCE CAR EQ NOT CDDR RPLACA QUOTE CADDR EQUAL EQN-CTX CTX NULL CADR RHS SYMBOLP VARIABLEP AND COND IF*))
(setf (callers-list 'ACO-DELETE-EQUIV :callees) '(QUOTE))
(setf (callers-list 'GET-TESTSET-QUASI :callees) '(MACROLET SLOOP NON-CONSTANTS GET-CONSTANTS NCONS MAPCAR SETQ BASE-DEPTH LET))
(setf (callers-list 'GET-ITEM :callees) '(EXPECTED GET-TERM-ARGS GET-ITEM NCONS CONS MAKE-TERM QUOTE GET-VARLIST FIXUP-QUANTIFIED-FORMULA SETQ GET-TERM PROG1 NEXT-TOKEN CADDR TOKEN-TYPE CASE CASEQ))
(setf (callers-list 'SIMPLIFY-+ :callees) '(MACROLET QUOTE LET SLOOP))
(setf (callers-list 'MY-TYI :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'EXT-EQUIVALENCE :callees) '(TRY-MAKE-EQUI IS-REL-PREC EQOPS MEMBER AND NOT PROGN SETQ QUOTE READ-ATOM LET TERPRI PRINC IS-EMPTY-LINE COND IF*))
(setf (callers-list 'TYPE-VAR-LIST :callees) '(SPLIT-ALIST EQUAL FUNCTION TYPE-ALL-VARS REMOVE-DUPLICATES REM-DUPS SETQ NCONS QUOTE LIST SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'RULE-SOURCE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'COVER-STRONG-INDUC-HYPO :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'SHOW-MESSAGE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'REDUCE-AT-ROOT :callees) '(MACROLET APPEND COND IF* CAR OP-OF ASSQ GET-RULES-WITH-OP LET SLOOP REDUCE-BY-PREMISES-AT-ROOT CDR AND OR))
(setf (callers-list 'NORMALIZE :callees) '(WRITE-EQN PRINC TERPRI IF* NTH EQN-SOURCE EQN2ASSERTION LIST MAKE-EQN ASS2EQN OP-OF EQ CAADR GET NUMBERP PREDICATEP CAAR NEQ CONSP NONVARP IS-PROP-EQN NOT IS-ASSERTION CHECKEQ-NORMAL ASSERTION2EQUATION COVER-NORMALIZE SETQ IF QUOTE TRUEP NULL AND CADR RHS CAR LHS EQUAL OR EQUAL-TERM COND))
(setf (callers-list 'FIRST-USE-SLOOP-FOR :callees) '(GET SETF LUCID-RUNTIME-SUPPORT:BQ-LIST ERROR QUOTE L-EQUAL OR))
(setf (callers-list 'PICKOUT :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'CHANGE-LHS-RHS-CTX :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'AC-SUPERPOSITION :callees) '(MACROLET COMMUNE-TERMS LET SLOOP NEW-AC-SUPER-SAME AND CDR REF-SYMMETRY-TERMS RULE-SOURCE CDDR RPLACA CADDR EQUAL EQN-CTX CTX CADR RHS CAR LHS MAKE-NEW-RULE NTH RULENO POLY-SUPER-DISTRIBUTION = SETQ TRACE-AC-SUPERPOSITION > MARK-SUPERPOSED QUOTE MEMQ COND IF*))
(setf (callers-list 'PARSE-LOOP-MACRO :callees) '(HELPER APPLY CASE APPEND CAR PUSH NREVERSE LENGTH DOTIMES SETF PROG1 QUOTE MEMBER COND ERROR CDR OR ECASE SETQ GET LET))
(setf (callers-list 'RULENO :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'LOOP-LET-BINDINGS :callees) '(CAAR SETF CDAR OR NREVERSE NULL CDR CAR DO))
(setf (callers-list 'ORDER-PC :callees) '(ORDER-PC-RES CASE SELECTQ))
(setf (callers-list 'RESET-RRL :callees) '(PRINC TERPRI SETQ INITIALIZE R2E MAPCAR NCONC LET))
(setf (callers-list 'MATCH-PREMISES :callees) '(MACROLET CAR LET SLOOP IF))
(setf (callers-list 'ACO-RPOMULT>= :callees) '(MACROLET LET SLOOP NULL COND CAR CDR ARGS-OF MULT-FORM MULT-DIFF SETQ))
(setf (callers-list 'ELIMCOM :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'RULE-NAME :callees) '(FORMAT UCONCAT COND IF*))
(setf (callers-list 'GOOD-UNIT-CLAUSE :callees) '(MACROLET CADAR QUOTE CAAR EQ CADR SYMBOLP VARIABLEP COND IF* GET-PRE-LHS CAR OP-OF ASSQ CDR RULES-WITH-OP LET SLOOP))
(setf (callers-list 'ONE-EXTENSIBLE :callees) '(MACROLET CDR ARGS-OF LET SLOOP CAR OP-OF MEMQ LIST SYMBOLP VARIABLEP NULL COND))
(setf (callers-list 'SMALLER-SIZE :callees) '(SIZE < LESSP))
(setf (callers-list 'ALL-ONES :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE TYPEP OR LET SLOOP NCONC 1- DIO-INITIALIZE AND SETQ * LIST MAKE-ARRAY + LENGTH LET*))
(setf (callers-list 'NORM-SIGN-CHANGED-MONOS :callees) '(MACROLET LET SLOOP CHANGE-MONO-SIGN SETQ))
(setf (callers-list 'NORMAL-FORM-SUB :callees) '(LIST CONS CDR NORMAL-FORM-SUB OCCURS-IN SUBLIS CDAR EQ APPLYSUBST CAAR LET COND IF*))
(setf (callers-list 'TIMES-CDR :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'UCONCAT :callees) '(LIST MAPCAN EVAL SETQ STRINGP CONSTANTP AND IF LAMBDA :UNNAMED-LAMBDA MAPCAR CONCATENATE APPLY QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST*))
(setf (callers-list 'SAVE-WORDS :callees) '(MACROLET LET SLOOP WHEN))
(setf (callers-list 'NEVER-SLOOP-COLLECT :callees) '(GET SETF PUSHNEW LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'INDUC-SUBGOAL-PROOFS :callees) '(MACROLET CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CDR LET SLOOP REMOVE-DUPLICATES REM-DUPS ALL-PRE-VARS IS-SUBSET IF EQN-AS-RULE-INFO CONS PUSH))
(setf (callers-list 'ACO-RPOSTATUS>= :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'GET-RULE-LEVEL :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'SINGLE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'PURE-NORM :callees) '(PURE-NORM-MIXED PURE-NORM-INNERMOST PURE-NORM-OUTERMOST PURE-NORM-INN CASE SELECTQ SETQ))
(setf (callers-list 'TIME-LIMIT-STRA :callees) '(ASK-A-NUMBER SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-NUMBER))
(setf (callers-list 'ADD-SOLN :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR SLOOP NTH CADDDR CADDR CADR CAR LET))
(setf (callers-list 'REMOVE-IRRELEVANT :callees) '(QUOTE CAR SETF COND IF*))
(setf (callers-list 'ADD-PATTERNS :callees) '(MACROLET CDR SLOOP APPEND CAR SET-DIFF FORM-PATTERNS-SINGLE SETQ LET))
(setf (callers-list 'ALL-OPS :callees) '(CDR ARGS-OF ALL-OPS MAPCAN CAR OP-OF CONS SYMBOLP VARIABLEP NULL COND))
(setf (callers-list 'NEW-AC-SUPER-AT-ROOTS :callees) '(MACROLET EQUAL FUNCTION CDR ARGS-OF REMOVE-DUPLICATES REM-DUPS SLOOP QUOTE MAKE-NEW-VARIABLE LHS CAR OP-OF LET))
(setf (callers-list 'MY-TYO :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'TRY-ONE-EXTRA-VAR-RULE :callees) '(MACROLET SLOOP CDDR RPLACA QUOTE CADDR EQUAL COND IF* EQN-CTX CTX CDR LET))
(setf (callers-list 'OP-OF :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'CONSISTENT-RULE :callees) '(THROW *THROW SETQ WRITE-RULE PRINC TERPRI RULE-DESTROYABLE QUASI-REDUCIBLE CASE CASEQ LHS IS-PRIMITIVE MEMQ QUOTE NTH RULE-SOURCE CAR EQ NOT AND COND IF*))
(setf (callers-list 'CAR-LRPO< :callees) '(CAR ACO-LRPO>))
(setf (callers-list 'ASS-RULE-BOUND :callees) '(ASK-A-NUMBER SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-NUMBER))
(setf (callers-list 'POLY-INITIALIZE :callees) '(PRINC TERPRI * TIMES SETQ EQUAL FUNCTION MEMBER MEMBER0 QUERY-INSERT SET-STATUS SET-ARITY GET SETF PUTPROP NUMBERP SET-INFIX PUSH QUOTE MEMQ NOT COND IF*))
(setf (callers-list 'RPL-BY-TERMS :callees) '(RPL-BY-TERMS2 FLAT-TERM-FUNC MAPCAR))
(setf (callers-list 'REDUCE-MONO :callees) '(MACROLET SLOOP COND CAR CDR LET))
(setf (callers-list 'ACM-NONAC :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'GIVE-STAT :callees) '(CASEQ CASE SELECTQ DISPLAY-OP-STATS QUOTE EQ DISPLAY-OPS FORMAT UCONCAT PRINC COND IF* DISPLAY-KB-STAT TERPRI))
(setf (callers-list 'GET-CODOMAIN-TYPES :callees) '(MACROLET SLOOP::TYPE-ERROR + TYPEP OR GET-ARITY LET SLOOP CDR QUOTE GET GET-ARITY2 NUMBERP COND))
(setf (callers-list 'PARA-SUP-TERM :callees) '(MACROLET CDR ARGS-OF LET SLOOP PARA-SUP-TERM2 CONSP NONVARP AND COND IF*))
(setf (callers-list 'IS-SOURCE-TYPE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'GET-RULE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'CHOOSE-LEAST-COVER :callees) '(MACROLET GET-RECURSIVE-RETURN-OP PICK-MAX-SCORE-OP LET SLOOP CDR COND IF*))
(setf (callers-list 'SYM-ARG-POSITIONS :callees) '(MACROLET SLOOP::TYPE-ERROR QUOTE + TYPEP OR LET SLOOP))
(setf (callers-list 'GENNEWSYM :callees) '(MACROLET LET SLOOP INITSYM))
(setf (callers-list 'MAP-FRINGE :callees) '(CDR SETF MAP-FRINGE CAR QUOTE RETURN FUN FUNCALL AND ATOM COND DO))
(setf (callers-list 'PSEUDO-TERM-ORDERING :callees) '(OPERATOR-ORDERING CDR ARGS-OF ORDER-PC-SEQ LENGTH = SAME-OP LRPO SYMBOL-VALUE SYMEVAL < LESSP BOUNDP IF* ALPHALESSP VARIABLEP CAR OP-OF EQ SYMBOLP NOT AND FALSEP NULL QUOTE TRUEP OR EQUAL COND))
(setf (callers-list 'GET-TESTSET2 :callees) '(MACROLET LET SLOOP GET-BASIC-TYPE-TERMS SETQ))
(setf (callers-list 'EXPAND-EQ :callees) '(MACROLET CDR ARGS-OF LET SLOOP QUOTE CAR OP-OF EQ COND IF*))
(setf (callers-list 'MANUAL_REDUCE :callees) '(NODE-STATUS NODE-SOURCE SEARCH-TREE X_INDUC X_GENERAL X_SPLIT X_NORMAL QUOTE EQ COND MENU_FOR_MANUAL_REDUCE SETF))
(setf (callers-list 'PRED-CRITICAL-PAIR :callees) '(PROCESS-ASS-SIMPLE NTH RULENO LIST TRACE-CRIT = BRT BA-SIMPLIFY IF C-PERMUTATION MAKE-FLAT - + POLY-SIMPLIFY PROG1 GET-INTERNAL-RUN-TIME ADD-TIME SYMBOLP VARIABLEP LET FLAT-TERM WELL-TYPED 1+ CADR RHS QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST DECANON-AND SET-DIFF CDR INTERSECTION SUBLIS EQ COND IF* APPLYSUBST SETQ))
(setf (callers-list 'PREMISES-INSTANCES :callees) '(MACROLET LET SLOOP SETQ))
(setf (callers-list 'WRITE-EQNS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'PICK-OUT-PREMISE :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'CTX :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'FALSEP :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'RWONCE-OUTERMOST :callees) '(OUTRED1 REWRITE-AT-ROOT SYMBOLP VARIABLEP COND))
(setf (callers-list 'MATCH-PREMISE :callees) '(NULL QUOTE EQUAL OR TRUEP CADR IF CAR MATCH SETQ AND))
(setf (callers-list 'UPDATE-BY-EQ :callees) '(MACROLET EQUIV-OPS SLOOP ASSOC CDR LET))
(setf (callers-list 'RESUME_AUTO :callees) '(QUOTE SETF))
(setf (callers-list 'SEPARATED :callees) '(MACROLET CDR ARGS-OF LET SLOOP))
(setf (callers-list 'IS-INPUT-ASS :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'NORMALIZE-BOUND :callees) '(ASK-A-NUMBER SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-NUMBER))
(setf (callers-list 'SORT-OP-ARGS :callees) '(MACROLET CDR ARGS-OF LET SLOOP SORT CONS MAKE-TERM CAR OP-OF))
(setf (callers-list 'POLY-MATCH-TEST-REST-*-ARGS :callees) '(MACROLET SLOOP AND COND IF* LENGTH CDR CAR LET))
(setf (callers-list 'POLY-CYCLE-LUCK :callees) '(TOTAL-ORDER))
(setf (callers-list 'MERGE-SORT-ARGS :callees) '(MACROLET LET SLOOP QUOTE))
(setf (callers-list 'PARSE-LOOP-DECLARE :callees) '(LOOP-DECLARE-BINDING DOLIST CDR SETF QUOTE EQ COND CAR LET LOOP-POP))
(setf (callers-list 'PURE-LRPO :callees) '(MACROLET LET SLOOP GRT-PREC RPOMULT RPOST LENGTH = QUOTE GET NUMBERP IF* GET-STATUS AND CDR ARGS-OF NULL CAR OP-OF EQOPS OCCURS-IN SYMBOLP VARIABLEP COND))
(setf (callers-list 'INVALID-INPUT-WARNING :callees) '(RESET SETQ TERPRI COND IF* PRINC))
(setf (callers-list 'MOVE_CURSOR :callees) '(MACROLET SLOOP MENU_FOR_CURSOR SETF))
(setf (callers-list 'PROCESS-CRITPAIR :callees) '(MACROLET SLOOP THROW *THROW CASE CASEQ CATCH *CATCH PRE-CRIT-CHECKEQ SETQ NTH EQN-SOURCE TRACE-CRIT = COND IF*))
(setf (callers-list 'POLY-SUPER-AT-* :callees) '(MACROLET ARGS-OF SLOOP::TYPE-ERROR QUOTE TYPEP OR LAST LET SLOOP CDR LENGTH CADR RHS CAR LHS LET*))
(setf (callers-list 'PROCESS-ASS2 :callees) '(SIMP-FIRST-TRANS PROCESS-ASS-SIMPLE))
(setf (callers-list 'POLY-ADD-HOMO-RULES :callees) '(LIST PUSH NCONS NCONC COND IF* CAR LHS CDR ARGS-OF LENGTH ASSQ LET ADD-ASSOCIATE-LIST))
(setf (callers-list 'CAR-LENGTH-GREAT :callees) '(CAR LENGTH >))
(setf (callers-list 'WASH-DEF-RULES :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'READ-ARITY :callees) '(READ-TYPE-RELATION READ-OP-DECLARATION CASE QUOTE EXPECTED IS-VALID-OP IS-VALID-VAR OR COND IF* CADR TOKEN-TEXT SETQ NEXT-TOKEN))
(setf (callers-list 'ACM-NO-ARG :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST* QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'RENAME-EQN-RULE :callees) '(MACROLET LET SLOOP CDDR RPLACA CADDR EQUAL COND IF* EQN-CTX CTX CADR RHS CAR LHS GET-VAR-SUBSTITUTION QUOTE INITSYM SETQ))
(setf (callers-list 'BA-SIMP-OR :callees) '(MACROLET LET SLOOP EQUAL FUNCTION MEMBER MEMBER0 IF))
(setf (callers-list 'SYNERR :callees) '(QUOTE))
(setf (callers-list 'TRIVIAL-SIMPLIFY :callees) '(LUCID-RUNTIME-SUPPORT:BQ-LIST CDR ARGS-OF LUCID-RUNTIME-SUPPORT:BQ-CONS SETQ CADDR SECOND-ARG NULL QUOTE CADR FIRST-ARG EQUAL OR TRUEP CAR OP-OF CASE CASEQ SYMBOLP VARIABLEP COND IF*))
(setf (callers-list 'GET-DOWN :callees) '(MACROLET EQUAL FUNCTION CAR ASSOC ASSOC0 LET SLOOP CDR RPL-BY-TERMS COND IF* VAR-LIST ONE-EXTENSIBLE-TYPE-POINT SETQ))
(setf (callers-list 'TRACE-OPTIONS :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'UNCONDI-PROVE :callees) '(CADR RHS CAR LHS WRITE-TERM PROGN IF > WHEN TERPRI PRINC CHECKEQ-NORMAL SETQ NULL COND IF*))
(setf (callers-list 'CHANGE-SOURCE :callees) '(QUOTE LUCID-RUNTIME-SUPPORT:BQ-LIST))
(setf (callers-list 'INVALID-RULE :callees) '(RETURN NOT EQ NCONS NCONC MAKE-EQ ADD-CRIT-RULE NTH EQN-SOURCE CDDR RPLACA CADDR EQUAL EQN-CTX CTX CADR RHS LHS MAKE-NEW-RULE THROW *THROW CASE CASEQ NUMBERP READ-ATOM CHOOSE-STR QUOTE PRINT-HEAD PROGN DO LET USER-SELECTQ ADD-OPERATOR POSTPONE-IT = UNDO SUB1 SETQ LENGTH < COND IF* WRITE-EQN SET-DIFF CAR FORMAT UCONCAT IF PRINC TERPRI))
(setf (callers-list 'PARAMOD-STR :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'COMMON-ELEMENTS :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'REDUCE-AND-TERM :callees) '(MACROLET APPEND AND COND IF* QUOTE ASSQ CDR RULES-WITH-OP OR LET SLOOP))
(setf (callers-list 'NORM-OUTERMOST :callees) '(MACROLET LET SLOOP SYMBOLP VARIABLEP COND))
(setf (callers-list 'CYCLE-OUT-RED :callees) '(MACROLET CDR ARGS-OF LET SLOOP COND))
(setf (callers-list 'RRL :callees) '(MACROLET SLOOP))
(setf (callers-list 'DISP_TREE :callees) '(SHOW-TREE TERPRI))
(setf (callers-list 'REDUCE-SYSTEM-STR :callees) '(PRINT-ATOMS QUOTE ASK-A-CHOICE SETQ FORMAT UCONCAT PRINC TERPRI IS-EMPTY-LINE AND COND IF* PRINT-CHOICE-MESSAGE LET ASK-CHOICE))
(setf (callers-list 'SET-RIGHT-HYPO-ARGS :callees) '(MACROLET CDR ARGS-OF LET SLOOP SETQ AC-C-ROOT COND IF*))
(setf (callers-list 'NEW-TRANS-SIMP :callees) '(NEW-FIRST-TRANS BA-SIMPLIFY SYMBOLP VARIABLEP NULL COND))
(setf (callers-list 'IDEM-EQ-CRITICAL :callees) '(MACROLET SLOOP))
(setf (callers-list 'AUTO-ORIENT :callees) '(MACROLET LET SLOOP NCONC OP-LIST STATUS-CANDIDATES CAR CDR SETQ CAN-HAVE-NEW-OP CDDR RPLACA QUOTE CADDR EQUAL IF* EQN-CTX CTX NULL = AND COND PROG))
(setf (callers-list 'OP-POSITION :callees) '(MACROLET LET SLOOP))
(setf (callers-list 'POPORT :readers) '(TAB DRAIN))
(setf (callers-list '$TIME-WHEN-LAST-CALL :readers) '(REPORT-CURRENT-TIME))
(setf (callers-list '#\Newline :readers) '(SKIP-EOLN))
(setf (callers-list '$ART :readers) '(SET-ART-MODE ART?))
(setf (callers-list '#\Return :readers) '(SKIP-EOLN))
(setf (callers-list '$X_SUB_ROOT :readers) '(X_MANUAL_INDUC X_ONE_RULE))
(setf (callers-list '$INSTANT-SEEDS :readers) '(REF-INSTANCE-SEEDS2 GET-INSTANCE-TERMS GET-REST-GLOBALS))
(setf (callers-list '$P-COMMUT-RULES :readers) '(START-HISTORY MAKE-P-COMMUT-RULE))
(setf (callers-list 'PIPORT :readers) '(READ-ATOM IS-EMPTY-LINE GET-ATOM SKIP-EOLN READ-EQNS TYIPEEK READC))
(setf (callers-list '$POSSI-NUM :readers) '(TRACE-TESTSET))
(setf (callers-list '$XNX :readers) '(POLY-SIZE))
(setf (callers-list '#\Space :readers) '(SKIP-EOLN))
(setf (callers-list '$EX1 :readers) '(MAKE-PAIRS))
(setf (callers-list '$WITNESS-EQN :readers) '(FOUND-WITNESS FLATTEN-WITNESS CHECK-WITNESS ADD-RULE-COMPLETE PURE-ADD-RULE MAKE-ASS-COM-OP))
(setf (callers-list '$INDUC :readers) '(SUCC-END-INDUC COVER-INDUC-PROVE X_HYPOTHESIS X_ONE_RULE EXPECTING-PREDICATES INDUC-PROVE UNCONDI-PROVE PROVE SUBST-VAR-PREMISES NOFALSE-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE PRED-CRITICAL-PAIR PRED-SUPERPOSITION MAKE-EQ ORDER-CTX TRY-TO-ORIENT-CONDI ORIENT-AN-EQN NORM-STRATEGY REDUCE-AT-ROOT-BOOL NORM-BOOL-INNERMOST NORM-CTX NORM-RHS POLISH-PREMISES AC-COMPRESS REDUCE-AT-ROOT-ONE-RULE CHECKEQ-NORMAL NORMALIZE MAKE-NEW-RULE CTX-DOMINANT-RULE LRPO CHECK-WITNESS ADD-RULE-COMPLETE ADD-RULE FIRST-PROCESS-EQN PROCESS-EQUATION IS-PURE-INPUT START-KB GET-EQUATION APPLYSUBST-PRE GET-REST-GLOBALS IS-SYMMETRY-EQN PROCESS-CRITPAIR PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS FUNC-SUPERPOSITION CRITPAIRS MAKE-ONE-DOWN-HILL DOWN-HILL-ONE COVER-NORM-TERM FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list '$FIRST-INDUC-OP :readers) '(COVER-SET-SCHEME BUILDING))
(setf (callers-list '$ORDER-HELP :readers) '(MANUAL-ORIENT))
(setf (callers-list '$NARROW :readers) '(REFUTED-RESULT REDUCE-*-TERM REDUCE-+-TERM POLY-REDUCE-AT-ROOT INTRO-RULE REDUCE-AND-TERM REDUCE-XOR-TERM PURE-REWRITE-AT-ROOT NORM-INN REDUCE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE ANS-MEMBER ADD-RULE-LINEAR ADD-RULE IS-PURE-INPUT RRL-AUX START-HISTORY REDUCE-EQ-TERM))
(setf (callers-list '#\( :readers) '(GET-TERM-ARGS GET-VARLIST))
(setf (callers-list '#\) :readers) '(GET-ITEM))
(setf (callers-list '$BLOCKING-ON :readers) '(BLOCK-CHOICE DISPLAY-KB-STAT GET-REST-GLOBALS UNIFIER))
(setf (callers-list '#\, :readers) '(CHAR-HANDLER))
(setf (callers-list '$PRIME-ACU :readers) '(PRIME-ACU-CHOICE FULL-DIO ALL-ONES))
(setf (callers-list '$RULE-SIZE :readers) '(SIZE-DEPTH-STR SPECIAL-SIZE GET-REST-GLOBALS))
(setf (callers-list '*LOOP-BODY* :readers) '(PARSE-LOOP-FOR PARSE-LOOP1))
(setf (callers-list '*INNER-SLOOP* :readers) '(PARSE-LOOP-COLLECT))
(setf (callers-list '$DEL_RULE_STR :readers) '(IM-DEL-RULES GET-REST-GLOBALS))
(setf (callers-list '$COMMUTATIVE :readers) '(QUASI-REDUCIBLE SUPERTERM-COVER INDUC-AC-SUBS SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR IDEM-SUPERPOSITION DISPLAY TRY-MAKE-EQUI EXT-COMMUTATIVE NORM-STRATEGY REDUCE-AT-ROOT-BOOL NORM-CTX AC-COMPRESS REDUCE-AT-ROOT-ONE-RULE AC-C-ROOT MATCH-SET MATCH-POSS APPLIES IS-PURE-INPUT KNUTH-BENDIX1 ORDER-EQNS APPLYSUBST-PRE APPLYSUBST-EQN PREMISE-INSTANCE START-HISTORY IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS COVER-NORM-TERM COMMUNE-TERMS2 COMMUNE-TERMS C-PERMUTATION DIVISIBLE-CHECK2 AUTO-ADD-STATUS AUTO-MAKE-EQUI UNIFIERS MAKE-ASS-COM-OP IS-ASSOC-UNDER-C COMPRESS-FLAT FLAT-TERM-FUNC FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list 'BODY :readers) '(DEF-LOOP-COLLECT DEF-LOOP-MACRO DEF-LOOP-FOR DEF-LOOP-MAP SLOOP LCASE WHEN-ART-WITH-INPUT-FROM-TERMINAL))
(setf (callers-list '$INSTANT :readers) '(REFUTE-EQN POLY-SUPER-DISTRIBUTION INSTANT-CHOICE EXT-DIVISIBLE NORM-CTX GET-REST-GLOBALS))
(setf (callers-list '#\; :readers) '(READ-ATOM))
(setf (callers-list '#\= :readers) '(GET-ATOM))
(setf (callers-list '$SEQ-NO :readers) '(X_INITIAL COVER-INDUC-PROVE CHECK_AND_ADD))
(setf (callers-list '$REDUCE-SYSTEM :readers) '(REDUCE-SYSTEM-STR ADD-RULE-COMPLETE))
(setf (callers-list '$NEWOP-FIRST :readers) '(OPERATOR-STRA AUTO-ORIENT))
(setf (callers-list '$CYCLE-RULE :readers) '(TRY-TO-ORIENT CYCLE-CHOICE GET-REST-GLOBALS))
(setf (callers-list '$ACLRPO :readers) '(ACLRPO))
(setf (callers-list '*RRL-READTABLE* :readers) '(RRL-AUX))
(setf (callers-list '*PRODUCT-FOR* :readers) '(SLOOP-SLOOP-MACRO))
(setf (callers-list '$FAST-MATCH :readers) '(BOOL-MATCH-STR))
(setf (callers-list '$CONDI-DOMINATE-RULES :readers) '(NORM-CTX REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES COVER-CONDI-NORM COVER-NORM-TERM))
(setf (callers-list '$TEST :readers) '(READ-ATOM RRL-AUX))
(setf (callers-list '$OPERLIST :readers) '(ENTER-OP GET-DEFINING-DOMAINS COMPLETE-TEST START-TEST GET-COVER-SETS CHOOSE-CONSTRUCTORS POLY-INITIALIZE WRITEF-SYS DISPLAY INSTANTIATE-LHS EXT-EQUIVALENCE EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-STATUS EXT-PRECEDENCE CLEAR-OPERATORS ASK-FOR-OPERATOR RESTORE-PROPERTIES GET-ALL-PROPERTIES UNDO1 START-HISTORY CHECK-BUILD-RULE AUTO-KB IS-HIGHER-TERM))
(setf (callers-list '$ASSOCIATIVE :readers) '(POLY-INITIALIZE IS-VALID-RULE START-HISTORY NEW-RULE-FROM-ASSOC LEFT-ARG RIGHT-ARG))
(setf (callers-list '$SYMMETRY-DELS :readers) '(GET-REST-GLOBALS))
(setf (callers-list '$GENE-NUM :readers) '(GET-REST-GLOBALS))
(setf (callers-list '$X_RESTART_EQN :readers) '(X_INITIAL))
(setf (callers-list 'L__3 :readers) '(WRITE-VARIABLE GET-VAR-SUBSTITUTION))
(setf (callers-list 'INTERNAL-TIME-UNITS-PER-SECOND :readers) '(NRM-TIME REPORT-CURRENT-TIME RRL-AUX))
(setf (callers-list '$SUFFICIENT :readers) '(START-TEST CHOOSE-CONSTRUCTORS START-HISTORY))
(setf (callers-list '$BEGIN-TIME :readers) '(RRL-AUX))
(setf (callers-list '$SET_PRED :readers) '(GET-REST-GLOBALS SUBSTVARFOR))
(setf (callers-list '$STRONG-INDUC :readers) '(X_COVER-PROOF-PROCESS2 COVER-SET-SCHEME COVER-STRONG-INDUC-HYPO))
(setf (callers-list '$POST-MAX :readers) '(POST-LIMIT-STRA RRL-AUX POSTPONE-OR-UNDO POSTPONE-IT))
(setf (callers-list '$UNBLOCKED :readers) '(DISPLAY-KB-STAT START-HISTORY))
(setf (callers-list '$COVER-AUTO-LEVEL :readers) '(COVER-PROOF-PROCESS2 COVER-AUTO-LEVEL))
(setf (callers-list '$NUM-TRANS :readers) '(DISTR-AC-ORDER))
(setf (callers-list '$DEBUG :readers) '(DEBUG-MSG))
(setf (callers-list '$POST-SET :readers) '(WRITEF-SYS DISPLAY MANUAL-ORIENT ASK-USER ORIENT-RULE RRL-AUX RESET-RRL START-HISTORY POSTPONE-OR-UNDO POSTPONE-IT))
(setf (callers-list '$ST_LIST :readers) '(INITIALIZE PRE-INIT UNDO1 START-HISTORY))
(setf (callers-list '$QUASIS :readers) '(NAIL-QUASI-REDUCIBLE))
(setf (callers-list '$LRPO :readers) '(ASK-USER START-KB GIVE-STAT START-HISTORY))
(setf (callers-list '$PROVE-EQN :readers) '(SUCC-END-INDUC INDUC-PROVE PROVE ORIENT-AN-EQN ADD-RULE-COMPLETE IS-PURE-INPUT START-HISTORY))
(setf (callers-list '$MULTI-TERM-INDUC :readers) '(COVER-MULTI-TERM-INDUC))
(setf (callers-list '$NEWRULE-MAX :readers) '(NEW-RULE-STRA ADD-RULE3 RRL-AUX))
(setf (callers-list '$NCRITPR :readers) '(UNKNOWN-SIZE DISPLAY-KB-STAT START-HISTORY))
(setf (callers-list '$MARK_RULE_STR :readers) '(INT-RULE-STRAT GET-REST-GLOBALS))
(setf (callers-list '$X_FAIL :readers) '(X_COVER-PROOF-PROCESS2 X_INITIAL COVER-PROOF-PROCESS2 RESUME_AUTO X_MANUAL_INDUC HEAD_OF_FAILURE_HANDLER X_AUTO_INDUC))
(setf (callers-list '$CONS-OF-TS :readers) '(GET-DEFINING-DOMAINS GET-TESTSET GET-REST-GLOBALS))
(setf (callers-list '*LOOP-PROLOGUE* :readers) '(SLOOP-SLOOP-MACRO PARSE-LOOP-COLLECT PARSE-LOOP-INITIALLY))
(setf (callers-list '$CHARACTER-RULES :readers) '(REDUCE-MONO IS-CHARACTER-RULE REWRITE-AT-ROOT START-HISTORY))
(setf (callers-list '$IN-PORT :readers) '(SUCC-END-INDUC X_READ_TERM EXT-TYPE-RELATION CONSTRUCTORS-CHECK IS-PARTIAL-OP REFUTE-EQN CHOOSE-CONSTRUCTORS PROVE TRY-SUGG-PREC MAN-PICK-2ND-RULE PRINT-HEAD OPEN-WRITE-FILE ASK-USER POST-LIMIT-STRA KEEP-RULE-STRATEGY ARITY-EQ-STRATEGY LR-RL-STRATEGY POST-POSI-STRA SUPPORT-EQN NEW-RULE-STRA EQ-PRE-STRAT OPERATOR-STRA NORMALIZE-BOUND TIME-LIMIT-STRA POLY-CHOICE INSTANT-CHOICE CYCLE-CHOICE AC-KB-CHOICE PRIME-ACU-CHOICE SYMMETRY-CHOICE BLOCK-CHOICE EXT-EQUIVALENCE EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-OPERATOR EXT-STATUS EXT-WEIGHT EXT-PRECEDENCE NORM-STRATEGY OVER-REWRITE-PREMISES SIZE-DEPTH-STR RESTRICT-CRIT-STRA ASS-RULE-BOUND BREAK-ASS-STR CRIT-PAIR-PROCESS POST-ASS-LIST BOOL-MATCH-STR PARAMOD-STR IM-DEL-RULES INT-RULE-STRAT PICK-STRATEGY WITH-STRATEGY TRACE-OPTIONS PROOF-METHODS MANUAL-OPTIONS ORDER-STR REDUCE-SYSTEM-STR COVER-GENE-INDUC-EQN COVER-STRONG-INDUC-HYPO COVER-MULTI-TERM-INDUC COVER-CASE-BOOL-FLAG COVER-CASE-COND-FLAG COVER-AUTO-LEVEL LINEAR ASK-FOR-OPERATOR INVALID-INPUT-WARNING PRINT-CHOICE-MESSAGE READ-THIS-EQN OK-TO-CONTINUE ASK-A-NUMBER ASK-A-CHOICE SAVE-WORD-END READ-ATOM READ-T-TERM READTEQNS OPEN-READ-FILE DISABLE-RULES-AUX TEST-RRL DELETE-EQN DELETE-RULE QUERY-ADD-EQN SET-HANDLE-AND SET-ART-MODE))
(setf (callers-list '$IMMEDIATE :readers) '(ASS-RULE-BOUND GET-REST-GLOBALS))
(setf (callers-list '$FAILED-EQNS :readers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 RESUME_AUTO X_AUTO_INDUC X_HYPOTHESIS X_INDUC))
(setf (callers-list '$DIVISIBLE :readers) '(POLY-INITIALIZE EXT-DIVISIBLE START-HISTORY DIVISIBLE-CHECK))
(setf (callers-list '$SEPARATORS :readers) '(IS-VALID-OP))
(setf (callers-list '$POST-BOUND :readers) '(GET-REST-GLOBALS))
(setf (callers-list '$AKB_FLAG :readers) '(ASK-USER ADD-OPERATOR INVALID-RULE ADD-RULE3 GET-REST-GLOBALS UNDO))
(setf (callers-list '*LOOP-MAP-DECLARES* :readers) '(SUBSTITUTE-SLOOP-BODY))
(setf (callers-list '$RULE-NAMES :readers) '(NAME2RULENUM))
(setf (callers-list '$IDEM :readers) '(PRED-SUPERPOSITION RESTRICT-CRIT-STRA REDUCE-OTHER-RULES GET-REST-GLOBALS MAKE-PAIRS ACCEPTABLE-PAIR AC-SUPERPOSITION ONE-COMPOSITION))
(setf (callers-list '$GOAL-SET :readers) '(REFUTED-RESULT PICK-SMALL-GOAL MANUAL-GOAL PICK-GOAL LINEAR ADD-RULE-LINEAR START-HISTORY))
(setf (callers-list '$HANDLE-AND :readers) '(SET-HANDLE-AND HANDLE-AND?))
(setf (callers-list '$IN-FOPC :readers) '(SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR PRED-SUPERPOSITION REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-AT-ROOT-ONE-RULE IS-VALID-RULE ADD-RULE-LINEAR IS-PURE-INPUT APPLYSUBST-PRE START-HISTORY IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS AC-CRITPAIRS COVER-NORM-TERM FLAT-TERM-FUNC FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list '$INTER-RANGE :readers) '(VARS-ONLY))
(setf (callers-list '$GRAMMAR :readers) '(RRL-AUX))
(setf (callers-list '$CRIT-WITH-STR :readers) '(CHOOSE-BY-HAND INTRO-RULE WITH-STRATEGY GIVE-STAT GET-REST-GLOBALS))
(setf (callers-list '$DEFIN-DEPEND :readers) '(DEPENDED-OP START-HISTORY))
(setf (callers-list '$RL-FIRST :readers) '(LR-RL-STRATEGY))
(setf (callers-list '$DEL-RULES :readers) '(CLEAN-RULE START-HISTORY))
(setf (callers-list 'FOR :readers) '(HANDLE-AND))
(setf (callers-list '*LOOP-EPILOGUE* :readers) '(SLOOP-SLOOP-MACRO PARSE-LOOP-INITIALLY))
(setf (callers-list '$TRANSLIST :readers) '(EXT-TRANSITIVE START-HISTORY))
(setf (callers-list '$BRT_TIME :readers) '(DISPLAY-KB-STAT))
(setf (callers-list 'IN :readers) '(HANDLE-AND))
(setf (callers-list '$CONFLUENT :readers) '(START-TEST UNCONDI-PROVE START-KB START-HISTORY))
(setf (callers-list '$TRY :readers) '(MAKE-ONE-BUILD COVER-CONDI-NORM))
(setf (callers-list '$EQOP_LIST :readers) '(EQUIV-OPS OPS-EQUIV-TO ADD-EQU DISPLAY-OP-STATS START-HISTORY))
(setf (callers-list '$DETACHMENT-OPS :readers) '(DETACHMENT-RULE))
(setf (callers-list '$POST-ASS-SET :readers) '(WRITEF-SYS DISPLAY ORDER-ASS REDUCE-POST-ASS START-HISTORY FLATTEN-POST-ASS FLATTEN-RULES))
(setf (callers-list '$MANUAL-HISTORY-FREQUENCY :readers) '(MANUAL-OPTIONS PUSH-HISTORY-MANUAL START-HISTORY-MANUAL))
(setf (callers-list '$TYPE-CONSTRUCTORS :readers) '(STR-CHOOSE-ONE-SCHEME WRITEF-SYS EXT-CONSTRUCTOR START-HISTORY))
(setf (callers-list '$OP_GOAL_RULES :readers) '(REDUCE-*-TERM REDUCE-+-TERM POLY-REDUCE-AT-ROOT REDUCE-AND-TERM REDUCE-XOR-TERM PURE-REWRITE-AT-ROOT NORM-INN REDUCE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE REDUCE-EQ-TERM))
(setf (callers-list '$BUILD-RULES :readers) '(GET-REST-GLOBALS START-HISTORY ELIMINATE-SUB IS-ELIM-TERM))
(setf (callers-list '$X_RULE_SAVE :readers) '(X_MANUAL_INDUC))
(setf (callers-list '$MORE-BREAK :readers) '(BREAK-ASS-STR GET-REST-GLOBALS PROCESS-ASS1))
(setf (callers-list '$ORD_TIME :readers) '(DISPLAY-KB-STAT START-HISTORY))
(setf (callers-list '$X_RULE :readers) '(X_HYPOTHESIS))
(setf (callers-list '$CONSTRUCTORS :readers) '(IS-PRIMITIVE BASE-DEPTH RULE-DESTROYABLE DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN GET-DEFINING-DOMAINS IS-PARTIAL-OP COMPLETE-TEST START-TEST CHOOSE-CONSTRUCTORS INDUC-PROVE DEFAULT-PRECEDENCE EXT-CONSTRUCTOR GET-FREE-CONSTRUCTORS GIVE-STAT START-HISTORY CONSISTENT-CHECK-QUASI SUB-NONVARS2))
(setf (callers-list '$MAX-HISTORY :readers) '(INVALID-RULE CAN-HAVE-NEW-OP))
(setf (callers-list '$X_STATE :readers) '(FORM-SUBGOALS-FROM-PATTERNS PROOF-UNDER-NEW-PREMISES COVER-INDUC-PROVE CHECK_AND_ADD))
(setf (callers-list '*RRL-DIRECTORY* :readers) '(OBJ-NAME SOURCE-NAME))
(setf (callers-list '*LOOP-END-TEST* :readers) '(SLOOP-SLOOP-MACRO PARSE-LOOP-FOR))
(setf (callers-list '$NEWOP-TERMS :readers) '(START-HISTORY CAN-HAVE-NEW-OP))
(setf (callers-list '$RRL-FILES :readers) '(CRRL LRRL))
(setf (callers-list '$CASE-BOOL :readers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 X_AUTO_INDUC COVER-CASE-BOOL-FLAG))
(setf (callers-list '$SMALL-DEPTH :readers) '(ORDER-ASS))
(setf (callers-list '$NO-RULE-DEL :readers) '(PURE-SUPERPOSITION))
(setf (callers-list '$SYMMETRY-CHECK :readers) '(AC-SUPERPOSITION))
(setf (callers-list '$HISTORY :readers) '(INVALID-RULE LOAD-RRL CLEAN-HISTORY UNDO1 UNDO PUSH-HISTORY CAN-HAVE-NEW-OP))
(setf (callers-list '$X_RESTART_SEQNO :readers) '(X_INITIAL X_MANUAL_INDUC))
(setf (callers-list '$AUTO-SUGG :readers) '(ASK-USER AUTO-ORIENT))
(setf (callers-list '$X_INDEQN :readers) '(REWRITE-ONCE-BY-HYPO))
(setf (callers-list '$OVER-REWRITE :readers) '(WELL-TYPED-VAR OVER-REWRITE-PREMISES GET-REST-GLOBALS COVER-NORMALIZE))
(setf (callers-list '*LOOP-FORM* :readers) '(PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-DO PARSE-NO-BODY PARSE-LOOP1 LOOP-PEEK LOOP-UN-POP LOOP-POP))
(setf (callers-list 'V_BINDS :readers) '(REPVARSIN))
(setf (callers-list '$CURSOR :readers) '(CURSOR_DOWN CURSOR_UP X_INITIAL LIST_NODE LIST_TREE DISP_TREE))
(setf (callers-list '*NO-DECLARE* :readers) '(PARSE-LOOP-FOR LOOP-DECLARE-BINDING MAKE-VALUE THE-TYPE))
(setf (callers-list '$CYCLE-OP-RULES :readers) '(START-HISTORY MAKE-CYCLE-RULE))
(setf (callers-list '$PICK-RULE-STR :readers) '(PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE PICK-STRATEGY GOAL-RULE-SIZE PICK-GOAL GIVE-STAT GET-REST-GLOBALS AC-SUPERPOSITION SUPERPOSITION CRITPAIRS))
(setf (callers-list '$INVALID-RULES :readers) '(START-HISTORY NO-SUBSUMPTION))
(setf (callers-list '$SUPPORT :readers) '(GET-REST-GLOBALS ACCEPTABLE-PAIR))
(setf (callers-list '$GOAL-REDUCE :readers) '(REDUCE-*-TERM REDUCE-+-TERM POLY-REDUCE-AT-ROOT REDUCE-AND-TERM REDUCE-XOR-TERM PURE-REWRITE-AT-ROOT NORM-INN REDUCE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE ADD-RULE-LINEAR GET-REST-GLOBALS REDUCE-EQ-TERM))
(setf (callers-list '$SYM-ARG-POSITIONS :readers) '(ONE-COMPOSITION))
(setf (callers-list '$DEEP-CONDI :readers) '(WELL-TYPED-VAR TRY-ONE-CONDI-RULE TRY-ONE-RULE))
(setf (callers-list '$SYMMETRY-TERMS :readers) '(AC-SUP-TERM))
(setf (callers-list '$MAX-ARITY :readers) '(CAN-HAVE-NEW-OP))
(setf (callers-list '*SLOOP-TRANSLATIONS* :readers) '(TRANSLATE-NAME))
(setf (callers-list '$PRE-FIRST :readers) '(EQ-PRE-STRAT))
(setf (callers-list 'CLAUSES :readers) '(SELECTQ CASEQ))
(setf (callers-list '$ANSPRED :readers) '(DEFAULT-PRECEDENCE COMPARE-TERM MR LINEAR ADD-RULE-LINEAR GET-REST-GLOBALS M-AND-P M-AND-M))
(setf (callers-list '$EXAMPLE-DIRECTORY :readers) '(OPEN-READ-FILE))
(setf (callers-list '$EX2 :readers) '(MAKE-PAIRS))
(setf (callers-list '$VAR-TYPE-LIST :readers) '(WELL-TYPED-VAR GET-SKO-FUNC SKOLEMIZE-AWAY-QUANTS SUBSTVARFOR))
(setf (callers-list '*AUTO-TYPE* :readers) '(LOOP-DECLARE-BINDING))
(setf (callers-list '$GUEST-EQN :readers) '(PROVE LINEAR))
(setf (callers-list '$VAR-PREMISES :readers) '(SUBST-VAR-PREMISES ADD-PREMISE-END PRE-PROCESS-PREMISES FIRST-PROCESS-PREMISES NORM-CTX TRACE-DROPPED-PREMISES PRINT-CURRENT-PREMISES COVER-NORM-TERM))
(setf (callers-list '$IRREDU-NUM :readers) '(TRACE-TESTSET))
(setf (callers-list '$NUM-TYPE :readers) '(DISPLAY-ONE-ARITY2 GET-CODOMAIN-TYPES GET-DOMAIN-TYPE WELL-TYPED3 EXPECT-ARITY EXPECT-ARITY12 SET-UP-ARITY2 EXT-CONSTRUCTOR START-HISTORY))
(setf (callers-list '$ADD_TIME :readers) '(DISPLAY-KB-STAT START-HISTORY))
(setf (callers-list 'SETQ :readers) '(PARSE-ONE-WHEN-CLAUSE))
(setf (callers-list '$SAVE-IN-PORT :readers) '(READ-ATOM TEST-RRL))
(setf (callers-list '$X_CHOOSE_TERM :readers) '(X_GET_INDUC_TERM COVER-PROOF-PROCESS2 COVER-SET-SCHEME X_INDUC))
(setf (callers-list '$CASE-SPLIT-TERMS :readers) '(PROOF-UNDER-NEW-PREMISES FIRST-BOOLEAN-CONSTANT))
(setf (callers-list '*ADDITIONAL-COLLECTIONS* :readers) '(LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP-COLLECT LOOP-COLLECT-KEYWORD-P))
(setf (callers-list '$FUNC-NAME :readers) '(GET-REST-GLOBALS SUBSTVARFOR))
(setf (callers-list '$TRUE-TERM :readers) '(COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM ADD-PREMISE-END ORIENT-RULE NORM-EQ-ARGS SIMPLIFY-COND-TERM SIMPLIFY-MY-EQ-TERM CHECKEQ-NORMAL SPLIT-RHS-OR MAKE-ONE-DOWN-HILL COVER-UNCONDI-NORM BA-SIMP-NOT BA-SIMP-OR))
(setf (callers-list '$EQN-POOL :readers) '(X_INITIAL))
(setf (callers-list '$MANUAL-HISTORY-NUMBER :readers) '(PUSH-HISTORY-MANUAL START-HISTORY-MANUAL))
(setf (callers-list '$POLY-HOMO-RULES :readers) '(POLY-ADD-HOMO-RULES CLEAN-RULE))
(setf (callers-list '$X_HINT :readers) '(X_INITIAL RESUME_AUTO X_MANUAL_INDUC X_FAILURE_HANDLER))
(setf (callers-list '$ANS-RULE :readers) '(LINEAR START-HISTORY))
(setf (callers-list '*AUTO-REGISTER* :readers) '(LOOP-DECLARE-BINDING))
(setf (callers-list '$INDUC-EQNS :readers) '(X_AUTO_INDUC ASK-USER INDUC-ADD-RULE))
(setf (callers-list '$NRULES :readers) '(DISPLAY-KB-STAT START-HISTORY))
(setf (callers-list '$COVER-SETS :readers) '(FORM-PATTERNS-SINGLE MERGEBLE-TERMS DEFINING-POSITIONS HAVE-MANY-RECURSIVE-EQNS GET-RECURSIVE-DEF-TERM GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS INDUCTIBLE INDUC-SUBS-TERM START-HISTORY FREE-SUBTERMS))
(setf (callers-list '*LOOP-COLLECT-POINTERS* :readers) '(POINTER-FOR-COLLECT))
(setf (callers-list 'DO :readers) '(HANDLE-AND))
(setf (callers-list '$NORM_STR :readers) '(NORM-STRATEGY PURE-NORM GIVE-STAT GET-REST-GLOBALS))
(setf (callers-list '$FREE-CONSTRUCTORS :readers) '(IS-VALUE-TERM START-HISTORY INDUC-SUP-TERM CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-CHECK))
(setf (callers-list '$NEW-AC :readers) '(AC-KB-CHOICE MAKE-PAIRS AC-SUPERPOSITION))
(setf (callers-list '$OP_RULES :readers) '(X_MANUAL_INDUC X_CLEAN-RULE DEFINING-DOMAIN GET-RECURSIVE-RETURN-OP COVER-SETS REDUCE-*-TERM REDUCE-+-TERM POLY-REDUCE-AT-ROOT IS-BIG-ENOUGH-RULE REDUCE-AND-TERM REDUCE-XOR-TERM PURE-REWRITE-AT-ROOT NORM-INN PURE-NORM-INN SIMPLIFY-COND-TERM REDUCE-COND-TERM SIMPLIFY-MY-EQ-TERM REDUCE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE ENABLE-RULE DISABLE-RULE START-HISTORY REDUCE-EQ-TERM GOOD-UNIT-CLAUSE INDUC-REDUCE-OTHER-RULES))
(setf (callers-list '$TRACE-PROOF :readers) '(PURE-REDUCE-BY-ONE-AT-ROOT REDUCE-AT-ROOT-ONE-RULE TRY-ONE-RULE PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL CLEAN-RULE GET-REST-GLOBALS PROCESS-ASS-SIMPLE))
(setf (callers-list '$GOOD-SYMMETRY-TERMS :readers) '(SYMMETRY-NON-DELETABLE))
(setf (callers-list '$CASE-COND :readers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 X_AUTO_INDUC COVER-CASE-COND-FLAG))
(setf (callers-list '$ORDERHELP :readers) '(ASK-USER))
(setf (callers-list '$HISTORY1 :readers) '(ASK-USER PUSH-HISTORY START-HISTORY END-AUTO-ORDER))
(setf (callers-list '*LOOP-COLLECT-VAR* :readers) '(PARSE-LOOP-COLLECT))
(setf (callers-list '$POLYNOMIAL :readers) '(SIZE SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY IS-CHARACTER-RULE POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR WRITE-TERM-SIMPLE POLY-CHOICE REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-BY-ONE-AT-ROOT REDUCE-AT-ROOT-ONE-RULE MATCH-POSS REDUCE-OTHER-RULES ADD-RULE APPLYSUBST-PRE GET-REST-GLOBALS CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 IS-SYMMETRY-EQN IS-CYCLE-EQN MAKE-PAIRS PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS COVER-NORM-TERM POSTPONE-OR-UNDO CAN-HAVE-NEW-OP PLAUSIBLE FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list '$STEP-DEEP :readers) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS COVER-PROOF-PROCESS2 X_MANUAL_INDUC X_AUTO_INDUC TRACE-HYPOTHESE GET-REST-GLOBALS))
(setf (callers-list 'MOST-NEGATIVE-FIXNUM :readers) '(PARSE-LOOP-FOR))
(setf (callers-list '*LAST-VAL* :readers) '(PARSE-LOOP-COLLECT PARSE-LOOP-WHEN LOOP-UN-POP))
(setf (callers-list '$LOG-PORT :readers) '(SUCC-END-INDUC X_READ_TERM TEST-ONE-OP START-TEST UNCONDI-PROVE PROVE READ-THIS-EQN SAVE-WORDS SAVE-WORD-END READ-ATOM READ-T-TERM CLOSE-LOG TRACE-SUCC-PROVE))
(setf (callers-list '$NO-HISTORY :readers) '(START-HISTORY))
(setf (callers-list '*LOOP-INCREMENT* :readers) '(SLOOP-SLOOP-MACRO PARSE-LOOP-FOR))
(setf (callers-list 'FINISH :readers) '(PARSE-ONE-WHEN-CLAUSE))
(setf (callers-list '*EMPTY-SUB* :readers) '(REPVARSIN APPLY-TO EMPTY-SUB SIZE-UNI MERGE-TWO-PATTERNS SUBST-VAR-PREMISES PRE-PROCESS-PREMISES POLY-MATCH-* PRED-CRITICAL-PAIR PURE-REDUCE-BY-ONE-AT-ROOT ADD-TO-ARGS MATCH-PREMISE EQ-MATCH AC-MATCH PURE-MATCH MATCH NONAC-UNIFY NORMAL-FORM-SUB APPLYSUBST-PRE APPLYSUBST-EQN PREMISE-INSTANCE APPLYSUBST-RULE RENAME-TERM PARA-SUP-TERM2 IS-SYMMETRY-RULE IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS PURE-SUP-TERM2 SUP-TERM2 ADD-EXTRA-PREMISE ELIMINATE-SUB IS-BLOCKED UNICOMPOUND ACUNI UNIFY-WITH-AC))
(setf (callers-list '$NORM_TIME :readers) '(DISPLAY-KB-STAT START-HISTORY))
(setf (callers-list '$PAIR-SET :readers) '(PICK-UNMARKED-RULE-DUMMY PICK-GOAL START-HISTORY LIST-PAIRS LOOK-AT-PAIR-AND LOOK-AT-PAIRS))
(setf (callers-list '*LOOP-BINDINGS* :readers) '(SLOOP-SLOOP-MACRO LOOP-DECLARE-BINDING LOOP-ADD-BINDING))
(setf (callers-list '$NUSEREQN :readers) '(GET-EQUATION GET-REST-GLOBALS))
(setf (callers-list '$TRACE_FLAG :readers) '(REWRITE-ONCE-BY-HYPO X_COVER-PROOF-PROCESS2 SUCC-END-INDUC COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM X_AUTO_INDUC UNCONDI-PROVE PRED-CRITICAL-PAIR ORDER-ASS ORIENT-RULE TRACE-OPTIONS ASSERTION2EQUATION NORMALIZE ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE PURE-PROCESS-EQUATION PROCESS-EQUATION MAKE-CYCLE-RULE PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR AC-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS CONSISTENT-RULE TRACE-FACTOR TRACE-REMOVE-IRRELEVANT4 TRACE-DROPPED-PREMISES MAKE-ONE-DOWN-HILL HEAD-LESS-THAN-PRES PRINT-NORMALIZED-EQN MAKE-P-COMMUT-RULE TRACE-DIVISIBLE INDUC-REDUCE-OTHERS-AUX ONE-COMPOSITION))
(setf (callers-list '$USED-RULE-NUMS :readers) '(REDUCTION-PROOF PURE-REDUCE-BY-ONE-AT-ROOT REDUCE-AT-ROOT-ONE-RULE TRY-ONE-RULE PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL INDUC-IDEM-SUPERPOSITION MAKE-ONE-DOWN-HILL ADD-EXTRA-PREMISE PRINT-NORMALIZED-EQN INDUC-REDUCE-OTHERS-AUX PROCESS-ASS-SIMPLE))
(setf (callers-list '*MACROEXPAND-HOOK-FOR-NO-COPY* :readers) '(PARSE-LOOP))
(setf (callers-list '*TYPE-CHECK* :readers) '(PARSE-LOOP-FOR MAKE-VALUE))
(setf (callers-list '$REDUCED-PREMISES :readers) '(ADD-SIMPLIFY-OTHERS))
(setf (callers-list '$PROVE-METHOD :readers) '(GET-TESTSET TEST-ONE-OP COMPLETE-TEST PROVE PROOF-METHODS GET-REST-GLOBALS CONSISTENT-RULE))
(setf (callers-list '$CHECK-SYMMETRY :readers) '(IS-CHARACTER-RULE SYMMETRY-CHOICE ADD-RULE-COMPLETE))
(setf (callers-list '$UNIF_TIME :readers) '(DISPLAY-KB-STAT START-HISTORY))
(setf (callers-list '$FOPC-LRPO :readers) '(GET-REST-GLOBALS))
(setf (callers-list 'L__2 :readers) '(X_GET_INDUC_TERM WRITE-VARIABLE GET-VAR-SUBSTITUTION RENAME-TERM))
(setf (callers-list '$POST-ASS-LIST :readers) '(ORDER-ASS CRIT-PAIR-PROCESS POST-ASS-LIST))
(setf (callers-list '$X_AVOID-TERMS :readers) '(X_MATH_IND X_REDUCE-BY-ONE-RULE))
(setf (callers-list '$HELPFILE :readers) '(RRL-AUX))
(setf (callers-list '$PARAMODULATE :readers) '(PARAMOD-STR GET-REST-GLOBALS))
(setf (callers-list '$RUNTIME-MAX :readers) '(TIME-LIMIT-STRA RUNTIME-MAX-WARNING))
(setf (callers-list '*COLLATE-ORDER* :readers) '(FIND-IN-ORDERED-LIST))
(setf (callers-list '*BIN-TYPE* :readers) '(OBJ-NAME))
(setf (callers-list '$EQ-ARITY :readers) '(ARITY-EQ-STRATEGY AUTO-MAKE-EQUI))
(setf (callers-list '$CONDI-DOMINATE :readers) '(NORM-CTX COVER-CONDI-NORM COVER-NORM-TERM))
(setf (callers-list '$PREMISES-SET :readers) '(REDUCE-EQN-BY-ONE-RULE NORMALIZE-BY-PREMISES REDUCE-REVERSE-PREMISES SIMPLIFY-PREMISES SIMPLIFY-ONE-PRE PRE-PROCESS-PRE-ASS FIRST-PROCESS-PREMISES BOOL-REWRITE-AT-ROOT VAR-CONSISTENCY REDUCE-AT-ROOT RESTORE-EQUATION MAKE-ONE-BUILD PRINT-CURRENT-PREMISES ADD-EXTRA-PREMISE COVER-CONDI-NORM))
(setf (callers-list '$CKB_FLAG :readers) '(CHOOSE-CONSTRUCTORS NORM-STRATEGY PROCESS-EQUATION IS-PURE-INPUT READ-INPUT GET-REST-GLOBALS))
(setf (callers-list 'MOST-POSITIVE-FIXNUM :readers) '(PARSE-LOOP-FOR))
(setf (callers-list '*TYPE-TEST-LIMIT* :readers) '(MAKE-VALUE))
(setf (callers-list '*CODE-DIRECTORY* :readers) '(FCLOAD CLOAD2 CLOAD BLOAD FLOAD))
(setf (callers-list '*AUTOMATIC-DECLARATIONS* :readers) '(PARSE-LOOP-FOR LOOP-DECLARE-BINDING MAKE-VALUE THE-TYPE))
(setf (callers-list '$GLOB_PREC :readers) '(ADD-SUGG1 ADD-SUGG TRY-SUGG-PREC UPDATE-BY-EQ IS-REL-PREC PC-GRT-PREC GRT-PREC ADD-EQU START-HISTORY))
(setf (callers-list '*USE-LOCATIVES* :readers) '(PARSE-LOOP-COLLECT))
(setf (callers-list '$NON-COMM-COVER-SETS :readers) '(FORM-PATTERNS-SINGLE MERGEBLE-TERMS GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS INDUCTIBLE INDUC-SUBS-TERM START-HISTORY))
(setf (callers-list '$XNODE :readers) '(ADD_CHILD X_COVER-PROOF-PROCESS2 REDUCTION-PROOF COVER-PROOF-PROCESS2 X_MANUAL_INDUC HEAD_OF_FAILURE_HANDLER X_FAILURE_HANDLER CHECK_AND_ADD X_AUTO_INDUC MANUAL_REDUCE))
(setf (callers-list '$NEWRULE-NUM :readers) '(CLEAN-RULE ADD-RULE3 POSTPONE-OR-UNDO POSTPONE-IT))
(setf (callers-list '$FRI-OPS :readers) '(ENTER-OP DEFAULT-PRECEDENCE))
(setf (callers-list '$BOOL-OPS :readers) '(ENTER-OP ALL-NONVARS DEFAULT-PRECEDENCE))
(setf (callers-list 'SLOOP::*ADDITIONAL-COLLECTIONS* :readers) '(COLLATE-SLOOP-COLLECT NEVER-SLOOP-COLLECT ALWAYS-SLOOP-COLLECT THEREIS-SLOOP-COLLECT COUNT-SLOOP-COLLECT MINIMIZE-SLOOP-COLLECT MAXIMIZE-SLOOP-COLLECT LOGXOR-SLOOP-COLLECT SUM-SLOOP-COLLECT))
(setf (callers-list '$POST-POSI :readers) '(POST-POSI-STRA INVALID-RULE POST-FOR-WHILE POSTPONE-IT))
(setf (callers-list '$X_INDHYPS :readers) '(CLEAN-INDHYP ORIENT-INDUC-HYPO SUCC-END-INDUC))
(setf (callers-list '$TYPE-RELA :readers) '(IS-EXIST-TYPE-NAME GET-SUBTYPES IS-SUBTYPE ADD-SUGG-TYPE1 ADD-SUGG-TYPE WELL-TYPED-VAR EXT-CONSTRUCTOR))
(setf (callers-list '$TESTSET :readers) '(QUASI-REMOVER QUASI-REDUCIBLE QUASI-EQUIVALENT RULE-DESTROYABLE FLATTEN-TESTSET CONSISTENT-CHECK-TESTSET))
(setf (callers-list '$AUX-RSET :readers) '(START-HISTORY PURE-CRITPAIRS CRITPAIRS))
(setf (callers-list '$LAST-SOLN :readers) '(ONE-COMPOSITION))
(setf (callers-list '$PEEK :readers) '(X_INITIAL COVER-INDUC-PROVE CHECK_AND_ADD X_ONE_RULE))
(setf (callers-list '$ABSTRACT-PROOF :readers) '(COVER-PROOF-PROCESS2 COVER-GENE-INDUC-EQN))
(setf (callers-list '$MANY-ARGS :readers) '(POLY-INITIALIZE))
(setf (callers-list '$PROC_TIME :readers) '(PURE-KNUTH-BENDIX2 KNUTH-BENDIX2 DISPLAY-KB-STAT START-HISTORY))
(setf (callers-list '*MACROEXPAND-HOOK* :readers) '(PARSE-LOOP))
(setf (callers-list '$ORDERING :readers) '(TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORDER-STR MAKE-RULE-FROM-ASS GIVE-STAT GET-REST-GLOBALS LRPO-PREMISES BIG-PRE-INFO))
(setf (callers-list '$X_LEMMAS :readers) '(COVER-INDUC-PROVE PROVE_EQN X_AUGMENT X_HYPOTHESIS X_ONE_RULE))
(setf (callers-list '*LISP-TYPE* :readers) '(SOURCE-NAME))
(setf (callers-list '$EQN-SET :readers) '(REFUTE-EQN WRITEF-SYS DISPLAY PURE-ORIENT-AN-EQN ORIENT-AN-EQN EXIST-OP ADD-OPERATOR START-KB DELETE-EQN RESET-RRL LOAD-RRL START-HISTORY INDUC-REDUCE-OTHERS-AUX INDUC-ORIENT-AN-EQN AUTO-KB))
(setf (callers-list '$FALSE-TERM :readers) '(COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM NEGATE-ONE-PRE MAKE-BETTER-PRE FIRST-VAR-PRE FIRST-CTX-TRANS NORM-BOOL-INNERMOST SIMPLIFY-COND-TERM SIMPLIFY-MY-EQ-TERM LAST-CONSISTENCY-CHECK SPLIT-RHS-AND MAKE-ONE-DOWN-HILL COVER-UNCONDI-NORM BA-SIMP-NOT BA-SIMP-AND))
(setf (callers-list '$DEF-DOMAINS :readers) '(RULE-DESTROYABLE GET-DEFINING-DOMAINS GET-SCHEMES TEST-ONE-OP IS-PARTIAL-OP GET-REST-GLOBALS))
(setf (callers-list 'IF-KEYWORD-LIST :readers) '(IF*))
(setf (callers-list '$REDUCE-BOUND :readers) '(NORMALIZE-BOUND NORM-BOOL-INNERMOST CYCLE-CHECK PURE-NORM NORM-TERM))
(setf (callers-list '$LEAF :readers) '(X_INITIAL COVER-INDUC-PROVE CHECK_AND_ADD))
(setf (callers-list '$AC :readers) '(SIZE TOP-TERM SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT TEST-ONE-OP REDUCE-BY-PREMISE-AT-ROOT SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-INITIALIZE IS-CHARACTER-RULE POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE M-*-P M-*-M PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE PRED-CRITICAL-PAIR DISPLAY EXT-AC NORM-STRATEGY REDUCE-AT-ROOT-BOOL NORM-CTX OUTRED1 AC-COMPRESS REDUCE-AT-ROOT-ONE-RULE REWRITE-AT-ROOT PICK-GOAL AC-C-ROOT MATCH-SET ELIM-BIN MATCH-POSS APPLIES LRPO ADD-RULE-LINEAR REDUCE-OTHER-RULES ADD-RULE-COMPLETE IS-PURE-INPUT KNUTH-BENDIX1 ORDER-EQNS APPLYSUBST-PRE APPLYSUBST-EQN PREMISE-INSTANCE START-HISTORY SYMMETRY-TERMS SYMMETRY-VARS CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE MAKE-CYCLE-RULE IS-SYMMETRY-EQN IS-CYCLE-EQN MAKE-PAIRS PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS CRITPAIRS INCONSISTENT-EQN CONSISTENT-RULE COVER-NORM-TERM IS-P-COMMUT-PAIR DIVISIBLE-CHECK2 PLAUSIBLE UNIFY-WITH-AC UNIFIERS ACO-LRPO> FLATTEN-RULES MAKE-ASS-COM-OP COMPRESS-FLAT FLAT-TERM-FUNC FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list '$BLOCK_TIME :readers) '(DISPLAY-KB-STAT))
(setf (callers-list '$RESUME-RULE :readers) '(KEEP-RULE-STRATEGY UNDO1))
(setf (callers-list '$DEL-RULE-NUMS :readers) '(CLEAN-RULE START-HISTORY))
(setf (callers-list '*LOOP-MAP* :readers) '(SUBSTITUTE-SLOOP-BODY PARSE-LOOP-MAP LOOP-DECLARE-BINDING))
(setf (callers-list '$SPEC-PORT :readers) '(WRITE-F-PREMISES WRITEF-SYS))
(setf (callers-list '$TYPE-TESTSET :readers) '(IS-PARTIAL-OP COMPLETE-TEST))
(setf (callers-list '$ROOT :readers) '(X_COVER-PROOF-PROCESS2 X_INITIAL REDUCTION-PROOF COVER-PROOF-PROCESS2 COVER-INDUC-PROVE X_MANUAL_INDUC CHECK_AND_ADD X_AUTO_INDUC MANUAL_REDUCE))
(setf (callers-list '$F-WEIGHTS :readers) '(W-SIZE POLY-SIZE GET-REST-GLOBALS))
(setf (callers-list '$X_OP_SAVE :readers) '(X_MANUAL_INDUC))
(setf (callers-list '$NEWOPS :readers) '(ENTER-OP PROVE))
(setf (callers-list '$SUBS :readers) '(POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 AC-SUP-TERM PURE-SUP-TERM SUP-TERM))
(setf (callers-list 'ELEM :readers) '(HANDLE-AND))
(setf (callers-list '$RULE-SET :readers) '(X_MANUAL_INDUC X_PREPARE_RULES START-TEST REFUTED-RESULT PROVE OK-PREV-RULES INTRO-RULE PICK-ONE-UNMARKED MANUAL-PICK INDUC-PICK-UNMARK PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE WRITEF-SYS DISPLAY EXT-AC CLEAN-OPS GET-RULE GET-RULE-LEVEL ADD-RULE-LINEAR REDUCE-OTHER-RULES ADD-RULE-COMPLETE PURE-ADD-RULE START-KB DISPLAY-KB-STAT RESET-RRL LOAD-RRL UNDO1 START-HISTORY CYCLE-REDUCE-OTHERS PICK-OUT-RULE INCONSISTENT-EQN P-COMMUT-REDUCE-OTHERS NOT-AUTO-PREV-RULES AUTO-KB FLATTEN-RULES2 FLATTEN-RULES))
(setf (callers-list '#\] :readers) '(CHAR-HANDLER))
(setf (callers-list 'LIM :setters) '(PARSE-LOOP-FOR))
(setf (callers-list '$DEL_RULE_STR :setters) '(REFUTE-EQN PROVE IM-DEL-RULES RESTORE-REST-GLOBALS))
(setf (callers-list 'TYPE-KEY :setters) '(MAKE-VALUE))
(setf (callers-list '#:POIN20436 :setters) '(COMBINATE))
(setf (callers-list '#:POIN23421 :setters) '(MAKE-TUPLES))
(setf (callers-list 'LEVEL :setters) '(UNKNOWN-SIZE))
(setf (callers-list '#:VAL23248 :setters) '(COMPOSE2))
(setf (callers-list 'TERM-SCORE :setters) '(INDUCTIBLE))
(setf (callers-list 'M :setters) '(ONE-PATTERN M-+-P P-*-M M-*-P DEMULT-FORM DIVIDED-BY M-XOR-P M-AND-P COMBINATE2 COMBINATE SUMYMAX GET-LCM-SOLNS GENERAL-BASIS-VECTORS HALF-ONES ALL-ONES))
(setf (callers-list '#:LIS21722 :setters) '(BODY-PREMISES-SIZE))
(setf (callers-list '#:LIS20230 :setters) '(FLATTEN-PREMISES))
(setf (callers-list '#:COLL20481 :setters) '(SYMMETRY-NON-DELETABLE))
(setf (callers-list 'HCM1 :setters) '(M-AND-M))
(setf (callers-list 'OPS2 :setters) '(GET-TESTSET REMOVE-EQ-OP EXT-PRECEDENCE CLEAN-OPS))
(setf (callers-list '#:POIN22846 :setters) '(REF-INSTANCE-SEEDS))
(setf (callers-list '#:LIS21803 :setters) '(GET-INTERSECTION-RANGE))
(setf (callers-list '#:VAL22179 :setters) '(EXIST-OP))
(setf (callers-list 'CHOICES :setters) '(PRINT-HEAD INCREMENT-POS CHOOSE-STR ASK-A-CHOICE ASK-CHOICE))
(setf (callers-list '#:POIN23388 :setters) '(NEW-ARGS))
(setf (callers-list 'EQUIV :setters) '(ACO-LEXICO-COMP-RL ACO-LEXICO-COMP-LR))
(setf (callers-list '#:LIS21996 :setters) '(MULT-UNION))
(setf (callers-list '#:LIS20823 :setters) '(SIMPLIFY))
(setf (callers-list 'TEM :setters) '(PARSE-LOOP-MACRO LOOP-ADD-BINDING LCASE))
(setf (callers-list '#:LIS20812 :setters) '(BRT))
(setf (callers-list 'F :setters) '(SLOOP-SLOOP-MACRO CRRL LRRL EACH FIND-OUT-BIG-EQ-SUBS BIGT-TWO-KILL-ONE BIGT-ONE-KILL-ONE ACO-BIGT-PARTITION TWO-KILL-ONE ACO-NOBIGT-PARTITION ACO-HARDER ACO-HARD>))
(setf (callers-list 'INFO :setters) '(ADD_CHILD NEGATE-ONE-PRE NEGATE-PREMISES MAKE-PRE-EQN MAKE-PRE-XOR-ARGS MAKE-PRE-ASS PROCESS-PRE-ASS MAKE-EQ-PRE MAKE-BETTER-PRES MAKE-BETTER-PRE NORM-ONE-PRE FIRST-VAR-PRE MAKE-PRE PROCESS-AC-UNIFIER OR-CONDI-EQN PRE-BIGGER-THAN-EQN EQN2PRE ADD-SOLN ONE-COMPOSITION TAKE-OUT))
(setf (callers-list '#:VAL21712 :setters) '(IS-VALID-CONDI-RULE))
(setf (callers-list '#:POIN21969 :setters) '(SET-DIFF2))
(setf (callers-list '#:LIS22685 :setters) '(REMOVE-SUGG))
(setf (callers-list 'MONOS :setters) '(NORM-MULT-MONOS NORM-SIGN-CHANGED-MONOS))
(setf (callers-list 'OR-TERM :setters) '(NORM-OR-ARGS))
(setf (callers-list 'NEWREST :setters) '(MATCH-BOOL-XOR))
(setf (callers-list '#:LIS23569 :setters) '(SUBS-ARE-PRIMITIVE))
(setf (callers-list 'DROPS :setters) '(TRACE-DROPPED-PREMISES REMOVE-IRRELEVANT2))
(setf (callers-list '#:LIS23486 :setters) '(FREE-VARS))
(setf (callers-list '#:LIS23513 :setters) '(NEWVARSIN))
(setf (callers-list '$INDUC-VARS :setters) '(MAKE-ONE-SCHEME))
(setf (callers-list 'XARG :setters) '(ACUNI))
(setf (callers-list 'TYPE-BASE :setters) '(TEST-ONE-OP COMPLETE-TEST))
(setf (callers-list '#:LIM20443 :setters) '(COMBINATE2))
(setf (callers-list 'BONES :setters) '(REAL-COLLECT-PRODUCTS PROPER-PRODUCT-LISTS))
(setf (callers-list '#:LIS23162 :setters) '(FIND-MERGE-SIGMA))
(setf (callers-list '#:LIS21428 :setters) '(START-HISTORY))
(setf (callers-list 'L2 :setters) '(STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM ABSTRACT-PROOF X_AUTO_INDUC QUASI-CHECK RULE-DESTROYABLE TRACE-ADD-TESTSET EXTEND-DOM-ARGS GET-DEFINING-DOMAINS GET-TESTSET2 CAR-LENGTH-CDDR GET-INSTANCE-SEEDS SUGG-PREC TRY-SUGG-PREC EQOPS POLY-LRPO ELES-MORE-THAN-1 COMPACT-LAST-ELEMENTS MERGE-SORT-ARGS CHOOSE-BY-HAND DETACHMENT-CRITICAL TOTAL-ORDER-RES TOTAL-ORDER-PC-RES COMP-TERMS EXT-DIVISIBLE PURE-MIXED-REDUCE PURE-NORM-WITH-BIN NORM-WITH-BIN SUB-TEST MULT-DIFF MULT-SORT-MERGE MULT-MERGE IS-SUBLIST LIST-DIFF IS-SUBSET HAVE-COMMON COMMON-ELEMENTS LESS-VECTOR IS-SUBSEQ-LIST IS-SUBSEQUENCE MAKE-RULE-SIZE-ORDER MAKE-RULE-FROM-ASS ADD-OPERATOR IS-VALID-RULE RPOMULT EQUIV-LIST REDUCE-POST-ASS REDUCE-OTHER-RULES PURE-ADD-RULE READ-EQNS ORDER-EQNS DELETE-EQN TRACE-HYPOTHESE MERGE-LIST IDEM-EQ-CRITICAL PROCESS-DEL-RULE CROSS-PRODUCT CYCLE-REDUCE-OTHERS SAME-LIST SET-UNIFY PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS P-COMMUT-REDUCE-OTHERS INDUC-REDUCE-OTHERS-AUX INDUC-REDUCE-OTHER-RULES MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS ACUNI UNIFY-WITH-AC ACO-EQUIV-LIST ACO-LEXICO-COMP-RL ACO-RPOMULT>= ACO-RPOMULT> ACO-BIGT-PARTITION ACO-NOBIGT-PARTITION ACO-HARDER ACO-HARD> ALL-ONES FLATTEN-POST-ASS FLATTEN-RULES2))
(setf (callers-list '#:VAL21725 :setters) '(BODY-PREMISES-SIZE))
(setf (callers-list 'PARENTS :setters) '(SUBST-EQN))
(setf (callers-list '$CYCLE-RULE :setters) '(CYCLE-CHOICE RESTORE-REST-GLOBALS))
(setf (callers-list '#:VAL21688 :setters) '(EQUIV))
(setf (callers-list 'RHS1 :setters) '(POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* IS-SYMMETRY-EQN))
(setf (callers-list '#:POIN21044 :setters) '(BUILD-EQUATION-FROM-PREMS))
(setf (callers-list '*PRODUCT-FOR* :setters) '(PARSE-LOOP))
(setf (callers-list 'ELIST2 :setters) '(EQ-JOIN))
(setf (callers-list '#:POIN20794 :setters) '(CANONICALIZE))
(setf (callers-list '#:LIS22497 :setters) '(POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list 'LEFT :setters) '(TR-TERM))
(setf (callers-list '#:COLL22003 :setters) '(MULT-DIFF2))
(setf (callers-list '#:VAL22191 :setters) '(SAME-ARITY))
(setf (callers-list '#:LIS21038 :setters) '(PICK-OUT-PREMISE))
(setf (callers-list '#:LIS22373 :setters) '(WRITE-DETAIL-RULE))
(setf (callers-list 'UNIFS :setters) '(AC-SUP-TERM))
(setf (callers-list '#:VAL20980 :setters) '(ELIMINATE-SUB))
(setf (callers-list 'POLY :setters) '(M-+-P P-*-M M-*-P EQ-MATCH VARS-ONLY AC-MATCH M-XOR-P M-AND-P DECANON-XOR))
(setf (callers-list '#:LIS22859 :setters) '(REF-INSTANCE-SEEDS2))
(setf (callers-list 'SIGMA :setters) '(QUASI-EQUIVALENT APPLY-TO APPLY-TO2 FIND-MERGE-SIGMA MERGE-TWO-PATTERNS REM-DUP-VARS COMPATIBLE-PATTERNS NOFALSE-PREMISES POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS POLY-MATCH-ONE-TO-* POLY-MATCH-* WRITE-SIGMA TRY-ONE-EXTRA-VAR-RULE TRY-ONE-CONDI-RULE REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES MATCH-PREMISE MATCH-PREMISES EQ-MATCH CTX-BAD-LUCK MATCH-SET-AC ELIM-BIN VARS-ONLY PICK-AN-ARG AC-MATCH APPLIES GOOD-LUCK-CONDI INSERT-POLY-SIGMA POLY-SIGMA PURE-MATCH MATCH HYPO-SUBSUME-EQN IS-FAILED-INDUC-EQN APPLYSUBST-PRE APPLYSUBST-EQN EQN-INSTANCE PREMISE-INSTANCE PREMISES-INSTANCES APPLYSUBST-RULE TRACE-CRIT PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP HANDLE-CONDITIONS HANDLE-FACTOR FACTORIZATION RULE-SUBSUMED-PREMISES SUBSUMED-PREMISES ADD-EXTRA-PREMISE ADD-SOLN GET-SOLUTIONS FULL-DIO ALL-ONES))
(setf (callers-list 'QUANTIFIER :setters) '(FIXUP-QUANTIFIED-FORMULA))
(setf (callers-list '#:COLL23721 :setters) '(PROOF-BY-HINT-TERM))
(setf (callers-list '#:LIS23063 :setters) '(DEPENDED-OP))
(setf (callers-list '#:LIS22861 :setters) '(COLLECT-CDR-WITH-SAME-CAR))
(setf (callers-list '#:COLL23329 :setters) '(GET-DOWN))
(setf (callers-list '#:LIS21040 :setters) '(CHECK-HEAD-ROLE))
(setf (callers-list 'RNUM :setters) '(REDUCE-OTHER-RULES PURE-ADD-RULE CYCLE-REDUCE-OTHERS P-COMMUT-REDUCE-OTHERS INDUC-REDUCE-OTHERS-AUX INDUC-REDUCE-OTHER-RULES))
(setf (callers-list '#:LIS21189 :setters) '(INDUC-IDEM-SUPERPOSITION))
(setf (callers-list '#:LIS21226 :setters) '(PROCESS-NEW-AC-CP))
(setf (callers-list 'SIG2 :setters) '(PROCESS-NEW-AC-CP))
(setf (callers-list '#:VAL23496 :setters) '(RPLNTHSUBT-IN-BY))
(setf (callers-list 'DONT-MAKE-EQ :setters) '(ORDER-ASS))
(setf (callers-list '#:LIM22915 :setters) '(DECIDE-DEFIN-MODE))
(setf (callers-list '#:VAL21102 :setters) '(REMOVE-IRRELEVANT4))
(setf (callers-list '#:LIS22095 :setters) '(POLISH-PREMISES))
(setf (callers-list '#:COLL22063 :setters) '(TRY-ONE-EXTRA-VAR-RULE))
(setf (callers-list '#:LIS21082 :setters) '(TRACE-DROPPED-PREMISES))
(setf (callers-list 'DEFAULT :setters) '(ASK-A-NUMBER))
(setf (callers-list '#:VAL20351 :setters) '(LOOSE-SYM-SEQUENCE))
(setf (callers-list 'REDUCTION :setters) '(MAKE-RULE))
(setf (callers-list '$IN-PORT :setters) '(SUCC-END-INDUC CONSTRUCTORS-CHECK IS-PARTIAL-OP CHOOSE-CONSTRUCTORS PROVE OPEN-WRITE-FILE ASK-USER INVALID-INPUT-WARNING READ-ATOM TEST-RRL RRL-AUX INIT PRE-INIT QUERY-ADD-EQN))
(setf (callers-list 'DIS :setters) '(ORDER-EQNS))
(setf (callers-list '$NUM-TYPE :setters) '(EXPECT-ARITY EXPECT-ARITY12 SET-UP-ARITY2 GET-SKO-FUNC SUBSTVARFOR INIT-BOOL-OPS))
(setf (callers-list 'VARGSX :setters) '(ACUNI FULL-DIO ALL-ONES))
(setf (callers-list 'VALS :setters) '(LOOP-RETURN))
(setf (callers-list '#:LIS20610 :setters) '(ACO-RPOMULT>=))
(setf (callers-list 'NEWEQ :setters) '(FLATTEN-RULES2))
(setf (callers-list 'TERM2 :setters) '(MERGEBLE-TERMS FLAT-TERM))
(setf (callers-list '#:POIN22948 :setters) '(ADD-DEFIN-DEPEND))
(setf (callers-list '#:LIS22030 :setters) '(PICK-SMALL-GOAL))
(setf (callers-list '#:POIN21942 :setters) '(CON-NUMS))
(setf (callers-list '$MORE-BREAK :setters) '(BREAK-ASS-STR RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIS23661 :setters) '(DISPLAY-TYPE-ARITY))
(setf (callers-list '#:VAL21525 :setters) '(CHANGE-VARS))
(setf (callers-list 'TESTSET :setters) '(NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT SUB-QUASI-REDUCIBLE QUASI-CHECK MAKE-TUPLES GET-TESTSET-QUASI))
(setf (callers-list '#:COLL21907 :setters) '(REAL-COLLECT-PRODUCTS))
(setf (callers-list '#:LIS20225 :setters) '(FLATTEN-RULE))
(setf (callers-list '#:LIS20866 :setters) '(PROCESS-ASS-SIMPLE))
(setf (callers-list 'DUP-PREC :setters) '(AUTO-ORIENT))
(setf (callers-list '#:LIS22488 :setters) '(POLY-REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list '#:VAL23489 :setters) '(FREE-VARS))
(setf (callers-list '#:COLL22865 :setters) '(REFUTE-RULE-INSTANCES))
(setf (callers-list '#:LIS22954 :setters) '(INDUC-SUBS-OF-EQN))
(setf (callers-list '#:LIS23083 :setters) '(MERGEBLE-TERMS))
(setf (callers-list '#:VAL23567 :setters) '(PRIMITIVE-SUBST))
(setf (callers-list 'NVCOLS :setters) '(TAKE-OUT GET-SOLUTIONS))
(setf (callers-list '#:COLL23066 :setters) '(PARTI-BY-VARS))
(setf (callers-list '#:LIS22421 :setters) '(PRED-CRITICAL-PAIR))
(setf (callers-list 'T9 :setters) '(PROOF-UNDER-NEW-PREMISES))
(setf (callers-list '#:LIS23310 :setters) '(SUPERTERM-COVER))
(setf (callers-list '#:LIS23193 :setters) '(NORM-SUB))
(setf (callers-list '#:LIS22229 :setters) '(RUN-KB-OPTIONS))
(setf (callers-list '#:POIN23371 :setters) '(ADD-ONE-DEPTH))
(setf (callers-list '$AUTO-SUGG :setters) '(CAN-HAVE-NEW-OP AUTO-ORIENT))
(setf (callers-list '#:POIN21887 :setters) '(PICKOUT))
(setf (callers-list 'MON1 :setters) '(M-+-M M-*-M PRED-SUPER SIZE-COMPARE M-XOR-M M-AND-M))
(setf (callers-list '#:LIS21574 :setters) '(ORDER-EQNS))
(setf (callers-list 'REST-OF-POLY :setters) '(M-+-P M-XOR-P))
(setf (callers-list '#:POIN20675 :setters) '(UNIFY-WITH-AC))
(setf (callers-list '#:VAL23516 :setters) '(NEWVARSIN))
(setf (callers-list '#:COLL20819 :setters) '(SIMPLIFY-FLAT))
(setf (callers-list '#:LIS23542 :setters) '(SUB-OR-EQ-TERM))
(setf (callers-list '#:LIS22991 :setters) '(GET-INDUC-VARS))
(setf (callers-list '#:LIS23673 :setters) '(REDUCE-EQN-BY-ONE-RULE))
(setf (callers-list '$P-COMMUT-RULES :setters) '(MAKE-ASS-COM-OP))
(setf (callers-list 'CTX1 :setters) '(HANDLE-CONDITIONS))
(setf (callers-list '#:COLL21491 :setters) '(NORM-PROVE-ALL-EQNS))
(setf (callers-list '#:LIS22145 :setters) '(NORM-CTX))
(setf (callers-list '$DEEP-CONDI :setters) '(COVER-NORMALIZE))
(setf (callers-list 'GOOD-ONLY :setters) '(ORIENT-RULE IS-VALID-RULE IS-VALID-CONDI-RULE COVER-ORIENT-EQN))
(setf (callers-list 'NEW-M :setters) '(M-*-P M-AND-P))
(setf (callers-list 'SUBLIS :setters) '(COMPOSE2))
(setf (callers-list 'B-TERM :setters) '(BOOL-REWRITE-AT-ROOT NORM-BOOL-INNERMOST))
(setf (callers-list '#:LIS20951 :setters) '(TRACE-BUILDING))
(setf (callers-list '#:LIS23656 :setters) '(GET-SUBTYPES))
(setf (callers-list '#:VAL21135 :setters) '(CONSISTENT-PAIR))
(setf (callers-list '#:LIS21176 :setters) '(HANDLE-CONDITIONS))
(setf (callers-list '$BLOCKING-ON :setters) '(BLOCK-CHOICE EXT-AC RESTORE-REST-GLOBALS FLATTEN-RULES))
(setf (callers-list '#:VAL21640 :setters) '(KNUTH-BENDIX1))
(setf (callers-list 'EXPR :setters) '(SUBPAIR))
(setf (callers-list 'REST-OF-AND-ARGS :setters) '(REDUCE-XOR-TERM))
(setf (callers-list '#:LIS22271 :setters) '(WARN-STAT))
(setf (callers-list '*LOOP-END-TEST* :setters) '(PARSE-NO-BODY PARSE-LOOP))
(setf (callers-list '#:COLL21638 :setters) '(KNUTH-BENDIX1))
(setf (callers-list 'SYM :setters) '(POINTER-FOR-COLLECT GENNEWSYM IS-VALID-VAR GET_PNAME PUTPROP SYMEVAL))
(setf (callers-list '#:LIS20226 :setters) '(FLATTEN-EQN))
(setf (callers-list '#:COLL20990 :setters) '(SORT-OP-ARGS))
(setf (callers-list '#:LIS20940 :setters) '(FIRST-BOOLEAN-CONSTANT))
(setf (callers-list '#:POIN23740 :setters) '(X_REAL_VARS))
(setf (callers-list '#:LIS23472 :setters) '(EXPECTING-PREDICATES))
(setf (callers-list 'SLOOP::VALS :setters) '(LOOP-RETURN))
(setf (callers-list '#:LIS23573 :setters) '(NON-LINEAR-VARS))
(setf (callers-list '#:LIS20261 :setters) '(FLATTEN))
(setf (callers-list 'SCHEMES :setters) '(EXTEND-SCHEMES))
(setf (callers-list 'C :setters) '(SLOOP-SLOOP-MACRO MOVE-LHS-ARGS MANUAL-ORIENT ORDER-CTX TRY-TO-ORIENT-CONDI IS-SUBSEQUENCE AC-SUPERPOSITION))
(setf (callers-list '#:POIN21502 :setters) '(PREMISES-INSTANCES))
(setf (callers-list '#:POIN22917 :setters) '(DECIDE-DEFIN-MODE))
(setf (callers-list '#:COLL20258 :setters) '(HAS-ACOP))
(setf (callers-list 'NOTRACE :setters) '(START-PUSH-HISTORY PUSH-HISTORY))
(setf (callers-list '#:COLL23596 :setters) '(WELL-TYPED2))
(setf (callers-list 'ONE :setters) '(GET-ATOM2 ADD-END PUSH-END INSERT1 TRACE-FACTOR FACTORIBLE HANDLE-FACTOR FACTORIZATION))
(setf (callers-list 'S2 :setters) '(OPERATOR-ORDERING PSEUDO-TERM-ORDERING EXTEND-DEF-DOMAIN CDR-GREAT CAR-LESSP TOTAL-ORDER-2 TOTAL-ORDER TOTAL-ORDER-PC LRPO-RESULT COMPARE-TERM-RESULT COMPARE-ITEM-RESULT ORDER-PC-RES ORDER-PC ORDER-PC-SEQ COMPARE-SYMBOL COMP-TERMS SIZE-COMPARE TRY-TO-ORIENT TRY-TO-ORIENT-CONDI TRY-MAKE-EQUI MULT-UNION SET-DIFF2 SET-DIFF IS-SUBSEQUENCE ALPHALESSP MAKE-CYCLE-RULE ACO-HARDER ACO-HARD> CONDENSE-SEQUENCE CAR-LOWER))
(setf (callers-list '#:LIS21181 :setters) '(INDUC-SUP-TERM))
(setf (callers-list '#:COLL20908 :setters) '(SPECIAL-SUBST))
(setf (callers-list '#:LIS21550 :setters) '(PRE-INIT))
(setf (callers-list '#:LIS20703 :setters) '(PLAUSIBLE))
(setf (callers-list '#:POIN23000 :setters) '(GET-SCHEME-VARS))
(setf (callers-list '#:LIS21394 :setters) '(TR-TERM))
(setf (callers-list 'ASS-WO-$ANS :setters) '(MAKE-RULE-SIZE-ORDER))
(setf (callers-list '#:VAL23037 :setters) '(COMPATIBLE-PATTERN))
(setf (callers-list '#:LIS21670 :setters) '(REDUCE-POST-ASS))
(setf (callers-list '#:LIS22239 :setters) '(EXT-STATUS))
(setf (callers-list 'PRES :setters) '(FORM-SUBGOALS-FROM-PATTERNS SPLIT-PREMISES REDUCE-EQN-BY-ONE-RULE SUBST-PREMISES REDUCE-ARGS-BY-PREMISES REDUCE-BY-PREMISES PRES-SIZE MORE-VARS-PREMISE GET-PRES-OPS NEGATE-PREMISES NOFALSE-PREMISES PREMISES-ARE-TRUE REDUCE-REVERSE-PREMISES SIMPLIFY-PREMISES WRITE-F-PREMISES WRITE-PREMISES POLISH-PREMISES REDUCE-BY-ONE-AT-ROOT TRY-ONE-EXTRA-VAR-RULE BODY-PREMISES-SIZE CTX-DOMINANT-RULE ADD-RULE-COMPLETE PREMISES-INSTANCES ALL-PRE-VARS GET-PREMISES HANDLE-FACTOR FACTORIZATION REMOVE-IRRELEVANT4 REMOVE-IRRELEVANT3 REMOVE-IRRELEVANT2 REMOVE-IRRELEVANT MAKE-ONE-DOWN-HILL DOWN-HILL-ONE PRE-BIGGER-THAN-EQN HEAD-LESS-PRE MAKE-ONE-BUILD BUILD-EQN-FROM-PRES BUILD-EQUATION-FROM-PREMS CHECK-HEAD-ROLE PICK-OUT-PREMISE REMOVE-VAR-PRES RELEASE-PREMISES INDUC-ADD-RULE PRE-SUB-NONVARS WRITE-COMMENT-PREMISES))
(setf (callers-list '#:LIS22306 :setters) '(COMP-TERMS))
(setf (callers-list '#:COLL22082 :setters) '(SIMPLIFY-MY-EQ-TERM))
(setf (callers-list 'LVARS :setters) '(MAKE-NEW-RULE))
(setf (callers-list '#:LIS20670 :setters) '(UNIFY-WITH-AC))
(setf (callers-list 'SWITCH :setters) '(SELECTQ CASEQ))
(setf (callers-list 'NEWVEC :setters) '(GENERAL-BASIS-VECTORS))
(setf (callers-list 'TERMS2 :setters) '(CHECK-MISMATCH))
(setf (callers-list '#:POIN21939 :setters) '(NTIMES))
(setf (callers-list 'NODELIST :setters) '(SHOW-TREE-INFO WRITE-TREE))
(setf (callers-list '#:LIS21388 :setters) '(TR-CLOSURE))
(setf (callers-list '#:LIS20857 :setters) '(EQ-TR-MEMBER))
(setf (callers-list 'ARG-ELEMENTS :setters) '(FULL-DIO DIO-INITIALIZE))
(setf (callers-list '#:VAL20275 :setters) '(MULTI-COM))
(setf (callers-list '$AVOID-RULES :setters) '(CHECKEQ-NORMAL COVER-NORM-UNCONDI-EQN))
(setf (callers-list 'U_COMPAREFN :setters) '(INSERT-SORT-ARG INSERT-AND-REMOVE-PAIRS))
(setf (callers-list 'IT :setters) '(FIND-IN-ORDERED-LIST))
(setf (callers-list '#:LIS22234 :setters) '(FOPC-STRA))
(setf (callers-list '#:LIS21567 :setters) '(DELETE-EQN))
(setf (callers-list 'AVOID :setters) '(AVOID-COMMON-TERM AVOIDABLE DIVISIBLE-AC-CHECK DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK2 DIVISIBLE-CHECK))
(setf (callers-list '#:VAL23592 :setters) '(TYPE-ALL-VARS))
(setf (callers-list '#:POIN22162 :setters) '(REDUCE-AT-ROOT-BOOL))
(setf (callers-list '#:POIN20673 :setters) '(UNIFY-WITH-AC))
(setf (callers-list '#:POIN23747 :setters) '(X_REMOVE_HYP))
(setf (callers-list '#:POIN23179 :setters) '(STR-FORMULATE-SCHEME))
(setf (callers-list '#:LIM21940 :setters) '(CON-NUMS))
(setf (callers-list 'MLIS :setters) '(MULT-FORM MULT-MERGE))
(setf (callers-list '#:LIS22343 :setters) '(LIST-EQUATIONS))
(setf (callers-list '$INDUC-EQNS :setters) '(COVER-INDUC-PROVE INIT-COVER-PROVE INIT-PROVE-GLOBALS))
(setf (callers-list '#:LIS21296 :setters) '(SAME-LIST))
(setf (callers-list '#:LIS22294 :setters) '(EXPAND-EQ))
(setf (callers-list '#:LIS21122 :setters) '(FACTORIZATION))
(setf (callers-list 'LEFT-ARGS :setters) '(POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS REDUCE-*-TERM))
(setf (callers-list 'FILENAME2 :setters) '(OPEN-WRITE-FILE))
(setf (callers-list 'RULENO-C :setters) '(MOVE-LHS-ARGS))
(setf (callers-list '#:LIM22522 :setters) '(REST-ELEMENTS))
(setf (callers-list '#:LIS22748 :setters) '(GET-PRES-OPS))
(setf (callers-list '#:LIS22504 :setters) '(POLY-MATCH-TEST-REST-*-ARGS))
(setf (callers-list '#:LIS21603 :setters) '(READ-INPUT))
(setf (callers-list '#:COLL20244 :setters) '(MAKE-ASS-COM-OP))
(setf (callers-list 'LHS :setters) '(SWITCH_RULE_LR ONE-PATTERN COMPATIBLE-PATTERN IS-CROSS-OP SET-RIGHT-HYPO-ARGS REDUCE-BY-PREMISE-AT-ROOT SUPER-ITSELF-PRE SEPARATE-XOR-ARGS ADD-SIMPLIFY-OTHERS IS-CHARACTER-RULE MOVE-MONOS MOVE-LHS-ARGS IS-BIG-ENOUGH-RULE BOTH-ADD-PREDICATE IDEM-SUPER-COMMU IDEM-SUPERPOSITION PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL BODY-PREMISES-SIZE SPECIAL-SIZE MAKE-NEW-RULE FIRST-PROCESS-EQN AND-LHS-TRUE-RHS INDUC-SUBSUMED-BY APPLYSUBST-EQN PREMISE-INSTANCE REDUCE-EQ-EXACTLY MAKE-PRE MAKE-RULE CHANGE-LHS-RHS-CTX CHANGE-LHS-RHS CHANGE-LHS CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE IS-SYMMETRY-EQN IS-CYCLE-EQN UNIT-RULE PROCESS-AC-CRITICAL-PAIR INDUC-SUP-TERM INDUC-SUPERPOSITION FUNC-SUPERPOSITION HANDLE-COMMU-HYPO MAKE-ONE-DOWN-HILL COVER-NORM-UNCONDI-EQN MAKE-P-COMMUT-RULE NEW-RULE-FROM-ASSOC EQN2ASSERTION SUBST-EQN))
(setf (callers-list '$DEF-DOMAINS :setters) '(IS-PARTIAL-OP START-TEST INDUC-PROVE SYS-FLAG-INIT RESTORE-REST-GLOBALS))
(setf (callers-list '#:VAL20584 :setters) '(ACO-NOBIGT-PARTITION))
(setf (callers-list 'RULNO :setters) '(GET-RULE-LEVEL))
(setf (callers-list 'MAXSIZE :setters) '(MAKE-RULE-SIZE-ORDER))
(setf (callers-list '#:VAL21492 :setters) '(NORM-PROVE-ALL-EQNS))
(setf (callers-list 'L4 :setters) '(DELETE-EQN))
(setf (callers-list '#:LIS20586 :setters) '(ONE-KILL-ONE))
(setf (callers-list '$INSTANT :setters) '(INSTANT-CHOICE RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIS22447 :setters) '(INTRO-RULE))
(setf (callers-list '#:VAL22735 :setters) '(REMAKE-PREMISES))
(setf (callers-list '#:POIN22541 :setters) '(COMPACT-LAST-ELEMENTS))
(setf (callers-list '$IRREDU-NUM :setters) '(GET-TESTSET-QUASI TRACE-TESTSET))
(setf (callers-list 'VAL :setters) '(COLLATE-SLOOP-COLLECT =-SLOOP-FOR NEVER-SLOOP-COLLECT ALWAYS-SLOOP-COLLECT THEREIS-SLOOP-COLLECT COUNT-SLOOP-COLLECT MINIMIZE-SLOOP-COLLECT MAXIMIZE-SLOOP-COLLECT LOGXOR-SLOOP-COLLECT SUM-SLOOP-COLLECT LOOP-ADD-TEMPS PARSE-LOOP-COLLECT DESETQ DESETQ1 ASET PUTPROP))
(setf (callers-list '#:VAL23507 :setters) '(RPL-BY-TERMS2))
(setf (callers-list '#:VAL22894 :setters) '(SET-RIGHT-HYPO-ARGS))
(setf (callers-list 'G_OBJECT :setters) '(INSERT-SORT-ARG INSERT-AND-REMOVE-PAIRS))
(setf (callers-list 'TU2 :setters) '(MERGE-TWO-TUPLES FIND-MERGE-SIGMA))
(setf (callers-list 'R1 :setters) '(POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* PICK-ONE-UNMARKED MANUAL-PICK COMP-RULE NOT-IN-SET MANUAL-GOAL AC-SUP-TERM TRACE-AC-SUPERPOSITION PROCESS-NEW-AC-CP NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS AC-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 PURE-SUP-TERM SUP-TERM PURE-SUPERPOSITION FUNC-SUPERPOSITION))
(setf (callers-list '#:VAL23741 :setters) '(X_REAL_VARS))
(setf (callers-list 'ELSE-CLAUSE :setters) '(PARSE-LOOP-WHEN))
(setf (callers-list 'K :setters) '(SUMYMAX))
(setf (callers-list '#:LIS23175 :setters) '(STR-CHOOSE-ONE-SCHEME))
(setf (callers-list '#:LIS21954 :setters) '(GET-RULE))
(setf (callers-list 'TOP :setters) '(ACUNI UNIFY-WITH-AC ONE-COMPOSITION TAKE-OUT GET-SOLUTIONS FULL-DIO ALL-ONES SUB-NONVARS2))
(setf (callers-list 'EXT :setters) '(RULE-NAME))
(setf (callers-list '#:LIM21820 :setters) '(INCREMENT-POS))
(setf (callers-list '#:VAL21460 :setters) '(GET-ALL-PROPERTIES))
(setf (callers-list '#:LIS20994 :setters) '(IS-SORTED))
(setf (callers-list 'X2 :setters) '(CAR-NUM-ORDER SAME-PNAME CAR-LRPO<))
(setf (callers-list 'YEA :setters) '(DATE))
(setf (callers-list '#:POIN21817 :setters) '(NEXT-CHOICE))
(setf (callers-list '#:LIS22315 :setters) '(ORDER-PC-SEQ))
(setf (callers-list '#:POIN21562 :setters) '(DELETE-RULE))
(setf (callers-list 'ASSES :setters) '(BREAK-AT-OR))
(setf (callers-list 'SYM1 :setters) '(IS-SUBSEQUENCE))
(setf (callers-list '#:LIS21304 :setters) '(CYCLE-OUT-RED))
(setf (callers-list '$REDUCE-SYSTEM :setters) '(PROOF-METHODS REDUCE-SYSTEM-STR))
(setf (callers-list '$POST-ASS-LIST :setters) '(CRIT-PAIR-PROCESS POST-ASS-LIST))
(setf (callers-list '$PRIME-ACU :setters) '(PRIME-ACU-CHOICE))
(setf (callers-list 'CVAL :setters) '(DECOMPOSE-TERMS))
(setf (callers-list '#:LIS22314 :setters) '(ORDER-PC-SEQ))
(setf (callers-list 'DEF-RULE-OPS :setters) '(FLATTEN-RULES2 FLATTEN-RULES))
(setf (callers-list 'LS2 :setters) '(TWO-UNIFIER))
(setf (callers-list '#:VAL20482 :setters) '(SYMMETRY-NON-DELETABLE))
(setf (callers-list '#:LIS22972 :setters) '(INDUCTIBLE))
(setf (callers-list 'VARL :setters) '(NEW-TERM ADD-OPERATOR INVALID-RULE))
(setf (callers-list '#:LIS21486 :setters) '(PROVE-ALL-EQNS))
(setf (callers-list 'MON-SIZE :setters) '(M-*-P M-AND-P))
(setf (callers-list '#:VAL21183 :setters) '(INDUC-SUP-TERM))
(setf (callers-list 'SIGMAS :setters) '(INSTANCE-DELETE-CONDITION))
(setf (callers-list '#:LIS21715 :setters) '(CTX-DOMINANT-RULE))
(setf (callers-list '#:COLL23401 :setters) '(TOP-TERM))
(setf (callers-list '#:COLL20444 :setters) '(COMBINATE2))
(setf (callers-list '#:POIN22943 :setters) '(SUBS-OF-SAME-ROOT))
(setf (callers-list '$POST-SET :setters) '(INVALID-RULE RRL-AUX SAVE-RRL POSTPONE-OR-UNDO POSTPONE-IT FLATTEN-RULES))
(setf (callers-list '#:VAL22570 :setters) '(MAKE-RULE-INSTANCES))
(setf (callers-list 'HELPER :setters) '(DEF-LOOP-INTERNAL PARSE-LOOP-MAP PARSE-LOOP-MACRO LOOP-PARSE-ADDITIONAL-COLLECTIONS))
(setf (callers-list 'LAST-HELPER-APPLY-ARG :setters) '(PARSE-LOOP-MAP PARSE-LOOP-MACRO))
(setf (callers-list '*LOOP-EPILOGUE* :setters) '(PARSE-LOOP))
(setf (callers-list '#:POIN20741 :setters) '(BLOCK-CHECK))
(setf (callers-list '#:LIS22058 :setters) '(REDUCE-AT-ROOT))
(setf (callers-list 'HEAD :setters) '(ADD-PREMISE-END PRE-PROCESS-PRE-ASS ADD-ASSOCIATE-LIST RESTORE-EQUATION MAKE-ONE-BUILD BUILD-EQN-FROM-PRES CHECK-HEAD-ROLE RULE-SUBSUMED-PREMISES COVER-CONDI-NORM))
(setf (callers-list '#:LIM20396 :setters) '(GET-LCM-SOLNS))
(setf (callers-list '#:LIS20669 :setters) '(UNIFY-WITH-AC))
(setf (callers-list 'SUB :setters) '(COMPOSE2 RESOLVE COMP1 COMPOSE EMPTY-SUB POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* CTX-BAD-LUCK NORMAL-FORM-SUB ADD-BIND-TO-SUB AC-SUP-TERM INDUC-SUP-TERM PURE-SUP-TERM2 SUP-TERM2 PURE-SUP-TERM SUP-TERM REDUCE-BY-P-COMMUT ELIMINATE-SUB BUILDING CONTINUE-MAPPING RES1 ABSTRACTION))
(setf (callers-list '#:LIS20420 :setters) '(TAKE-OUT))
(setf (callers-list '#:LIS21078 :setters) '(REMOVE-IRRELEVANT2))
(setf (callers-list 'TMP1 :setters) '(NORM-BY-PREMISES PURE-NORM-OUTERMOST NORM-OUTERMOST PROCESS-AC-CRITICAL-PAIR))
(setf (callers-list '$INDUC :setters) '(UNCONDI-PROVE PROVE PROOF-METHODS RESTORE-REST-GLOBALS COVER-NORMAL-PROOF))
(setf (callers-list '#:LIS21169 :setters) '(SUP-TERM))
(setf (callers-list 'DEF-DOMAIN :setters) '(GET-DOWN GET-SKELETON2 GET-SKELETON SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE ONE-EXTENSIBLE-POINT DEFINING-DOMAIN EXTEND-SCHEMES GET-SCHEMES TEST-ONE-OP))
(setf (callers-list '#:LIS23720 :setters) '(PROOF-BY-HINT-TERM))
(setf (callers-list '#:POIN22994 :setters) '(GET-INDUC-VARS))
(setf (callers-list '#:VAL22852 :setters) '(ELEMENT-COMBINATION))
(setf (callers-list '#:LIS20247 :setters) '(FLATTEN-RULES))
(setf (callers-list '#:LIS21905 :setters) '(REAL-COLLECT-PRODUCTS))
(setf (callers-list '#:POIN23200 :setters) '(RESOLVE))
(setf (callers-list '#:LIM20416 :setters) '(GET-SOLUTIONS))
(setf (callers-list 'X1 :setters) '(NEW-ARGS BOTH-ADD-PREDICATE IDEM-SUPERPOSITION HAVE-COMMON CAR-NUM-ORDER DISPLAY-KB-STAT SAME-PNAME CAR-LRPO< ACO-HARDER ACO-HARD>))
(setf (callers-list 'MAXOP-POSI :setters) '(HEAD-LESS-PRE))
(setf (callers-list '#:POIN23043 :setters) '(SET-DEPEND-SCORES))
(setf (callers-list '#:LIS21032 :setters) '(NO-SUBSUMPTION))
(setf (callers-list '#:LIS21255 :setters) '(PROCESS-AC-UNIFIER))
(setf (callers-list '$COMMUTATIVE :setters) '(MAKE-ASS-COM-OP))
(setf (callers-list '#:COLL23483 :setters) '(IS-GROUND))
(setf (callers-list '#:LIS22567 :setters) '(MAKE-RULE-INSTANCES))
(setf (callers-list 'VAR-POSI :setters) '(SET-RIGHT-HYPO-ARGS))
(setf (callers-list '#:LIS21266 :setters) '(REMOVE-PAIRS-WITH))
(setf (callers-list '#:COLL23107 :setters) '(ONE-PATTERN))
(setf (callers-list 'NEGS :setters) '(BA-SIMP-OR BA-SIMP-AND))
(setf (callers-list 'NEW-ARGSX :setters) '(ACUNI ELIMCOM))
(setf (callers-list '#:POIN20979 :setters) '(ELIMINATE-SUB))
(setf (callers-list '#:COLL21796 :setters) '(MATCH-POSS))
(setf (callers-list 'REST-+-ARGS :setters) '(POLY-MATCH-+))
(setf (callers-list 'PATTERN :setters) '(ADD-PATTERNS REM-DUP-VARS REMOVE-DUP-VARS ONE-PATTERN))
(setf (callers-list 'SOME :setters) '(INVALID-INPUT-WARNING))
(setf (callers-list 'RSET :setters) '(WRITE-RULES LIST-RULES))
(setf (callers-list '#:LIS23140 :setters) '(REM-DUP-VARS))
(setf (callers-list '#:VAL21235 :setters) '(SET-UNIFY))
(setf (callers-list 'TERM1PRIME :setters) '(PARA-SUP-TERM2 PARA-SUP-TERM))
(setf (callers-list 'LABEL :setters) '(ADD_CHILD))
(setf (callers-list 'ID :setters) '(SEARCH_BY_ID SEARCH-TREE BREADTH-SEARCH X_FAILURE_HANDLER))
(setf (callers-list '#:LIS21000 :setters) '(COMMUNE-TERMS))
(setf (callers-list '$SEPARATORS :setters) '(PRE-INIT))
(setf (callers-list '#:LIS23283 :setters) '(DEF-DOMAIN-POINTS))
(setf (callers-list 'VAR1 :setters) '(ORDER-VARS))
(setf (callers-list 'A2 :setters) '(ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE))
(setf (callers-list '#:LIS23033 :setters) '(GET-RECURSIVE-RETURN-OP))
(setf (callers-list '#:VAL23620 :setters) '(WELL-TYPED3))
(setf (callers-list '#:COLL21841 :setters) '(MEMBER-TERM))
(setf (callers-list '$STRONG-INDUC :setters) '(COVER-STRONG-INDUC-HYPO))
(setf (callers-list '#:VAL22918 :setters) '(DECIDE-DEFIN-MODE))
(setf (callers-list 'DEFAULT-VALUE :setters) '(DEFAULT-FLAG))
(setf (callers-list 'LOCAL-MACROS :setters) '(PARSE-LOOP))
(setf (callers-list '#:COLL23543 :setters) '(SUB-OR-EQ-TERM))
(setf (callers-list '#:COLL21482 :setters) '(SPLIT-LHS-OR))
(setf (callers-list '#:COLL20583 :setters) '(ACO-NOBIGT-PARTITION))
(setf (callers-list 'NEW-M-SIZE :setters) '(M-*-P M-AND-P))
(setf (callers-list '#:POIN20245 :setters) '(MAKE-ASS-COM-OP))
(setf (callers-list 'RHS :setters) '(SWITCH_RULE_LR REDUCE-BY-PREMISE-AT-ROOT SUPER-ITSELF-PRE SEPARATE-XOR-ARGS ADD-SIMPLIFY-OTHERS REDUCE-BY-CHARACTER MOVE-MONOS WRITE-F-RHS WRITE-RHS ORIENT-RULE NORM-RHS PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL SPECIAL-SIZE MAKE-NEW-RULE FIRST-PROCESS-EQN AND-LHS-TRUE-RHS APPLYSUBST-EQN PREMISE-INSTANCE MAKE-PRE MAKE-RULE CHANGE-LHS-RHS-CTX CHANGE-LHS-RHS CHANGE-RHS IS-SYMMETRY-EQN UNIT-RULE PROCESS-AC-CRITICAL-PAIR HANDLE-COMMU-HYPO MAKE-ONE-DOWN-HILL COVER-NORM-UNCONDI-EQN MAKE-P-COMMUT-RULE NEW-RULE-FROM-ASSOC EQN2ASSERTION SUBST-EQN WRITE-COMMENT-RHS))
(setf (callers-list '#:POIN20445 :setters) '(COMBINATE2))
(setf (callers-list 'MARK :setters) '(SET-EQN-MARK MAKE-EQN))
(setf (callers-list 'NEWVARS :setters) '(ADD-PATTERNS))
(setf (callers-list '#:LIS20756 :setters) '(AUTO-ORIENT))
(setf (callers-list '#:LIS21560 :setters) '(DELETE-RULE))
(setf (callers-list '#:LIS20942 :setters) '(CHECK-BUILD-RULE))
(setf (callers-list 'RARGS :setters) '(MINI-EXPAND-EQ EXPAND-EQ))
(setf (callers-list '$INDUC-TERMS :setters) '(MAKE-ONE-SCHEME))
(setf (callers-list 'SOLN :setters) '(CARDINALITY SYMMETRY-NON-DELETABLE ADD-SOLN ONE-COMPOSITION TAKE-OUT FULL-DIO))
(setf (callers-list '#:POIN21341 :setters) '(USER-SELECTQ))
(setf (callers-list '#:VAL22302 :setters) '(MINI-EXPAND-EQ))
(setf (callers-list '#:LIS21339 :setters) '(USER-SELECTQ))
(setf (callers-list 'REDUCED :setters) '(NORM-MULT-MONOS NORM-SIGN-CHANGED-MONOS PURE-MIXED-REDUCE))
(setf (callers-list '#:POIN21961 :setters) '(COMMON-ELEMENTS))
(setf (callers-list 'POSS :setters) '(BA-SIMP-OR BA-SIMP-AND))
(setf (callers-list 'N :setters) '(STRUCTURE-INDUC-ON ABSTRACT-PROOF CLEARSCREEN MOVE_CURSOR RPL-BY-TERMS2 RPLNTHSUBT-IN-BY MAKE-TUPLES NEW-ARGS GET-SKELETON2 COMPATIBLE-PATTERN INDUCTIBLE SET-RIGHT-HYPO-ARGS REFUTE-RULE-INSTANCES REF-INSTANCE-SEEDS2 GET-INSTANCE-TERMS2 ELEMENT-COMBINATION REF-INSTANCE-SEEDS GET-INSTANCE-TERMS COMPACT-LAST-ELEMENTS SUPPORT-EQN NTIMES SUB1-MODULO-N ADD1-MODULO-N N-TUPLES GET-POSITION OCCUR-NUM DIVIDED-BY NEXT-CHOICE NRM-TIME DELETE-EQN NORM-PROVE-ALL-EQNS PROVE-ALL-EQNS PROVE-SPLIT-BOOL INSERT CNTH REMQ NTHSUBT CYCLE-REDUCE-AT-ROOT-2 TRACE-BUILDING BUILDING RES1 COMBINATE2 COMBINATE GET-LCM-SOLNS GENERAL-BASIS-VECTORS OP-POSITION))
(setf (callers-list '$SUFFICIENT :setters) '(SYS-FLAG-INIT))
(setf (callers-list '#:VAL20595 :setters) '(ACO-BIGT-PARTITION))
(setf (callers-list '#:POIN20909 :setters) '(SPECIAL-SUBST))
(setf (callers-list '#:POIN22164 :setters) '(REDUCE-AT-ROOT-BOOL))
(setf (callers-list 'OLD_STEP :setters) '(X_MANUAL_INDUC))
(setf (callers-list 'CHAR :setters) '(REDUCE-BY-CHARACTER MOVE-MONOS CHAR-HANDLER TYIPEEK READC CHAR-ASCII CODE REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT))
(setf (callers-list '#:LIS20241 :setters) '(FLAT-SORT-ARGS))
(setf (callers-list '#:VAL20233 :setters) '(FLATTEN-PREMISES))
(setf (callers-list '#:COLL20913 :setters) '(HASQUANT))
(setf (callers-list 'ODD-TYPE :setters) '(PARSE-LOOP-DECLARE LOOP-DECLARE-BINDING))
(setf (callers-list 'PRE :setters) '(STRONG-SUBGOAL-PROOFS INDUC-SUBGOAL-PROOFS REDUCE-EQN-BY-ONE-RULE OPS-OF-RULE SUBST-PREMISES IS-EQ-TRUE-PRE IS-EQ-FALSE-PRE PRES-SIZE MORE-VARS-PREMISE SUPER-ITSELF-PRE PRE-OPS PRE-VARS GET-PRES-OPS MARK-USED-PRE NEGATE-ONE-PRE NEGATE-PREMISES NOFALSE-PREMISES ONE-PREMISE-IS-TRUE PREMISES-ARE-TRUE REDUCE-REVERSE-PREMISES ADD-PREMISE-END ADD-SIMPLIFY-OTHERS MAKE-BETTER-PRES NORM-ONE-PRE SIMPLIFY-ONE-PRE PRE-PROCESS-PREMISES WRITE-ONE-PRE POLISH-PREMISES NON-DECREASING-SEQ MATCH-PREMISES OCCURS-IN-RULE BODY-PREMISES-SIZE MAKE-NEW-RULE CTX-DOMINANT-RULE IS-VALID-CONDI-RULE AND-LHS-TRUE-RHS APPLYSUBST-PRE PREMISE-INSTANCE IS-USED-PRE IS-HYPO-PRE GET-PRE-RHS GET-PRE-LHS INSTANCE-DELETE-CONDITION FACTORIBLE HANDLE-FACTOR TRACE-REMOVE-IRRELEVANT4 GOOD-UNIT-CLAUSE REMOVE-IRRELEVANT4 HANDLE-COMMU-HYPO TRACE-DROPPED-PREMISES REMOVE-IRRELEVANT2 MAKE-ONE-DOWN-HILL DOWN-HILL-ONE OR-CONDI-EQN BIG-PRE-INFO PRE-BIGGER-THAN-EQN HEAD-LESS-PRE RESTORE-EQUATION BUILD-EQN-FROM-PRES CHECK-HEAD-ROLE PICK-OUT-PREMISE SIMPLIFY-ALL-PREMISES RULE-SUBSUMED-PREMISES ELIMINATE-SUB ELIMINABLE-TERMS RELEASE-PREMISES SIMP-AND-SIMP AND-OF-MONOMIALS FLATTEN-PREMISES PRE-SUB-NONVARS))
(setf (callers-list 'FIRST-PART :setters) '(GET-TERM))
(setf (callers-list '#:POIN21073 :setters) '(DOWN-HILL-ONE))
(setf (callers-list 'TMP2 :setters) '(PROCESS-AC-CRITICAL-PAIR))
(setf (callers-list '#:LIS21407 :setters) '(PARAMODULATE))
(setf (callers-list '#:POIN23091 :setters) '(FORM-PATTERNS-SINGLE))
(setf (callers-list '$MARK_RULE_STR :setters) '(INT-RULE-STRAT RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIS23079 :setters) '(DECIDE-MERGE-CONJ))
(setf (callers-list '$HISTORY1 :setters) '(MANUAL-ORIENT ASK-USER RRL-AUX PUSH-HISTORY START-HISTORY POSTPONE-OR-UNDO))
(setf (callers-list 'VARC :setters) '(ADD-OPERATOR))
(setf (callers-list '#:COLL20378 :setters) '(GENERAL-BASIS-VECTORS))
(setf (callers-list '$GUEST-EQN :setters) '(INIT-PROVE-GLOBALS REFUTE-EQN PROVE LINEAR))
(setf (callers-list 'TYPE-CONS :setters) '(STR-CHOOSE-ONE-SCHEME))
(setf (callers-list '#:LIS23724 :setters) '(SPLIT-PREMISES))
(setf (callers-list '$OP_RULES :setters) '(ADD-RULE-COMPLETE PURE-ADD-RULE SAVE-RRL))
(setf (callers-list 'EQN-ID :setters) '(X_FAILURE_HANDLER))
(setf (callers-list 'RHS-ROOT1 :setters) '(MAKE-PAIRS))
(setf (callers-list '#:VAL20264 :setters) '(FLATTEN))
(setf (callers-list '#:LIS21067 :setters) '(OR-CONDI-EQN))
(setf (callers-list 'VARS-EQNS :setters) '(IS-PREVIOUS-INDUC-EQN))
(setf (callers-list 'EX2 :setters) '(MAKE-PAIRS))
(setf (callers-list '$REDUCE-BOUND :setters) '(NORMALIZE-BOUND))
(setf (callers-list '#:VAL20604 :setters) '(ACO-RPOMULT>))
(setf (callers-list '#:POIN23138 :setters) '(REMOVE-DUP-VARS))
(setf (callers-list 'COMMAND :setters) '(LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP-COLLECT PARSE-LOOP-INITIALLY LOOP-COLLECT-KEYWORD-P))
(setf (callers-list '#:POIN22675 :setters) '(STATUS-CANDIDATES))
(setf (callers-list 'NEWS :setters) '(RPL-BY-TERMS2 NEW-TOP-TERMS NEW-ARGS ADD-ONE-DEPTH GET-TESTSET-QUASI TRACE-TESTSET NEGATE-PREMISES MAKE-BETTER-PRES))
(setf (callers-list '$REDUCE-TIMES :setters) '(NORM-BOOL-INNERMOST CYCLE-CHECK PURE-NORM NORM-TERM))
(setf (callers-list '#:LIM23642 :setters) '(GET-CODOMAIN-TYPES))
(setf (callers-list '#:LIS23031 :setters) '(HAVE-MANY-RECURSIVE-EQNS))
(setf (callers-list 'AUTO :setters) '(NEW-TERM))
(setf (callers-list '#:VAL22614 :setters) '(NORM-POLY))
(setf (callers-list '#:POIN20217 :setters) '(PRE-SUB-NONVARS))
(setf (callers-list '$TRACE-PROOF :setters) '(REFUTE-EQN PROVE PROOF-METHODS RESTORE-REST-GLOBALS))
(setf (callers-list 'RES-ARGS :setters) '(M-*-M M-XOR-P M-AND-M))
(setf (callers-list '#:LIS21116 :setters) '(RELATED-VARS2))
(setf (callers-list '#:COLL20956 :setters) '(ELIMINABLE-TERMS))
(setf (callers-list 'NUMS :setters) '(SUB1-MODULO-N ADD1-MODULO-N WRITE-SEQ-NUM LOOK-AT-PAIR-AND LOOK-AT-PAIRS GET-ALL-RULE-NUMS))
(setf (callers-list 'TY1 :setters) '(GET-SUBTYPES IS-SUBTYPE TYPE-COHERE ADD-SUGG-TYPE1 ADD-SUGG-TYPE EXT-TYPE-RELATION READ-TYPE-RELATION))
(setf (callers-list '#:LIS21030 :setters) '(COVER-CONDI-NORM))
(setf (callers-list '#:VAL23006 :setters) '(CHOOSE-MAX-SCORE))
(setf (callers-list '$INVALID-RULES :setters) '(ADD-CRIT-RULE SAVE-RRL))
(setf (callers-list '#:LIS20461 :setters) '(DIO2))
(setf (callers-list '#:COLL20917 :setters) '(GET-SKO-FUNC))
(setf (callers-list '#:LIS23736 :setters) '(X_NAME))
(setf (callers-list '#:COLL23746 :setters) '(X_REMOVE_HYP))
(setf (callers-list 'RESULT :setters) '(SEARCH_BY_EQN SEARCH_BY_ID SEARCH-TREE BREADTH-SEARCH X_REMOVE_HYP COVER-PROOF-PROCESS X_MANUAL_INDUC X_FAILURE_HANDLER CHECK_AND_ADD X_AUTO_NORMAL X_CHOOSE_ONE_RULE SWITCH_RULE_LR X_HYPOTHESIS X_ONE_RULE X_NORMAL X_INDUC MANUAL_REDUCE IN-ARRAY-SLOOP-FOR PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-COLLECT PARSE-LOOP-DO REMOVE-SUBSUMED-PATTERNS ADD-PATTERNS REM-DUP-VARS CHOOSE-HIGHEST-TERM MERGE-DUPLICATE CHOOSE-LEAST-COVER INDUC-AC-SUBS INDUC-SUBS-TERM INDUC-PROVE ONE-PRESENTATIVE MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC VARS-ONLY LISTARRAY ALLSYM COLLECT-IF CYCLE-PAIRS PURE-SUP-TERM2 SUP-TERM2 GET-ALL-RULE-NUMS HANDLE-COMMU-HYPO SET-UNIFICATION))
(setf (callers-list '#:LIS21025 :setters) '(NORM-BUT-ROOT))
(setf (callers-list 'HALF :setters) '(HALF-ONES))
(setf (callers-list '#:LIS23369 :setters) '(ADD-ONE-DEPTH))
(setf (callers-list 'UNI :setters) '(SIZE-UNI PROCESS-AC-UNIFIER PROCESS-AC-CRITICAL-PAIR RES1 UNIFY UNIFIER))
(setf (callers-list '#:LIS22969 :setters) '(INDUC-AC-SUBS))
(setf (callers-list '#:VAL21008 :setters) '(COMMUNE-TERMS2))
(setf (callers-list '#:POIN22734 :setters) '(REMAKE-PREMISES))
(setf (callers-list 'MS2 :setters) '(MULT-SORT-INSERT))
(setf (callers-list 'REDUCIBLE :setters) '(NORM-AND-ARGS NORM-OR-ARGS NORM-XOR-TERM))
(setf (callers-list '#:LIS23696 :setters) '(INDUC-SUBGOAL-PROOFS))
(setf (callers-list '#:LIS22143 :setters) '(PURE-REWRITE-AT-ROOT))
(setf (callers-list 'VAR-TYPE :setters) '(WELL-TYPED-VAR))
(setf (callers-list '#:LIS20973 :setters) '(IS-FREE-TERM))
(setf (callers-list '#:COLL21723 :setters) '(BODY-PREMISES-SIZE))
(setf (callers-list '#:LIS23774 :setters) '(PEQNS))
(setf (callers-list '$SUCC-EQNS :setters) '(COVER-INDUC-PROVE INIT-COVER-PROVE INIT-PROVE-GLOBALS))
(setf (callers-list '#:LIS23081 :setters) '(CHOOSE-HIGHEST-TERM))
(setf (callers-list 'YA :setters) '(EXTEND-DOM-ARGS MATCH-POSS DECOMPOSE-TERMS EQUIV PLAUSIBLE UNIFY-WITH-AC ACO-LRPO=))
(setf (callers-list '#:LIS21231 :setters) '(PROCESS-NEW-AC-CP2))
(setf (callers-list '#:LIS22100 :setters) '(EACH))
(setf (callers-list '#:LIS21500 :setters) '(PREMISES-INSTANCES))
(setf (callers-list '#:LIS21224 :setters) '(PROCESS-NEW-AC-CP))
(setf (callers-list '#:POIN22548 :setters) '(NONLINEAR-VARS-UNDER-*))
(setf (callers-list 'VAR-TERMS :setters) '(CHOOSE-LEAST-COVER))
(setf (callers-list '#:POIN20904 :setters) '(REMOVE-QUAN-ARGS))
(setf (callers-list '#:LIS22706 :setters) '(SIMPLIFY-PREMISES))
(setf (callers-list '#:COLL21827 :setters) '(DIVIDED-BY))
(setf (callers-list '#:LIS22535 :setters) '(POLY-SUPER-AT-*-1))
(setf (callers-list 'PORT-BUFFER :setters) '(SUCC-END-INDUC CONSTRUCTORS-CHECK IS-PARTIAL-OP CHOOSE-CONSTRUCTORS PROVE OPEN-WRITE-FILE ASK-USER QUERY-ADD-EQN))
(setf (callers-list 'LLS :setters) '(REAL-COLLECT-PRODUCTS PROPER-PRODUCT-LISTS))
(setf (callers-list 'VARS-ARGSX :setters) '(MULTI-COM))
(setf (callers-list '#:VAL22079 :setters) '(REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list '#:COLL22148 :setters) '(NORM-XOR-TERM))
(setf (callers-list '#:COLL21377 :setters) '(TR-FIND))
(setf (callers-list '#:LIS21155 :setters) '(CRITPAIRS))
(setf (callers-list '#:POIN21867 :setters) '(SPLIT-ALIST))
(setf (callers-list 'M2 :setters) '(POLY-LRPO PRED-CRITICAL-PAIR MULT-DIFF2 MULT-DIFF MULT-SORT-INSERT MULT-INSERT UNIFY-WITH-AC ALL-ONES))
(setf (callers-list 'XA :setters) '(PEQNS CLEAN-INDHYP REWRITE-ONCE-BY-HYPO SUCC-END-INDUC X_REAL_VARS X_NAME DEBUG-MSG COVER-SET-SCHEME XIN-MENU X_REDUCE-BY-ONE-RULE WELL-TYPED-EQN GET-SUBTYPES ADD-SUGG-TYPE1 COMPLETE-WELL-TYPED WELL-TYPED2 TYPE-ALL-VARS ONE-TYPE-ALL-VARS SUBS-ARE-PRIMITIVE PRIMITIVE-SUBST IS-LIMITED RENAME-VAR1 RPLAT-IN-BY RPLNTHSUBT-IN-BY IS-GROUND EXPECTED EXPECTING-PREDICATES EXPECTING-FUNCTIONS QUASI-REMOVER SUB-QUASI-REDUCIBLE MAKE-TUPLES TOP-TERM NEW-TOP-TERMS GET-TESTSET-QUASI BASIC-TERM RULE-DESTROYABLE GET-SKELETON2 EXTEND-DOM-ARGS DEF-DOMAIN-POINTS DEFINING-DOMAIN COMPOSE1 REMOVE-SUBSUMED-PATTERNS MERGE-TWO-PATTERNS CHOOSE-HIGHEST-TERM DECIDE-MERGE-CONJ DEPENDED-OP DEFINING-POSITIONS PICK-MAX-SCORE-OP GET-SCHEME-VARS GET-INDUC-VARS INDUC-SUBS-OF-EQN SUBS-OF-SAME-ROOT DECIDE-DEFIN-MODE COVER-SETS COLLECT-CDR-WITH-SAME-CAR REF-INSTANCE-SEEDS2 GET-INSTANCE-TERMS2 ELEMENT-COMBINATION NEGATE-EQN SEPARATED FAIL-END-INDUC REDUCE-ARGS-BY-PREMISES REMAKE-PREMISES SIMPLIFY-PREMISES FIRST-PROCESS-PREMISES ADD-SUGG1 PRINT-SUGG-INFO OK-PREV-RULES EQUIV-OPS OPS-EQUIV-TO REDUCE-MONO NORM-SIGN-CHANGED-MONOS IS-HOMOGENEOUS-TERM REDUCE-BY-CHARACTER POLY-LRPO MOVE-MONOS MAKE-RULE-INSTANCES MOVE-LHS-ARGS ELES-MORE-THAN-1 NONLINEAR-VARS-UNDER-* POLY-SUPER-DISTRIBUTION COMPACT-LAST-ELEMENTS FIRST-N-ELEMENTS POLY-MATCH-TEST-REST-*-ARGS MAN-PICK-2ND-RULE CHOOSE-BY-HAND INTRO-RULE INDUC-PICK-UNMARK SHOW-MESSAGE HELP-FILE WRITE-SIGMA WRITE-DETAIL-RULE PRINT-HEAD PRINT-ATOMS WRITE-F-PREMISES WRITE-PREMISES WRITE-TERM-SIMPLE WRITE-TERM-BOOL WRITE-ASSERTIONS LIST-ASSERTIONS WRITE-RULES LIST-RULES ORDER-PC-SEQ COMP-TERMS SIZE-COMPARE MAKE-CRIT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN ADD-EQU EXT-CONSTRUCTOR CLEAN-OPS NON-CONSTANTS GET-CONSTANTS SAME-ARITY EXIST-OP GENNEWSYM PURE-NORM-WITH-BIN NORM-WITH-BIN PURE-OUTRED1 OUTRED1 EACH PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE SIMPLIFY-MY-EQ-TERM TRY-ONE-EXTRA-VAR-RULE REWRITE-AT-ROOT MULT-FORM MULT-DIFF2 MULT-DIFF MULT-UNION MULT-SORT-MERGE MULT-MERGE IS-SUBLIST LIST-DIFF IS-SUBSET SET-DIFF2 SET-DIFF COMMON-ELEMENTS LONGEST-LIST INSERT-LIST REAL-COLLECT-PRODUCTS PROPER-PRODUCT-LISTS GET-POSITION PICKOUT IS-AN-INSTANCE MEMBER-TERM OCCUR-NUM MATCH-POSS DECOMPOSE-TERMS CHECK-MISMATCH MAKE-RULE-SIZE-ORDER MAKE-RULE-FROM-ASS CTX-DOMINANT-RULE RPOMULT EQUIV-LIST EQUIV REDUCE-POST-ASS ADD-RULE-LINEAR REDUCE-OTHER-RULES ADD-RULE-COMPLETE PURE-ADD-RULE PURE-KNUTH-BENDIX2 KNUTH-BENDIX2 PRINT-CHOICE-MESSAGE READ-OP-DECLARATION DISPLAY-OP-STATS DISABLE-RULES-AUX DELETE-RULE START-UP R2E INDUC-SUBSUMED-BY SEE WRITE-SEQ-NUM IS-PREVIOUS-INDUC-EQN IS-FAILED-INDUC-EQN NORM-PROVE-ALL-EQNS PROVE-ALL-EQNS RENAME-EQN-RULE SAVE-RRL MY-COPYLIST PARA-SUP-TERM EQ-FIND PROCESS-DEL-RULE USER-SELECTQ CYCLE-PAIRS IS-SYMMETRY-RULE CYCLE-REDUCE-AT-ROOT-2 CYCLE-OUT-RED CYCLE-REDUCE-OTHERS SAME-LIST PROCESS-AC-UNIFIER SET-UNIFY PURE-SUP-TERM SUP-TERM PURE-CRITPAIRS CRITPAIRS RULE-NUMS-FROM-SOURCE CONSISTENT-PAIR TRACE-REMOVE-IRRELEVANT4 BUILD-EQUATION-FROM-PREMS COMMUNE-TERMS2 COMMUNE-TERMS P-COMMUT-REDUCE-OTHERS REDUCE-BY-P-COMMUT ONE-ELIM-SUBTERM REMOVE-VAR-PRES TRACE-BUILDING CHECK-BUILD-RULE FIRST-BOOLEAN-CONSTANT HAS-HINT-TERM HAVE-BOOLEAN-CONSTANT FIRST-SPEC-TERM FIND-SPECIAL-TERM INDUC-REDUCE-OTHERS-AUX INDUC-REDUCE-OTHER-RULES GET-SKO-FUNC HASQUANT SPECIAL-SUBST REMOVE-QUAN-ARGS SKOLEMIZE SUBSTVARFOR DECANON-XOR CANONICALIZE NOT-AUTO-PREV-RULES DISPLAY-UNIFY TWO-UNIFIER PLAUSIBLE UNIFY-WITH-AC ACO-EQUIV-LIST ACO-LRPO= ACO-RPOMULT>= ACO-RPOMULT> BIGT-ONE-KILL-ONE TWO-KILL-ONE ONE-KILL-ONE COMBINATE TAKE-OUT FIND-BASIS-VECTORS CONDENSE-SEQUENCE LOOSE-SYM-SEQUENCE FLATTEN-POST-ASS FLATTEN-RULES2 FLATTEN-RULES OP-POSITION WRITE-COMMENT-PREMISES))
(setf (callers-list '$STEP-DEEP :setters) '(RESTORE-REST-GLOBALS))
(setf (callers-list 'EQ :setters) '(KNUTH-BENDIX1 ORDER-EQNS))
(setf (callers-list '#:LIS20223 :setters) '(FLATTEN-RULE))
(setf (callers-list 'ONEWAY :setters) '(SUGG-PREC TRY-SUGG-PREC PRINT-SUGG-INFO ASK-USER TRY-TO-ORIENT2 TRY-TO-ORIENT TRY-TO-ORIENT-CONDI INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE GET-CLAUSE GET-EQUATION AUTO-ORIENT))
(setf (callers-list '$NO-HISTORY :setters) '(UNDO-STRATEGY))
(setf (callers-list '#:VAL21020 :setters) '(COVER-NORM-ORDER))
(setf (callers-list '#:POIN23285 :setters) '(DEF-DOMAIN-POINTS))
(setf (callers-list '#:COLL23574 :setters) '(NON-LINEAR-VARS))
(setf (callers-list '#:LIS20898 :setters) '(SKOLEMIZE))
(setf (callers-list '#:VAL22712 :setters) '(PREMISES-ARE-TRUE))
(setf (callers-list '#:COLL20752 :setters) '(AUTO-KB))
(setf (callers-list '#:LIS22677 :setters) '(PRINT-SUGG-INFO))
(setf (callers-list '#:VAL20816 :setters) '(SIMPLIFY-ALMOST-FLAT))
(setf (callers-list 'UNITY :setters) '(DIVISIBLE-AC-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK2 DIVISIBLE-CHECK))
(setf (callers-list '#:VAL23524 :setters) '(IS-SUBTERM))
(setf (callers-list '#:LIS20643 :setters) '(ACO-LRPO=))
(setf (callers-list '#:COLL22290 :setters) '(MINI-HALF-CANONICALIZE-AND-EXPAND-EQ))
(setf (callers-list '*LOOP-FORM* :setters) '(SLOOP-SLOOP-MACRO PARSE-LOOP-MACRO LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP))
(setf (callers-list '#:LIS22599 :setters) '(POLY-LRPO))
(setf (callers-list '#:VAL23180 :setters) '(STR-FORMULATE-SCHEME))
(setf (callers-list '#:VAL20800 :setters) '(DECANON-XOR))
(setf (callers-list '#:POIN22301 :setters) '(MINI-EXPAND-EQ))
(setf (callers-list 'BAD :setters) '(NOT-AUTO-PREV-RULES IS-BAD-SUGG TAKE-OUT))
(setf (callers-list '#:POIN22851 :setters) '(ELEMENT-COMBINATION))
(setf (callers-list '#:COLL22733 :setters) '(REMAKE-PREMISES))
(setf (callers-list '#:LIS21138 :setters) '(TRACE-INCONSISTENCY))
(setf (callers-list 'EQNS :setters) '(FAIL-END-INDUC WRITE-EQNS LIST-EQUATIONS READ-EQNS RESET-RRL INDUC-SUBSUMED-BY IS-FAILED-INDUC-EQN NORM-PROVE-ALL-EQNS PROVE-ALL-EQNS PROVE-SPLIT-BOOL ELIMINATE-SUB TRACE-BUILDING))
(setf (callers-list '#:LIS21036 :setters) '(RULE-SUBSUMED-PREMISES))
(setf (callers-list 'STRING-LIST :setters) '(HELP-FILE))
(setf (callers-list 'COM :setters) '(LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-NO-BODY))
(setf (callers-list '#:LIS22012 :setters) '(DEMULT-FORM))
(setf (callers-list '#:VAL22287 :setters) '(HALF-CANONICALIZE-AND-EXPAND-EQ))
(setf (callers-list '#:VAL23671 :setters) '(WELL-TYPED-EQN))
(setf (callers-list '#:LIS22546 :setters) '(NONLINEAR-VARS-UNDER-*))
(setf (callers-list '#:VAL22907 :setters) '(IS-CROSS-OP))
(setf (callers-list 'J :setters) '(COMPACT-LAST-ELEMENTS CON1-NUMS INCREMENT-POS LISTARRAY FILLARRAY CARDINALITY SUMYMAX))
(setf (callers-list 'VARS1 :setters) '(REMOVE-IRRELEVANT4 LRPO-PREMISES))
(setf (callers-list '#:LIS21544 :setters) '(INDUC-SUBSUMED-BY))
(setf (callers-list '$CASE-COND :setters) '(COVER-CASE-COND-FLAG))
(setf (callers-list '$ANS-RULE :setters) '(LINEAR))
(setf (callers-list 'SHORT :setters) '(BRT))
(setf (callers-list '*LOOP-BODY* :setters) '(SLOOP-SLOOP-MACRO PARSE-LOOP1 PARSE-LOOP))
(setf (callers-list '#:COLL23387 :setters) '(NEW-ARGS))
(setf (callers-list '*LOOP-COLLECT-VAR* :setters) '(PARSE-LOOP))
(setf (callers-list '#:VAL22481 :setters) '(P-*-M))
(setf (callers-list '#:VAL21519 :setters) '(APPLYSUBST-PRE))
(setf (callers-list 'RETURN-OP :setters) '(ENCOURAGE CHOOSE-LEAST-COVER))
(setf (callers-list '#:LIS23588 :setters) '(TYPE-ALL-VARS))
(setf (callers-list 'EQN0 :setters) '(COVER-PROOF-PROCESS PRINT-NORMALIZED-EQN COVER-NORMAL-PROOF QUERY-ADD-EQN))
(setf (callers-list '#:LIS20726 :setters) '(TWO-UNIFIER))
(setf (callers-list '#:POIN22716 :setters) '(NOFALSE-PREMISES))
(setf (callers-list '#:VAL23366 :setters) '(BASIC-TERM))
(setf (callers-list '#:POIN21893 :setters) '(PRODUCT-LISTS))
(setf (callers-list 'XB :setters) '(TYPE-ALL-VARS ONE-TYPE-ALL-VARS NORM-SUB SEPARATED POLY-LRPO IS-BIG-ENOUGH-RULE ORDER-PC-SEQ SIZE-COMPARE OCCUR-NUM EQUIV-LIST PURE-LRPO REDUCE-POST-ASS IS-SYMMETRY-RULE CONSISTENT-PAIR IS-BLOCKED BIGT-TWO-KILL-ONE BIGT-ONE-KILL-ONE ACO-BIGT-PARTITION TWO-KILL-ONE ONE-KILL-ONE ACO-NOBIGT-PARTITION ACO-LPRO>= ACO-LRPO> FLATTEN-POST-ASS))
(setf (callers-list 'FAST-FLAG :setters) '(MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC MATCH-SET SET-UNIFICATION))
(setf (callers-list '#:POIN21234 :setters) '(SET-UNIFY))
(setf (callers-list 'L_LIST :setters) '(INSERT-SORT-ARG INSERT-AND-REMOVE-PAIRS))
(setf (callers-list '#:LIS23165 :setters) '(MERGE-TWO-TUPLES))
(setf (callers-list '#:VAL21034 :setters) '(NO-SUBSUMPTION))
(setf (callers-list '#:COLL22983 :setters) '(HAVE-INDUCTIVE-VARS))
(setf (callers-list '#:LIS21879 :setters) '(NON-DECREASING-SEQ))
(setf (callers-list '#:LIS22016 :setters) '(LINEAR))
(setf (callers-list '#:LIS23565 :setters) '(PRIMITIVE-SUBST))
(setf (callers-list 'SCH :setters) '(STRUCTURE-INDUC-ON))
(setf (callers-list 'THIS-CASE :setters) '(PARSE-ONE-WHEN-CLAUSE))
(setf (callers-list '#:VAL23501 :setters) '(RPLAT-IN-BY))
(setf (callers-list '#:VAL22098 :setters) '(POLISH-PREMISES))
(setf (callers-list '#:COLL22021 :setters) '(MANUAL-GOAL))
(setf (callers-list '#:LIS23182 :setters) '(SIZE-UNI))
(setf (callers-list '#:POIN22767 :setters) '(PRES-SIZE))
(setf (callers-list '#:LIS22006 :setters) '(MULT-FORM))
(setf (callers-list '#:COLL23441 :setters) '(QUASI-REDUCIBLE))
(setf (callers-list '#:LIS22018 :setters) '(PICK-GOAL))
(setf (callers-list 'OP_RULES :setters) '(RENAME-OP-RULES))
(setf (callers-list '#:LIS20653 :setters) '(FIND-OUT-BIG-EQ-SUBS))
(setf (callers-list '#:LIS21967 :setters) '(SET-DIFF2))
(setf (callers-list '#:LIS22710 :setters) '(PREMISES-ARE-TRUE))
(setf (callers-list '#:LIS22757 :setters) '(SUPER-ITSELF-PRE))
(setf (callers-list '#:LIS20749 :setters) '(WRITE-COMMENT-PREMISES))
(setf (callers-list 'VARS-LIST :setters) '(RELATED-VARS2))
(setf (callers-list '#:POIN23005 :setters) '(CHOOSE-MAX-SCORE))
(setf (callers-list '#:LIS23419 :setters) '(MAKE-TUPLES))
(setf (callers-list '#:COLL22993 :setters) '(GET-INDUC-VARS))
(setf (callers-list '#:LIS21313 :setters) '(CYCLE-REDUCE-AT-ROOT-2))
(setf (callers-list '$NEWOP-FIRST :setters) '(OPERATOR-STRA))
(setf (callers-list '#:LIS20227 :setters) '(FLATTEN-EQN))
(setf (callers-list '#:VAL21866 :setters) '(SPLIT-ALIST))
(setf (callers-list '#:POIN21483 :setters) '(SPLIT-LHS-OR))
(setf (callers-list '#:LIM21870 :setters) '(IS-SUBSEQUENCE))
(setf (callers-list '#:LIS23493 :setters) '(RPLNTHSUBT-IN-BY))
(setf (callers-list 'VAR2 :setters) '(ORDER-VARS CHECK-MISMATCH CAN-HAVE-NEW-OP))
(setf (callers-list '#:LIS23177 :setters) '(STR-FORMULATE-SCHEME))
(setf (callers-list '#:LIS23280 :setters) '(DEFINING-DOMAIN))
(setf (callers-list '#:VAL23061 :setters) '(OPS-OF-RULE))
(setf (callers-list '#:VAL21873 :setters) '(IS-SUBSEQUENCE))
(setf (callers-list '#:LIS22289 :setters) '(MINI-HALF-CANONICALIZE-AND-EXPAND-EQ))
(setf (callers-list '#:COLL22251 :setters) '(EXT-CONSTRUCTOR))
(setf (callers-list '#:POIN23188 :setters) '(COMPOSE))
(setf (callers-list '#:LIS22089 :setters) '(REDUCE-BY-ONE-RULE))
(setf (callers-list 'KEY :setters) '(CHOOSE-STR))
(setf (callers-list '#:LIS23581 :setters) '(ONE-TYPE-ALL-VARS))
(setf (callers-list 'NUM :setters) '(STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS REDUCTION-PROOF FORM-SUBGOALS-FROM-PATTERNS SPLIT-PREMISES TRACE-GENERATED-RESULT COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-SET-SCHEME ABSTRACT-PROOF INDUC-SUBGOAL-PROOFS HEAD_OF_MANUAL_INDUC X_MANUAL_INDUC HEAD_OF_FAILURE_HANDLER X_FAILURE_HANDLER CHECK_AND_ADD X_AUTO_INDUC X_AUTO_NORMAL X_AUGMENT X_ONE_RULE X_NORMAL MENU_FOR_NORMAL MENU_FOR_MANUAL_REDUCE X_INDUC X_GENERAL X_SPLIT MANUAL_REDUCE DEFINING-POSITIONS REDUCE-BY-HOMO-RULES NORM-SIGN-CHANGED-MONOS REDUCE-BY-CHARACTER CHANGE-MONO-SIGN RULE-NAME PRINT-HEAD LIST-ASSERTIONS GET-RULE REM-ARGS ELIM-BIN WRITE-SEQ-EQN IS-PREVIOUS-INDUC-EQN IS-FAILED-INDUC-EQN TRACE-SUCC-PROVE NORM-PROVE-ALL-EQNS PROVE-ALL-EQNS PROVE-SPLIT-BOOL DELETE0 REMOVE0 INC CHANGE-RULENO PICK-OUT-RULE GET-ALL-RULE-NUMS TRACE-INCONSISTENCY PRINT-NORMALIZED-EQN REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT TRACE-BUILDING BUILDING END-AUTO-ORDER IS-BAD-SUGG SYM-ARG-POSITIONS DIO2 DIO))
(setf (callers-list '#:LIS23482 :setters) '(IS-GROUND))
(setf (callers-list '$PROC_TIME :setters) '(INDUC-PROVE PROVE))
(setf (callers-list '$OP_GOAL_RULES :setters) '(LINEAR ADD-RULE-LINEAR))
(setf (callers-list '#:LIS22498 :setters) '(REDUCE-+-TERM))
(setf (callers-list '#:COLL23004 :setters) '(CHOOSE-MAX-SCORE))
(setf (callers-list 'LEADER :setters) '(SHOW-TREE))
(setf (callers-list '#:POIN20753 :setters) '(AUTO-KB))
(setf (callers-list '#:COLL22674 :setters) '(STATUS-CANDIDATES))
(setf (callers-list '#:LIS22854 :setters) '(GET-INSTANCE-TERMS2))
(setf (callers-list '#:LIS21452 :setters) '(SAVE-RRL))
(setf (callers-list '#:POIN23644 :setters) '(GET-CODOMAIN-TYPES))
(setf (callers-list '$AUX-RSET :setters) '(SAVE-RRL PURE-CRITPAIRS CRITPAIRS))
(setf (callers-list '#:LIS22201 :setters) '(NON-CONSTANTS))
(setf (callers-list 'NEWVAR :setters) '(SKOLEMIZE-AWAY-QUANTS))
(setf (callers-list '#:POIN21128 :setters) '(HANDLE-FACTOR))
(setf (callers-list '#:COLL21687 :setters) '(EQUIV))
(setf (callers-list 'SUBDIR :setters) '(FCLOAD CLOAD2 CLOAD BLOAD FLOAD OBJ-NAME SOURCE-NAME BIN-IS-CURRENT))
(setf (callers-list '#:LIS20229 :setters) '(FLATTEN-EQN))
(setf (callers-list '#:LIS20977 :setters) '(ELIMINATE-SUB))
(setf (callers-list 'RUL :setters) '(WRITE-DETAIL-RULE))
(setf (callers-list 'FIRST :setters) '(NAIL-QUASI-REDUCIBLE PARSE-NO-BODY MAKE-ONE-SCHEME HAVE-MANY-RECURSIVE-EQNS INDUC-AC-SUBS ELEMENT-COMBINATION REF-INSTANCE-SEEDS ONE-PREMISE-IS-TRUE MAKE-EQ-PRE MAKE-BETTER-PRE NORM-ONE-PRE FIRST-VAR-PRE REDUCE-BY-HOMO-RULES IS-HOMOGENEOUS-TERM POLY-MATCH-ONE-TO-* POLY-MATCH-* WRITE-ONE-PRE SIMPLIFY-COND-TERM ONE-PRESENTATIVE MATCH-PREMISES EQ-MATCH GET-CLAUSE GET-EQUATION SPLIT-RHS-OR SPLIT-RHS-AND ASS2EQN SYMMETRY-TERMS SYMMETRY-VARS PICK-OUT-PREMISE IS-SORTED RELEASE-PREMISES))
(setf (callers-list '#:LIS21292 :setters) '(IS-SYMMETRY-EQN))
(setf (callers-list '#:VAL22038 :setters) '(REDUCIBLE))
(setf (callers-list '#:LIS22147 :setters) '(NORM-XOR-TERM))
(setf (callers-list '#:LIS21163 :setters) '(FUNC-SUPERPOSITION))
(setf (callers-list 'LEN :setters) '(LONGEST-LIST IF*))
(setf (callers-list 'MESSAGE :setters) '(OK-TO-CONTINUE ASK-A-CHOICE))
(setf (callers-list '#:LIS21838 :setters) '(REM-ARGS))
(setf (callers-list 'E2 :setters) '(COMP-EQN SIMILAR-EQN))
(setf (callers-list '#:LIS21499 :setters) '(PREMISES-INSTANCES))
(setf (callers-list '#:LIS21756 :setters) '(AC-MATCH))
(setf (callers-list '#:VAL20975 :setters) '(IS-FREE-TERM))
(setf (callers-list 'DISP-RULES :setters) '(DISPLAY))
(setf (callers-list 'STRONG :setters) '(NORM-POLY))
(setf (callers-list 'PARSE-LOOP-DO :setters) '(LOOP-PARSE-ADDITIONAL-COLLECTIONS))
(setf (callers-list '$CONSTRUCTORS :setters) '(INDUC-PROVE))
(setf (callers-list '#:POIN21524 :setters) '(CHANGE-VARS))
(setf (callers-list '#:VAL23453 :setters) '(NAIL-QUASI-REDUCIBLE))
(setf (callers-list 'LBINDS :setters) '(UNICOMPOUND))
(setf (callers-list '#:LIS21112 :setters) '(RELATED-VARS))
(setf (callers-list '$PICK-RULE-STR :setters) '(PICK-STRATEGY RESTORE-REST-GLOBALS))
(setf (callers-list '$NEWOPS :setters) '(READ-THIS-EQN READ-EQNS))
(setf (callers-list '$SUBS :setters) '(POLY-SUPER-AT-*-0 AC-SUPERPOSITION PURE-SUPERPOSITION FUNC-SUPERPOSITION))
(setf (callers-list '#:LIS20716 :setters) '(CONTINUE-MAPPING))
(setf (callers-list 'X :setters) '(GROUNDP SIZE-UNI RETURN-SLOOP-MACRO REPEAT-SLOOP-MACRO AVERAGING-SLOOP-MACRO CAR-LENGTH-CDDR CAR-LENGTH-GREAT INSERT-SORT-ARG LESS-VECTOR N-TUPLES SPLIT-ALIST TIME-IN-SEC RUN-TIME START-TIMER MARK INSERT CNTH ATTACH *THROW *CATCH COPYSYMBOL REMQ MEMBER-EQUAL MEMBER0 TR-TERM QUANTIFIERP BOOLEAN-OPP VAR? PROCESS-ASS INSERT-AND-REMOVE-PAIRS DISPLAY-UNIFY ACUNI UNIFY-WITH-AC UNIFY SUMYMAX GENERAL-BASIS-VECTORS ELIMCOM))
(setf (callers-list '$RULE-SIZE :setters) '(SIZE-DEPTH-STR RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIS20902 :setters) '(REMOVE-QUAN-ARGS))
(setf (callers-list '$EX1 :setters) '(SIZE-DEPTH-STR))
(setf (callers-list '#:LIS23582 :setters) '(ONE-TYPE-ALL-VARS))
(setf (callers-list '#:POIN23402 :setters) '(TOP-TERM))
(setf (callers-list '#:LIS21050 :setters) '(RESTORE-EQUATION))
(setf (callers-list '#:LIM22086 :setters) '(CYCLE-CHECK))
(setf (callers-list '#:LIS21052 :setters) '(HEAD-LESS-PRE))
(setf (callers-list 'FILENAME :setters) '(OPEN-WRITE-FILE OPEN-READ-FILE OUTFILE INFILE))
(setf (callers-list '#:LIS21746 :setters) '(CHECK-MISMATCH))
(setf (callers-list '#:POIN22856 :setters) '(GET-INSTANCE-TERMS2))
(setf (callers-list 'SET :setters) '(ONE-PRESENTATIVE))
(setf (callers-list '#:VAL23312 :setters) '(SUPERTERM-COVER))
(setf (callers-list 'ROOT :setters) '(SHOW-TREE-INFO WRITE-TREE PARA-SUP-TERM PURE-SUP-TERM SUP-TERM CHECK-BUILD-RULE))
(setf (callers-list 'X-RESULT :setters) '(X_AUTO_INDUC))
(setf (callers-list '#:VAL20491 :setters) '(CARDINALITY))
(setf (callers-list '#:VAL22297 :setters) '(EXPAND-EQ))
(setf (callers-list 'NEXT :setters) '(SEARCH_BY_EQN SEARCH_BY_ID SHOW-TREE-INFO BREADTH-SEARCH WRITE-TREE NON-DECREASING-SEQ NEXT-TOKEN CONDI-FROM-CLAUSE))
(setf (callers-list 'BMAX :setters) '(GENERAL-BASIS-VECTORS))
(setf (callers-list '#:LIS23352 :setters) '(PARTITION-OPS-BY-TYPE))
(setf (callers-list '#:LIS22414 :setters) '(BOTH-ADD-PREDICATE))
(setf (callers-list 'XC :setters) '(SUBSTVARFOR))
(setf (callers-list 'S11 :setters) '(ACO-BIGT-PARTITION))
(setf (callers-list '#:POIN22584 :setters) '(MOVE-MONOS))
(setf (callers-list 'EACHTIME :setters) '(LOOP-PARSE-ADDITIONAL-COLLECTIONS))
(setf (callers-list '#:LIS22168 :setters) '(REDUCE-XOR-TERM))
(setf (callers-list '#:LIS21855 :setters) '(CTX-BAD-LUCK))
(setf (callers-list '$RULE-SET :setters) '(X_CLEAN-RULE CLEAN-RULE ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE SAVE-RRL MAKE-CYCLE-RULE MAKE-P-COMMUT-RULE ADD-CONDI-DOMINATE-RULE INDUC-ADD-RULE))
(setf (callers-list 'EQN1 :setters) '(PROCESS-EQUATION COVER-NORM-ORDER))
(setf (callers-list 'DOMRULE :setters) '(PRED-FUNC-SUPERPOSITION))
(setf (callers-list 'DEF-DOM :setters) '(RULE-DESTROYABLE))
(setf (callers-list '#:COLL20498 :setters) '(PREC-CONSISTENT))
(setf (callers-list '#:LIS20986 :setters) '(REDUCE-BY-P-COMMUT))
(setf (callers-list 'EXTRA-CVARS :setters) '(MAKE-NEW-RULE))
(setf (callers-list '#:COLL22130 :setters) '(PURE-NORM-WITH-BIN))
(setf (callers-list '#:POIN21449 :setters) '(MY-COPYLIST))
(setf (callers-list '#:POIN21626 :setters) '(READ-ARGS))
(setf (callers-list 'NOT-SET-FLAG :setters) '(PROCESS-EQUATION))
(setf (callers-list '#:POIN22022 :setters) '(MANUAL-GOAL))
(setf (callers-list 'AVOIDS :setters) '(TRY-ONE-EXTRA-VAR-RULE))
(setf (callers-list '#:LIS22689 :setters) '(ADD-SUGG1))
(setf (callers-list '#:LIS22792 :setters) '(INDUC-PROVE))
(setf (callers-list '#:LIS21147 :setters) '(RULE-NUMS-FROM-SOURCE))
(setf (callers-list '#:LIS20281 :setters) '(WASH-DEF-RULES))
(setf (callers-list 'H1 :setters) '(IS-SYMMETRY-RULE))
(setf (callers-list '#:POIN21587 :setters) '(DISABLE-RULES-AUX))
(setf (callers-list 'RIGHT-*-ARGS :setters) '(REDUCE-+-TERM))
(setf (callers-list 'V_BINDS :setters) '(NEWVARSIN))
(setf (callers-list '#:LIM22460 :setters) '(CHOOSE-BY-HAND))
(setf (callers-list '#:VAL20754 :setters) '(AUTO-KB))
(setf (callers-list '#:COLL20943 :setters) '(CHECK-BUILD-RULE))
(setf (callers-list '#:LIS22369 :setters) '(PRINT-ATOMS))
(setf (callers-list 'IN-PORT :setters) '(READ-ARGS READ-ATOM TYIPEEK-SPA-CR TYIPEEK-SPACE IS-EMPTY-LINE READ-EQNS))
(setf (callers-list '#:LIS23386 :setters) '(NEW-ARGS))
(setf (callers-list '#:COLL21495 :setters) '(FORM-PREMISES-FROM-CONJ))
(setf (callers-list '#:LIS22209 :setters) '(DISPLAY-CONSTRUCTORS))
(setf (callers-list 'OUTPUT :setters) '(GET-BASIC-TYPE-TERMS PARTITION-OPS-BY-TYPE PARTITION-TERM-BY-TYPE))
(setf (callers-list '#:POIN22480 :setters) '(P-*-M))
(setf (callers-list 'RESULT1 :setters) '(HANDLE-AND))
(setf (callers-list 'RESPONSE :setters) '(MANUAL-ORIENT))
(setf (callers-list '#:VAL21859 :setters) '(EQ-MATCH))
(setf (callers-list 'HIGHEST :setters) '(DECIDE-MERGE-CONJ))
(setf (callers-list '#:COLL22437 :setters) '(MANUAL-PICK))
(setf (callers-list 'SKIP :setters) '(IN-ARRAY-SLOOP-FOR))
(setf (callers-list '#:LIM22528 :setters) '(POLY-SUPER-AT-*))
(setf (callers-list 'LAST-CASE :setters) '(LCASE))
(setf (callers-list 'OPTION-LIST :setters) '(XIN-MENU USER-SELECTQ))
(setf (callers-list '#:LIS23186 :setters) '(COMPOSE))
(setf (callers-list 'YMAX :setters) '(SUMYMAX GENERAL-BASIS-VECTORS))
(setf (callers-list 'FROM-DATA :setters) '(PARSE-LOOP-FOR))
(setf (callers-list '#:LIS22278 :setters) '(ORIENT-AN-EQN))
(setf (callers-list '#:VAL22730 :setters) '(MAKE-PRE-ASS))
(setf (callers-list '#:POIN23202 :setters) '(RESOLVE))
(setf (callers-list 'TERM :setters) '(X_GET_INDUC_TERM X_READ_TERM PROOF-UNDER-NEW-PREMISES X_REDUCE-BY-ONE-RULE REDUCE-EQN-BY-ONE-RULE GET-TERM-TYPE COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2 WELL-TYPED TYPE-VAR-LIST TYPE-ALL-VARS ONE-TYPE-ALL-VARS ONE-TYPE-VAR-LIST GROUNDP IS-VALUE-TERM IS-CONSTANT-TERM LITERAL-NUM NON-LINEAR-VARS IS-LINEAR OCCURS-IN REPVARSIN NEWVARSIN RPLAT-IN-BY RPLNTHSUBT-IN-BY SUBTAT FREE-VARS W-SIZE SIZE VAR1-LIST IS-GROUND ALL-VARS ALL-OPS VAR-LIST OP-LIST INPUT-TYPE-CHECK BAD-TYPED EXPECTING-PREDICATES EXPECTING-FUNCTIONS TOP-TERM RULE-DESTROYABLE DESTROYABLE APPLY-TO APPLY-TO2 STR-FORMULATE-SCHEME ADD-PATTERNS COMPATIBLE-PATTERNS FORM-PATTERNS-SINGLE MAKE-ONE-SCHEME MERGE-DUPLICATE COMPATIBLE-PATTERN ENCOURAGE GET-SCHEME-VARS GET-INDUC-VARS ELIGIBLE-INDUC-TERMS INDUCTIBLE INDUC-SUBS-TERM SUBS-OF-SAME-ROOT SKOLEM-TERMS ALL-NONVARS GET-INSTANCE-SEEDS REDUCE-ARGS-BY-PREMISES REDUCE-BY-PREMISES REDUCE-BY-PREMISE-AT-ROOT REDUCE-BY-PREMISES-AT-ROOT SUBST-VAR-PREMISES NORM-BY-PREMISES NORMALIZE-BY-PREMISES REVERSE-PREMISE PRE-PROCESS-PRE-ASS REDUCE-BY-HOMO-RULES REDUCE-MONO NORM-POLY IS-HOMOGENEOUS-TERM POLY-SIZE REDUCE-BY-CHARACTER NONLINEAR-VARS-UNDER-* COMPACT-LAST-ELEMENTS REDUCE-*-TERM REDUCE-+-TERM POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT *-CANONICALIZE +-CANONICALIZE POLY-SIMPLIFY WRITE-TERM-SIMPLE WRITE-TERM ORDER-CTX REDUCE-AND-TERM REDUCE-AT-ROOT-BOOL NORM-CTX PURE-REWRITE-AT-ROOT PURE-MIXED-REDUCE PURE-NORM-MIXED PURE-NORM-WITH-BIN NORM-WITH-BIN NORM-INN PURE-NORM-INN PURE-NORM-INNERMOST PURE-OUTRED1 OUTRED1 PURE-RWONCE-OUTERMOST RWONCE-OUTERMOST PURE-NORM-OUTERMOST NORM-OUTERMOST SIMPLIFY-COND-TERM REDUCE-COND-TERM PURE-REDUCE-BY-ONE-AT-ROOT PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-AT-ROOT REDUCE-BY-ONE-RULE REDUCE-BY-RULES CYCLE-CHECK REWONCE-AT-ROOT VAR-CONSISTENCY SIMPLIFY-MY-EQ-TERM REDUCE-AT-ROOT-ONE-RULE TRY-ONE-CONDI-RULE TRY-ONE-RULE REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES REDUCE-AT-ROOT REWRITE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE PURE-NORM NORM-TERM IS-NORMAL NTIMES AC-C-ROOT MEMBER-TERM REM-ARGS ELIM-BIN NEXT-CHOICE VARS-ONLY UNKNOWN-SIZE FOUND-WITNESS READ-T-TERM NEGATE-LITERAL EQN-INSTANCE PREMISES-INSTANCES GET-VAR-SUBSTITUTION RENAME-TERM EQ-TR REDUCE-EQ-EXACTLY REDUCE-EQ-TERM IS-POLY FLAT-TERM SORT-OF HALF-CANONICALIZE ONE-ARG C-PERMU COMM-ROOT AC-ROOT APPLYSUBST IS-ROOTED-+ IS-BOOL-ROOT NTHSUBT SECOND-ARG FIRST-ARG NARGS NONVARP CONSTANT? VARIABLEP ARGS-OF OP-OF SYMMETRY-TERMS CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 CYCLE-REDUCE-AT-ROOT-2 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE CYCLE-REWRITE-AT-ROOT CYCLE-OUT-RED CYCLE-REDUCE-TERM CYCLE-NORM-TERM NORM-BUT-ROOT COVER-NORM-TERM COMMUNE-TERMS2 COMMUNE-TERMS SORT-OP-ARGS REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT C-PERMUTATION REMOVE-LEFT-ARG2 LEFT-ARG2 REMOVE-RIGHT-ARG2 RIGHT-ARG2 REMOVE-LEFT-ARG LEFT-ARG REMOVE-RIGHT-ARG RIGHT-ARG AVOID-COMMON-TERM AVOIDABLE DIVISIBLE-AC-CHECK IS-FREE-TERM FREE-SUBTERMS IS-ELIM-TERM ONE-ELIM-SUBTERM ELIMINABLE-TERMS FIRST-BOOLEAN-CONSTANT FIRST-SPEC-TERM BREAK-AT-OR SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT BRT CANONICALIZE FIRST-TRANS SIMP-FIRST-TRANS BA-SIMPLIFY NEW-FIRST-TRANS NEW-TRANS-SIMP FIND-OUT-BIG-EQ-SUBS AC-DISTRI DISTR-AC-ORDER MULTI-COM FLATTEN MAKE-FLAT FLAT-TERM-FUNC SUB-NONVARS2 SUB-NONVARS))
(setf (callers-list '#:POIN22159 :setters) '(NORM-AND-ARGS))
(setf (callers-list '#:LIS22170 :setters) '(REDUCE-AND-TERM))
(setf (callers-list '#:LIS23087 :setters) '(MAKE-ONE-SCHEME))
(setf (callers-list '#:LIS22341 :setters) '(WRITE-RULES))
(setf (callers-list '#:COLL21718 :setters) '(MAKE-NEW-RULE))
(setf (callers-list '#:VAL21714 :setters) '(INVALID-RULE))
(setf (callers-list '#:POIN22252 :setters) '(EXT-CONSTRUCTOR))
(setf (callers-list '#:POIN23488 :setters) '(FREE-VARS))
(setf (callers-list '$COVER-AUTO-LEVEL :setters) '(COVER-AUTO-LEVEL))
(setf (callers-list '#:LIS20862 :setters) '(INIT-BOOL-OPS))
(setf (callers-list 'BOOL :setters) '(PROOF-UNDER-NEW-PREMISES))
(setf (callers-list 'VARS :setters) '(X_GET_INDUC_TERM X_REAL_VARS FORM-SUBGOALS-FROM-PATTERNS SPLIT-PREMISES STRUCTURE-INDUC-ON COVER-SET-SCHEME RENAME-VAR1 RENAME-VAR NEWVARSIN FIXUP-QUANTIFIED-FORMULA NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT IN-ARRAY-SLOOP-FOR MERGE-TWO-TUPLES FIND-MERGE-SIGMA MERGE-TWO-PATTERNS ADD-PATTERNS REMOVE-DUP-VARS HAS-NONLINEAR-VARS ADD-OLD-VARS REFUTE-RULE-INSTANCES MORE-VARS-PREMISE NEGATE-PREMISES MAKE-RULE-INSTANCES POLY-SUPER-AT-*-1 POLISH-PREMISES CTX-BAD-LUCK CHECK-MISMATCH CTX-DOMINANT-RULE HYPO-SUBSUME-EQN CHANGE-VARS EQN-INSTANCE PREMISES-INSTANCES FORM-PREMISES-FROM-CONJ SET-EXTRA-PRE-VARIABLES SYMMETRY-VARS IS-SYMMETRY-EQN IS-CYCLE-EQN RELATED-VARS2 RELATED-VARS REMOVE-IRRELEVANT4 OR-CONDI-EQN BREAK-AT-OR IS-ASSOC-PAIR))
(setf (callers-list 'MIN-ARGS :setters) '(DEF-LOOP-INTERNAL))
(setf (callers-list '$OVER-REWRITE :setters) '(OVER-REWRITE-PREMISES PROOF-METHODS PRE-INIT RESTORE-REST-GLOBALS))
(setf (callers-list 'VARR :setters) '(NEW-TERM ADD-OPERATOR INVALID-RULE))
(setf (callers-list 'NUMBER :setters) '(LISTARRAY MAKE-RULE))
(setf (callers-list '#:COLL23054 :setters) '(ADD-OLD-VARS))
(setf (callers-list '#:POIN20499 :setters) '(PREC-CONSISTENT))
(setf (callers-list 'MAX :setters) '(MAX-DEPEND-GAP PICK-MAX-SCORE-OP LONGEST-LIST INCREMENT-POS))
(setf (callers-list 'REST-ARGS :setters) '(POLY-MATCH-TEST-REST-*-ARGS REDUCE-+-TERM REDUCE-EQ-TERM))
(setf (callers-list '#:POIN21064 :setters) '(OPS-IN-PRES-OF-RULES))
(setf (callers-list '#:LIS23335 :setters) '(TRACE-TESTSET))
(setf (callers-list '#:POIN22034 :setters) '(ANS-MEMBER))
(setf (callers-list '#:VAL21520 :setters) '(APPLYSUBST-PRE))
(setf (callers-list '#:LIS22844 :setters) '(REF-INSTANCE-SEEDS))
(setf (callers-list '$GOAL-REDUCE :setters) '(RESTORE-REST-GLOBALS))
(setf (callers-list '$RL-FIRST :setters) '(LR-RL-STRATEGY))
(setf (callers-list '#:COLL21026 :setters) '(NORM-BUT-ROOT))
(setf (callers-list '#:LIS22661 :setters) '(OPS-EQUIV-TO))
(setf (callers-list '#:LIM20412 :setters) '(SUMYMAX))
(setf (callers-list '#:LIS21901 :setters) '(PROPER-PRODUCT-LISTS))
(setf (callers-list 'SAVED_SUB :setters) '(PRED-FUNC-SUP))
(setf (callers-list '#:LIS23306 :setters) '(ONE-EXTENSIBLE-TYPE-POINT))
(setf (callers-list '#:LIS21557 :setters) '(START-UP))
(setf (callers-list '$PRE-FIRST :setters) '(EQ-PRE-STRAT))
(setf (callers-list 'R :setters) '(GET-RULE MATCH-BOOL-NEW))
(setf (callers-list '#:LIM21937 :setters) '(NTIMES))
(setf (callers-list '#:COLL21063 :setters) '(OPS-IN-PRES-OF-RULES))
(setf (callers-list '#:POIN22893 :setters) '(SET-RIGHT-HYPO-ARGS))
(setf (callers-list '#:POIN23291 :setters) '(EXTEND-DOM-ARGS))
(setf (callers-list '#:LIS20695 :setters) '(RES1))
(setf (callers-list '$ABSTRACT-PROOF :setters) '(COVER-GENE-INDUC-EQN COVER-AUTO-LEVEL))
(setf (callers-list '$LOG-PORT :setters) '(READ-ATOM TEST-RRL CLOSE-LOG RRL-AUX PRE-INIT))
(setf (callers-list 'ARG2 :setters) '(ENCOURAGE REMAINDER QUOTIENT CYCLE-REDUCE-AT-ROOT-2 AVOID-COMMON-TERM OR-ARGS))
(setf (callers-list '#:VAL20528 :setters) '(ACO-LPRO>=))
(setf (callers-list '#:POIN21101 :setters) '(REMOVE-IRRELEVANT4))
(setf (callers-list 'LLHS :setters) '(REDUCE-EQ-EXACTLY))
(setf (callers-list 'RHS-ROOT2 :setters) '(MAKE-PAIRS))
(setf (callers-list 'EX1 :setters) '(MAKE-PAIRS))
(setf (callers-list '#:COLL20356 :setters) '(FIND-BASIS-VECTORS))
(setf (callers-list '$NEW-AC :setters) '(AC-KB-CHOICE PRE-INIT))
(setf (callers-list '#:LIS22146 :setters) '(NORM-CTX))
(setf (callers-list 'NAME :setters) '(X_NAME RENAME-VAR1 INPUT-TYPE-CHECK DEF-LOOP-INTERNAL TRANSLATE-NAME DEF-LOOP-COLLECT DEF-LOOP-MACRO DEF-LOOP-FOR DEF-LOOP-MAP NAME2RULENUM NAME-LAST-RULE MAKE-RRL-IMAGE))
(setf (callers-list '#:VAL21563 :setters) '(DELETE-RULE))
(setf (callers-list 'LIS2 :setters) '(LEXICO-COMP RPOST ACO-LEXICO-COMP-LR))
(setf (callers-list '#:LIS23760 :setters) '(X_MATH_IND))
(setf (callers-list 'SJ :setters) '(EQ-MATCH))
(setf (callers-list '#:VAL20705 :setters) '(PLAUSIBLE))
(setf (callers-list 'LEQNS2 :setters) '(REWRITE-ONCE-BY-HYPO))
(setf (callers-list '#:COLL23505 :setters) '(RPL-BY-TERMS2))
(setf (callers-list '#:LIS22338 :setters) '(WRITEF-SYS))
(setf (callers-list '#:COLL21523 :setters) '(CHANGE-VARS))
(setf (callers-list '#:LIS20480 :setters) '(SYMMETRY-NON-DELETABLE))
(setf (callers-list '#:LIS21992 :setters) '(MULT-SORT-MERGE))
(setf (callers-list 'POSITION :setters) '(INSERT-SORT-ARG INSERT-AND-REMOVE-PAIRS))
(setf (callers-list 'JUNK :setters) '(PEQNS SPLIT-PREMISES))
(setf (callers-list '#:VAL20379 :setters) '(GENERAL-BASIS-VECTORS))
(setf (callers-list '#:POIN23330 :setters) '(GET-DOWN))
(setf (callers-list '#:POIN21496 :setters) '(FORM-PREMISES-FROM-CONJ))
(setf (callers-list '#:LIM20457 :setters) '(DIO))
(setf (callers-list '#:LIS20797 :setters) '(DECANON-XOR))
(setf (callers-list '#:POIN21459 :setters) '(GET-ALL-PROPERTIES))
(setf (callers-list '#:COLL23519 :setters) '(IS-SUBT))
(setf (callers-list '#:VAL21929 :setters) '(N-TUPLES))
(setf (callers-list '$POSSI-NUM :setters) '(GET-TESTSET-QUASI TRACE-TESTSET))
(setf (callers-list '#:LIS20191 :setters) '(WRITE-COMMENT-PREMISES))
(setf (callers-list 'PREV-TERM :setters) '(VARS-ONLY))
(setf (callers-list '$MAX-HISTORY :setters) '(INVALID-RULE PUSH-HISTORY CAN-HAVE-NEW-OP))
(setf (callers-list 'ATOMS :setters) '(SAVE-WORDS))
(setf (callers-list '$TYPE-RELA :setters) '(ADD-SUGG-TYPE))
(setf (callers-list '#:VAL21588 :setters) '(DISABLE-RULES-AUX))
(setf (callers-list 'MXA :setters) '(OUTRED1))
(setf (callers-list '#:LIS22177 :setters) '(EXIST-OP))
(setf (callers-list '#:VAL21846 :setters) '(IS-AN-INSTANCE))
(setf (callers-list '#:VAL23528 :setters) '(OCCURS-IN))
(setf (callers-list '#:VAL21003 :setters) '(COMMUNE-TERMS))
(setf (callers-list 'SYM2 :setters) '(IS-SUBSEQUENCE))
(setf (callers-list 'COMMON :setters) '(PRED-CRITICAL-PAIR PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP))
(setf (callers-list '#:LIM22864 :setters) '(REFUTE-RULE-INSTANCES))
(setf (callers-list 'MLHS :setters) '(MAKE-RULE-INSTANCES))
(setf (callers-list '#:VAL20211 :setters) '(SUBST-EQN))
(setf (callers-list '#:VAL22621 :setters) '(NORM-SIGN-CHANGED-MONOS))
(setf (callers-list '#:LIS23023 :setters) '(ENCOURAGE))
(setf (callers-list 'TYS2 :setters) '(EXT-TYPE-RELATION))
(setf (callers-list '#:COLL22696 :setters) '(FIRST-PROCESS-PREMISES))
(setf (callers-list 'INDICES :setters) '(ASET))
(setf (callers-list 'V1 :setters) '(NORMAL-FORM-SUB ADD-BIND-TO-SUB ADD-ASSOCIATE-LIST ADD-TIME SET-EQN-MARK))
(setf (callers-list 'LS1 :setters) '(TWO-UNIFIER))
(setf (callers-list '#:COLL21694 :setters) '(RPOMULT))
(setf (callers-list 'NEW-ASS-2 :setters) '(PARA-SUP-TERM2))
(setf (callers-list '#:POIN20660 :setters) '(UNIFY))
(setf (callers-list 'EXPR1 :setters) '(FIRST-USE-SLOOP-FOR))
(setf (callers-list '#:LIM22523 :setters) '(FIRST-N-ELEMENTS))
(setf (callers-list '$ART :setters) '(SET-ART-MODE))
(setf (callers-list '#:LIS23750 :setters) '(STRONG-SUBGOAL-PROOFS))
(setf (callers-list '#:COLL22947 :setters) '(ADD-DEFIN-DEPEND))
(setf (callers-list '#:COLL22845 :setters) '(REF-INSTANCE-SEEDS))
(setf (callers-list 'PRED :setters) '(ENSURE-PREDICATE MERGE-SORT-ARGS COLLECT-IF ALWAYS THEREIS NEGATE-PREDICATE MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS))
(setf (callers-list '#:COLL20527 :setters) '(ACO-LPRO>=))
(setf (callers-list 'POPPED :setters) '(UNDO1))
(setf (callers-list 'TREE :setters) '(SEARCH-TREE IN-FRINGE-SLOOP-MAP MAP-FRINGE CHANGE-VARS SUBST0))
(setf (callers-list '$REDUCE_TIME :setters) '(START-TEST))
(setf (callers-list 'CVARS :setters) '(MAKE-NEW-RULE IS-VALID-CONDI-RULE))
(setf (callers-list '#:VAL23645 :setters) '(GET-CODOMAIN-TYPES))
(setf (callers-list '#:LIS23337 :setters) '(TRACE-ADD-TESTSET))
(setf (callers-list '#:LIS21844 :setters) '(IS-AN-INSTANCE))
(setf (callers-list '#:LIM22914 :setters) '(DECIDE-DEFIN-MODE))
(setf (callers-list '#:COLL22433 :setters) '(IS-BIG-ENOUGH-RULE))
(setf (callers-list '$SYMMETRY-CHECK :setters) '(PRE-INIT))
(setf (callers-list '#:LIS22230 :setters) '(UNDO-STRATEGY))
(setf (callers-list 'MATCH-RES :setters) '(REDUCE-AND-TERM REDUCE-XOR-TERM))
(setf (callers-list 'INCR :setters) '(PARSE-LOOP-FOR))
(setf (callers-list '#:LIS22772 :setters) '(REDUCE-BY-PREMISES-AT-ROOT))
(setf (callers-list '#:VAL21797 :setters) '(MATCH-POSS))
(setf (callers-list '#:POIN23752 :setters) '(STRONG-SUBGOAL-PROOFS))
(setf (callers-list 'FREE-VARS :setters) '(LINEAR))
(setf (callers-list '#:LIS21668 :setters) '(ADD-RULE-LINEAR))
(setf (callers-list 'FORCE :setters) '(PARSE-LOOP-DECLARE START-PUSH-HISTORY START-HISTORY))
(setf (callers-list '$POST-POSI :setters) '(POST-POSI-STRA POSTPONE-IT))
(setf (callers-list '#:COLL23657 :setters) '(GET-SUBTYPES))
(setf (callers-list '#:VAL20469 :setters) '(SYM-ARG-POSITIONS))
(setf (callers-list '#:COLL21233 :setters) '(SET-UNIFY))
(setf (callers-list 'STOCK1 :setters) '(MERGE-TWO-PATTERNS ADD-PATTERNS))
(setf (callers-list '#:POIN20957 :setters) '(ELIMINABLE-TERMS))
(setf (callers-list 'VARS2 :setters) '(LRPO-PREMISES))
(setf (callers-list 'PRES-SIZE :setters) '(UNKNOWN-SIZE))
(setf (callers-list 'A-LIST :setters) '(CUR-VAL))
(setf (callers-list 'MARGS :setters) '(REDUCE-BY-CHARACTER OUTRED1 REDUCE-BY-P-COMMUT))
(setf (callers-list '#:POIN22131 :setters) '(PURE-NORM-WITH-BIN))
(setf (callers-list '#:LIS22274 :setters) '(BRAKE-CHOICE))
(setf (callers-list '#:LIS21987 :setters) '(MULT-MERGE))
(setf (callers-list 'BASE-DEPTH :setters) '(GET-TESTSET-QUASI))
(setf (callers-list 'FORM :setters) '(LOOP-ADD-TEMPS LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP-INITIALLY PARSE-LOOP DESETQ DESETQ1 PP PRINC0 SPECIAL-SUBST SKOLEMIZE-AWAY-QUANTS))
(setf (callers-list 'ELSESEEN :setters) '(IF*))
(setf (callers-list 'ASSS :setters) '(WRITE-ASSERTIONS LIST-ASSERTIONS))
(setf (callers-list 'L :setters) '(PRINT-NODE ADD-FROM-DATA EACH PP2 INSERT ALL-ONES))
(setf (callers-list '#:LIS22650 :setters) '(REDUCE-BY-HOMO-RULES))
(setf (callers-list 'H2 :setters) '(IS-SYMMETRY-RULE))
(setf (callers-list 'NUM-EQNS :setters) '(X_MATH_IND))
(setf (callers-list 'NULL-COLS :setters) '(TAKE-OUT))
(setf (callers-list '#:COLL21458 :setters) '(GET-ALL-PROPERTIES))
(setf (callers-list '#:LIS21293 :setters) '(IS-SYMMETRY-EQN))
(setf (callers-list 'ANSWER :setters) '(OK-TO-CONTINUE))
(setf (callers-list 'NROW :setters) '(GET-SOLUTIONS))
(setf (callers-list 'LL2 :setters) '(MERGE-SORT-ARGS TOTAL-ORDER-RES TOTAL-ORDER-PC-RES MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS))
(setf (callers-list '#:LIS23003 :setters) '(CHOOSE-MAX-SCORE))
(setf (callers-list '#:VAL21093 :setters) '(REMOVE-IRRELEVANT3))
(setf (callers-list '#:LIS22445 :setters) '(PICK-ONE-UNMARKED))
(setf (callers-list 'LEMMAS :setters) '(PROVE_EQN))
(setf (callers-list '#:VAL21577 :setters) '(ORDER-EQNS))
(setf (callers-list '#:COLL23647 :setters) '(EXT-TYPE-RELATION))
(setf (callers-list '#:POIN23506 :setters) '(RPL-BY-TERMS2))
(setf (callers-list '#:LIS22802 :setters) '(GET-INSTANCE-SEEDS))
(setf (callers-list '#:LIS21815 :setters) '(NEXT-CHOICE))
(setf (callers-list '#:LIS20934 :setters) '(FIRST-SPEC-TERM))
(setf (callers-list '#:COLL22942 :setters) '(SUBS-OF-SAME-ROOT))
(setf (callers-list '#:COLL22999 :setters) '(GET-SCHEME-VARS))
(setf (callers-list '#:LIM23504 :setters) '(RPL-BY-TERMS2))
(setf (callers-list 'M1 :setters) '(POLY-LRPO P-*-P PRED-CRITICAL-PAIR MULT-DIFF2 MULT-DIFF MULT-SORT-INSERT MULT-INSERT P-AND-P UNIFY-WITH-AC GENERAL-BASIS-VECTORS ALL-ONES))
(setf (callers-list '#:POIN23153 :setters) '(MERGE-TWO-PATTERNS))
(setf (callers-list '$BUILD-RULES :setters) '(RESTORE-REST-GLOBALS))
(setf (callers-list '#:VAL23431 :setters) '(QUASI-EQUIVALENT))
(setf (callers-list '#:LIS20222 :setters) '(FLATTEN-RULE))
(setf (callers-list '#:VAL21397 :setters) '(TR-TERM))
(setf (callers-list 'GLOBAL :setters) '(NON-LINEAR-VARS))
(setf (callers-list 'EL :setters) '(GET-POSITION))
(setf (callers-list 'CL2 :setters) '(MERGE-SORT-ARGS MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS))
(setf (callers-list '#:LIS21411 :setters) '(PARA-SUP-TERM2))
(setf (callers-list 'CS :setters) '(REMOVE-SUBSUMED-PATTERNS))
(setf (callers-list '#:LIM21871 :setters) '(IS-SUBSEQUENCE))
(setf (callers-list 'FORCE-NEW-VALUE :setters) '(LOOP-ADD-BINDING))
(setf (callers-list 'ALIST :setters) '(SPLIT-ALIST APPLYSUBST))
(setf (callers-list 'AND-WITH :setters) '(PARSE-LOOP-WITH))
(setf (callers-list 'L1 :setters) '(X_CLEAN-RULE W-SIZE QUASI-CHECK NEW-ARGS ADD-ONE-DEPTH GET-TESTSET-QUASI GET-DOWN EXTEND-DOM-ARGS EXTEND-SCHEMES GET-TESTSET2 RESOLVE FORM-PATTERNS-SINGLE CAR-LENGTH-CDDR GET-RECURSIVE-RETURN-OP HAVE-MANY-RECURSIVE-EQNS GET-RECURSIVE-DEF-TERM GET-INSTANCE-SEEDS NEGATE-EQN REFUTE-EQN SUGG-PREC TRY-SUGG-PREC UPDATE-BY-EQ EQOPS POLY-SIZE REDUCE-BY-CHARACTER POLY-LRPO ELES-MORE-THAN-1 COMPACT-LAST-ELEMENTS POLY-REDUCE-AT-ROOT-ONE-RULE MERGE-SORT-ARGS DETACHMENT-SUPER DETACHMENT-CRITICAL IDEM-SUPERPOSITION PRINT-ATOMS WRITE-VARIABLE TOTAL-ORDER-RES TOTAL-ORDER-PC-RES COMP-TERMS ORIENT-RULE SUPPORT-EQN EXT-DIVISIBLE EXT-CONSTRUCTOR REDUCE-AT-ROOT-BOOL NORM-WITH-BIN REDUCE-BY-ONE-AT-ROOT SIMPLIFY-MY-EQ-TERM SUB-TEST PICK-SMALL-GOAL MANUAL-GOAL LINEAR MULT-DIFF2 MULT-DIFF MULT-SORT-MERGE MULT-MERGE IS-SUBLIST LIST-DIFF IS-SUBSET HAVE-COMMON COMMON-ELEMENTS LESS-VECTOR INSERT-LIST NON-DECREASING-SEQ IS-SUBSEQ-LIST IS-SUBSEQUENCE VARS-ONLY NEW-TERM ADD-OPERATOR IS-VALID-RULE RPOMULT EQUIV-LIST CLEAN-RULE READ-ARGS READ-EQNS READ-INPUT TEST-RRL DELETE-EQN TRACE-HYPOTHESE GET-VAR-SUBSTITUTION INSERT MERGE-LIST NTHELEM PARA-SUP-TERM IDEM-EQ-CRITICAL TR-ADD CROSS-PRODUCT CYCLE-PAIRS GET-SYMMETRY-TERMS SAME-LIST PICK-AC-PAIR ADD-PAIRS SET-UNIFY PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION PURE-SUP-TERM SUP-TERM FACTORIBLE REDUCE-BY-P-COMMUT ELIMINATE-SUB SUBST-QUANT-FORM BREAK-ASS PROCESS-ASS MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS END-AUTO-ORDER ACUNI UNIFY-WITH-AC ACO-EQUIV-LIST ACO-LEXICO-COMP-RL ACO-RPOMULT>= ACO-RPOMULT> BIGT-TWO-KILL-ONE BIGT-ONE-KILL-ONE ACO-BIGT-PARTITION TWO-KILL-ONE ONE-KILL-ONE ACO-NOBIGT-PARTITION ACO-HARDER ACO-HARD> MY-COPYLIST2 SYMMETRY-NON-DELETABLE ADD-SOLN ALL-ONES))
(setf (callers-list '#:LIS20679 :setters) '(ACUNI))
(setf (callers-list '#:VAL23056 :setters) '(ADD-OLD-VARS))
(setf (callers-list 'ARG :setters) '(OCCURS-IN IS-SUBTERM IS-SUBT SUPERTERM-COVER APPLY-TO2 ONE-PATTERN COMPATIBLE-PATTERN ENCOURAGE HAVE-INDUCTIVE-VARS HAS-INDUCTIVE-VAR INDUCTIBLE INDUC-SUBS-TERM SET-RIGHT-HYPO-ARGS SEPARATE-XOR-ARGS MAKE-PRE-XOR-ARGS MAKE-PRE-ASS SIMPLIFY-* SIMPLIFY-+ MINI-EXPAND-EQ EXPAND-EQ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ NORM-AND-ARGS NORM-OR-ARGS NORM-XOR-TERM ADD-REST-ARGS REM-ARGS PICK-AN-ARG SPLIT-LHS-OR SPLIT-LHS-AND UCONCAT PNTLEN MINUS COPY MAKE-TERM-1ARG CYCLE-REDUCE-AT-ROOT-2 NORM-BUT-ROOT SORT-OP-ARGS IS-FREE-TERM IS-ELIM-TERM EQ-TR-MEMBER SIMP-XOR SIMP-AND SIMPLIFY SIMPLIFY-FLAT SIMPLIFY-ALMOST-FLAT BA-SIMP-NOT BA-SIMP-OR BA-SIMP-AND CONTINUE-MAPPING UNICOMPOUND ACUNI FIND-OUT-BIG-EQ-SUBS AC-DISTRI DIO-INITIALIZE FLAT-SORT-ARGS))
(setf (callers-list '#:LIS20708 :setters) '(ALL-PLAUS))
(setf (callers-list '#:LIS21926 :setters) '(N-TUPLES))
(setf (callers-list 'CHARACTER :setters) '(MAKE-RULE-INSTANCES))
(setf (callers-list 'PREMISES :setters) '(PROOF-UNDER-NEW-PREMISES RULE-SUBSUMED-PREMISES NO-SUBSUMPTION))
(setf (callers-list 'LS22 :setters) '(TWO-UNIFIER))
(setf (callers-list '#:COLL23499 :setters) '(RPLAT-IN-BY))
(setf (callers-list '#:LIS23618 :setters) '(WELL-TYPED3))
(setf (callers-list 'NEW-ARGS :setters) '(P-+-P NORM-AND-ARGS NORM-OR-ARGS NORM-XOR-TERM P-XOR-P FIRST-TRANS NEW-FIRST-TRANS))
(setf (callers-list 'NEW-MON2 :setters) '(PARA-SUP-TERM2))
(setf (callers-list 'Y1 :setters) '(SUPER-ITSELF-PRE))
(setf (callers-list 'BASIS :setters) '(CARDINALITY SYMMETRY-NON-DELETABLE ADD-SOLN GET-SOLUTIONS FULL-DIO DIO-INITIALIZE ALL-ONES))
(setf (callers-list '#:LIS20271 :setters) '(MULTI-COM))
(setf (callers-list 'NEWEQN :setters) '(X_MATH_IND FORM-SUBGOALS-FROM-PATTERNS))
(setf (callers-list '#:LIS23136 :setters) '(REMOVE-DUP-VARS))
(setf (callers-list '#:VAL23597 :setters) '(WELL-TYPED2))
(setf (callers-list 'PREVARS :setters) '(MORE-VARS-PREMISE))
(setf (callers-list 'TERMS :setters) '(ADD-ONE-DEPTH PARTITION-TERM-BY-TYPE DESTROYABLE FLATTEN-TESTSET MAKE-ONE-SCHEME PICK-MAX-SCORE-OP ELIGIBLE-INDUC-TERMS REFUTE-RULE-INSTANCES GET-INSTANCE-TERMS2 MEMBER-TERM CHECK-MISMATCH TR-FIND EQ-TR SET-SYMMETRY-MARK RES1 ACO-HARDER ACO-HARD>))
(setf (callers-list '*NO-DECLARE* :setters) '(PARSE-NO-BODY PARSE-LOOP))
(setf (callers-list 'LL1 :setters) '(MERGE-SORT-ARGS TOTAL-ORDER-RES TOTAL-ORDER-PC-RES MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS))
(setf (callers-list 'CT :setters) '(WRITE-DISJUNCTIONS WRITE-TERM-BOOL MAKE-EQN))
(setf (callers-list 'LVEC :setters) '(HALF-ONES))
(setf (callers-list '#:VAL20399 :setters) '(GET-LCM-SOLNS))
(setf (callers-list '#:LIS22543 :setters) '(POLY-SUPER-DISTRIBUTION))
(setf (callers-list '#:LIS22982 :setters) '(HAVE-INDUCTIVE-VARS))
(setf (callers-list '#:LIS22539 :setters) '(COMPACT-LAST-ELEMENTS))
(setf (callers-list 'DAY :setters) '(DATE))
(setf (callers-list '*LOOP-PROLOGUE* :setters) '(PARSE-LOOP))
(setf (callers-list 'EXPECTEDLIST :setters) '(EXPECTED))
(setf (callers-list '#:LIS22998 :setters) '(GET-SCHEME-VARS))
(setf (callers-list '#:VAL20612 :setters) '(ACO-RPOMULT>=))
(setf (callers-list '#:LIS22905 :setters) '(IS-CROSS-OP))
(setf (callers-list '#:COLL22977 :setters) '(HAS-INDUCTIVE-VAR))
(setf (callers-list '#:COLL22749 :setters) '(GET-PRES-OPS))
(setf (callers-list '#:LIS20792 :setters) '(CANONICALIZE))
(setf (callers-list '#:COLL23356 :setters) '(GET-BASIC-TYPE-TERMS))
(setf (callers-list '#:LIS21042 :setters) '(BUILD-EQUATION-FROM-PREMS))
(setf (callers-list '#:COLL21749 :setters) '(OCCURS-IN-RULE))
(setf (callers-list '#:VAL23092 :setters) '(FORM-PATTERNS-SINGLE))
(setf (callers-list 'ROW :setters) '(FULL-DIO ALL-ONES))
(setf (callers-list 'MS :setters) '(AVERAGE MULT-LENGTH MULT-SORT-INSERT MULT-INSERT))
(setf (callers-list '#:COLL22583 :setters) '(MOVE-MONOS))
(setf (callers-list 'CONDI1 :setters) '(MERGE-PREMISES))
(setf (callers-list 'DESIRED :setters) '(REDUCE-EQ-TERM))
(setf (callers-list '#:COLL21972 :setters) '(IS-SUBSET))
(setf (callers-list '#:VAL22984 :setters) '(HAVE-INDUCTIVE-VARS))
(setf (callers-list 'SEPARATOR :setters) '(PRINT-ATOMS))
(setf (callers-list '#:LIS23161 :setters) '(FIND-MERGE-SIGMA))
(setf (callers-list '#:LIS20932 :setters) '(FIND-SPECIAL-TERM))
(setf (callers-list 'BACK :setters) '(X_FAILURE_HANDLER))
(setf (callers-list 'P2 :setters) '(MERGEBLE-TERMS))
(setf (callers-list '#:LIS21229 :setters) '(PROCESS-NEW-AC-CP2))
(setf (callers-list '#:LIS21286 :setters) '(LIST-PAIRS))
(setf (callers-list '#:LIS20593 :setters) '(ACO-BIGT-PARTITION))
(setf (callers-list '#:VAL20357 :setters) '(FIND-BASIS-VECTORS))
(setf (callers-list 'PREV :setters) '(FIND-IN-ORDERED-LIST))
(setf (callers-list '#:COLL23570 :setters) '(SUBS-ARE-PRIMITIVE))
(setf (callers-list '#:LIS22946 :setters) '(ADD-DEFIN-DEPEND))
(setf (callers-list 'ORDER-FUNCTION :setters) '(FIND-IN-ORDERED-LIST))
(setf (callers-list '#:POIN22083 :setters) '(SIMPLIFY-MY-EQ-TERM))
(setf (callers-list '#:POIN21134 :setters) '(CONSISTENT-PAIR))
(setf (callers-list 'FULL :setters) '(ACM-AC-ROOT))
(setf (callers-list '#:LIS20220 :setters) '(OP-POSITION))
(setf (callers-list '#:LIS20965 :setters) '(ONE-ELIM-SUBTERM))
(setf (callers-list '#:LIS21979 :setters) '(IS-SUBLIST))
(setf (callers-list 'LARGS :setters) '(REDUCE-EQ-EXACTLY REDUCE-EQ-TERM UNICOMPOUND))
(setf (callers-list '#:VAL21758 :setters) '(AC-MATCH))
(setf (callers-list '#:POIN22064 :setters) '(TRY-ONE-EXTRA-VAR-RULE))
(setf (callers-list '#:LIS22500 :setters) '(REDUCE-*-TERM))
(setf (callers-list '#:COLL22855 :setters) '(GET-INSTANCE-TERMS2))
(setf (callers-list 'LOW-OPS :setters) '(GET-TERM))
(setf (callers-list '#:VAL22847 :setters) '(REF-INSTANCE-SEEDS))
(setf (callers-list 'USERIN :setters) '(PROVE_EQN X_AUGMENT X_PREPARE_RULES X_CHOOSE_ONE_RULE X_HYPOTHESIS X_ONE_RULE))
(setf (callers-list '#:VAL21431 :setters) '(START-HISTORY))
(setf (callers-list '#:COLL23095 :setters) '(COMPATIBLE-PATTERNS))
(setf (callers-list 'SUGG :setters) '(REMOVE-SUGG TRY-SUGG-PREC PRINT-SUGG-INFO ASK-USER END-AUTO-ORDER IS-BAD-SUGG AUTO-ORIENT))
(setf (callers-list '#:VAL22585 :setters) '(MOVE-MONOS))
(setf (callers-list 'INNER-BODY :setters) '(SLOOP-SLOOP-MACRO SUBSTITUTE-SLOOP-BODY PARSE-LOOP))
(setf (callers-list '#:LIS23191 :setters) '(COMPOSE1))
(setf (callers-list '#:LIS23289 :setters) '(EXTEND-DOM-ARGS))
(setf (callers-list '#:VAL23068 :setters) '(PARTI-BY-VARS))
(setf (callers-list '#:COLL21625 :setters) '(READ-ARGS))
(setf (callers-list '#:VAL20914 :setters) '(HASQUANT))
(setf (callers-list 'BIGT :setters) '(BIGT-TWO-KILL-ONE BIGT-ONE-KILL-ONE ACO-BIGT-PARTITION))
(setf (callers-list '#:COLL21487 :setters) '(PROVE-ALL-EQNS))
(setf (callers-list 'BODY :setters) '(DEF-LOOP-INTERNAL ADD-TIME))
(setf (callers-list '#:LIS20602 :setters) '(ACO-RPOMULT>))
(setf (callers-list '#:POIN23252 :setters) '(APPLY-TO2))
(setf (callers-list 'B :setters) '(SLOOP-SLOOP-MACRO L-EQUAL NEQUAL NEQ ASSOC0 SUMYMAX GENERAL-BASIS-VECTORS))
(setf (callers-list '#:VAL23579 :setters) '(GROUNDP))
(setf (callers-list '#:LIS22329 :setters) '(TOTAL-ORDER-RES))
(setf (callers-list '#:COLL23514 :setters) '(NEWVARSIN))
(setf (callers-list '#:LIS21889 :setters) '(GET-POSITION))
(setf (callers-list 'EXPR2 :setters) '(FIRST-USE-SLOOP-FOR))
(setf (callers-list 'ATOM1-ARGS :setters) '(PARAMODULATE))
(setf (callers-list '#:VAL23625 :setters) '(COMPLETE-WELL-TYPED))
(setf (callers-list '#:LIS22478 :setters) '(P-*-M))
(setf (callers-list 'FLAG :setters) '(X_GET_INDUC_TERM EXPECTED CONSTRUCTORS-CHECK COMPLETE-TEST POLY-SUPER-AT-* PRED-FUNC-SUPERPOSITION WRITE-SIGMA WRITE-F-EQN ORDER-ASS MANUAL-ORIENT EXT-OPERATOR EXT-PRECEDENCE DECOMPOSE-TERMS READ-ATOM DELETE-EQN DELETE-RULE DEFAULT-FLAG PROVE-SPLIT-BOOL UNDO1 UNDO LOOK-AT-PAIR-AND AC-SUP-TERM TRACE-AC-SUPERPOSITION AC-SUPERPOSITION AC-CRITPAIRS RELATED-VARS2 SIMPLIFY-ALL-PREMISES BREAK-ASS ACUNI UNIFY-WITH-AC UNIFY UNIFIERS CONDENSE-SEQUENCE))
(setf (callers-list '#:LIS23345 :setters) '(PARTITION-TERM-BY-TYPE))
(setf (callers-list 'ASS :setters) '(MAKE-PRE-ASS PRED-FUNC-SUP WRITE-ASSERTION ORDER-ASS MAKE-RULE-SIZE-ORDER MAKE-RULE-FROM-ASS ASS2EQN GET-SKO-FUNC HASQUANT SUBST-QUANT-FORM SKOLEMIZE-AWAY-QUANTS REMOVE-QUAN-ARGS SKOLEMIZE TRIVIAL-SIMPLIFY BREAK-AT-OR OR-COUNT SUBSTVARFOR BREAK-ASS PROCESS-ASS PROCESS-ASS1 PROCESS-ASS2 PROCESS-ASS-SIMPLE))
(setf (callers-list '#:LIS21652 :setters) '(PURE-ADD-RULE))
(setf (callers-list 'PAIR :setters) '(RENAME-PAIR-RULE ADD-PAIRS REMOVE-PAIRS-WITH AC-CRITPAIRS PRE-CRIT-CHECKEQ TRACE-DIVISIBLE REMOVE-ONE-ARG DIVISIBLE-CHECK))
(setf (callers-list '#:COLL22966 :setters) '(INDUC-SUBS-TERM))
(setf (callers-list '#:VAL21909 :setters) '(REAL-COLLECT-PRODUCTS))
(setf (callers-list 'PAIR2 :setters) '(DIVISIBLE-CHECK))
(setf (callers-list '#:COLL21892 :setters) '(PRODUCT-LISTS))
(setf (callers-list '#:POIN21007 :setters) '(COMMUNE-TERMS2))
(setf (callers-list 'DRULE :setters) '(PRED-FUNC-SUP))
(setf (callers-list '#:VAL23026 :setters) '(ENCOURAGE))
(setf (callers-list 'PREV-CHOICE :setters) '(NEXT-CHOICE VARS-ONLY))
(setf (callers-list '#:COLL20995 :setters) '(IS-SORTED))
(setf (callers-list 'REST-COLLECTION :setters) '(MATCH-BOOL-XOR))
(setf (callers-list 'STOP :setters) '(AUTO-OPTIONS))
(setf (callers-list 'EQN2 :setters) '(REDUCE-REVERSE-PREMISES ORIENT-AN-EQN ASSERTION2EQUATION NORMALIZE))
(setf (callers-list '#:POIN21430 :setters) '(START-HISTORY))
(setf (callers-list '*PRINT-CASE* :setters) '(DEF-LOOP-INTERNAL))
(setf (callers-list 'CLAUSE :setters) '(SELECTQ CASEQ))
(setf (callers-list '$NUM-TRANS :setters) '(DISTR-AC-ORDER))
(setf (callers-list '$SYMMETRY-TERMS :setters) '(AC-SUPERPOSITION))
(setf (callers-list '#:LIS21173 :setters) '(SUP-TERM2))
(setf (callers-list '#:VAL23684 :setters) '(XIN-MENU))
(setf (callers-list '#:VAL22789 :setters) '(PROVE))
(setf (callers-list '#:LIS21546 :setters) '(AND-LHS-TRUE-RHS))
(setf (callers-list '#:VAL22080 :setters) '(REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list '#:VAL22008 :setters) '(MULT-FORM))
(setf (callers-list '#:COLL22037 :setters) '(REDUCIBLE))
(setf (callers-list '#:COLL21072 :setters) '(DOWN-HILL-ONE))
(setf (callers-list 'NEWRHS :setters) '(SPLIT-RHS-OR SPLIT-RHS-AND))
(setf (callers-list 'H :setters) '(HIGH-OP-POSI))
(setf (callers-list 'OP-TERM :setters) '(DIVISIBLE-CHECK))
(setf (callers-list '#:COLL23662 :setters) '(DISPLAY-TYPE-ARITY))
(setf (callers-list '#:VAL22700 :setters) '(PRE-PROCESS-PREMISES))
(setf (callers-list '#:LIS21998 :setters) '(MULT-DIFF))
(setf (callers-list '$FOPC-LRPO :setters) '(PRE-INIT RESTORE-REST-GLOBALS))
(setf (callers-list 'PI1 :setters) '(ACM-AC-ROOT ACM-AND-EQ))
(setf (callers-list '#:VAL21424 :setters) '(EQ-IN-MONOMIAL))
(setf (callers-list '#:LIS22950 :setters) '(CHOOSE-BEST-SCHEMES))
(setf (callers-list '#:LIS23019 :setters) '(PICK-MAX-SCORE-OP))
(setf (callers-list '#:LIS22205 :setters) '(GET-FREE-CONSTRUCTORS))
(setf (callers-list 'CON1 :setters) '(SUBSUMED-TUPLE))
(setf (callers-list '#:POIN23575 :setters) '(NON-LINEAR-VARS))
(setf (callers-list '#:COLL23487 :setters) '(FREE-VARS))
(setf (callers-list '#:LIS22780 :setters) '(SUBST-PREMISES))
(setf (callers-list 'TRASH :setters) '(RELATED-VARS2 RELATED-VARS))
(setf (callers-list '$GLOB_PREC :setters) '(ADD-SUGG))
(setf (callers-list 'DEPTH :setters) '(TOP-TERM MY-COPYLIST))
(setf (callers-list '#:POIN21724 :setters) '(BODY-PREMISES-SIZE))
(setf (callers-list '#:POIN20350 :setters) '(LOOSE-SYM-SEQUENCE))
(setf (callers-list '#:LIS22679 :setters) '(TRY-SUGG-PREC))
(setf (callers-list '#:LIS20224 :setters) '(FLATTEN-RULE))
(setf (callers-list 'ELSE :setters) '(PARSE-LOOP-WHEN))
(setf (callers-list 'VARIABLE :setters) '(LOOP-ADD-BINDING))
(setf (callers-list '#:VAL22771 :setters) '(SUBST-VAR-PREMISES))
(setf (callers-list '#:VAL20919 :setters) '(GET-SKO-FUNC))
(setf (callers-list '#:LIS22489 :setters) '(POLY-REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list '#:POIN20799 :setters) '(DECANON-XOR))
(setf (callers-list '#:VAL21842 :setters) '(MEMBER-TERM))
(setf (callers-list '#:POIN21908 :setters) '(REAL-COLLECT-PRODUCTS))
(setf (callers-list 'BIG :setters) '(MORE-VARS-PREMISE MAKE-PRE-XOR-ARGS MAKE-ONE-BUILD INDUC-ADD-RULE))
(setf (callers-list '#:LIS21228 :setters) '(PROCESS-NEW-AC-CP2))
(setf (callers-list '#:POIN21865 :setters) '(SPLIT-ALIST))
(setf (callers-list 'T2 :setters) '(SMALLER-SIZE SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM IS-SUBTERM IS-SUBT TERM-SIZE-ORDER QUASI-EQUIVALENT REM-DUP-VARS TRY-SUGG-PREC PRINT-SUGG-INFO POLY-MATCH-+ COMPARE-TERM COMPARE-ITEM MANUAL-ORIENT MAKE-EQ MAKE-CRIT-RULE ASK-USER TRY-TO-ORIENT2 TRY-TO-ORIENT TRY-TO-ORIENT-CONDI NORM-CTX-AND PURE-MIXED-REDUCE PURE-NORM-MIXED REDUCE-BY-RULES SIMPLIFY-MY-EQ-TERM MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC MATCH-SET-AC MATCH-SET MATCH-POSS APPLIES PURE-MATCH MATCH NONAC-UNIFY DECOMPOSE-TERMS IS-VALID-RULE LEXICO-COMP RPOST RPOMULT EQUIV PURE-LRPO LRPO SIMILAR-TERM EQ-IN-MONOMIAL ARRANGE-EQ-ARGS EQUAL-TERM C-MATCH GUIDE-REDUCIBLE-TIME AC-EQUAL MAKE-EQN SAME-ROOT SAME-OP SAME-NONVAR PROCESS-NEW-AC-CP CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-CHECK IS-INCONSI-PAIR IS-COMMUT-PAIR IS-P-COMMUT-PAIR INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT TRACE-DIVISIBLE DIVISIBLE-AC-CHECK DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK2 DIVISIBLE-CHECK CAN-HAVE-NEW-OP AUTO-ORIENT SET-UNIFICATION PLAUSIBLE UNIFIER UNIFIERS ACO-LRPO= ACO-LEXICO-COMP-RL ACO-LEXICO-COMP-LR ACO-LPRO>= ACO-LRPO> ACO-RPOSTATUS>= ACO-RPOSTATUS> ACLRPO IS-ASSOC-PAIR IS-ASSOC-UNDER-C IS-HIGHER-TERM))
(setf (callers-list 'VA :setters) '(MERGE-TWO-TUPLES HAS-NONLINEAR-VARS ADD-OLD-VARS CTX-BAD-LUCK AC-MATCH EQN-INSTANCE PREMISES-INSTANCES))
(setf (callers-list 'CONDI :setters) '(MERGE-TWO-PATTERNS REM-DUP-VARS ONE-PATTERN POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS POLY-MATCH-ONE-TO-* POLY-MATCH-* POLY-MATCH-+ REDUCE-*-TERM REDUCE-+-TERM POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE SIMPLIFY-COND-TERM REDUCE-COND-TERM EQ-MATCH CTX-BAD-LUCK MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC MATCH-SET-AC MATCH-SET VARS-ONLY AC-MATCH APPLIES GOOD-LUCK-CONDI GET-RHS))
(setf (callers-list 'SEQNO :setters) '(ADD_CHILD))
(setf (callers-list '#:LIS20969 :setters) '(IS-ELIM-TERM))
(setf (callers-list 'EQ-ARGS :setters) '(NORM-EQ-ARGS))
(setf (callers-list 'D :setters) '(SUMYMAX GET-LCM-SOLNS GENERAL-BASIS-VECTORS))
(setf (callers-list '#:LIS22112 :setters) '(PURE-OUTRED1))
(setf (callers-list 'ADDITION :setters) '(SHOW-TREE))
(setf (callers-list '#:LIS22276 :setters) '(SUPPORT-EQN))
(setf (callers-list '#:COLL22916 :setters) '(DECIDE-DEFIN-MODE))
(setf (callers-list 'SUB1 :setters) '(RESOLVE COMP1 NORM-SUB COMPOSE1 COMPOSE))
(setf (callers-list '#:LIS21654 :setters) '(ADD-RULE-COMPLETE))
(setf (callers-list 'PROPS :setters) '(RESTORE-PROPERTIES))
(setf (callers-list 'LINE :setters) '(HELP-FILE))
(setf (callers-list '$HISTORY :setters) '(LOAD-RRL CLEAN-HISTORY))
(setf (callers-list '#:VAL23532 :setters) '(IS-SUB-NONVAR-TERM))
(setf (callers-list '#:VAL20745 :setters) '(IS-BLOCKED))
(setf (callers-list '#:POIN21396 :setters) '(TR-TERM))
(setf (callers-list 'Y :setters) '(CAR-LENGTH-CDDR CAR-LENGTH-GREAT LESS-VECTOR INSERT ATTACH *THROW *CATCH DISPLAY-UNIFY ACUNI UNIFY-WITH-AC UNIFY GENERAL-BASIS-VECTORS HALF-ONES AC-MEMBER))
(setf (callers-list '#:LIS22102 :setters) '(OUTRED1))
(setf (callers-list 'MONOMIALS-THAT-GET-SMALLER :setters) '(M-*-P M-AND-P))
(setf (callers-list 'TY2 :setters) '(IS-EXIST-TYPE-NAME IS-SUBTYPE TYPE-COHERE ADD-SUGG-TYPE1 ADD-SUGG-TYPE EXT-TYPE-RELATION READ-TYPE-RELATION))
(setf (callers-list '#:COLL20798 :setters) '(DECANON-XOR))
(setf (callers-list '#:LIS21369 :setters) '(EQ-FIND))
(setf (callers-list '#:POIN23515 :setters) '(NEWVARSIN))
(setf (callers-list 'SUFFIX :setters) '(OPEN-WRITE-FILE OPEN-READ-FILE))
(setf (callers-list 'STRING :setters) '(MARK))
(setf (callers-list 'IS-ASS :setters) '(TRACE-CRIT))
(setf (callers-list 'CON2 :setters) '(SUBSUMED-TUPLE))
(setf (callers-list '#:COLL23619 :setters) '(WELL-TYPED3))
(setf (callers-list '#:POIN22199 :setters) '(GET-CONSTANTS))
(setf (callers-list '#:LIS21634 :setters) '(PRINT-CHOICE-MESSAGE))
(setf (callers-list 'ARITY :setters) '(EXPECT-ARITY EXPECT-ARITY21 EXPECT-ARITY12 SET-UP-ARITY2 BASIC-TERM AUTO-OPERATOR ASK-FOR-OPERATOR READ-OP-DECLARATION SET-ARITY2 SET-ARITY))
(setf (callers-list '#:LIS23255 :setters) '(COMPLETE-TEST))
(setf (callers-list 'MODE :setters) '(ONE-PATTERN GET-INDUC-VARS HAVE-INDUCTIVE-VARS HAS-INDUCTIVE-VAR DECIDE-DEFIN-MODE))
(setf (callers-list '#:LIS23767 :setters) '(REWRITE-ONCE-BY-HYPO))
(setf (callers-list '#:POIN22149 :setters) '(NORM-XOR-TERM))
(setf (callers-list '#:COLL21618 :setters) '(GET-TERM-ARGS))
(setf (callers-list 'NUM2 :setters) '(TRACE-GENERATED-RESULT))
(setf (callers-list '#:COLL20611 :setters) '(ACO-RPOMULT>=))
(setf (callers-list '#:LIS22774 :setters) '(REDUCE-BY-PREMISES))
(setf (callers-list 'VARGSY :setters) '(ACUNI FULL-DIO ALL-ONES))
(setf (callers-list '$DROP-PRES :setters) '(PROOF-METHODS))
(setf (callers-list '$TIME-WHEN-LAST-CALL :setters) '(REPORT-CURRENT-TIME))
(setf (callers-list 'PA :setters) '(PAIR-INFO))
(setf (callers-list 'ANS1 :setters) '(NONAC-UNIFY))
(setf (callers-list '#:POIN20674 :setters) '(UNIFY-WITH-AC))
(setf (callers-list '$EX2 :setters) '(SIZE-DEPTH-STR))
(setf (callers-list 'MATCH-BOOL-RES :setters) '(MATCH-BOOL-XOR))
(setf (callers-list 'ARG1 :setters) '(SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM DETACHMENT-SUPER DETACHMENT-CRITICAL REMAINDER QUOTIENT AVOID-COMMON-TERM NOT-ARG OR-ARGS))
(setf (callers-list '$NUSEREQN :setters) '(GET-CLAUSE GET-EQUATION RESTORE-REST-GLOBALS))
(setf (callers-list 'DEL :setters) '(WASH-DEF-RULES))
(setf (callers-list 'FINISH-LOOP :setters) '(SLOOP-SLOOP-MACRO PARSE-LOOP))
(setf (callers-list '#:COLL21310 :setters) '(CYCLE-REWRITE-AT-ROOT))
(setf (callers-list 'CC :setters) '(SEPARATED))
(setf (callers-list '$UNIF_TIME :setters) '(PARA-SUP-TERM2 INDUC-IDEM-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 UNIFY UNIFIERS))
(setf (callers-list 'COMMENT :setters) '(WRITE-F-PREMISES WRITE-F-RHS))
(setf (callers-list '$CKB_FLAG :setters) '(READ-INPUT PRE-INIT RESTORE-REST-GLOBALS))
(setf (callers-list 'CL1 :setters) '(MERGE-SORT-ARGS MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS))
(setf (callers-list '#:COLL23042 :setters) '(SET-DEPEND-SCORES))
(setf (callers-list 'TEST-VALUE :setters) '(MAKE-VALUE))
(setf (callers-list 'WANT :setters) '(PARSE-ONE-WHEN-CLAUSE))
(setf (callers-list '#:LIS21906 :setters) '(REAL-COLLECT-PRODUCTS))
(setf (callers-list 'TOTAL-TIME :setters) '(START-KB))
(setf (callers-list 'CH :setters) '(CAPITALIZE MY-TYO))
(setf (callers-list '#:COLL21575 :setters) '(ORDER-EQNS))
(setf (callers-list '#:LIS20348 :setters) '(LOOSE-SYM-SEQUENCE))
(setf (callers-list 'OLD-ARGS2 :setters) '(MATCH-BOOL-XOR))
(setf (callers-list 'ARGS :setters) '(APPLY-TO2 IN-ARRAY-SLOOP-FOR DEF-LOOP-INTERNAL PARSE-LOOP-MAP PARSE-LOOP-MACRO ADD-FROM-DATA DEF-LOOP-MACRO DEF-LOOP-FOR DEF-LOOP-MAP ONE-PATTERN HAVE-INDUCTIVE-VARS HAS-INDUCTIVE-VAR INDUC-AC-SUBS MAKE-PRE-XOR-ARGS PROCESS-PRE-ASS POLY-SUPER-AT-*-0 POLY-SUPER-AT-* FIRST-N-ELEMENTS SIMPLIFY-* SIMPLIFY-+ REDUCE-XOR-TERM AC-COMPRESS ANS-MEMBER REM-ARGS UCONCAT TIMES LESSP GREATERP DIFF IF* TR-ADD REDUCE-EQ-TERM MAKE-TERM SYMMETRY-TERMS COMMU-EXCHANGE COMMUE-EXCHANGE COMMUNE-TERMS2 GET-SKO-FUNC NEGATE-XOR-ARGS BREAK-AT-OR SUBSTVARFOR EQ-TR-MEMBER SIMP-XOR-SIMP SIMP-XOR XOR-OF-MONOMIALS SIMP-AND-SIMP SIMP-AND AND-OF-MONOMIALS BA-SIMP-OR BA-SIMP-AND ALL-PLAUS RES1 AC-DISTRI SYM-ARG-POSITIONS ADD-SOLN GET-SOLUTIONS FULL-DIO DIO-INITIALIZE ALL-ONES MULTI-COM FLATTEN FLAT-SORT-ARGS COMPRESS-FLAT))
(setf (callers-list '#:LIS21860 :setters) '(EQ-MATCH))
(setf (callers-list '#:COLL20644 :setters) '(ACO-LRPO=))
(setf (callers-list 'MSET :setters) '(CHANGE-MONO-SIGN))
(setf (callers-list 'OP1 :setters) '(DEPENDED-OP ADD-SUGG1 ADD-SUGG TRANS-STATUS UPDATE-BY-EQ IS-REL-PREC PC-GRT-PREC DEFAULT-PRECEDENCE GRT-PREC TOTAL-ORDER-ATOM WARN-STAT ADD-EQU TRY-MAKE-EQUI EXT-EQUIVALENCE EXT-STATUS EXT-PRECEDENCE SAME-ARITY GREATER-ARITY AUTO-ADD-PREC AUTO-MAKE-EQUI IS-BAD-SUGG AC-DISTRI))
(setf (callers-list '#:VAL21620 :setters) '(GET-TERM-ARGS))
(setf (callers-list 'FUNC-EXPR :setters) '(CHECK-ARITY))
(setf (callers-list '#:VAL23286 :setters) '(DEF-DOMAIN-POINTS))
(setf (callers-list 'CONDI2 :setters) '(MERGE-PREMISES))
(setf (callers-list '#:LIS20808 :setters) '(P-AND-P))
(setf (callers-list '#:COLL23311 :setters) '(SUPERTERM-COVER))
(setf (callers-list 'TUPLE :setters) '(MERGE-TWO-PATTERNS ADD-PATTERNS ADD-OLD-VARS EQN-INSTANCE PREMISES-INSTANCES))
(setf (callers-list '#:LIS20867 :setters) '(PROCESS-ASS-SIMPLE))
(setf (callers-list '#:COLL20777 :setters) '(POST-FOR-WHILE))
(setf (callers-list '#:LIS22494 :setters) '(POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list '#:LIS20818 :setters) '(SIMPLIFY-FLAT))
(setf (callers-list '#:LIS21433 :setters) '(UNDO1))
(setf (callers-list 'ARGS1 :setters) '(RPL-BY-TERMS2 POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS POLY-MATCH-ONE-TO-* POLY-MATCH-* MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC PICK-AN-ARG SET-UNIFICATION AC-DISTRI))
(setf (callers-list '#:VAL20437 :setters) '(COMBINATE))
(setf (callers-list 'NV-COLS :setters) '(LOOSE-SYM-SEQUENCE))
(setf (callers-list '#:COLL20216 :setters) '(PRE-SUB-NONVARS))
(setf (callers-list '#:LIS21542 :setters) '(SEE))
(setf (callers-list '#:VAL22084 :setters) '(SIMPLIFY-MY-EQ-TERM))
(setf (callers-list 'ATOM :setters) '(MINI-EXPAND-EQ EXPAND-EQ SAVE-WORDS SAVE-WORD-END READ-ATOM EQ-IN-MONOMIAL))
(setf (callers-list 'ISVAR :setters) '(CARDINALITY))
(setf (callers-list '#:VAL20826 :setters) '(SIMPLIFY))
(setf (callers-list 'NEW-TOPS :setters) '(GET-TESTSET-QUASI))
(setf (callers-list 'EQLIST :setters) '(EQ-TR))
(setf (callers-list '#:COLL22295 :setters) '(EXPAND-EQ))
(setf (callers-list '#:LIS21840 :setters) '(MEMBER-TERM))
(setf (callers-list 'RANGE :setters) '(NEXT-CHOICE GET-INTERSECTION-RANGE VARS-ONLY))
(setf (callers-list '$GENE-NUM :setters) '(RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIS22468 :setters) '(M-*-P))
(setf (callers-list '#:LIS21131 :setters) '(CONSISTENT-PAIR))
(setf (callers-list 'SO :setters) '(MAKE-CRIT-RULE CHANGE-SOURCE))
(setf (callers-list '#:VAL22308 :setters) '(COMP-TERMS))
(setf (callers-list 'NB-TERM :setters) '(NORM-BOOL-INNERMOST))
(setf (callers-list 'NOT-AS-REST :setters) '(MATCH-BOOL-NEW MATCH-BOOL-XOR))
(setf (callers-list '$CONS-OF-TS :setters) '(GET-TESTSET SYS-FLAG-INIT PRE-INIT RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIS22695 :setters) '(FIRST-PROCESS-PREMISES))
(setf (callers-list '#:POIN22620 :setters) '(NORM-SIGN-CHANGED-MONOS))
(setf (callers-list 'STOCK2 :setters) '(MERGE-TWO-PATTERNS ADD-PATTERNS))
(setf (callers-list '$OPERLIST :setters) '(ENTER-OP PRE-INIT))
(setf (callers-list '#:POIN21576 :setters) '(ORDER-EQNS))
(setf (callers-list 'VEC :setters) '(HALF-ONES))
(setf (callers-list '#:LIS22365 :setters) '(WRITE-PREMISES))
(setf (callers-list 'TABLE :setters) '(IN-TABLE-SLOOP-MAP))
(setf (callers-list '#:COLL23523 :setters) '(IS-SUBTERM))
(setf (callers-list '#:LIS21309 :setters) '(CYCLE-REWRITE-AT-ROOT))
(setf (callers-list '#:VAL21497 :setters) '(FORM-PREMISES-FROM-CONJ))
(setf (callers-list 'FOR-LOOP :setters) '(SLOOP-SLOOP-MACRO))
(setf (callers-list '#:POIN20272 :setters) '(MULTI-COM))
(setf (callers-list '$RESUME-RULE :setters) '(KEEP-RULE-STRATEGY))
(setf (callers-list 'X_EQN :setters) '(COVER-PROOF-PROCESS))
(setf (callers-list 'FAIL :setters) '(ADD-SOLN))
(setf (callers-list '#:COLL23452 :setters) '(NAIL-QUASI-REDUCIBLE))
(setf (callers-list '#:LIS20751 :setters) '(AUTO-KB))
(setf (callers-list '#:LIS22157 :setters) '(NORM-AND-ARGS))
(setf (callers-list 'EXPECTED-TYPE :setters) '(NEXT-TOKEN))
(setf (callers-list '#:POIN22759 :setters) '(SUPER-ITSELF-PRE))
(setf (callers-list '#:VAL20710 :setters) '(ALL-PLAUS))
(setf (callers-list 'TMP :setters) '(IS-SUBSEQUENCE GET-INTERSECTION-RANGE ELIMINATE-SUB ALL-PLAUS DIO2 DIO FULL-DIO))
(setf (callers-list 'LIST2 :setters) '(SPLIT-ALIST))
(setf (callers-list '#:COLL21395 :setters) '(TR-TERM))
(setf (callers-list '#:POIN23055 :setters) '(ADD-OLD-VARS))
(setf (callers-list '#:POIN22167 :setters) '(REDUCE-AT-ROOT-BOOL))
(setf (callers-list '#:LIS20266 :setters) '(ELIMCOM))
(setf (callers-list 'PAIRS :setters) '(EXT-WEIGHT MAKE-PAIRS IS-BAD-SUGG))
(setf (callers-list 'NEWPRES :setters) '(FACTORIZATION REMOVE-IRRELEVANT4 REMOVE-IRRELEVANT2))
(setf (callers-list '#:LIS23705 :setters) '(ABSTRACT-PROOF))
(setf (callers-list '#:LIS22350 :setters) '(WRITE-ASSERTIONS))
(setf (callers-list '#:VAL22065 :setters) '(TRY-ONE-EXTRA-VAR-RULE))
(setf (callers-list '#:LIS22284 :setters) '(HALF-CANONICALIZE-AND-EXPAND-EQ))
(setf (callers-list '#:LIS23415 :setters) '(BASE-DEPTH))
(setf (callers-list '*TYPE-TEST-LIMIT* :setters) '(PARSE-LOOP-FOR PARSE-LOOP))
(setf (callers-list '#:LIM22514 :setters) '(POLY-MATCH-FIND-REST-*-ARGS))
(setf (callers-list '#:LIS23300 :setters) '(ONE-EXTENSIBLE))
(setf (callers-list '#:LIS22681 :setters) '(SUGG-PREC))
(setf (callers-list 'OLD :setters) '(ONE-RULE-ITERATION POLY-CYCLE-LUCK PICK-STRATEGY SUBPAIR SUBST0 SPECIAL-SUBST BRT-IF SUBST-EQN))
(setf (callers-list '#:LIS23480 :setters) '(EXPECTED))
(setf (callers-list '#:LIS20497 :setters) '(PREC-CONSISTENT))
(setf (callers-list 'COEF :setters) '(REDUCE-BY-HOMO-RULES REDUCE-MONO REDUCE-BY-P-COMMUT2))
(setf (callers-list '#:LIM23641 :setters) '(GET-CODOMAIN-TYPES))
(setf (callers-list 'NEWEQNS :setters) '(ABSTRACT-PROOF))
(setf (callers-list 'NEW-LHS2 :setters) '(PARA-SUP-TERM2))
(setf (callers-list '#:POIN20468 :setters) '(SYM-ARG-POSITIONS))
(setf (callers-list 'I1 :setters) '(RESOLVE CON-NUMS))
(setf (callers-list '#:LIS23010 :setters) '(CHOOSE-LEAST-COVER))
(setf (callers-list '#:LIS23049 :setters) '(DEFINING-POSITIONS))
(setf (callers-list 'OP :setters) '(DISPLAY-ONE-ARITY2 DISPLAY-ARITY2 DISPLAY-TYPE-ARITY GET-CODOMAIN-TYPES GET-DOMAIN-TYPE EXPECT-ARITY EXPECT-ARITY21 EXPECT-ARITY12 SET-UP-ARITY2 IS-INFIX-OP IS-VALID-OP ENTER-OP BASE-DEPTH ADD-ONE-DEPTH BASIC-TERM PARTITION-OPS-BY-TYPE DEFINING-DOMAIN GET-DEFINING-DOMAINS GET-SCHEMES GET-TESTSET2 CONSTRUCTORS-CHECK TEST-ONE-OP IS-PARTIAL-OP COMPLETE-TEST START-TEST PARSE-LOOP-FOR MAX-DEPEND-GAP DEFINING-POSITIONS SET-DEPEND-SCORES GET-RECURSIVE-RETURN-OP HAVE-MANY-RECURSIVE-EQNS GET-RECURSIVE-DEF-TERM ENCOURAGE CHOOSE-LEAST-COVER INDUC-AC-SUBS ADD-DEFIN-DEPEND SUBS-OF-SAME-ROOT DECIDE-DEFIN-MODE COVER-SETS GET-COVER-SETS IS-SKOLEM-OP GET-INSTANCE-SEEDS PROVE STATUS-CANDIDATES TRANS-STATUS REMOVE-EQ-OP OK-PREV-RULES UPDATE-BY-EQ EQUIV-OPS OPS-EQUIV-TO WRITE-TERM-SIMPLE INSTANTIATE-LHS WARN-STAT EXT-AC EXT-COMMUTATIVE EXT-TRANSITIVE EXT-DIVISIBLE EXT-CONSTRUCTOR EXT-OPERATOR ADD-STATUS EXT-STATUS EXT-WEIGHT GET-FREE-CONSTRUCTORS EXIST-OP CLEAR-OPERATORS GET-ARITY IS-CONSTANT-OP PURE-REWRITE-AT-ROOT AC-COMPRESS REWRITE-AT-ROOT NEXT-CHOICE GET-INTERSECTION-RANGE VARS-ONLY GET-ITEM GET-LOW-OPS READ-OP-DECLARATION READ-ARITY DISPLAY-OPS INITIALIZE PRE-INIT RESTORE-PROPERTIES GET-ALL-PROPERTIES UNDO1 START-HISTORY TR-FIND COVER-OF IS-TYPE-PREDICATE PRINT-NAME GET-DEF-DOMAIN IS-FREE-CONSTRUCTOR CONSTRUCTORP SET-CONSTRUCTOR SET-COMMUTATIVE SKOLEMP REM-SKOLEM SET-SKOLEM PREDICATEP REM-PREDICATE SET-PREDICATE COMM-OP-P AC-OP-P REM-STATUS GET-STATUS SET-STATUS REM-ARITY2 GET-ARITY2 SET-ARITY2 REM-ARITY IS-CONSTANT SET-ARITY INFIXP REM-INFIX SET-INFIX GET-RULES-WITH-OP RULES-WITH-OP IS-BOOL-OP MAKE-TERMS MAKE-TERM-1ARG MAKE-TERM NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS HIGH-OP-POSI REMOVE-IRRELEVANT3 COMMUNE-TERMS2 SORT-OP-ARGS INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT NEW-RULE-FROM-ASSOC REMOVE-LEFT-ARG2 LEFT-ARG2 REMOVE-RIGHT-ARG2 RIGHT-ARG2 REMOVE-LEFT-ARG LEFT-ARG REMOVE-RIGHT-ARG RIGHT-ARG DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK GET-SKO-FUNC INIT-BOOL-OPS EQ-TR-MEMBER NOT-AUTO-PREV-RULES AUTO-ADD-STATUS POST-FOR-WHILE AUTO-ORIENT AUTO-KB ACUNI PREC-CONSISTENT ADD-SOLN GET-SOLUTIONS FULL-DIO ALL-ONES WASH-DEF-RULES FLATTEN HAS-ACOP FLATTEN-RULES2 FLATTEN-RULES MAKE-ASS-COM-OP FLAT-SORT-ARGS COMPRESS-FLAT))
(setf (callers-list 'ALLVARS :setters) '(RELATED-VARS2))
(setf (callers-list '#:VAL23085 :setters) '(MERGEBLE-TERMS))
(setf (callers-list 'REST-OF-ARGS :setters) '(REDUCE-AND-TERM))
(setf (callers-list 'ORDER :setters) '(IS-SORTED))
(setf (callers-list 'CONSISTENT :setters) '(PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL COVER-NORM-UNCONDI-EQN))
(setf (callers-list '#:COLL21127 :setters) '(HANDLE-FACTOR))
(setf (callers-list '#:VAL22506 :setters) '(POLY-MATCH-TEST-REST-*-ARGS))
(setf (callers-list '#:VAL22768 :setters) '(PRES-SIZE))
(setf (callers-list '#:LIS20597 :setters) '(BIGT-ONE-KILL-ONE))
(setf (callers-list '#:LIS21836 :setters) '(OCCUR-NUM))
(setf (callers-list '#:LIS20355 :setters) '(FIND-BASIS-VECTORS))
(setf (callers-list '#:LIS20936 :setters) '(HAVE-BOOLEAN-CONSTANT))
(setf (callers-list '#:LIS22800 :setters) '(NEGATE-EQN))
(setf (callers-list '#:POIN20672 :setters) '(UNIFY-WITH-AC))
(setf (callers-list 'PP :setters) '(SEPARATED))
(setf (callers-list 'SS :setters) '(SEPARATED ACO-NOBIGT-PARTITION))
(setf (callers-list '#:LIS21709 :setters) '(IS-VALID-CONDI-RULE))
(setf (callers-list '#:LIS21651 :setters) '(PURE-PROCESS-EQUATION))
(setf (callers-list '$TESTSET :setters) '(RULE-DESTROYABLE GET-TESTSET FLATTEN-TESTSET SYS-FLAG-INIT))
(setf (callers-list '#:LIS23669 :setters) '(WELL-TYPED-EQN))
(setf (callers-list 'DATA :setters) '(ADD-FROM-DATA))
(setf (callers-list '#:LIS20642 :setters) '(ACO-LRPO=))
(setf (callers-list 'FAILED :setters) '(WRITEF-SYS BRAKE-CHOICE FASTKB-CHOICES FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS INVALID-RULE DELETE-SYS))
(setf (callers-list '#:LIS22044 :setters) '(GUIDE-REDUCIBLE))
(setf (callers-list 'DECL-LIST :setters) '(PARSE-LOOP-DECLARE))
(setf (callers-list '#:LIS21299 :setters) '(CYCLE-REDUCE-OTHERS))
(setf (callers-list '$BRT_TIME :setters) '(SUBST-VAR-PREMISES PRE-PROCESS-PREMISES NORM-POLY POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE PRED-CRITICAL-PAIR REDUCE-AT-ROOT-BOOL NORM-CTX REDUCE-AT-ROOT-ONE-RULE APPLYSUBST-PRE IS-SYMMETRY-EQN PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS COVER-NORM-TERM BRT FLATTEN-EQN FLATTEN-RULE SUBST-EQN))
(setf (callers-list '#:COLL21513 :setters) '(EQN-INSTANCE))
(setf (callers-list '#:LIS23339 :setters) '(DESTROYABLE))
(setf (callers-list 'VALUE :setters) '(LOOP-ADD-BINDING MAKE-VALUE DESETQ COLLECT-CDR-WITH-SAME-CAR))
(setf (callers-list '#:COLL21881 :setters) '(NON-DECREASING-SEQ))
(setf (callers-list '#:POIN21711 :setters) '(IS-VALID-CONDI-RULE))
(setf (callers-list '#:LIS22318 :setters) '(TOTAL-ORDER-PC-RES))
(setf (callers-list '#:LIS23681 :setters) '(XIN-MENU))
(setf (callers-list 'D-OPS :setters) '(DELETE-EQN DELETE-RULE))
(setf (callers-list '#:VAL23327 :setters) '(GET-SKELETON2))
(setf (callers-list '#:LIS23462 :setters) '(QUASI-REMOVER))
(setf (callers-list 'TYPE :setters) '(WELL-TYPED-VAR ONE-TYPE-ALL-VARS ONE-TYPE-VAR-LIST CONSTRUCTORS-CHECK STR-FORMULATE-SCHEME DEF-LOOP-INTERNAL PARSE-LOOP-MACRO PARSE-LOOP-FOR LOOP-ADD-TEMPS PARSE-LOOP-DECLARE LOOP-DECLARE-BINDING LOOP-ADD-BINDING MAKE-VALUE THE-TYPE INSTANTIATE-LHS IS-RULE-SOURCE-TYPE CHANGE-RULE-SOURCE-TYPE IS-SOURCE-TYPE))
(setf (callers-list '#:LIS22380 :setters) '(SHOW-MESSAGE))
(setf (callers-list '#:LIS21511 :setters) '(EQN-INSTANCE))
(setf (callers-list '#:LIS21935 :setters) '(INSERT-LIST))
(setf (callers-list 'SURPLUS :setters) '(ACO-NOBIGT-PARTITION))
(setf (callers-list 'BIN :setters) '(NORM-SUB ELIM-BIN))
(setf (callers-list 'END :setters) '(PARSE-LOOP-FOR))
(setf (callers-list '#:COLL21267 :setters) '(REMOVE-PAIRS-WITH))
(setf (callers-list 'NTS :setters) '(QUASI-REMOVER))
(setf (callers-list '#:COLL21448 :setters) '(MY-COPYLIST))
(setf (callers-list '$EQN-SET :setters) '(REFUTE-EQN LINEAR KNUTH-BENDIX1 ORDER-EQNS RRL-AUX RESET-RRL SAVE-RRL POSTPONE-OR-UNDO POSTPONE-IT FLATTEN-RULES))
(setf (callers-list '#:LIS23264 :setters) '(GET-TESTSET2))
(setf (callers-list '#:POIN22165 :setters) '(REDUCE-AT-ROOT-BOOL))
(setf (callers-list '#:VAL21882 :setters) '(NON-DECREASING-SEQ))
(setf (callers-list '#:LIS21108 :setters) '(GOOD-UNIT-CLAUSE))
(setf (callers-list '#:LIS20803 :setters) '(M-AND-P))
(setf (callers-list '#:LIS22356 :setters) '(WRITE-TERM-SIMPLE))
(setf (callers-list 'SPN :setters) '(WRITE-DISJUNCTIONS))
(setf (callers-list '#:COLL23739 :setters) '(X_REAL_VARS))
(setf (callers-list '#:LIS22550 :setters) '(ELES-MORE-THAN-1))
(setf (callers-list 'TAIL :setters) '(UPDATE-BY-EQ))
(setf (callers-list 'ONLY-IF-NOT-THERE :setters) '(LOOP-ADD-TEMPS LOOP-ADD-BINDING PARSE-LOOP-WITH))
(setf (callers-list '*LOOP-COLLECT-POINTERS* :setters) '(PARSE-LOOP))
(setf (callers-list '#:LIS22122 :setters) '(NORM-WITH-BIN))
(setf (callers-list 'MONO :setters) '(REDUCE-MONO NORM-MULT-MONOS NORM-SIGN-CHANGED-MONOS))
(setf (callers-list '#:LIS21826 :setters) '(DIVIDED-BY))
(setf (callers-list 'LAST :setters) '(FILLARRAY))
(setf (callers-list '#:VAL22304 :setters) '(ORDER-ASS))
(setf (callers-list '#:COLL20744 :setters) '(IS-BLOCKED))
(setf (callers-list '#:LIS21179 :setters) '(INDUC-SUPERPOSITION))
(setf (callers-list '#:COLL22198 :setters) '(GET-CONSTANTS))
(setf (callers-list 'SAVE :setters) '(SIMPLIFY-PREMISES))
(setf (callers-list '#:VAL23544 :setters) '(SUB-OR-EQ-TERM))
(setf (callers-list '#:LIS22382 :setters) '(PRED-SUPER))
(setf (callers-list '#:LIS20534 :setters) '(ACO-HARD>))
(setf (callers-list 'LOW-ARG :setters) '(MINI-EXPAND-EQ EXPAND-EQ))
(setf (callers-list 'YES :setters) '(IS-FAILED-INDUC-EQN))
(setf (callers-list '#:LIS23595 :setters) '(WELL-TYPED2))
(setf (callers-list 'TO :setters) '(IN-ARRAY-SLOOP-FOR))
(setf (callers-list 'I2 :setters) '(RESOLVE CON-NUMS))
(setf (callers-list 'SIGN :setters) '(SKOLEMIZE-AWAY-QUANTS REMOVE-QUAN-ARGS SKOLEMIZE))
(setf (callers-list '#:LIS20353 :setters) '(CONDENSE-SEQUENCE))
(setf (callers-list '$ORD_TIME :setters) '(ORDER-ASS PROCESS-ASS-SIMPLE))
(setf (callers-list '#:LIS21601 :setters) '(DISPLAY-OPS))
(setf (callers-list 'DONE :setters) '(TRACE-GENERATED-RESULT FAIL-END-INDUC))
(setf (callers-list '#:COLL20603 :setters) '(ACO-RPOMULT>))
(setf (callers-list '#:LIS23498 :setters) '(RPLAT-IN-BY))
(setf (callers-list '*LOOP-MAP-DECLARES* :setters) '(PARSE-LOOP-MAP PARSE-LOOP))
(setf (callers-list 'MO :setters) '(GET-SCHEME-VARS GET-INDUC-VARS INDUCTIBLE))
(setf (callers-list '#:COLL21477 :setters) '(SPLIT-LHS-AND))
(setf (callers-list '$USED-RULE-NUMS :setters) '(REDUCTION-PROOF REFUTED-RESULT PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL FOUND-WITNESS FLATTEN-WITNESS INDUC-IDEM-SUPERPOSITION INCONSISTENT-EQN CONSISTENT-RULE MAKE-ONE-DOWN-HILL COVER-NORM-UNCONDI-EQN COVER-NORMALIZE PRINT-NORMALIZED-EQN INDUC-REDUCE-OTHERS-AUX PROCESS-ASS-SIMPLE))
(setf (callers-list '#:COLL21757 :setters) '(AC-MATCH))
(setf (callers-list '#:LIS22152 :setters) '(NORM-OR-ARGS))
(setf (callers-list '$REDUCED-PREMISES :setters) '(ADD-PREMISE-END SIMPLIFY-ONE-PRE COVER-CONDI-NORM))
(setf (callers-list '#:LIS21294 :setters) '(IS-SYMMETRY-EQN))
(setf (callers-list '#:COLL22609 :setters) '(IS-HOMOGENEOUS-TERM))
(setf (callers-list 'OFFSET :setters) '(CURSOR_DOWN))
(setf (callers-list '#:LIM20462 :setters) '(DIO2))
(setf (callers-list '#:LIS22420 :setters) '(PRED-CRITICAL-PAIR))
(setf (callers-list '#:COLL20231 :setters) '(FLATTEN-PREMISES))
(setf (callers-list 'EQLISTS :setters) '(EQ-JOIN EQ-ADD EQ-FIND))
(setf (callers-list '#:LIS20518 :setters) '(ACO-LRPO>))
(setf (callers-list '#:VAL22125 :setters) '(NORM-WITH-BIN))
(setf (callers-list '#:POIN21619 :setters) '(GET-TERM-ARGS))
(setf (callers-list 'S :setters) '(REMOVE-SUGG SUB-TEST NOT-IN-SET COPYSYMBOL PARAMODULATE SAME-OP? ARGS))
(setf (callers-list 'PSIZE :setters) '(MAKE-PAIRS))
(setf (callers-list '*LOOP-MAP* :setters) '(SLOOP-SLOOP-MACRO PARSE-LOOP-MAP PARSE-LOOP))
(setf (callers-list '$NORM_TIME :setters) '(PURE-PROCESS-EQUATION PROCESS-EQUATION COVER-NORM-ORDER PROCESS-ASS-SIMPLE))
(setf (callers-list '#:LIS23065 :setters) '(PARTI-BY-VARS))
(setf (callers-list '#:POIN22154 :setters) '(NORM-OR-ARGS))
(setf (callers-list '#:POIN22438 :setters) '(MANUAL-PICK))
(setf (callers-list '#:LIS21727 :setters) '(GET-RULE-LEVEL))
(setf (callers-list 'FIRSTN :setters) '(GET-INSTANCE-TERMS2))
(setf (callers-list 'UNI2 :setters) '(LESSP-SIZE-BINDINGS))
(setf (callers-list '#:LIS21592 :setters) '(ENABLE-RULE))
(setf (callers-list 'TEMP :setters) '(INDUC-PROVE OK-PREV-RULES OPS-EQUIV-TO SUB-TEST DIO2 DIO FULL-DIO ALL-ONES))
(setf (callers-list 'XOR-TERM :setters) '(NORM-XOR-TERM))
(setf (callers-list '#:COLL23420 :setters) '(MAKE-TUPLES))
(setf (callers-list '#:LIS22727 :setters) '(MAKE-PRE-ASS))
(setf (callers-list '#:COLL21256 :setters) '(PROCESS-AC-UNIFIER))
(setf (callers-list '#:LIM22532 :setters) '(POLY-SUPER-AT-*-0))
(setf (callers-list '#:LIS21795 :setters) '(MATCH-POSS))
(setf (callers-list '#:LIS21151 :setters) '(PICK-OUT-RULE))
(setf (callers-list 'LS :setters) '(PRODUCT-LISTS))
(setf (callers-list '#:LIS22119 :setters) '(NORM-INN))
(setf (callers-list '#:LIS20565 :setters) '(ACO-HARDER))
(setf (callers-list 'NTH9 :setters) '(IS-CONDI-DOMINATE-RULE))
(setf (callers-list '#:COLL21100 :setters) '(REMOVE-IRRELEVANT4))
(setf (callers-list '#:COLL23566 :setters) '(PRIMITIVE-SUBST))
(setf (callers-list '#:VAL22760 :setters) '(SUPER-ITSELF-PRE))
(setf (callers-list 'PRES2 :setters) '(MATCH-PREMISES))
(setf (callers-list '#:LIS21210 :setters) '(NEW-AC-SUPER-SAME))
(setf (callers-list 'LEQNS :setters) '(REWRITE-ONCE-BY-HYPO X_MATH_IND))
(setf (callers-list '#:LIS23328 :setters) '(GET-DOWN))
(setf (callers-list '#:COLL20659 :setters) '(UNIFY))
(setf (callers-list '#:LIS20363 :setters) '(HALF-ONES))
(setf (callers-list '$POST-BOUND :setters) '(POLY-INITIALIZE PRE-INIT RESTORE-REST-GLOBALS POSTPONE-OR-UNDO))
(setf (callers-list '#:POIN20365 :setters) '(HALF-ONES))
(setf (callers-list '$TRY :setters) '(PRE-INIT))
(setf (callers-list '#:LIS23675 :setters) '(X_REDUCE-BY-ONE-RULE))
(setf (callers-list '#:COLL20757 :setters) '(AUTO-ORIENT))
(setf (callers-list 'RES-SUBST :setters) '(REDUCE-EQ-EXACTLY))
(setf (callers-list '#:LIS22553 :setters) '(MOVE-LHS-ARGS))
(setf (callers-list 'EQ-PAIRS :setters) '(EQ-FIND))
(setf (callers-list '#:COLL22033 :setters) '(ANS-MEMBER))
(setf (callers-list '#:LIS23151 :setters) '(MERGE-TWO-PATTERNS))
(setf (callers-list 'STATE :setters) '(ADD_CHILD SHOW-TREE IF*))
(setf (callers-list '#:LIS21481 :setters) '(SPLIT-LHS-OR))
(setf (callers-list 'PREDRULE :setters) '(PRED-FUNC-SUPERPOSITION))
(setf (callers-list '#:LIS23707 :setters) '(COVER-SET-SCHEME))
(setf (callers-list '#:LIS22492 :setters) '(POLY-REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list '#:LIS21555 :setters) '(INITIALIZE))
(setf (callers-list '#:VAL23168 :setters) '(MERGE-TWO-TUPLES))
(setf (callers-list 'PAT :setters) '(X_REMOVE_HYP RENAME-PATTERN ONE-PATTERN COMPATIBLE-PATTERNS FORM-PATTERNS-SINGLE MERGEBLE-TERMS GET-INTERSECTION-RANGE))
(setf (callers-list 'NUM-OLDEQN :setters) '(X_MATH_IND))
(setf (callers-list 'SUMY :setters) '(GENERAL-BASIS-VECTORS))
(setf (callers-list 'NEW :setters) '(REDUCTION-PROOF SPLIT-PREMISES TRACE-GENERATED-RESULT ABSTRACT-PROOF ONE-RULE-ITERATION MAKE-TUPLES NORM-SUB PROVE NORM-MULT-MONOS NORM-SIGN-CHANGED-MONOS NORM-POLY POLY-SUPER-DISTRIBUTION POLY-MATCH-FIND-REST-*-ARGS POLY-CYCLE-LUCK REDUCE-XOR-TERM NORM-CTX MATCH-PREMISES INSERT-POLY-SIGMA CHECK-WITNESS PROCESS-EQUATION SUBPAIR SUBST0 CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-2 MAKE-ONE-DOWN-HILL HEAD-LESS-THAN-PRES NORM-BUT-ROOT COVER-NORM-TERM COVER-NORM-ORDER REMOVE-LEFT-ARG2 REMOVE-RIGHT-ARG2 SPECIAL-SUBST BRT-IF SUBST-EQN))
(setf (callers-list 'VAR :setters) '(PROOF-BY-HINT-TERM WELL-TYPED-VAR NON-LINEAR-VARS OCCURS-IN NEWVARSIN MAKE-NEW-VARIABLE STR-FORMULATE-SCHEME STR-CHOOSE-ONE-SCHEME IN-FRINGE-SLOOP-MAP FIRST-USE-SLOOP-FOR IN-CAREFULLY-SLOOP-FOR =-SLOOP-FOR IN-PACKAGE-SLOOP-MAP IN-TABLE-SLOOP-MAP PARSE-LOOP-MAP PARSE-LOOP-FOR LOOP-DECLARE-BINDING PARSE-LOOP-WITH FIND-MERGE-SIGMA MERGEBLE-TERMS WRITE-VARIABLE CTX-BAD-LUCK ELIM-BIN GET-INTERSECTION-RANGE VARS-ONLY OCCURS-IN-RULE HYPO-SUBSUME-EQN CHANGE-VARS CUR-VAL ADD-TIME NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS CONSISTENT-PAIR TRACE-REMOVE-IRRELEVANT4 NEW-RULE-FROM-ASSOC GET-SKO-FUNC SKOLEMIZE-AWAY-QUANTS))
(setf (callers-list 'POLY2 :setters) '(P-*-P P-+-P P-XOR-P P-AND-P))
(setf (callers-list 'OP2 :setters) '(DEPENDED-OP MAX-DEPEND-GAP ADD-DEFIN-DEPEND ADD-SUGG1 ADD-SUGG TRANS-STATUS IS-REL-PREC PC-GRT-PREC GRT-PREC TOTAL-ORDER-ATOM WARN-STAT ADD-EQU TRY-MAKE-EQUI EXT-EQUIVALENCE EXT-PRECEDENCE SAME-ARITY GREATER-ARITY AUTO-ADD-PREC AUTO-MAKE-EQUI IS-BAD-SUGG))
(setf (callers-list 'CONDITION :setters) '(PICKOUT))
(setf (callers-list '#:LIS22426 :setters) '(PICK-UNMARKED-RULE))
(setf (callers-list '#:LIS21717 :setters) '(MAKE-NEW-RULE))
(setf (callers-list '#:LIS23518 :setters) '(IS-SUBT))
(setf (callers-list '#:LIS22987 :setters) '(ELIGIBLE-INDUC-TERMS))
(setf (callers-list 'RULE :setters) '(ORIENT-INDUC-HYPO REWRITE-ONCE-BY-HYPO X_AUGMENT X_PREPARE_RULES X_CLEAN-RULE X_ADD-RULE3 X_REDUCE-BY-ONE-RULE REDUCE-EQN-BY-ONE-RULE SWITCH_RULE_LR ONE-RULE-ITERATION X_HYPOTHESIS X_ONE_RULE OPS-OF-RULE GET-RECURSIVE-RETURN-OP IS-CROSS-OP REFUTE-RULE-INSTANCES REFUTED-RESULT REDUCE-BY-PREMISES REDUCE-BY-PREMISES-AT-ROOT REDUCE-BY-HOMO-RULES POLY-ADD-HOMO-RULES IS-HOMOGENEOUS-RULE IS-CHARACTER-RULE MAKE-RULE-INSTANCES MOVE-LHS-ARGS POLY-SUPER-DISTRIBUTION REDUCE-*-TERM REDUCE-+-TERM POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE POLY-REDUCE-AT-ROOT-ONE-RULE LAST-CHECK-2ND-RULE MAN-PICK-2ND-RULE CHOOSE-BY-HAND INTRO-RULE IS-BIG-ENOUGH-RULE PICK-UNMARKED-RULE-DUMMY PICK-UNMARKED-RULE DETACHMENT-CRITICAL DETACHMENT-RULE BOTH-ADD-PREDICATE IDEM-SUPER-COMMU IDEM-SUPERPOSITION WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE REDUCE-AND-TERM REDUCE-XOR-TERM REDUCE-AT-ROOT-BOOL PURE-REWRITE-AT-ROOT NORM-INN PURE-NORM-INN POLISH-PREMISES PURE-REDUCE-BY-ONE-AT-ROOT PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-AT-ROOT REDUCE-BY-ONE-RULE REDUCE-BY-RULES ADD-TO-ARGS REDUCE-AT-ROOT-ONE-RULE TRY-ONE-EXTRA-VAR-RULE TRY-ONE-CONDI-RULE TRY-ONE-RULE REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES REDUCE-AT-ROOT GUIDE-REDUCIBLE REDUCIBLE GOAL-RULE-SIZE PICK-SMALL-GOAL PICK-GOAL LINEAR IS-CONDI-DOMINATE-RULE OCCURS-IN-RULE GET-RULE-LEVEL CTX-DOMINANT-RULE CHECK-WITNESS CLEAN-RULE ADD-RULE3 REDUCE-POST-ASS ADD-RULE-LINEAR REDUCE-OTHER-RULES ADD-RULE-COMPLETE ADD-CRIT-RULE PURE-ADD-RULE ADD-RULE ENABLE-RULE DISABLE-RULE ORDER-EQNS IDEM-EQ-CRITICAL REDUCE-EQ-EXACTLY DOMAIN-RULEP IS-RULE-SOURCE-TYPE CHANGE-RULE-SOURCE-TYPE REF-PRES-VARS LHS-VARS IS-GENERAL-RULE IS-REDUCTION RULE-SOURCE-TYPE RULE-SOURCE PAIRSWITH LHSIZE CHANGE-RULENO RULENO PRED-RULEP REF-EXTRA-PRE-VARIABLES SET-EXTRA-PRE-VARIABLES SET-NO-REDUCTION-MARK REF-SYMMETRY-VARS REF-SYMMETRY-TERMS CRIT-MARKED SET-SYMMETRY-MARK SET-CRIT-MARK IS-CONDI-RULE CTX RHS LHS UNITP IS-SYMMETRY-RULE SYMMETRY-VARS GET-SYMMETRY-TERMS CYCLE-REDUCE-AT-ROOT-4 CYCLE-REDUCE-AT-ROOT-3 CYCLE-REDUCE-AT-ROOT-2 CYCLE-REDUCE-AT-ROOT-1 CYCLE-REWRITE-RULE CYCLE-REWRITE-AT-ROOT CYCLE-REDUCE-TERM CYCLE-REDUCE-OTHERS MAKE-CYCLE-RULE REMOVE-PAIRS-WITH INDUC-IDEM-SUPERPOSITION INDUC-SUP-TERM INDUC-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS PICK-OUT-RULE TRACE-INCONSISTENCY INCONSISTENT-EQN CONSISTENT-RULE TRACE-REMOVE-IRRELEVANT4 GOOD-UNIT-CLAUSE REMOVE-IRRELEVANT4 OPS-IN-PRES-OF-RULES RULE-SUBSUMED-PREMISES NO-SUBSUMPTION ADD-EXTRA-PREMISE COVER-CONDI-NORM P-COMMUT-REDUCE-OTHERS NEW-RULE-FROM-ASSOC CHECK-BUILD-RULE INDUC-REDUCE-OTHER-RULES INDUC-ORIENT-AN-EQN ADD-CONDI-DOMINATE-RULE INDUC-ADD-RULE MAKE-ASS-COM-OP FLATTEN-RULE))
(setf (callers-list '#:COLL22307 :setters) '(COMP-TERMS))
(setf (callers-list 'ARGSY :setters) '(ACUNI ELIMCOM))
(setf (callers-list 'P :setters) '(GET-DOWN COMPATIBLE-PATTERN CON1-NUMS INCREMENT-POS INFIX-LETTER LAST-LETTER LETTERP HIGH-OP-POSI))
(setf (callers-list '#:POIN23096 :setters) '(COMPATIBLE-PATTERNS))
(setf (callers-list '$INSTANT-SEEDS :setters) '(REFUTE-EQN RESTORE-REST-GLOBALS))
(setf (callers-list 'STR-LIST :setters) '(SHOW-MESSAGE))
(setf (callers-list 'MANY :setters) '(ADD-END PUSH-END))
(setf (callers-list '#:VAL23699 :setters) '(INDUC-SUBGOAL-PROOFS))
(setf (callers-list '#:LIS21466 :setters) '(RENAME-EQN-RULE))
(setf (callers-list '#:COLL23036 :setters) '(COMPATIBLE-PATTERN))
(setf (callers-list '#:LIS23029 :setters) '(GET-RECURSIVE-DEF-TERM))
(setf (callers-list 'NO-TOP :setters) '(UNIFY))
(setf (callers-list '#:LIS23355 :setters) '(GET-BASIC-TYPE-TERMS))
(setf (callers-list '#:POIN22097 :setters) '(POLISH-PREMISES))
(setf (callers-list 'HCM2 :setters) '(M-AND-M))
(setf (callers-list '#:LIS23396 :setters) '(NEW-TOP-TERMS))
(setf (callers-list '#:VAL20212 :setters) '(SUBST-EQN))
(setf (callers-list '#:LIS21280 :setters) '(LOOK-AT-PAIR-AND))
(setf (callers-list '#:LIS22875 :setters) '(GET-COVER-SETS))
(setf (callers-list '#:LIS23526 :setters) '(OCCURS-IN))
(setf (callers-list '#:POIN20263 :setters) '(FLATTEN))
(setf (callers-list '#:COLL22955 :setters) '(INDUC-SUBS-OF-EQN))
(setf (callers-list '#:COLL23325 :setters) '(GET-SKELETON2))
(setf (callers-list 'PRE2 :setters) '(REDUCE-REVERSE-PREMISES ADD-SIMPLIFY-OTHERS MATCH-PREMISE INSTANCE-DELETE-CONDITION LRPO-PREMISES LESS-SIZE-CAR SUBSUMED-PREMISES SMALLER-PRE-CAR RELEASE-PREMISES))
(setf (callers-list '#:LIS21848 :setters) '(MATCH-BOOL-NEW))
(setf (callers-list '$SUBS2 :setters) '(AC-SUPERPOSITION PURE-SUPERPOSITION FUNC-SUPERPOSITION))
(setf (callers-list '#:LIS21693 :setters) '(RPOMULT))
(setf (callers-list '#:LIS21948 :setters) '(LESS-VECTOR))
(setf (callers-list '#:LIS21062 :setters) '(OPS-IN-PRES-OF-RULES))
(setf (callers-list 'VALIDSOLNS :setters) '(GENERAL-BASIS-VECTORS))
(setf (callers-list 'C1 :setters) '(IS-SUBSEQ-LIST))
(setf (callers-list 'PRES21 :setters) '(SUBSUMED-PREMISES))
(setf (callers-list '#:LIS22129 :setters) '(PURE-NORM-WITH-BIN))
(setf (callers-list '#:VAL20859 :setters) '(EQ-TR-MEMBER))
(setf (callers-list '#:COLL22096 :setters) '(POLISH-PREMISES))
(setf (callers-list '#:COLL20884 :setters) '(SUBSTVARFOR))
(setf (callers-list 'ARROW2 :setters) '(SHOW-TREE))
(setf (callers-list 'X_EXIT :setters) '(COVER-PROOF-PROCESS))
(setf (callers-list 'LITERAL :setters) '(GET-TERM))
(setf (callers-list '#:POIN22569 :setters) '(MAKE-RULE-INSTANCES))
(setf (callers-list 'HELP :setters) '(COVER-CONDI-NORM))
(setf (callers-list 'RESULTS :setters) '(SYMMETRY-TERMS SYMMETRY-VARS))
(setf (callers-list '#:COLL21006 :setters) '(COMMUNE-TERMS2))
(setf (callers-list 'OLDS :setters) '(NEW-ARGS MAKE-BETTER-PRES))
(setf (callers-list 'INITIAL :setters) '(PARSE-LOOP-MACRO PARSE-LOOP-WHEN))
(setf (callers-list 'CONJ :setters) '(FORM-SUBGOALS-FROM-PATTERNS FORM-PREMISES-FROM-CONJ))
(setf (callers-list 'N2 :setters) '(EXTEND-DOM-ARGS REM-DUP-VARS REMOVE-DUP-VARS ADD-POSITIVE PC-GRT-PREC POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* POLY-MATCH-FIND-REST-*-ARGS CHOOSE-BY-HAND LOOK-AT-PAIR-AND PAIR-INFO TWO-KILL-ONE))
(setf (callers-list '#:LIS22093 :setters) '(PURE-REDUCE-BY-ONE-RULE))
(setf (callers-list 'V :setters) '(MAP-FRINGE FIND-IN-ORDERED-LIST SLOOP-SLOOP-MACRO IN-ARRAY-SLOOP-FOR PARSE-LOOP-MAP PARSE-LOOP-MACRO PARSE-LOOP-FOR ADD-FROM-DATA PARSE-LOOP-DECLARE LOOP-DECLARE-BINDING LOOP-ADD-BINDING LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-ONE-WHEN-CLAUSE PARSE-LOOP-INITIALLY PARSE-LOOP-DO PARSE-NO-BODY PARSE-LOOP1 PARSE-LOOP LOOP-LET-BINDINGS LCASE UCONCAT))
(setf (callers-list 'TRLISTS :setters) '(TR-CLOSURE TR-ADD TR-FIND))
(setf (callers-list 'L__2 :setters) '(WRITE-SIGMA WRITE-ONE-PRE WRITE-TERM WRITE-F-EQN WRITE-F-RULE RENAME-EQN-RULE RENAME-TERM TRACE-REMOVE-IRRELEVANT4))
(setf (callers-list '#:LIS21366 :setters) '(EQ-TR))
(setf (callers-list '#:LIS21046 :setters) '(BUILD-EQN-FROM-PRES))
(setf (callers-list 'CONS-OPS :setters) '(GET-TESTSET-QUASI))
(setf (callers-list 'THIS :setters) '(FREE-VARS))
(setf (callers-list '#:LIM23399 :setters) '(TOP-TERM))
(setf (callers-list '#:LIS20215 :setters) '(PRE-SUB-NONVARS))
(setf (callers-list '#:COLL21533 :setters) '(HYPO-SUBSUME-EQN))
(setf (callers-list 'SEEDS :setters) '(REF-INSTANCE-SEEDS))
(setf (callers-list 'AT-TOP :setters) '(COVER-UNCONDI-NORM COVER-NORMALIZE))
(setf (callers-list 'W :setters) '(EXT-WEIGHT))
(setf (callers-list '#:LIM23503 :setters) '(RPL-BY-TERMS2))
(setf (callers-list '#:VAL23520 :setters) '(IS-SUBT))
(setf (callers-list '$VAR-PREMISES :setters) '(ADD-PREMISE-END FIRST-PROCESS-PREMISES IS-PREVIOUS-INDUC-EQN INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS COVER-CONDI-NORM COVER-UNCONDI-NORM REMOVE-VAR-PRES))
(setf (callers-list 'OP-SET :setters) '(IS-LIMITED))
(setf (callers-list '#:LIS23197 :setters) '(COMP1))
(setf (callers-list '#:LIS22790 :setters) '(PROVE))
(setf (callers-list 'RULE-NUMS :setters) '(DISABLE-RULES-AUX DELETE-RULE TRACE-INCONSISTENCY))
(setf (callers-list '#:POIN22296 :setters) '(EXPAND-EQ))
(setf (callers-list 'ARGLIST :setters) '(DEF-LOOP-COLLECT))
(setf (callers-list 'MTERM :setters) '(PARTI-BY-VARS))
(setf (callers-list '#:VAL23659 :setters) '(GET-SUBTYPES))
(setf (callers-list '#:LIS22491 :setters) '(POLY-REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list 'ELEM :setters) '(INS-LIS ADD-AT-END APPEND1 DELETE0 REMOVE0 QUERY-INSERT ADD-ASSOCIATE-LIST))
(setf (callers-list '#:LIS22269 :setters) '(ADD-EQU))
(setf (callers-list 'NEWSIGMA :setters) '(SUBSUMED-PREMISES))
(setf (callers-list '#:POIN21468 :setters) '(RENAME-EQN-RULE))
(setf (callers-list '#:VAL23189 :setters) '(COMPOSE))
(setf (callers-list '#:POIN23658 :setters) '(GET-SUBTYPES))
(setf (callers-list 'REST-OF-XOR-ARGS :setters) '(REDUCE-XOR-TERM))
(setf (callers-list '#:LIS21819 :setters) '(INCREMENT-POS))
(setf (callers-list '#:LIS20938 :setters) '(HAS-HINT-TERM))
(setf (callers-list '#:LIS23199 :setters) '(RESOLVE))
(setf (callers-list 'NL-VARS :setters) '(EXTEND-DOM-ARGS DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN))
(setf (callers-list '#:COLL23578 :setters) '(GROUNDP))
(setf (callers-list '#:LIS22345 :setters) '(WRITE-EQNS))
(setf (callers-list '#:VAL20778 :setters) '(POST-FOR-WHILE))
(setf (callers-list 'EQS2 :setters) '(ADD-EQU))
(setf (callers-list '#:VAL22857 :setters) '(GET-INSTANCE-TERMS2))
(setf (callers-list '#:LIS21457 :setters) '(GET-ALL-PROPERTIES))
(setf (callers-list '#:LIS21672 :setters) '(ADD-RULE3))
(setf (callers-list '#:LIS21171 :setters) '(PURE-SUP-TERM))
(setf (callers-list '#:LIS22189 :setters) '(SAME-ARITY))
(setf (callers-list '#:COLL20978 :setters) '(ELIMINATE-SUB))
(setf (callers-list '#:COLL23494 :setters) '(RPLNTHSUBT-IN-BY))
(setf (callers-list '$CASE-BOOL :setters) '(COVER-CASE-BOOL-FLAG))
(setf (callers-list '#:COLL22892 :setters) '(SET-RIGHT-HYPO-ARGS))
(setf (callers-list 'NEW-LHS1-ARGS :setters) '(PARA-SUP-TERM2))
(setf (callers-list '#:COLL22686 :setters) '(REMOVE-SUGG))
(setf (callers-list '#:LIS21196 :setters) '(AC-SUPERPOSITION))
(setf (callers-list '#:COLL20970 :setters) '(IS-ELIM-TERM))
(setf (callers-list '$MANUAL-HISTORY-NUMBER :setters) '(INITIALIZE-MANUAL-ORDERING MANUAL-OPTIONS PUSH-HISTORY-MANUAL))
(setf (callers-list '#:COLL20262 :setters) '(FLATTEN))
(setf (callers-list '#:POIN22687 :setters) '(REMOVE-SUGG))
(setf (callers-list '#:LIS23530 :setters) '(IS-SUB-NONVAR-TERM))
(setf (callers-list '#:POIN20232 :setters) '(FLATTEN-PREMISES))
(setf (callers-list 'STEP :setters) '(X_MATH_IND STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM ABSTRACT-PROOF INDUC-SUBGOAL-PROOFS X_MANUAL_INDUC X_AUTO_INDUC X_AUTO_NORMAL X_NORMAL X_INDUC X_GENERAL X_SPLIT MANUAL_REDUCE TRACE-HYPOTHESE PROVE-ALL-EQNS PROVE-SPLIT-BOOL BUILDING))
(setf (callers-list 'T11 :setters) '(QUASI-EQUIVALENT ACLRPO))
(setf (callers-list '#:LIS20930 :setters) '(RELEASE-PREMISES))
(setf (callers-list 'TERM-SCORES :setters) '(DECIDE-MERGE-CONJ MERGE-DUPLICATE PARTI-BY-VARS))
(setf (callers-list '#:COLL23246 :setters) '(COMPOSE2))
(setf (callers-list 'NAME-VAL :setters) '(LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP-COLLECT))
(setf (callers-list '#:COLL23751 :setters) '(STRONG-SUBGOAL-PROOFS))
(setf (callers-list '#:LIS22603 :setters) '(REDUCE-BY-CHARACTER))
(setf (callers-list '#:POIN23500 :setters) '(RPLAT-IN-BY))
(setf (callers-list '#:LIS22796 :setters) '(SEPARATED))
(setf (callers-list '#:VAL20718 :setters) '(CONTINUE-MAPPING))
(setf (callers-list 'MAX-ARGS :setters) '(DEF-LOOP-INTERNAL))
(setf (callers-list 'FIRST-N :setters) '(POLY-SUPER-AT-*-0 POLY-SUPER-AT-*))
(setf (callers-list '#:LIS21270 :setters) '(ADD-PAIRS))
(setf (callers-list '#:LIS21885 :setters) '(PICKOUT))
(setf (callers-list '$CASE-SPLIT-TERMS :setters) '(COVER-INDUC-PROVE INIT-COVER-PROVE INIT-PROVE-GLOBALS))
(setf (callers-list '#:LIS23053 :setters) '(ADD-OLD-VARS))
(setf (callers-list '#:LIS22975 :setters) '(HAS-INDUCTIVE-VAR))
(setf (callers-list '#:POIN22449 :setters) '(INTRO-RULE))
(setf (callers-list 'MONOMIALS-THAT-DONT :setters) '(M-*-P M-AND-P))
(setf (callers-list '#:LIS20790 :setters) '(END-AUTO-ORDER))
(setf (callers-list '#:COLL21968 :setters) '(SET-DIFF2))
(setf (callers-list '#:LIS21409 :setters) '(PARA-SUP-TERM))
(setf (callers-list 'ATOM1 :setters) '(PARAMODULATE))
(setf (callers-list '#:LIS21862 :setters) '(MATCH-PREMISES))
(setf (callers-list '$DEL-RULES :setters) '(SAVE-RRL INDUC-ADD-RULE))
(setf (callers-list 'EQL :setters) '(PARSE-ONE-WHEN-CLAUSE))
(setf (callers-list '#:VAL21484 :setters) '(SPLIT-LHS-OR))
(setf (callers-list 'MUL :setters) '(DEMULT-FORM))
(setf (callers-list 'XL :setters) '(AC-SUP-TERM))
(setf (callers-list '#:COLL22711 :setters) '(PREMISES-ARE-TRUE))
(setf (callers-list 'X_STEP-DEEP :setters) '(COVER-PROOF-PROCESS))
(setf (callers-list '#:LIS20251 :setters) '(FLATTEN-RULES2))
(setf (callers-list 'E1 :setters) '(COMP-EQN SIMILAR-EQN))
(setf (callers-list 'SYM-TERMS :setters) '(LOOSE-SYM-SEQUENCE))
(setf (callers-list 'ARGS-LIST :setters) '(MAKE-TERMS))
(setf (callers-list 'LIST :setters) '(FIND-IN-ORDERED-LIST DEF-LOOP-INTERNAL COLLECT-CDR-WITH-SAME-CAR ELEMENT-COMBINATION TIMES-CDR PRINT-ATOMS GET-POSITION MY-COPYLIST FILLARRAY COPYLIST REMQ MEMBER-EQUAL MEMBER0 COLLECT-IF ALWAYS THEREIS SINGLE REMONCE QUERY-INSERT IS-SORTED AC-MEMBER))
(setf (callers-list 'INDUC-TERM :setters) '(CHOOSE-BEST-SCHEMES))
(setf (callers-list '$BLOCK_TIME :setters) '(UNIFIER))
(setf (callers-list 'REST :setters) '(DEBUG-MSG LCASE REF-INSTANCE-SEEDS MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-AC TAKE-OUT))
(setf (callers-list '$CONDI-DOMINATE-RULES :setters) '(ENABLE-RULE DISABLE-RULE ADD-CONDI-DOMINATE-RULE))
(setf (callers-list '#:LIS21178 :setters) '(HANDLE-CONDITIONS))
(setf (callers-list '#:COLL20903 :setters) '(REMOVE-QUAN-ARGS))
(setf (callers-list 'NEWBIND :setters) '(MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC SET-UNIFICATION))
(setf (callers-list '#:LIS22347 :setters) '(LIST-ASSERTIONS))
(setf (callers-list '#:LIS23105 :setters) '(ONE-PATTERN))
(setf (callers-list '#:COLL22448 :setters) '(INTRO-RULE))
(setf (callers-list '#:LIS22663 :setters) '(EQUIV-OPS))
(setf (callers-list '$MULTI-TERM-INDUC :setters) '(COVER-MULTI-TERM-INDUC))
(setf (callers-list '#:VAL21648 :setters) '(PROCESS-EQUATION))
(setf (callers-list 'TY :setters) '(DISPLAY-ONE-ARITY2 COMPLETE-WELL-TYPED WELL-TYPED3 WELL-TYPED2))
(setf (callers-list 'BIND :setters) '(MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC SET-UNIFICATION CONTINUE-MAPPING UNICOMPOUND))
(setf (callers-list 'FIXNUM :setters) '(MY-UNTYI))
(setf (callers-list '#:POIN23365 :setters) '(BASIC-TERM))
(setf (callers-list 'SUB2 :setters) '(RESOLVE COMP1 NORM-SUB COMPOSE1 COMPOSE PARA-SUP-TERM2 PARA-SUP-TERM))
(setf (callers-list '#:LIS21225 :setters) '(PROCESS-NEW-AC-CP))
(setf (callers-list '#:LIS20712 :setters) '(UNICOMPOUND))
(setf (callers-list '#:LIS20648 :setters) '(ACO-EQUIV-LIST))
(setf (callers-list 'FUNC :setters) '(GET-TERM-ARGS SUBST-QUANT-FORM BREAK-AT-OR SUBSTVARFOR))
(setf (callers-list '#:LIS23425 :setters) '(SUB-QUASI-REDUCIBLE))
(setf (callers-list '#:LIS21090 :setters) '(REMOVE-IRRELEVANT3))
(setf (callers-list '#:LIS22087 :setters) '(REDUCE-BY-RULES))
(setf (callers-list '#:POIN23591 :setters) '(TYPE-ALL-VARS))
(setf (callers-list '#:POIN20815 :setters) '(SIMPLIFY-ALMOST-FLAT))
(setf (callers-list '#:LIS23041 :setters) '(SET-DEPEND-SCORES))
(setf (callers-list 'DIMENSIONS :setters) '(LISTARRAY FILLARRAY))
(setf (callers-list 'HINT :setters) '(PROOF-BY-HINT-TERM))
(setf (callers-list '#:LIS21975 :setters) '(LIST-DIFF))
(setf (callers-list 'L11 :setters) '(BIGT-TWO-KILL-ONE))
(setf (callers-list '#:LIS22060 :setters) '(REDUCE-AT-ROOT-BY-EXTRA-PREVARS-RULES))
(setf (callers-list 'RHS2 :setters) '(INSTANCE-DELETE-CONDITION HANDLE-COMMU-HYPO))
(setf (callers-list '#:VAL21720 :setters) '(MAKE-NEW-RULE))
(setf (callers-list '$SUPPORT :setters) '(RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIS22776 :setters) '(REDUCE-ARGS-BY-PREMISES))
(setf (callers-list '#:LIS21190 :setters) '(INDUC-IDEM-SUPERPOSITION))
(setf (callers-list '#:LIS22299 :setters) '(MINI-EXPAND-EQ))
(setf (callers-list '#:VAL22944 :setters) '(SUBS-OF-SAME-ROOT))
(setf (callers-list '#:POIN22952 :setters) '(CHOOSE-BEST-SCHEMES))
(setf (callers-list 'XA1 :setters) '(BIGT-TWO-KILL-ONE))
(setf (callers-list '#:LIS21636 :setters) '(START-KB))
(setf (callers-list 'AR :setters) '(WELL-TYPED3))
(setf (callers-list '#:POIN20758 :setters) '(AUTO-ORIENT))
(setf (callers-list '#:COLL20814 :setters) '(SIMPLIFY-ALMOST-FLAT))
(setf (callers-list '#:VAL21521 :setters) '(APPLYSUBST-PRE))
(setf (callers-list 'STONES :setters) '(TEST-ONE-OP))
(setf (callers-list '#:COLL21453 :setters) '(SAVE-RRL))
(setf (callers-list '#:LIS22250 :setters) '(EXT-CONSTRUCTOR))
(setf (callers-list '#:VAL22610 :setters) '(IS-HOMOGENEOUS-TERM))
(setf (callers-list '#:LIS21494 :setters) '(FORM-PREMISES-FROM-CONJ))
(setf (callers-list '#:LIS20912 :setters) '(HASQUANT))
(setf (callers-list 'RULE1 :setters) '(MARK-SUPERPOSED NONDO-CRIT DETACHMENT-SUPER PRED-CRITICAL-PAIR PRED-SUPER PRED-SUPERPOSITION PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE MAKE-PAIRS ACCEPTABLE-PAIR ADD-PAIRS INSTANCE-DELETE-CONDITION SUPERPOSITION AC-CRITPAIRS))
(setf (callers-list 'OP-TRLIST :setters) '(TR-FIND))
(setf (callers-list '#:LIS23589 :setters) '(TYPE-ALL-VARS))
(setf (callers-list '#:VAL21450 :setters) '(MY-COPYLIST))
(setf (callers-list 'DUP-EQOP :setters) '(AUTO-ORIENT))
(setf (callers-list '#:LIS20907 :setters) '(SPECIAL-SUBST))
(setf (callers-list 'BINDS :setters) '(LOOP-LET-BINDINGS PURE-NORM-WITH-BIN NORM-WITH-BIN NONAC-UNIFY))
(setf (callers-list 'TT :setters) '(PARTITION-TERM-BY-TYPE SEPARATED))
(setf (callers-list '#:COLL20594 :setters) '(ACO-BIGT-PARTITION))
(setf (callers-list 'PKG :setters) '(IN-PACKAGE-SLOOP-MAP))
(setf (callers-list '*LOOP-NAME* :setters) '(PARSE-LOOP1 PARSE-LOOP))
(setf (callers-list 'SMALL :setters) '(MOVE-MONOS MOVE-LHS-ARGS MULT-SORT-INSERT))
(setf (callers-list '#:LIS21422 :setters) '(EQ-IN-MONOMIAL))
(setf (callers-list '#:COLL21946 :setters) '(CON1-NUMS))
(setf (callers-list '#:LIS22428 :setters) '(PICK-UNMARKED-RULE-DUMMY))
(setf (callers-list 'N1 :setters) '(EXTEND-DOM-ARGS MERGE-TWO-TUPLES REM-DUP-VARS REMOVE-DUP-VARS HAS-NONLINEAR-VARS ADD-POSITIVE PC-GRT-PREC POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* FIRST-N-ELEMENTS REST-ELEMENTS POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS TIMES-CDR MAN-PICK-2ND-RULE CHOOSE-BY-HAND INSERT NTHELEM LOOK-AT-PAIR-AND PAIR-INFO GENERAL-BASIS-VECTORS))
(setf (callers-list 'U :setters) '(BLOCK-CHECK UNIFY))
(setf (callers-list '$EQOP_LIST :setters) '(ADD-EQU))
(setf (callers-list '#:LIS23051 :setters) '(MAX-DEPEND-GAP))
(setf (callers-list '#:LIS21024 :setters) '(COVER-NORM-TERM))
(setf (callers-list 'TERM1 :setters) '(MERGEBLE-TERMS PARA-SUP-TERM2 PARA-SUP-TERM))
(setf (callers-list 'D2 :setters) '(RESOLVE))
(setf (callers-list '#:LIS20257 :setters) '(HAS-ACOP))
(setf (callers-list '#:VAL20992 :setters) '(SORT-OP-ARGS))
(setf (callers-list '#:VAL23201 :setters) '(RESOLVE))
(setf (callers-list '#:COLL23025 :setters) '(ENCOURAGE))
(setf (callers-list '#:LIS22462 :setters) '(MAN-PICK-2ND-RULE))
(setf (callers-list 'LEFT-*-ARGS :setters) '(REDUCE-+-TERM))
(setf (callers-list 'R-LIST :setters) '(CLEAN-RULE))
(setf (callers-list 'OR :setters) '(PARSE-ONE-WHEN-CLAUSE))
(setf (callers-list '#:LIS21963 :setters) '(HAVE-COMMON))
(setf (callers-list '#:LIS21730 :setters) '(MAKE-RULE-FROM-ASS))
(setf (callers-list 'FORCE-TYPE :setters) '(LOOP-DECLARE-BINDING LOOP-ADD-BINDING))
(setf (callers-list 'OCC :setters) '(VARS-ONLY ACM-AC-ROOT))
(setf (callers-list '#:POIN23167 :setters) '(MERGE-TWO-TUPLES))
(setf (callers-list '#:VAL20645 :setters) '(ACO-LRPO=))
(setf (callers-list '#:LIS22280 :setters) '(MAKE-CRIT-RULE))
(setf (callers-list '#:LIS22002 :setters) '(MULT-DIFF2))
(setf (callers-list 'SCHEME :setters) '(INDUC-SUBGOAL-PROOFS))
(setf (callers-list '#:VAL21054 :setters) '(HEAD-LESS-PRE))
(setf (callers-list 'MTERMS :setters) '(CHOOSE-HIGHEST-TERM PICK-MAX-SCORE-OP CHOOSE-LEAST-COVER CHOOSE-MAX-SCORE))
(setf (callers-list 'IND :setters) '(IN-ARRAY-SLOOP-FOR REPEAT-SLOOP-MACRO DIO-INITIALIZE))
(setf (callers-list '#:POIN23247 :setters) '(COMPOSE2))
(setf (callers-list 'COMP :setters) '(TOTAL-ORDER-RES TOTAL-ORDER-PC-RES))
(setf (callers-list '#:COLL21001 :setters) '(COMMUNE-TERMS))
(setf (callers-list 'FAST-MATCH :setters) '(ACM-AC-ROOT))
(setf (callers-list '#:LIS22797 :setters) '(SEPARATED))
(setf (callers-list '#:VAL23372 :setters) '(ADD-ONE-DEPTH))
(setf (callers-list '#:POIN20820 :setters) '(SIMPLIFY-FLAT))
(setf (callers-list '#:POIN23067 :setters) '(PARTI-BY-VARS))
(setf (callers-list '#:POIN23108 :setters) '(ONE-PATTERN))
(setf (callers-list '#:COLL20858 :setters) '(EQ-TR-MEMBER))
(setf (callers-list '#:COLL20349 :setters) '(LOOSE-SYM-SEQUENCE))
(setf (callers-list '#:LIS21071 :setters) '(DOWN-HILL-ONE))
(setf (callers-list 'MON2 :setters) '(M-+-M M-*-M SIZE-COMPARE PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE M-XOR-M M-AND-M))
(setf (callers-list 'TY-OPS :setters) '(DISPLAY-CONSTRUCTORS))
(setf (callers-list '$FAILED-EQNS :setters) '(COVER-INDUC-PROVE INIT-COVER-PROVE INIT-PROVE-GLOBALS))
(setf (callers-list '$WITNESS-EQN :setters) '(INIT-PROVE-GLOBALS PROVE FOUND-WITNESS FLATTEN-WITNESS CHECK-WITNESS))
(setf (callers-list 'PORT2 :setters) '(DISPLAY-KB-STAT))
(setf (callers-list '#:LIS20883 :setters) '(SUBSTVARFOR))
(setf (callers-list '#:LIS23398 :setters) '(TOP-TERM))
(setf (callers-list 'NEW-ATOM2 :setters) '(PARA-SUP-TERM2))
(setf (callers-list '#:POIN21947 :setters) '(CON1-NUMS))
(setf (callers-list '#:VAL20259 :setters) '(HAS-ACOP))
(setf (callers-list '#:COLL21950 :setters) '(LESS-VECTOR))
(setf (callers-list '#:LIS23301 :setters) '(ONE-EXTENSIBLE))
(setf (callers-list '#:POIN21988 :setters) '(MULT-MERGE))
(setf (callers-list 'RNS :setters) '(TRACE-PARA TRACE-CRIT))
(setf (callers-list '#:LIM23324 :setters) '(GET-SKELETON2))
(setf (callers-list '#:COLL22568 :setters) '(MAKE-RULE-INSTANCES))
(setf (callers-list 'NARGSX :setters) '(ACUNI FULL-DIO ALL-ONES))
(setf (callers-list '#:LIS22062 :setters) '(TRY-ONE-EXTRA-VAR-RULE))
(setf (callers-list 'UNUSED :setters) '(TRACE-INCONSISTENCY))
(setf (callers-list 'BUFFER :setters) '(SEARCH-TREE X_READ_TERM EXPECT-ARITY EXPECT-ARITY21 EXPECT-ARITY12 SET-UP-ARITY2 EXPECTED READ-THIS-EQN TOKEN-EOLN NEXT-TOKEN MAKE-BUFFER READ-T-TERM GET-TERM-ARGS GET-VARLIST GET-ITEM GET-TERM GET-RHS CONDI-FROM-CLAUSE GET-CLAUSE GET-EQUATION CLEAN-RIGHT-BRACKET READ-TYPE-RELATION READ-OP-DECLARATION READ-ARITY READ-EQNS TOKEN-TYPE TOKEN-TEXT TOKEN-PORT))
(setf (callers-list 'Z1 :setters) '(IDEM-SUPERPOSITION))
(setf (callers-list '#:POIN21719 :setters) '(MAKE-NEW-RULE))
(setf (callers-list '#:COLL23725 :setters) '(SPLIT-PREMISES))
(setf (callers-list '#:LIS22793 :setters) '(INDUC-PROVE))
(setf (callers-list '#:POIN21027 :setters) '(NORM-BUT-ROOT))
(setf (callers-list 'FORMULA :setters) '(FIXUP-QUANTIFIED-FORMULA))
(setf (callers-list '#:VAL23184 :setters) '(SIZE-UNI))
(setf (callers-list 'MT :setters) '(CHOOSE-LEAST-COVER))
(setf (callers-list '#:POIN23584 :setters) '(ONE-TYPE-ALL-VARS))
(setf (callers-list '#:LIS22981 :setters) '(HAVE-INDUCTIVE-VARS))
(setf (callers-list '#:LIS22704 :setters) '(ADD-SIMPLIFY-OTHERS))
(setf (callers-list '#:LIS23745 :setters) '(X_REMOVE_HYP))
(setf (callers-list '#:COLL22178 :setters) '(EXIST-OP))
(setf (callers-list '#:VAL22751 :setters) '(GET-PRES-OPS))
(setf (callers-list 'NON-CONSTANT :setters) '(GET-TESTSET-QUASI))
(setf (callers-list '#:VAL23358 :setters) '(GET-BASIC-TYPE-TERMS))
(setf (callers-list '#:LIS22464 :setters) '(SIMPLIFY-+))
(setf (callers-list '#:VAL20996 :setters) '(IS-SORTED))
(setf (callers-list '#:VAL21679 :setters) '(PURE-LRPO))
(setf (callers-list '#:COLL22479 :setters) '(P-*-M))
(setf (callers-list '#:COLL20467 :setters) '(SYM-ARG-POSITIONS))
(setf (callers-list '#:VAL20214 :setters) '(SUBST-EQN))
(setf (callers-list '#:COLL22781 :setters) '(SUBST-PREMISES))
(setf (callers-list 'PAS :setters) '(LIST-PAIRS LOOK-AT-PAIR-AND))
(setf (callers-list '#:LIS22175 :setters) '(CLEAR-OPERATORS))
(setf (callers-list '#:VAL20926 :setters) '(COVER-ORIENT-EQN))
(setf (callers-list '#:LIS22877 :setters) '(COVER-SETS))
(setf (callers-list 'T4 :setters) '(PROOF-UNDER-NEW-PREMISES))
(setf (callers-list '#:COLL22190 :setters) '(SAME-ARITY))
(setf (callers-list '$ANSPRED :setters) '(RESTORE-REST-GLOBALS))
(setf (callers-list '#:VAL22132 :setters) '(PURE-NORM-WITH-BIN))
(setf (callers-list '$F-WEIGHTS :setters) '(RESTORE-REST-GLOBALS))
(setf (callers-list '#:COLL21148 :setters) '(RULE-NUMS-FROM-SOURCE))
(setf (callers-list '#:LIS23400 :setters) '(TOP-TERM))
(setf (callers-list 'ACOPS :setters) '(PREC-CONSISTENT))
(setf (callers-list '#:COLL21938 :setters) '(NTIMES))
(setf (callers-list '#:VAL21342 :setters) '(USER-SELECTQ))
(setf (callers-list '#:LIS22398 :setters) '(PRED-FUNC-SUP))
(setf (callers-list 'T22 :setters) '(ACLRPO))
(setf (callers-list '#:LIS20655 :setters) '(UNIFIERS))
(setf (callers-list '#:COLL21068 :setters) '(OR-CONDI-EQN))
(setf (callers-list 'VECX :setters) '(ACUNI DIO2 DIO GENERAL-BASIS-VECTORS FIND-BASIS-VECTORS FULL-DIO))
(setf (callers-list 'PRELHS :setters) '(HANDLE-COMMU-HYPO))
(setf (callers-list '#:VAL20944 :setters) '(CHECK-BUILD-RULE))
(setf (callers-list '*LOOP-INCREMENT* :setters) '(PARSE-NO-BODY PARSE-LOOP))
(setf (callers-list '#:POIN21149 :setters) '(RULE-NUMS-FROM-SOURCE))
(setf (callers-list 'MEMORY :setters) '(END-AUTO-ORDER AUTO-ORIENT))
(setf (callers-list '#:COLL23682 :setters) '(XIN-MENU))
(setf (callers-list '#:LIS22671 :setters) '(TRANS-STATUS))
(setf (callers-list '#:LIS21949 :setters) '(LESS-VECTOR))
(setf (callers-list 'OPL :setters) '(SUGG-PREC))
(setf (callers-list '#:COLL23178 :setters) '(STR-FORMULATE-SCHEME))
(setf (callers-list 'RIGHT-ARGS :setters) '(POLY-MATCH-TEST-REST-*-ARGS REDUCE-*-TERM))
(setf (callers-list 'R2 :setters) '(POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* PICK-ONE-UNMARKED IDEM-SUPER-COMMU COMP-RULE NOT-IN-SET PICK-SMALL-GOAL AC-SUP-TERM TRACE-AC-SUPERPOSITION PROCESS-NEW-AC-CP NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS AC-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2 PURE-SUP-TERM SUP-TERM PURE-SUPERPOSITION FUNC-SUPERPOSITION))
(setf (callers-list '#:POIN22956 :setters) '(INDUC-SUBS-OF-EQN))
(setf (callers-list 'A :setters) '(SLOOP-SLOOP-MACRO L-EQUAL ANS-MEMBER NCONS NEQUAL NEQ ASSOC0 INDUC-SUP-TERM SUMYMAX GENERAL-BASIS-VECTORS))
(setf (callers-list 'SECOND :setters) '(INDUC-AC-SUBS ONE-PREMISE-IS-TRUE MAKE-EQ-PRE MAKE-BETTER-PRES MAKE-BETTER-PRE NORM-ONE-PRE FIRST-VAR-PRE POLY-MATCH-ONE-TO-* POLY-MATCH-* SIMPLIFY-COND-TERM EQ-MATCH IS-SORTED))
(setf (callers-list '#:LIS21021 :setters) '(COVER-NORM-ORDER))
(setf (callers-list '#:LIS21971 :setters) '(IS-SUBSET))
(setf (callers-list 'NODUPS :setters) '(INSERT))
(setf (callers-list '#:LIS23679 :setters) '(X_ADD-RULE3))
(setf (callers-list '#:LIS20228 :setters) '(FLATTEN-EQN))
(setf (callers-list 'ARGS-2 :setters) '(REST-ELEMENTS POLY-MATCH-FIND-REST-*-ARGS))
(setf (callers-list '#:POIN22697 :setters) '(FIRST-PROCESS-PREMISES))
(setf (callers-list '#:COLL20397 :setters) '(GET-LCM-SOLNS))
(setf (callers-list 'MAX-SIZE :setters) '(NEXT-CHOICE GET-INTERSECTION-RANGE))
(setf (callers-list '#:VAL22770 :setters) '(SUBST-VAR-PREMISES))
(setf (callers-list '#:POIN21268 :setters) '(REMOVE-PAIRS-WITH))
(setf (callers-list '#:LIS20313 :setters) '(FULL-DIO))
(setf (callers-list '#:LIM22362 :setters) '(WRITE-DISJUNCTIONS))
(setf (callers-list '#:VAL23585 :setters) '(ONE-TYPE-ALL-VARS))
(setf (callers-list '#:COLL21133 :setters) '(CONSISTENT-PAIR))
(setf (callers-list '#:VAL20971 :setters) '(IS-ELIM-TERM))
(setf (callers-list '#:COLL23290 :setters) '(EXTEND-DOM-ARGS))
(setf (callers-list 'COL :setters) '(TAB IF* CARDINALITY ADD-SOLN))
(setf (callers-list 'TU1 :setters) '(MERGE-TWO-TUPLES FIND-MERGE-SIGMA))
(setf (callers-list '#:LIS23035 :setters) '(COMPATIBLE-PATTERN))
(setf (callers-list '#:COLL20704 :setters) '(PLAUSIBLE))
(setf (callers-list '#:POIN23726 :setters) '(SPLIT-PREMISES))
(setf (callers-list '#:LIS21585 :setters) '(DISABLE-RULES-AUX))
(setf (callers-list 'ELIST :setters) '(EQ-ADD))
(setf (callers-list '#:LIS21891 :setters) '(PRODUCT-LISTS))
(setf (callers-list '$TRACE_FLAG :setters) '(TRACE-OPTIONS TEST-RRL PRE-INIT))
(setf (callers-list 'USER-TOP-LEVEL :setters) '(PRE-INIT))
(setf (callers-list '#:LIS20739 :setters) '(BLOCK-CHECK))
(setf (callers-list '$NCRITPR :setters) '(DETACHMENT-CRITICAL PRED-CRITICAL-PAIR PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INDUC-IDEM-SUPERPOSITION PURE-SUP-TERM2 SUP-TERM2))
(setf (callers-list '#:LIS22394 :setters) '(PRED-FUNC-SUPERPOSITION))
(setf (callers-list '#:POIN22879 :setters) '(COVER-SETS))
(setf (callers-list 'SUMX :setters) '(SUMYMAX GENERAL-BASIS-VECTORS))
(setf (callers-list '#:LIS22665 :setters) '(UPDATE-BY-EQ))
(setf (callers-list 'TERMS-LIST :setters) '(CHOOSE-OFF-CLOSE))
(setf (callers-list '$VAR-TYPE-LIST :setters) '(WELL-TYPED PROCESS-EQUATION INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS))
(setf (callers-list '#:LIS21677 :setters) '(PURE-LRPO))
(setf (callers-list 'VARLIST :setters) '(GROUNDP GET-VARLIST))
(setf (callers-list 'RULES :setters) '(X_CHOOSE_ONE_RULE ADD-DEFIN-DEPEND IS-CROSS-OP COVER-SETS REDUCE-BY-PREMISES-AT-ROOT NORM-BY-PREMISES REDUCE-BY-HOMO-RULES REDUCE-*-TERM REDUCE-+-TERM MAN-PICK-2ND-RULE CHOOSE-BY-HAND MANUAL-PICK REDUCE-AND-TERM REDUCE-XOR-TERM REDUCE-BY-RULES UNDO1 REDUCE-EQ-EXACTLY REDUCE-EQ-TERM CYCLE-REWRITE-AT-ROOT OPS-IN-PRES-OF-RULES BUILDING))
(setf (callers-list '#:LIS22971 :setters) '(INDUCTIBLE))
(setf (callers-list '#:LIS21752 :setters) '(DECOMPOSE-TERMS))
(setf (callers-list 'GOOD :setters) '(TRY-SUGG-PREC))
(setf (callers-list 'STREAM :setters) '(CHAR-HANDLER PRINC0))
(setf (callers-list '#:COLL23624 :setters) '(COMPLETE-WELL-TYPED))
(setf (callers-list '#:POIN20991 :setters) '(SORT-OP-ARGS))
(setf (callers-list '#:VAL23571 :setters) '(SUBS-ARE-PRIMITIVE))
(setf (callers-list 'SETS :setters) '(ONE-PRESENTATIVE))
(setf (callers-list 'RECUR-TERM :setters) '(ENCOURAGE))
(setf (callers-list 'K2 :setters) '(UNIFY-WITH-AC))
(setf (callers-list 'PRES1 :setters) '(MATCH-PREMISES SUBSUMED-PREMISES))
(setf (callers-list 'OLDEQN :setters) '(X_MATH_IND PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM))
(setf (callers-list '$CHECK-SYMMETRY :setters) '(SYMMETRY-CHOICE))
(setf (callers-list 'ARGS22 :setters) '(MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC SET-UNIFICATION))
(setf (callers-list '#:LIS21800 :setters) '(PICK-AN-ARG))
(setf (callers-list '$GOAL-SET :setters) '(LINEAR ADD-RULE-LINEAR))
(setf (callers-list '#:VAL21534 :setters) '(HYPO-SUBSUME-EQN))
(setf (callers-list 'COVER :setters) '(FORM-PATTERNS-SINGLE COMPATIBLE-PATTERN ELIGIBLE-INDUC-TERMS INDUCTIBLE))
(setf (callers-list '#:POIN21414 :setters) '(PARA-SUP-TERM2))
(setf (callers-list 'TYPE-BASES :setters) '(RULE-DESTROYABLE GET-DOWN EXTEND-SCHEMES GET-SCHEMES))
(setf (callers-list 'NEW-ARG :setters) '(P-*-P NORM-AND-ARGS NORM-OR-ARGS NORM-XOR-TERM P-AND-P))
(setf (callers-list '#:LIS21691 :setters) '(EQUIV-LIST))
(setf (callers-list '#:COLL23590 :setters) '(TYPE-ALL-VARS))
(setf (callers-list '#:LIS23772 :setters) '(CLEAN-INDHYP))
(setf (callers-list '#:LIS21005 :setters) '(COMMUNE-TERMS2))
(setf (callers-list '#:LIS20984 :setters) '(AVOID-COMMON-TERM))
(setf (callers-list '#:VAL23727 :setters) '(SPLIT-PREMISES))
(setf (callers-list '$CONFLUENT :setters) '(INDUC-PROVE START-KB SYS-FLAG-INIT))
(setf (callers-list 'RULENO-EQNS :setters) '(BUILDING))
(setf (callers-list '#:LIS21175 :setters) '(HANDLE-CONDITIONS))
(setf (callers-list '#:LIS21160 :setters) '(PURE-CRITPAIRS))
(setf (callers-list '#:POIN20274 :setters) '(MULTI-COM))
(setf (callers-list '#:LIS20588 :setters) '(TWO-KILL-ONE))
(setf (callers-list '#:LIM20458 :setters) '(DIO))
(setf (callers-list '#:LIS22667 :setters) '(OK-PREV-RULES))
(setf (callers-list '#:POIN21639 :setters) '(KNUTH-BENDIX1))
(setf (callers-list 'BIOP :setters) '(GET-TERM))
(setf (callers-list 'TYPES :setters) '(DISPLAY-ONE-ARITY2 NEW-ARGS))
(setf (callers-list '#:LIS22020 :setters) '(MANUAL-GOAL))
(setf (callers-list '#:LIS20199 :setters) '(ABSTRACTION))
(setf (callers-list '#:VAL21258 :setters) '(PROCESS-AC-UNIFIER))
(setf (callers-list '#:VAL21311 :setters) '(CYCLE-REWRITE-AT-ROOT))
(setf (callers-list '$IDEM :setters) '(RESTRICT-CRIT-STRA RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIS23665 :setters) '(DISPLAY-ARITY2))
(setf (callers-list '#:POIN21069 :setters) '(OR-CONDI-EQN))
(setf (callers-list '#:LIS22714 :setters) '(NOFALSE-PREMISES))
(setf (callers-list '#:LIM20422 :setters) '(ADD-SOLN))
(setf (callers-list 'APPEND :setters) '(PARSE-LOOP1))
(setf (callers-list 'L__CTR :setters) '(WRITE-SIGMA WRITE-ONE-PRE WRITE-VARIABLE WRITE-TERM WRITE-F-EQN WRITE-F-RULE RENAME-EQN-RULE RENAME-TERM TRACE-REMOVE-IRRELEVANT4))
(setf (callers-list '#:LIM20463 :setters) '(DIO2))
(setf (callers-list '#:LIS22232 :setters) '(OPERATOR-OPTIONS))
(setf (callers-list '#:LIS22282 :setters) '(INSTANTIATE-LHS))
(setf (callers-list '#:LIS21295 :setters) '(IS-SYMMETRY-EQN))
(setf (callers-list 'CONJS :setters) '(X_REMOVE_HYP STRUCTURE-INDUC-ON COVER-SET-SCHEME FORM-PREMISES-FROM-CONJ))
(setf (callers-list '#:LIS21223 :setters) '(PROCESS-NEW-AC-CP))
(setf (callers-list 'RED :setters) '(SPECIAL-SIZE))
(setf (callers-list '$NARROW :setters) '(LINEAR RRL-AUX))
(setf (callers-list '#:POIN22007 :setters) '(MULT-FORM))
(setf (callers-list 'THEN :setters) '(FIRST-USE-SLOOP-FOR))
(setf (callers-list 'NEW-NULL-COLS :setters) '(TAKE-OUT))
(setf (callers-list '#:LIS22524 :setters) '(FIRST-N-ELEMENTS))
(setf (callers-list '#:LIS21965 :setters) '(SET-DIFF))
(setf (callers-list '#:LIS21593 :setters) '(DISPLAY-OP-STATS))
(setf (callers-list '#:LIS22248 :setters) '(EXT-OPERATOR))
(setf (callers-list 'A1 :setters) '(ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE NEW-AC-SUPER-SAME NEW-AC-SUPER-AT-ROOTS SKOLEMIZE))
(setf (callers-list 'OP-RULES :setters) '(POLY-REDUCE-AT-ROOT OUTRED1 RWONCE-OUTERMOST REDUCE-AT-ROOT REWRITE-AT-ROOT GET-RULES-WITH-OP CYCLE-OUT-RED CYCLE-REDUCE-TERM))
(setf (callers-list '#:VAL23484 :setters) '(IS-GROUND))
(setf (callers-list '#:VAL20795 :setters) '(CANONICALIZE))
(setf (callers-list '$ORDERING :setters) '(ORDER-STR RESTORE-REST-GLOBALS POSTPONE-OR-UNDO))
(setf (callers-list '#:LIS23341 :setters) '(RULE-DESTROYABLE))
(setf (callers-list '#:VAL21503 :setters) '(PREMISES-INSTANCES))
(setf (callers-list '#:POIN21943 :setters) '(CON1-NUMS))
(setf (callers-list 'SUBTERMS :setters) '(CYCLE-OUT-RED))
(setf (callers-list 'COMPAREFN :setters) '(INSERT))
(setf (callers-list '#:LIS20838 :setters) '(SIMP-AND))
(setf (callers-list '#:LIS22211 :setters) '(CLEAN-OPS))
(setf (callers-list '$LRPO :setters) '(ASK-USER))
(setf (callers-list '#:VAL21973 :setters) '(IS-SUBSET))
(setf (callers-list 'MES :setters) '(RESET-KB))
(setf (callers-list '#:LIS23646 :setters) '(EXT-TYPE-RELATION))
(setf (callers-list '#:LIS20713 :setters) '(UNICOMPOUND))
(setf (callers-list '#:LIS21540 :setters) '(WRITE-SEQ-NUM))
(setf (callers-list 'PATTERNS :setters) '(REMOVE-SUBSUMED-PATTERNS ADD-PATTERNS REMOVE-DUP-VARS COMPATIBLE-PATTERNS DECIDE-DEFIN-MODE COVER-SETS))
(setf (callers-list '$AKB_FLAG :setters) '(RRL-AUX PRE-INIT RESTORE-REST-GLOBALS AUTO-KB))
(setf (callers-list '#:LIS20657 :setters) '(UNIFY))
(setf (callers-list 'Q :setters) '(ADD-SOLN GET-SOLUTIONS FULL-DIO ALL-ONES))
(setf (callers-list 'WHOLE-ASS :setters) '(GET-SKO-FUNC SKOLEMIZE-AWAY-QUANTS))
(setf (callers-list '#:COLL23430 :setters) '(QUASI-EQUIVALENT))
(setf (callers-list '#:LIS22459 :setters) '(CHOOSE-BY-HAND))
(setf (callers-list 'N-OP :setters) '(REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT))
(setf (callers-list '#:LIS23464 :setters) '(EXPECTING-FUNCTIONS))
(setf (callers-list '#:COLL22951 :setters) '(CHOOSE-BEST-SCHEMES))
(setf (callers-list '#:POIN20267 :setters) '(ELIMCOM))
(setf (callers-list 'CTX2 :setters) '(HANDLE-CONDITIONS))
(setf (callers-list '#:COLL23152 :setters) '(MERGE-TWO-PATTERNS))
(setf (callers-list '$SET_PRED :setters) '(PRE-INIT RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIS23522 :setters) '(IS-SUBTERM))
(setf (callers-list '#:LIS22941 :setters) '(SUBS-OF-SAME-ROOT))
(setf (callers-list '#:LIS21191 :setters) '(INDUC-IDEM-SUPERPOSITION))
(setf (callers-list '#:LIS23491 :setters) '(SUBTAT))
(setf (callers-list 'DUP :setters) '(GET-TESTSET-QUASI))
(setf (callers-list '#:COLL21980 :setters) '(IS-SUBLIST))
(setf (callers-list 'LHSS :setters) '(PRED-FUNC-SUP PRED-FUNC-SUPERPOSITION))
(setf (callers-list '#:LIS23257 :setters) '(TEST-ONE-OP))
(setf (callers-list 'PEEK :setters) '(SKIP-EOLN TOKEN-EOLN))
(setf (callers-list '#:LIS22466 :setters) '(SIMPLIFY-*))
(setf (callers-list 'FN :setters) '(MERGE-LIST))
(setf (callers-list 'AS-RULE :setters) '(HYPO-SUBSUME-EQN))
(setf (callers-list '#:LIS21685 :setters) '(EQUIV))
(setf (callers-list '#:LIS21298 :setters) '(MAKE-CYCLE-RULE))
(setf (callers-list 'CHOICE :setters) '(XIN-MENU CHOOSE-STR USER-SELECTQ))
(setf (callers-list 'VN2 :setters) '(FIND-MERGE-SIGMA))
(setf (callers-list '#:COLL21561 :setters) '(DELETE-RULE))
(setf (callers-list '#:LIS22404 :setters) '(IDEM-SUPERPOSITION))
(setf (callers-list '*READTABLE* :setters) '(RRL-AUX))
(setf (callers-list 'WEIGHT :setters) '(UNKNOWN-SIZE BODY-PREMISES-SIZE))
(setf (callers-list 'OTHERS :setters) '(EQ-TR))
(setf (callers-list '#:POIN22750 :setters) '(GET-PRES-OPS))
(setf (callers-list 'I :setters) '(PEQNS X_REDUCE-BY-ONE-RULE GET-CODOMAIN-TYPES RPL-BY-TERMS2 RPLAT-IN-BY RPLNTHSUBT-IN-BY SUBTAT TOP-TERM ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE PARSE-LOOP-MAP PARSE-LOOP-MACRO REDUCE-ARGS-BY-PREMISES TRY-SUGG-PREC PRINT-SUGG-INFO POLY-SUPER-AT-*-0 POLY-SUPER-AT-* FIRST-N-ELEMENTS REST-ELEMENTS POLY-MATCH-FIND-REST-*-ARGS LIST-ASSERTIONS LIST-EQUATIONS PURE-OUTRED1 PURE-REDUCE-BY-ONE-RULE REDUCE-BY-ONE-RULE CYCLE-CHECK CON1-NUMS CON-NUMS NTIMES IS-SUBSEQUENCE INCREMENT-POS NEXT-CHOICE LISTARRAY FILLARRAY ALLSYM CYCLE-OUT-RED LIST-PAIRS LOOK-AT-PAIR-AND IS-BAD-SUGG ALL-PLAUS SYM-ARG-POSITIONS DIO2 DIO COMBINATE2 TAKE-OUT GET-SOLUTIONS GET-LCM-SOLNS GENERAL-BASIS-VECTORS HALF-ONES))
(setf (callers-list '#:LIS20948 :setters) '(BUILDING))
(setf (callers-list '#:LIS23451 :setters) '(NAIL-QUASI-REDUCIBLE))
(setf (callers-list '#:LIS22422 :setters) '(DETACHMENT-SUPER))
(setf (callers-list 'TUPLES :setters) '(SPLIT-PREMISES))
(setf (callers-list '#:VAL23274 :setters) '(GET-DEFINING-DOMAINS))
(setf (callers-list '#:VAL23154 :setters) '(MERGE-TWO-PATTERNS))
(setf (callers-list '#:LIS21956 :setters) '(LONGEST-LIST))
(setf (callers-list '#:VAL22957 :setters) '(INDUC-SUBS-OF-EQN))
(setf (callers-list '#:COLL21816 :setters) '(NEXT-CHOICE))
(setf (callers-list 'CONTINUE-WITH-CURRENT-T2 :setters) '(MATCH-BOOL-XOR))
(setf (callers-list '#:LIS22054 :setters) '(REWRITE-AT-ROOT))
(setf (callers-list '#:LIM20434 :setters) '(COMBINATE))
(setf (callers-list 'OR-EQL :setters) '(PARSE-LOOP-FOR))
(setf (callers-list '#:LIS20916 :setters) '(GET-SKO-FUNC))
(setf (callers-list '#:COLL22878 :setters) '(COVER-SETS))
(setf (callers-list '#:LIS21490 :setters) '(NORM-PROVE-ALL-EQNS))
(setf (callers-list '#:LIS21174 :setters) '(PURE-SUP-TERM2))
(setf (callers-list '#:LIS22496 :setters) '(POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list 'PRES-VARS :setters) '(RELATED-VARS))
(setf (callers-list '$HANDLE-AND :setters) '(SET-HANDLE-AND))
(setf (callers-list '$POST-MAX :setters) '(POST-LIMIT-STRA RRL-AUX))
(setf (callers-list 'S1 :setters) '(OPERATOR-ORDERING PSEUDO-TERM-ORDERING COMPOSE2 CDR-GREAT CAR-LESSP TOTAL-ORDER-2 TOTAL-ORDER TOTAL-ORDER-PC LRPO-RESULT COMPARE-TERM-RESULT COMPARE-ITEM-RESULT ORDER-PC-RES ORDER-PC ORDER-PC-SEQ COMPARE-SYMBOL COMP-TERMS SIZE-COMPARE TRY-TO-ORIENT TRY-TO-ORIENT-CONDI TRY-MAKE-EQUI MULT-UNION SET-DIFF2 SET-DIFF IS-SUBSEQUENCE ALPHALESSP PARAMODULATE MAKE-CYCLE-RULE ACO-BIGT-PARTITION ACO-HARDER ACO-HARD> CONDENSE-SEQUENCE CAR-LOWER))
(setf (callers-list '#:COLL22988 :setters) '(ELIGIBLE-INDUC-TERMS))
(setf (callers-list '#:LIS21632 :setters) '(CHOOSE-STR))
(setf (callers-list '#:POIN21002 :setters) '(COMMUNE-TERMS))
(setf (callers-list '#:LIS21512 :setters) '(EQN-INSTANCE))
(setf (callers-list '#:COLL22906 :setters) '(IS-CROSS-OP))
(setf (callers-list '#:COLL23643 :setters) '(GET-CODOMAIN-TYPES))
(setf (callers-list 'ARRAY :setters) '(IN-ARRAY-SLOOP-FOR LISTARRAY FILLARRAY))
(setf (callers-list '$POLYNOMIAL :setters) '(POLY-CHOICE RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIM22515 :setters) '(POLY-MATCH-FIND-REST-*-ARGS))
(setf (callers-list '#:LIS23617 :setters) '(WELL-TYPED3))
(setf (callers-list '#:POIN22866 :setters) '(REFUTE-RULE-INSTANCES))
(setf (callers-list '#:VAL21750 :setters) '(OCCURS-IN-RULE))
(setf (callers-list 'TOPS :setters) '(NEW-TOP-TERMS ADD-ONE-DEPTH GET-TESTSET-QUASI))
(setf (callers-list 'BS :setters) '(GET-DOWN))
(setf (callers-list '#:VAL23331 :setters) '(GET-DOWN))
(setf (callers-list 'VART1 :setters) '(IS-VALID-CONDI-RULE))
(setf (callers-list 'VECY :setters) '(ACUNI DIO2 DIO GENERAL-BASIS-VECTORS FIND-BASIS-VECTORS FULL-DIO))
(setf (callers-list '$NO-RULE-DEL :setters) '(AC-SUPERPOSITION PURE-SUPERPOSITION FUNC-SUPERPOSITION))
(setf (callers-list 'CONSTANTS :setters) '(EXT-DIVISIBLE))
(setf (callers-list 'AMAX :setters) '(SUMYMAX GENERAL-BASIS-VECTORS))
(setf (callers-list '#:LIS22367 :setters) '(WRITE-F-PREMISES))
(setf (callers-list '#:LIS22762 :setters) '(MORE-VARS-PREMISE))
(setf (callers-list '#:POIN21928 :setters) '(N-TUPLES))
(setf (callers-list '#:VAL20520 :setters) '(ACO-LRPO>))
(setf (callers-list '#:LIS23142 :setters) '(ADD-PATTERNS))
(setf (callers-list '#:POIN22551 :setters) '(ELES-MORE-THAN-1))
(setf (callers-list '#:LIM20377 :setters) '(GENERAL-BASIS-VECTORS))
(setf (callers-list '#:COLL23364 :setters) '(BASIC-TERM))
(setf (callers-list '#:POIN20398 :setters) '(GET-LCM-SOLNS))
(setf (callers-list '#:LIS21099 :setters) '(REMOVE-IRRELEVANT4))
(setf (callers-list 'LHS1 :setters) '(POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* PRED-CRITICAL-PAIR PRED-FUNC-SUP PRED-FUNC-SUPERPOSITION PRED-SUPER PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE MAKE-PAIRS PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP AC-SUPERPOSITION))
(setf (callers-list '#:LIS23271 :setters) '(GET-DEFINING-DOMAINS))
(setf (callers-list '$IMMEDIATE :setters) '(ASS-RULE-BOUND RESTORE-REST-GLOBALS))
(setf (callers-list '#:COLL20364 :setters) '(HALF-ONES))
(setf (callers-list '#:LIS21559 :setters) '(DELETE-SYS))
(setf (callers-list 'OPER :setters) '(ADD-STATUS TR-TERM AUTO-ADD-STATUS))
(setf (callers-list '#:COLL21429 :setters) '(START-HISTORY))
(setf (callers-list '#:COLL22850 :setters) '(ELEMENT-COMBINATION))
(setf (callers-list '#:LIS23623 :setters) '(COMPLETE-WELL-TYPED))
(setf (callers-list 'TERMINAL :setters) '(READ-INPUT))
(setf (callers-list '$NEWRULE-NUM :setters) '(X_ADD-RULE3 MAKERULES CLEAN-RULE ADD-RULE3 START-KB ORDER-EQNS PUSH-HISTORY POSTPONE-OR-UNDO))
(setf (callers-list '#:LIS20255 :setters) '(FLATTEN-POST-ASS))
(setf (callers-list '#:VAL22967 :setters) '(INDUC-SUBS-TERM))
(setf (callers-list 'TIME :setters) '(QUASI-CHECK TRACE-ADD-TESTSET GET-TESTSET2 RUNTIME-MAX-WARNING DIO2 DIO))
(setf (callers-list 'MOD :setters) '(HAVE-INDUCTIVE-VARS HAS-INDUCTIVE-VAR))
(setf (callers-list 'SET-POINTER :setters) '(PARSE-LOOP-COLLECT))
(setf (callers-list '#:COLL22045 :setters) '(GUIDE-REDUCIBLE))
(setf (callers-list '#:LIS22348 :setters) '(LIST-ASSERTIONS))
(setf (callers-list '#:POIN21257 :setters) '(PROCESS-AC-UNIFIER))
(setf (callers-list '*LOOP-BINDINGS* :setters) '(PARSE-LOOP))
(setf (callers-list '#:LIS21794 :setters) '(MATCH-POSS))
(setf (callers-list '#:VAL23442 :setters) '(QUASI-REDUCIBLE))
(setf (callers-list '#:COLL23084 :setters) '(MERGEBLE-TERMS))
(setf (callers-list '#:VAL20967 :setters) '(ONE-ELIM-SUBTERM))
(setf (callers-list 'NEW-ARGSY :setters) '(ACUNI))
(setf (callers-list '#:VAL21695 :setters) '(RPOMULT))
(setf (callers-list '#:LIM20466 :setters) '(SYM-ARG-POSITIONS))
(setf (callers-list '#:COLL23370 :setters) '(ADD-ONE-DEPTH))
(setf (callers-list '#:COLL23284 :setters) '(DEF-DOMAIN-POINTS))
(setf (callers-list '#:LIS20780 :setters) '(IS-BAD-SUGG))
(setf (callers-list 'MTERMS-SETS :setters) '(CHOOSE-MAX-SCORE))
(setf (callers-list '#:COLL22300 :setters) '(MINI-EXPAND-EQ))
(setf (callers-list 'T1 :setters) '(SMALLER-SIZE SUBS-ARE-PRIMITIVE IS-PRIMITIVE IS-LIMITED RENAME-VARY RENAME-VAR1 RENAME-VAR RENAME-VARS DEPTH SUB-OR-EQ-TERM IS-SUB-NONVAR-TERM IS-SUBTERM IS-SUBT RPL-BY-TERMS2 RPL-BY-TERMS RPLAT-IN-BY RPLNTHSUBT-IN-BY TERM-SIZE-ORDER NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT SUB-QUASI-REDUCIBLE DESTROYABLE TRACE-TESTSET GET-DOWN GET-SKELETON2 GET-SKELETON SUPERTERM-COVER ONE-EXTENSIBLE-TYPE-POINT ONE-EXTENSIBLE ONE-EXTENSIBLE-POINT DEF-DOMAIN-POINTS EXTEND-DEF-DOMAIN DEFINING-DOMAIN TEST-ONE-OP MERGE-TWO-TUPLES FIND-MERGE-SIGMA REM-DUP-VARS TRY-SUGG-PREC PRINT-SUGG-INFO MOVE-LHS-ARGS POLY-MATCH-+ COMPARE-TERM COMPARE-ITEM MANUAL-ORIENT MAKE-EQ MAKE-CRIT-RULE ASK-USER TRY-TO-ORIENT2 TRY-TO-ORIENT TRY-TO-ORIENT-CONDI NORM-CTX-AND PURE-NORM-INNERMOST ADD-REST-ARGS SIMPLIFY-MY-EQ-TERM MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC MATCH-SET-AC MATCH-SET IS-AN-INSTANCE MATCH-POSS APPLIES PURE-MATCH MATCH NONAC-UNIFY NORMAL-FORM-SUB DECOMPOSE-TERMS ADD-BIND-TO-SUB IS-VALID-RULE LEXICO-COMP RPOST RPOMULT EQUIV PURE-LRPO LRPO SIMILAR-TERM EQ-IN-MONOMIAL ARRANGE-EQ-ARGS EQUAL-TERM C-MATCH GUIDE-REDUCIBLE-TIME REDUCIBLE-TIME AC-EQUAL MAKE-EQN SAME-ROOT SAME-OP? SAME-OP ARGUMENTS SAME-NONVAR CYCLE-NORM-TERM PROCESS-NEW-AC-CP CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-PAIR CONSISTENT-CHECK IS-INCONSI-PAIR IS-COMMUT-PAIR IS-P-COMMUT-PAIR INSERT-TERM-AT-LEFT INSERT-TERM-AT-RIGHT TRACE-DIVISIBLE DIVISIBLE-AC-CHECK DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK DIVISIBLE-CHECK2 DIVISIBLE-CHECK CAN-HAVE-NEW-OP AUTO-ORIENT SET-UNIFICATION ALL-PLAUS PLAUSIBLE RES1 UNIFIER UNIFIERS ACO-LRPO= ACO-LEXICO-COMP-RL ACO-LEXICO-COMP-LR ACO-LPRO>= ACO-LRPO> ACO-RPOSTATUS>= ACO-RPOSTATUS> ACLRPO AC-MEMBER HAS-ACOP IS-ASSOC-PAIR IS-ASSOC-UNDER-C IS-HIGHER-TERM))
(setf (callers-list 'NONGROUND :setters) '(MAKE-RULE))
(setf (callers-list 'ARGSX :setters) '(ACUNI ELIMCOM))
(setf (callers-list 'CRIT :setters) '(TRACE-PARA TRACE-CRIT))
(setf (callers-list '#:LIS22375 :setters) '(WRITE-SIGMA))
(setf (callers-list 'OPERATOR :setters) '(COMMUTATIVEP))
(setf (callers-list 'POSI :setters) '(MERGE-TWO-TUPLES FIND-MERGE-SIGMA MERGE-TWO-PATTERNS ADD-PATTERNS ADD-OLD-VARS))
(setf (callers-list 'ELE :setters) '(INSERT-LIST))
(setf (callers-list '#:LIS20989 :setters) '(SORT-OP-ARGS))
(setf (callers-list '#:COLL22766 :setters) '(PRES-SIZE))
(setf (callers-list 'LIST-LIST :setters) '(LONGEST-LIST))
(setf (callers-list 'BINDINGS :setters) '(IS-BLOCKED BLOCK-CHECK))
(setf (callers-list 'ELIST1 :setters) '(EQ-JOIN))
(setf (callers-list '#:COLL21710 :setters) '(IS-VALID-CONDI-RULE))
(setf (callers-list '#:VAL23292 :setters) '(EXTEND-DOM-ARGS))
(setf (callers-list 'SUCC :setters) '(REDUCE-BY-CHARACTER REDUCE-BY-P-COMMUT))
(setf (callers-list '#:LIS22618 :setters) '(NORM-SIGN-CHANGED-MONOS))
(setf (callers-list '#:COLL22547 :setters) '(NONLINEAR-VARS-UNDER-*))
(setf (callers-list 'UNMARKED :setters) '(TR-CLOSURE))
(setf (callers-list '#:LIS21621 :setters) '(SAVE-WORDS))
(setf (callers-list 'PRE1 :setters) '(MATCH-PREMISE LRPO-PREMISES LESS-SIZE-CAR SUBSUMED-PREMISES SMALLER-PRE-CAR))
(setf (callers-list 'RESULT2 :setters) '(HANDLE-AND))
(setf (callers-list '#:LIS22371 :setters) '(PRINT-HEAD))
(setf (callers-list '#:LIS21463 :setters) '(RESTORE-PROPERTIES))
(setf (callers-list '#:COLL22240 :setters) '(EXT-STATUS))
(setf (callers-list '#:COLL20974 :setters) '(IS-FREE-TERM))
(setf (callers-list '#:LIS21192 :setters) '(INSTANCE-DELETE-CONDITION))
(setf (callers-list '#:LIS21522 :setters) '(CHANGE-VARS))
(setf (callers-list '*AUTOMATIC-DECLARATIONS* :setters) '(PARSE-LOOP))
(setf (callers-list '1ST-PART-OF-POLY :setters) '(M-+-P M-XOR-P))
(setf (callers-list '#:COLL21413 :setters) '(PARA-SUP-TERM2))
(setf (callers-list '#:LIS21983 :setters) '(MULT-INSERT))
(setf (callers-list 'STRING_LIST :setters) '(DISP_STRINGS))
(setf (callers-list '#:VAL22613 :setters) '(NORM-POLY))
(setf (callers-list '#:COLL21845 :setters) '(IS-AN-INSTANCE))
(setf (callers-list '#:COLL20519 :setters) '(ACO-LRPO>))
(setf (callers-list 'GO :setters) '(PARSE-ONE-WHEN-CLAUSE))
(setf (callers-list '#:VAL23563 :setters) '(IS-LIMITED))
(setf (callers-list '$ADD_TIME :setters) '(ORDER-ASS PURE-ORIENT-AN-EQN ORIENT-AN-EQN INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN))
(setf (callers-list 'TRIPLE :setters) '(GET-INTERSECTION-RANGE))
(setf (callers-list 'HYPOS :setters) '(SET-RIGHT-HYPO-ARGS))
(setf (callers-list '#:POIN22782 :setters) '(SUBST-PREMISES))
(setf (callers-list 'BONESS :setters) '(REAL-COLLECT-PRODUCTS PROPER-PRODUCT-LISTS))
(setf (callers-list '#:COLL21872 :setters) '(IS-SUBSEQUENCE))
(setf (callers-list '#:POIN22729 :setters) '(MAKE-PRE-ASS))
(setf (callers-list '#:LIS23652 :setters) '(ADD-SUGG-TYPE1))
(setf (callers-list 'NEW-LEVEL :setters) '(LOOP-ADD-TEMPS LOOP-ADD-BINDING))
(setf (callers-list '#:POIN22291 :setters) '(MINI-HALF-CANONICALIZE-AND-EXPAND-EQ))
(setf (callers-list '#:LIS21110 :setters) '(TRACE-REMOVE-IRRELEVANT4))
(setf (callers-list '#:LIS20489 :setters) '(CARDINALITY))
(setf (callers-list '#:LIS21230 :setters) '(PROCESS-NEW-AC-CP2))
(setf (callers-list '#:POIN20676 :setters) '(UNIFY-WITH-AC))
(setf (callers-list '$LAST-SOLN :setters) '(ONE-COMPOSITION DIO-INITIALIZE))
(setf (callers-list '#:LIS23058 :setters) '(OPS-OF-RULE))
(setf (callers-list '#:POIN23326 :setters) '(GET-SKELETON2))
(setf (callers-list 'RULE-LIST :setters) '(X_ADD-RULE3 X_CHOOSE_ONE_RULE ADD-RULE3))
(setf (callers-list '#:LIS22495 :setters) '(POLY-CYCLE-REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list '#:COLL22728 :setters) '(MAKE-PRE-ASS))
(setf (callers-list '#:COLL21604 :setters) '(READ-INPUT))
(setf (callers-list '#:LIS20243 :setters) '(MAKE-ASS-COM-OP))
(setf (callers-list '#:VAL22783 :setters) '(SUBST-PREMISES))
(setf (callers-list 'NUMARGS :setters) '(ADD-SOLN GET-SOLUTIONS FULL-DIO DIO-INITIALIZE ALL-ONES))
(setf (callers-list '#:LIS21086 :setters) '(HANDLE-COMMU-HYPO))
(setf (callers-list '$FIRST-INDUC-OP :setters) '(X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS2 COVER-INDUC-PROVE INIT-COVER-PROVE INIT-PROVE-GLOBALS))
(setf (callers-list 'FILE :setters) '(FCLOAD CLOAD2 CLOAD BLOAD FLOAD OBJ-NAME SOURCE-NAME BIN-IS-CURRENT FILE-DATE LOAD-RRL SAVE-RRL MY-PROBEF))
(setf (callers-list '#:VAL22241 :setters) '(EXT-STATUS))
(setf (callers-list '*LAST-VAL* :setters) '(LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP LOOP-POP))
(setf (callers-list 'CHILDLIST :setters) '(CURSOR_DOWN))
(setf (callers-list 'ANS :setters) '(COLLATE-SLOOP-COLLECT NEVER-SLOOP-COLLECT ALWAYS-SLOOP-COLLECT THEREIS-SLOOP-COLLECT COUNT-SLOOP-COLLECT MINIMIZE-SLOOP-COLLECT MAXIMIZE-SLOOP-COLLECT LOGXOR-SLOOP-COLLECT SUM-SLOOP-COLLECT WRITEF-SYS BRAKE-CHOICE FASTKB-CHOICES FOPC-STRA COVER-SET-INDUC-STRA OPERATOR-OPTIONS CRIT-STRATEGY-OPTIONS UNDO-STRATEGY RUN-KB-OPTIONS NORM-INN PURE-NORM-INN EQ-MATCH NEXT-CHOICE VARS-ONLY ACM-AC-ROOT PURE-MATCH MATCH NORMAL-FORM-SUB DECOMPOSE-TERMS AUTO-OPERATOR ASK-FOR-OPERATOR INVALID-RULE ASK-A-NUMBER ASK-A-CHOICE DELETE-SYS MERGE-LIST FLAT-SORT-ARGS))
(setf (callers-list 'TOTAL :setters) '(DISPLAY-KB-STAT))
(setf (callers-list '#:VAL23109 :setters) '(ONE-PATTERN))
(setf (callers-list 'LST2 :setters) '(INSERT-LIST))
(setf (callers-list '#:VAL23753 :setters) '(STRONG-SUBGOAL-PROOFS))
(setf (callers-list 'REST-*-ARGS :setters) '(POLY-MATCH-+))
(setf (callers-list '#:VAL23253 :setters) '(APPLY-TO2))
(setf (callers-list 'BASIC-TERMS :setters) '(GET-TESTSET2))
(setf (callers-list '#:LIS23429 :setters) '(QUASI-EQUIVALENT))
(setf (callers-list '#:VAL23748 :setters) '(X_REMOVE_HYP))
(setf (callers-list '#:LIS20850 :setters) '(SIMP-XOR))
(setf (callers-list 'SSIZE :setters) '(PICK-ONE-UNMARKED PICK-SMALL-GOAL))
(setf (callers-list 'NO-0-BASIS :setters) '(TAKE-OUT GET-SOLUTIONS))
(setf (callers-list 'PT :setters) '(COMPATIBLE-PATTERNS))
(setf (callers-list 'LHS2 :setters) '(POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* PRED-CRITICAL-PAIR PRED-FUNC-SUP PRED-SUPER PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE MAKE-PAIRS AC-SUP-TERM PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP INSTANCE-DELETE-CONDITION SUP-TERM2 SUP-TERM HANDLE-COMMU-HYPO))
(setf (callers-list '#:LIS20295 :setters) '(DIO-INITIALIZE))
(setf (callers-list '#:LIS22493 :setters) '(POLY-REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list '#:POIN22989 :setters) '(ELIGIBLE-INDUC-TERMS))
(setf (callers-list '#:VAL21479 :setters) '(SPLIT-LHS-AND))
(setf (callers-list '$PARAMODULATE :setters) '(PARAMOD-STR PRE-INIT RESTORE-REST-GLOBALS))
(setf (callers-list '$RUNTIME-MAX :setters) '(TIME-LIMIT-STRA RUNTIME-MAX-WARNING))
(setf (callers-list '#:COLL21467 :setters) '(RENAME-EQN-RULE))
(setf (callers-list '#:LIS21637 :setters) '(KNUTH-BENDIX1))
(setf (callers-list '#:LIS22976 :setters) '(HAS-INDUCTIVE-VAR))
(setf (callers-list 'ARR :setters) '(ASET))
(setf (callers-list 'BOD :setters) '(SLOOP-SLOOP-MACRO PARSE-LOOP LCASE))
(setf (callers-list '#:LIS21232 :setters) '(SET-UNIFY))
(setf (callers-list '#:COLL20966 :setters) '(ONE-ELIM-SUBTERM))
(setf (callers-list '$PROVE-EQN :setters) '(INIT-PROVE-GLOBALS CLEAN-HISTORY))
(setf (callers-list 'S-SUB :setters) '(CHOOSE-BEST-SCHEMES))
(setf (callers-list '#:VAL20661 :setters) '(UNIFY))
(setf (callers-list '#:COLL21182 :setters) '(INDUC-SUP-TERM))
(setf (callers-list 'POLY1 :setters) '(P-*-P P-+-P P-XOR-P P-AND-P))
(setf (callers-list '#:VAL21627 :setters) '(READ-ARGS))
(setf (callers-list '#:LIS21120 :setters) '(HIGH-OP-POSI))
(setf (callers-list '$PROVE-METHOD :setters) '(PROOF-METHODS RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIS21462 :setters) '(RESTORE-PROPERTIES))
(setf (callers-list 'SIZE :setters) '(GOAL-RULE-SIZE MAKE-NEW-RULE MAKE-RULE))
(setf (callers-list '#:VAL22434 :setters) '(IS-BIG-ENOUGH-RULE))
(setf (callers-list '#:COLL22505 :setters) '(POLY-MATCH-TEST-REST-*-ARGS))
(setf (callers-list 'AS-IS :setters) '(INDUC-ORIENT-AN-EQN INDUC-ADD-RULE))
(setf (callers-list '#:LIS21529 :setters) '(IS-PREVIOUS-INDUC-EQN))
(setf (callers-list '#:LIS21242 :setters) '(AC-SUP-TERM))
(setf (callers-list '#:POIN21454 :setters) '(SAVE-RRL))
(setf (callers-list 'SUBJ :setters) '(GET-INTERSECTION-RANGE))
(setf (callers-list 'NODE :setters) '(ADD_CHILD SHOW-NODE CUTTREE PRINT-NODE WRITE-NODE SHOW-TREE))
(setf (callers-list '#:LIS22273 :setters) '(FASTKB-CHOICES))
(setf (callers-list '#:VAL21379 :setters) '(TR-FIND))
(setf (callers-list '#:COLL20490 :setters) '(CARDINALITY))
(setf (callers-list '#:COLL22758 :setters) '(SUPER-ITSELF-PRE))
(setf (callers-list 'TEST :setters) '(PARSE-LOOP-FOR PARSE-LOOP-WHEN IS-CHARACTER-RULE))
(setf (callers-list 'RIGHT :setters) '(GET-RHS GET-CLAUSE GET-EQUATION))
(setf (callers-list 'ELT :setters) '(IN-ARRAY-SLOOP-FOR))
(setf (callers-list '#:VAL20681 :setters) '(ACUNI))
(setf (callers-list '$PREMISES-SET :setters) '(REDUCE-EQN-BY-ONE-RULE SIMPLIFY-PREMISES ADD-PREMISE-END SIMPLIFY-ONE-PRE FIRST-PROCESS-PREMISES REDUCE-BY-ONE-AT-ROOT IS-PREVIOUS-INDUC-EQN INDUC-IDEM-SUPERPOSITION HANDLE-CONDITIONS HANDLE-FACTOR COVER-CONDI-NORM NORM-BUT-ROOT COVER-UNCONDI-NORM COVER-NORMAL-PROOF))
(setf (callers-list '#:LIS22582 :setters) '(MOVE-MONOS))
(setf (callers-list '#:VAL21488 :setters) '(PROVE-ALL-EQNS))
(setf (callers-list '#:COLL23251 :setters) '(APPLY-TO2))
(setf (callers-list '#:VAL21829 :setters) '(DIVIDED-BY))
(setf (callers-list '#:POIN23683 :setters) '(XIN-MENU))
(setf (callers-list '#:VAL21868 :setters) '(SPLIT-ALIST))
(setf (callers-list '#:LIS22737 :setters) '(MAKE-PRE-XOR-ARGS))
(setf (callers-list 'SCORE :setters) '(INDUCTIBLE))
(setf (callers-list '#:LIS21662 :setters) '(REDUCE-OTHER-RULES))
(setf (callers-list 'INT :setters) '(RESOLVE))
(setf (callers-list '#:VAL21605 :setters) '(READ-INPUT))
(setf (callers-list '#:VAL21981 :setters) '(IS-SUBLIST))
(setf (callers-list '#:COLL23531 :setters) '(IS-SUB-NONVAR-TERM))
(setf (callers-list '#:LIS20582 :setters) '(ACO-NOBIGT-PARTITION))
(setf (callers-list 'SUBST-LIST :setters) '(CONTINUE-MAPPING UNICOMPOUND))
(setf (callers-list '#:VAL20456 :setters) '(DIO))
(setf (callers-list 'SUBS :setters) '(PRED-FUNC-SUP NORM-INN PURE-NORM-INN CYCLE-OUT-RED CHECK-BUILD-RULE ADD-SOLN ABSTRACTION))
(setf (callers-list 'ORDERP :setters) '(INSERT-LIST))
(setf (callers-list '#:LIS21527 :setters) '(IS-FAILED-INDUC-EQN))
(setf (callers-list '#:VAL22698 :setters) '(FIRST-PROCESS-PREMISES))
(setf (callers-list 'NORM :setters) '(COVER-PROOF-PROCESS X_AUTO_INDUC))
(setf (callers-list '#:LIS23288 :setters) '(EXTEND-DOM-ARGS))
(setf (callers-list '#:POIN21092 :setters) '(REMOVE-IRRELEVANT3))
(setf (callers-list 'TS :setters) '(RPL-BY-TERMS2 RPL-BY-TERMS QUASI-REMOVER NAIL-QUASI-REDUCIBLE QUASI-REDUCIBLE QUASI-EQUIVALENT RULE-DESTROYABLE))
(setf (callers-list '#:VAL22978 :setters) '(HAS-INDUCTIVE-VAR))
(setf (callers-list 'FLATTEN :setters) '(FLATTEN-TESTSET FLATTEN-POST-ASS FLATTEN-RULES2 FLATTEN-RULES))
(setf (callers-list '#:LIS23667 :setters) '(DISPLAY-ONE-ARITY2))
(setf (callers-list '#:LIS22997 :setters) '(GET-SCHEME-VARS))
(setf (callers-list 'TUP :setters) '(SPLIT-PREMISES REM-DUP-VARS HAVE-MANY-RECURSIVE-EQNS GET-RECURSIVE-DEF-TERM))
(setf (callers-list '$MANY-ARGS :setters) '(PRE-INIT))
(setf (callers-list 'OP-LIST :setters) '(RULES-WITH-OP))
(setf (callers-list 'EQN :setters) '(SEARCH_BY_EQN STRONG-SUBGOAL-PROOFS X_COVER-PROOF-PROCESS2 COVER-PROOF-PROCESS X_GET_INDUC_TERM X_INITIAL REDUCTION-PROOF FORM-SUBGOALS-FROM-PATTERNS SPLIT-PREMISES TRACE-GENERATED-RESULT COVER-PROOF-PROCESS2 PROOF-UNDER-NEW-PREMISES PROOF-BY-HINT-TERM STRUCTURE-INDUC-ON COVER-INDUC-PROVE COVER-SET-SCHEME ABSTRACT-PROOF INDUC-SUBGOAL-PROOFS HEAD_OF_MANUAL_INDUC X_MANUAL_INDUC HEAD_OF_FAILURE_HANDLER X_FAILURE_HANDLER CHECK_AND_ADD X_AUTO_INDUC PROVE_EQN X_AUGMENT REDUCE-EQN-BY-ONE-RULE ONE-RULE-ITERATION X_HYPOTHESIS X_ONE_RULE X_NORMAL MENU_FOR_NORMAL MENU_FOR_MANUAL_REDUCE X_INDUC X_GENERAL X_SPLIT MANUAL_REDUCE WELL-TYPED-EQN INPUT-CHECK FLATTEN-TESTSET STR-CHOOSE-ONE-SCHEME INDUC-SUBS-OF-EQN CHOOSE-BEST-SCHEMES NEGATE-EQN REFUTE-EQN INDUC-PROVE UNCONDI-PROVE PROVE MAKE-PRE-EQN REDUCE-REVERSE-PREMISES MOVE-MONOS MAKE-RULE-INSTANCES POLY-SUPER-DISTRIBUTION WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-EQNS LIST-EQUATIONS INSTANTIATE-LHS MANUAL-ORIENT MAKE-EQ MAKE-CRIT-RULE ASK-USER CTX-GT-LHS ORDER-CTX TRY-TO-ORIENT TRY-TO-ORIENT-CONDI ORIENT-RULE PURE-ORIENT-AN-EQN ORIENT-AN-EQN LAST-CONSISTENCY-CHECK PURE-CHECKEQ-NORMAL CHECKEQ-NORMAL ASSERTION2EQUATION NORMALIZE ADD-OPERATOR INVALID-RULE IS-VALID-RULE IS-VALID-CONDI-RULE FIRST-PROCESS-EQN PURE-PROCESS-EQUATION PROCESS-EQUATION READ-THIS-EQN READ-INPUT AND-LHS-TRUE-RHS INDUC-SUBSUMED-BY WRITE-SEQ-EQN HYPO-SUBSUME-EQN IS-PREVIOUS-INDUC-EQN IS-FAILED-INDUC-EQN TRACE-SUCC-PROVE APPLYSUBST-EQN NORMAL-PROVE EQN-INSTANCE FORM-PREMISES-FROM-CONJ SPLIT-RHS-OR SPLIT-RHS-AND SPLIT-LHS-OR SPLIT-LHS-AND PROVE-SPLIT-BOOL APPLYSUBST-RULE RENAME-EQN-RULE START-PUSH-HISTORY START-HISTORY-MANUAL START-HISTORY PROCESS-ASSERTION IS-INPUT-ASS IS-ONEWAY SET-EQN-MARK ASSERTIONP IS-ASSERTION EQN2ASS IS-PROP-EQN CHANGE-SOURCE EXCHANGE-LR CHANGE-CTX CHANGE-LHS-RHS-CTX CHANGE-LHS-RHS CHANGE-RHS CHANGE-LHS IS-SOURCE-TYPE EQN-SOURCE-TYPE EQN-SOURCE IS-CONDI-EQN EQN-CTX MAKE-CYCLE-RULE IS-CYCLE-EQN PURE-PROCESS-CRITPAIR PROCESS-CRITPAIR PROCESS-AC-CRITICAL-PAIR INSTANCE-DELETE-CONDITION INCONSISTENT-EQN CONSISTENT-CHECK-QUASI CONSISTENT-CHECK-TESTSET CONSISTENT-CHECK TRACE-FACTOR HANDLE-FACTOR FACTORIZATION REMOVE-IRRELEVANT3 HANDLE-COMMU-HYPO TRACE-DROPPED-PREMISES REMOVE-IRRELEVANT2 MAKE-ONE-DOWN-HILL DOWN-HILL-ONE OR-CONDI-EQN PRE-BIGGER-THAN-EQN HEAD-LESS-THAN-PRES HEAD-LESS-PRE JUSTIFY-EQN EQN2PRE RESTORE-EQUATION MAKE-ONE-BUILD BUILD-EQN-FROM-PRES BUILD-EQUATION-FROM-PREMS CHECK-HEAD-ROLE COVER-CONDI-NORM COVER-NORM-UNCONDI-EQN COVER-UNCONDI-NORM COVER-NORMALIZE COVER-NORM-ORDER PRINT-NORMALIZED-EQN COVER-NORMAL-PROOF MAKE-P-COMMUT-RULE REMOVE-ONE-ARG MANY-ARGS2 ELIMINATE-SUB ELIMINABLE-TERMS REMOVE-VAR-PRES TRACE-BUILDING BUILDING HAVE-BOOLEAN-CONSTANT FIND-SPECIAL-TERM BUILD-PREMISES-FROM-BOOL-TERM BUILD-PREMISES-FROM-COND-TERM RELEASE-PREMISES INDUC-ORIENT-AN-EQN COVER-ORIENT-EQN ORDER-ONE-NORM-OTHERS EQN2ASSERTION POSTPONE-OR-UNDO POST-FOR-WHILE POSTPONE-IT CAN-HAVE-NEW-OP AUTO-ORIENT MAKE-ASS-COM-OP FLATTEN-EQN EQN-SUB-NONVARS SUBST-EQN ABSTRACTION WRITE-COMMENT-EQN))
(setf (callers-list 'LISTS :setters) '(PROPER-PRODUCT-LISTS PRODUCT-LISTS ADD-ASSOCIATE-LIST))
(setf (callers-list '$FREE-CONSTRUCTORS :setters) '(FLATTEN-RULES))
(setf (callers-list '#:LIS22490 :setters) '(POLY-REDUCE-AT-ROOT-ONE-RULE))
(setf (callers-list '#:COLL21927 :setters) '(N-TUPLES))
(setf (callers-list '#:LIM21944 :setters) '(CON1-NUMS))
(setf (callers-list '#:LIS22708 :setters) '(REDUCE-REVERSE-PREMISES))
(setf (callers-list '#:LIS21060 :setters) '(PRE-BIGGER-THAN-EQN))
(setf (callers-list 'VART2 :setters) '(IS-VALID-CONDI-RULE))
(setf (callers-list '#:VAL23427 :setters) '(SUB-QUASI-REDUCIBLE))
(setf (callers-list 'NEWARGS :setters) '(AND-OF-MONOMIALS))
(setf (callers-list 'HOU :setters) '(DATE))
(setf (callers-list '#:COLL21586 :setters) '(DISABLE-RULES-AUX))
(setf (callers-list 'POS :setters) '(RPL-BY-TERMS2 RPL-BY-TERMS RPLAT-IN-BY SUBTAT POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* IS-SUBSEQUENCE INCREMENT-POS PARA-SUP-TERM2 PARA-SUP-TERM AC-SUP-TERM INDUC-SUP-TERM PURE-SUP-TERM2 SUP-TERM2 PURE-SUP-TERM SUP-TERM))
(setf (callers-list '#:VAL23648 :setters) '(EXT-TYPE-RELATION))
(setf (callers-list '#:LIS23106 :setters) '(ONE-PATTERN))
(setf (callers-list 'P-TERM :setters) '(STRUCTURE-INDUC-ON COVER-SET-SCHEME))
(setf (callers-list 'MESSAGES :setters) '(PRINT-CHOICE-MESSAGE ASK-CHOICE ASK-NUMBER))
(setf (callers-list 'PROVE :setters) '(READ-THIS-EQN))
(setf (callers-list '#:LIS22436 :setters) '(MANUAL-PICK))
(setf (callers-list 'POINTER :setters) '(PARSE-LOOP-COLLECT))
(setf (callers-list '#:POIN21514 :setters) '(EQN-INSTANCE))
(setf (callers-list '#:POIN21985 :setters) '(MULT-SORT-INSERT))
(setf (callers-list '$MAX-ARITY :setters) '(AUTO-KB))
(setf (callers-list 'NON-VARS-ARGSX :setters) '(MULTI-COM))
(setf (callers-list '#:LIS21132 :setters) '(CONSISTENT-PAIR))
(setf (callers-list '#:COLL20435 :setters) '(COMBINATE))
(setf (callers-list '#:LIS22849 :setters) '(ELEMENT-COMBINATION))
(setf (callers-list 'M-SIZE :setters) '(M-*-P M-AND-P))
(setf (callers-list '#:VAL20821 :setters) '(SIMPLIFY-FLAT))
(setf (callers-list '#:VAL23722 :setters) '(PROOF-BY-HINT-TERM))
(setf (callers-list 'PRULE :setters) '(PRED-FUNC-SUP))
(setf (callers-list 'TY-OP :setters) '(GET-BASIC-TYPE-TERMS))
(setf (callers-list '#:LIS21272 :setters) '(LOOK-AT-PAIRS))
(setf (callers-list 'D1 :setters) '(RESOLVE))
(setf (callers-list 'OPTIONS :setters) '(XIN-MENU USER-SELECTQ))
(setf (callers-list 'AUTO-SUGG :setters) '(IS-BAD-SUGG))
(setf (callers-list '$SMALL-DEPTH :setters) '(MAKERULES START-KB ORDER-EQNS))
(setf (callers-list '#:COLL21340 :setters) '(USER-SELECTQ))
(setf (callers-list '#:LIS21337 :setters) '(CYCLE-PAIRS))
(setf (callers-list 'UNCONDI :setters) '(PRINT-SUGG-INFO))
(setf (callers-list '#:COLL21678 :setters) '(PURE-LRPO))
(setf (callers-list '#:POIN22163 :setters) '(REDUCE-AT-ROOT-BOOL))
(setf (callers-list '#:LIS22765 :setters) '(PRES-SIZE))
(setf (callers-list '#:LIS21532 :setters) '(HYPO-SUBSUME-EQN))
(setf (callers-list '#:COLL23562 :setters) '(IS-LIMITED))
(setf (callers-list 'COLLECT-VAR :setters) '(LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP-COLLECT POINTER-FOR-COLLECT))
(setf (callers-list '#:LIS20743 :setters) '(IS-BLOCKED))
(setf (callers-list '$POST-ASS-SET :setters) '(ORDER-ASS REDUCE-POST-ASS SAVE-RRL FLATTEN-POST-ASS))
(setf (callers-list 'EQS1 :setters) '(ADD-EQU))
(setf (callers-list '#:LIS20998 :setters) '(P-COMMUT-REDUCE-OTHERS))
(setf (callers-list '$TEST :setters) '(READ-ATOM TEST-RRL PRE-INIT))
(setf (callers-list '#:LIS22319 :setters) '(TOTAL-ORDER-PC-RES))
(setf (callers-list 'ATOM2 :setters) '(PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE))
(setf (callers-list 'ADNS :setters) '(TR-CLOSURE))
(setf (callers-list 'XI :setters) '(ALL-ONES))
(setf (callers-list 'SETQ :setters) '(LOOP-PARSE-ADDITIONAL-COLLECTIONS PARSE-LOOP1))
(setf (callers-list '#:LIS23075 :setters) '(MERGE-DUPLICATE))
(setf (callers-list '#:VAL20927 :setters) '(INDUC-ORIENT-AN-EQN))
(setf (callers-list '#:LIS20955 :setters) '(ELIMINABLE-TERMS))
(setf (callers-list 'PRERHS :setters) '(HANDLE-COMMU-HYPO))
(setf (callers-list '#:LIS21673 :setters) '(CLEAN-RULE))
(setf (callers-list '#:VAL20218 :setters) '(PRE-SUB-NONVARS))
(setf (callers-list '#:LIS23245 :setters) '(COMPOSE2))
(setf (callers-list '#:LIS23250 :setters) '(APPLY-TO2))
(setf (callers-list '#:LIS23094 :setters) '(COMPATIBLE-PATTERNS))
(setf (callers-list '#:LIS21470 :setters) '(PROVE-SPLIT-BOOL))
(setf (callers-list '$MANUAL-HISTORY-FREQUENCY :setters) '(MANUAL-OPTIONS))
(setf (callers-list '#:VAL22305 :setters) '(ORDER-ASS))
(setf (callers-list '#:POIN21478 :setters) '(SPLIT-LHS-AND))
(setf (callers-list 'SYMBOL :setters) '(THE-TYPE ALLSYM NEWSYM INITSYM MAKESYM))
(setf (callers-list '#:VAL21129 :setters) '(HANDLE-FACTOR))
(setf (callers-list 'FBIGT :setters) '(ACO-BIGT-PARTITION))
(setf (callers-list '#:LIS22600 :setters) '(POLY-LRPO))
(setf (callers-list '#:COLL22153 :setters) '(NORM-OR-ARGS))
(setf (callers-list '#:POIN20671 :setters) '(UNIFY-WITH-AC))
(setf (callers-list 'PROP :setters) '(RESTORE-PROPERTIES PUTPROP))
(setf (callers-list 'USED-RULES :setters) '(TRY-ONE-CONDI-RULE TRY-ONE-RULE CHECK-HEAD-ROLE RELEASE-PREMISES))
(setf (callers-list 'LIST1 :setters) '(REAL-COLLECT-PRODUCTS SPLIT-ALIST))
(setf (callers-list '#:VAL21455 :setters) '(SAVE-RRL))
(setf (callers-list '#:COLL22525 :setters) '(FIRST-N-ELEMENTS))
(setf (callers-list '#:LIS22891 :setters) '(SET-RIGHT-HYPO-ARGS))
(setf (callers-list '#:LIS21376 :setters) '(TR-FIND))
(setf (callers-list 'PREV-POSITION :setters) '(INSERT-SORT-ARG INSERT-AND-REMOVE-PAIRS))
(setf (callers-list '#:LIS23089 :setters) '(FORM-PATTERNS-SINGLE))
(setf (callers-list '#:POIN23060 :setters) '(OPS-OF-RULE))
(setf (callers-list '#:LIS22430 :setters) '(INDUC-PICK-UNMARK))
(setf (callers-list '#:COLL22206 :setters) '(GET-FREE-CONSTRUCTORS))
(setf (callers-list '#:VAL22867 :setters) '(REFUTE-RULE-INSTANCES))
(setf (callers-list '$SYMMETRY-DELS :setters) '(RESTORE-REST-GLOBALS ONE-COMPOSITION))
(setf (callers-list '#:COLL22158 :setters) '(NORM-AND-ARGS))
(setf (callers-list '#:POIN20885 :setters) '(SUBSTVARFOR))
(setf (callers-list '#:LIS20656 :setters) '(UNIFIER))
(setf (callers-list '#:POIN22540 :setters) '(COMPACT-LAST-ELEMENTS))
(setf (callers-list '#:LIS22732 :setters) '(REMAKE-PREMISES))
(setf (callers-list '#:LIS22352 :setters) '(WRITE-TERM-BOOL))
(setf (callers-list '#:LIS22412 :setters) '(IDEM-SUPER-COMMU))
(setf (callers-list 'TRACE :setters) '(QUASI-CHECK NEGATE-EQN))
(setf (callers-list '#:VAL23195 :setters) '(NORM-SUB))
(setf (callers-list 'L__3 :setters) '(WRITE-SIGMA WRITE-ONE-PRE WRITE-TERM WRITE-F-EQN WRITE-F-RULE RENAME-EQN-RULE RENAME-TERM TRACE-REMOVE-IRRELEVANT4))
(setf (callers-list '#:LIM22863 :setters) '(REFUTE-RULE-INSTANCES))
(setf (callers-list '$FUNC-NAME :setters) '(PRE-INIT RESTORE-REST-GLOBALS))
(setf (callers-list 'CHARACTER-INDEXES :setters) '(CARDINALITY SYMMETRY-NON-DELETABLE GET-SOLUTIONS FULL-DIO ALL-ONES))
(setf (callers-list 'NMAP :setters) '(X_GET_INDUC_TERM X_REAL_VARS X_NAME))
(setf (callers-list '#:COLL22123 :setters) '(NORM-WITH-BIN))
(setf (callers-list 'PREVIOUS :setters) '(CYCLE-PAIRS SIMP-XOR-SIMP XOR-OF-MONOMIALS))
(setf (callers-list 'ASK :setters) '(ELIMINABLE-TERMS))
(setf (callers-list '#:VAL22253 :setters) '(EXT-CONSTRUCTOR))
(setf (callers-list '#:COLL21053 :setters) '(HEAD-LESS-PRE))
(setf (callers-list '#:LIS21023 :setters) '(COVER-NORM-TERM))
(setf (callers-list '#:POIN22166 :setters) '(REDUCE-AT-ROOT-BOOL))
(setf (callers-list '#:VAL22717 :setters) '(NOFALSE-PREMISES))
(setf (callers-list '#:POIN22207 :setters) '(GET-FREE-CONSTRUCTORS))
(setf (callers-list 'TLIST :setters) '(TR-TERM))
(setf (callers-list '#:COLL21033 :setters) '(NO-SUBSUMPTION))
(setf (callers-list 'XX :setters) '(WRITE-DISJUNCTIONS IF*))
(setf (callers-list '#:VAL22046 :setters) '(GUIDE-REDUCIBLE))
(setf (callers-list '#:COLL21941 :setters) '(CON-NUMS))
(setf (callers-list '#:VAL20905 :setters) '(REMOVE-QUAN-ARGS))
(setf (callers-list '#:COLL23670 :setters) '(WELL-TYPED-EQN))
(setf (callers-list 'TOTALCOL :setters) '(IF*))
(setf (callers-list '$FALSE-RHS :setters) '(NORM-CTX PRE-INIT COVER-NORM-TERM))
(setf (callers-list '#:POIN23357 :setters) '(GET-BASIC-TYPE-TERMS))
(setf (callers-list '#:POIN20825 :setters) '(SIMPLIFY))
(setf (callers-list '#:LIM21945 :setters) '(CON1-NUMS))
(setf (callers-list '#:LIS20788 :setters) '(NOT-AUTO-PREV-RULES))
(setf (callers-list '#:LIS22235 :setters) '(EXT-PRECEDENCE))
(setf (callers-list '#:LIS21177 :setters) '(HANDLE-CONDITIONS))
(setf (callers-list '#:LIS21222 :setters) '(PROCESS-NEW-AC-CP))
(setf (callers-list 'LIS1 :setters) '(LEXICO-COMP RPOST ACO-LEXICO-COMP-LR))
(setf (callers-list '$PAIR-SET :setters) '(LINEAR REMOVE-PAIRS-WITH))
(setf (callers-list 'FUN :setters) '(MAP-FRINGE))
(setf (callers-list '#:POIN21828 :setters) '(DIVIDED-BY))
(setf (callers-list '$SPEC-PORT :setters) '(WRITEF-SYS))
(setf (callers-list '#:LIS20953 :setters) '(REMOVE-VAR-PRES))
(setf (callers-list 'DIFF-RHS :setters) '(FUNC-SUPERPOSITION))
(setf (callers-list 'ARROW1 :setters) '(SHOW-TREE))
(setf (callers-list '#:LIS23259 :setters) '(CONSTRUCTORS-CHECK))
(setf (callers-list '#:LIS22036 :setters) '(REDUCIBLE))
(setf (callers-list '#:LIS21360 :setters) '(REDUCE-EQ-EXACTLY))
(setf (callers-list '$X_INDHYPS :setters) '(SUCC-END-INDUC COVER-INDUC-PROVE))
(setf (callers-list '#:LIS22377 :setters) '(HELP-FILE))
(setf (callers-list '#:LIS21476 :setters) '(SPLIT-LHS-AND))
(setf (callers-list '#:LIS23440 :setters) '(QUASI-REDUCIBLE))
(setf (callers-list '#:LIS23743 :setters) '(SUCC-END-INDUC))
(setf (callers-list 'ELEMENT :setters) '(REMONCE))
(setf (callers-list 'OPS :setters) '(DISPLAY-ARITY2 DISPLAY-TYPE-ARITY ADD-ONE-DEPTH GET-BASIC-TYPE-TERMS PARTITION-OPS-BY-TYPE GET-TESTSET2 GET-TESTSET CONSTRUCTORS-CHECK STR-FORMULATE-SCHEME MAX-DEPEND-GAP SET-DEPEND-SCORES INDUC-SUBS-OF-EQN GET-INSTANCE-SEEDS STATUS-CANDIDATES REMOVE-EQ-OP CLEAN-OPS NON-CONSTANTS GET-CONSTANTS DISPLAY-OPS UNDO1 HIGH-OP-POSI REMOVE-IRRELEVANT3 FIRST-SPEC-TERM FIND-SPECIAL-TERM END-AUTO-ORDER IS-BAD-SUGG POST-FOR-WHILE AUTO-ORIENT PREC-CONSISTENT WASH-DEF-RULES MAKE-ASS-COM-OP IS-ASSOC-PAIR))
(setf (callers-list '#:COLL22619 :setters) '(NORM-SIGN-CHANGED-MONOS))
(setf (callers-list '#:LIS23024 :setters) '(ENCOURAGE))
(setf (callers-list '#:VAL21857 :setters) '(CTX-BAD-LUCK))
(setf (callers-list 'INDEX :setters) '(MAKESYM))
(setf (callers-list 'LHS-ARG :setters) '(COMPATIBLE-PATTERN))
(setf (callers-list '#:LIS22992 :setters) '(GET-INDUC-VARS))
(setf (callers-list 'P1 :setters) '(MERGEBLE-TERMS))
(setf (callers-list '#:LIS22965 :setters) '(INDUC-SUBS-TERM))
(setf (callers-list '#:LIS23304 :setters) '(ONE-EXTENSIBLE-TYPE-POINT))
(setf (callers-list 'NARGSY :setters) '(ACUNI FULL-DIO ALL-ONES))
(setf (callers-list '#:COLL23183 :setters) '(SIZE-UNI))
(setf (callers-list '#:POIN21378 :setters) '(TR-FIND))
(setf (callers-list 'RULE2 :setters) '(MARK-SUPERPOSED NONDO-CRIT LAST-CHECK-2ND-RULE DETACHMENT-SUPER PRED-CRITICAL-PAIR PRED-SUPER PRED-SUPERPOSITION PARA-SUP-TERM2 PARA-SUP-TERM PARAMODULATE MAKE-PAIRS ACCEPTABLE-PAIR ADD-PAIRS INSTANCE-DELETE-CONDITION SUPERPOSITION AC-CRITPAIRS))
(setf (callers-list '#:VAL21518 :setters) '(APPLYSUBST-PRE))
(setf (callers-list 'MIN :setters) '(DATE BIGT-TWO-KILL-ONE TWO-KILL-ONE PREC-CONSISTENT))
(setf (callers-list '#:LIS22197 :setters) '(GET-CONSTANTS))
(setf (callers-list '#:LIM20290 :setters) '(ALL-ONES))
(setf (callers-list '#:LIS22432 :setters) '(IS-BIG-ENOUGH-RULE))
(setf (callers-list 'ENABLE :setters) '(DISABLE-RULES-AUX))
(setf (callers-list 'CURRENT :setters) '(SEARCH_BY_EQN SEARCH_BY_ID BREADTH-SEARCH TRACE-ADD-TESTSET EXTEND-SCHEMES GET-SCHEMES TR-CLOSURE ASK-CHOICE ASK-NUMBER))
(setf (callers-list 'STATUS :setters) '(ADD_CHILD SHOW-TREE TRANS-STATUS EXT-OPERATOR ADD-STATUS SET-STATUS AUTO-ADD-STATUS))
(setf (callers-list 'STIME :setters) '(RRL-AUX))
(setf (callers-list '#:LIS22279 :setters) '(PURE-ORIENT-AN-EQN))
(setf (callers-list '#:COLL21501 :setters) '(PREMISES-INSTANCES))
(setf (callers-list 'NEWTERM :setters) '(REDUCE-BY-PREMISES))
(setf (callers-list '#:VAL22701 :setters) '(PRE-PROCESS-PREMISES))
(setf (callers-list 'K1 :setters) '(UNIFY-WITH-AC))
(setf (callers-list '#:POIN22286 :setters) '(HALF-CANONICALIZE-AND-EXPAND-EQ))
(setf (callers-list 'MON :setters) '(M-+-P P-*-M M-*-P PRED-FUNC-SUPERPOSITION MINI-HALF-CANONICALIZE-AND-EXPAND-EQ HALF-CANONICALIZE-AND-EXPAND-EQ DATE EQ-IN-MONOMIAL PARA-SUP-TERM2 M-XOR-P M-AND-P DECANON-AND))
(setf (callers-list '#:POIN21305 :setters) '(CYCLE-OUT-RED))
(setf (callers-list 'AC-FLAG :setters) '(MAKE-ASS-COM-OP))
(setf (callers-list 'RULENO :setters) '(IS-CHARACTER-RULE MOVE-LHS-ARGS BOTH-ADD-PREDICATE IDEM-SUPERPOSITION GET-RULE-LEVEL CLEAN-RULE IDEM-EQ-CRITICAL TRACE-BUILDING))
(setf (callers-list '#:COLL20824 :setters) '(SIMPLIFY))
(setf (callers-list 'SCORE-SUBS :setters) '(CHOOSE-BEST-SCHEMES))
(setf (callers-list '#:LIS22339 :setters) '(LIST-RULES))
(setf (callers-list '#:COLL21423 :setters) '(EQ-IN-MONOMIAL))
(setf (callers-list 'VA-EQN :setters) '(IS-PREVIOUS-INDUC-EQN))
(setf (callers-list 'TRLIST :setters) '(EQ-TR))
(setf (callers-list '#:COLL23527 :setters) '(OCCURS-IN))
(setf (callers-list 'A3 :setters) '(ONE-EXTENSIBLE-TYPE-POINT))
(setf (callers-list 'TRIPLES :setters) '(POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS POLY-MATCH-ONE-TO-* POLY-MATCH-* GET-INTERSECTION-RANGE VARS-ONLY AC-MATCH ACM-AC-ROOT ACM-NO-ARG ACM-NONAC ACM-POLY-ONE-TO-MANY ACM-POLY-* ACM-ONE-VAR ACM-AND-EQ ACM-VARIABLE))
(setf (callers-list 'OLD-ARITY :setters) '(EXPECT-ARITY EXPECT-ARITY12))
(setf (callers-list '#:LIS22032 :setters) '(ANS-MEMBER))
(setf (callers-list 'EOF :setters) '(READC))
(setf (callers-list 'UNIFY-SUBST-LIST :setters) '(CONTINUE-MAPPING))
(setf (callers-list 'GLOBALS :setters) '(RESTORE-REST-GLOBALS))
(setf (callers-list '#:LIS21686 :setters) '(EQUIV))
(setf (callers-list '#:LIS23561 :setters) '(IS-LIMITED))
(setf (callers-list '#:LIS20658 :setters) '(UNIFY))
(setf (callers-list '#:LIS20702 :setters) '(PLAUSIBLE))
(setf (callers-list '#:LIS20526 :setters) '(ACO-LPRO>=))
(setf (callers-list 'USED-SUBS :setters) '(ABSTRACTION))
(setf (callers-list 'INC :setters) '(PARSE-LOOP-FOR))
(setf (callers-list '#:COLL21976 :setters) '(LIST-DIFF))
(setf (callers-list '#:POIN23663 :setters) '(DISPLAY-TYPE-ARITY))
(setf (callers-list 'FOUND :setters) '(LOOP-DECLARE-BINDING PARSE-NO-BODY))
(setf (callers-list '$EQ-ARITY :setters) '(ARITY-EQ-STRATEGY))
(setf (callers-list '#:LIS21748 :setters) '(OCCURS-IN-RULE))
(setf (callers-list 'GUIDE :setters) '(GUIDE-REDUCIBLE))
(setf (callers-list '#:LIS22233 :setters) '(COVER-SET-INDUC-STRA))
(setf (callers-list 'HYPO :setters) '(STRUCTURE-INDUC-ON COVER-SET-SCHEME HYPO-SUBSUME-EQN HANDLE-COMMU-HYPO REMOVE-IRRELEVANT2))
(setf (callers-list '$NORM_STR :setters) '(EXT-AC NORM-STRATEGY RESTORE-REST-GLOBALS FLATTEN-RULES))
(setf (callers-list 'E :setters) '(SLOOP-SLOOP-MACRO MR PROVE-SPLIT-BOOL SUMYMAX GET-LCM-SOLNS GENERAL-BASIS-VECTORS OP-POSITION))
(setf (callers-list 'PRINT :setters) '(MAKE-ONE-DOWN-HILL DOWN-HILL-ONE))
(setf (callers-list 'POINT :setters) '(IN-CAREFULLY-SLOOP-FOR))
(setf (callers-list '#:POIN22203 :setters) '(NON-CONSTANTS))
(setf (callers-list 'CHK :setters) '(MAKE-VALUE))
(setf (callers-list '#:VAL21951 :setters) '(LESS-VECTOR))
(setf (callers-list '#:COLL20709 :setters) '(ALL-PLAUS))
(setf (callers-list 'SYMVARS :setters) '(SYMMETRY-TERMS))
(setf (callers-list '#:COLL23059 :setters) '(OPS-OF-RULE))
(setf (callers-list '#:POIN21977 :setters) '(LIST-DIFF))
(setf (callers-list '#:VAL22292 :setters) '(MINI-HALF-CANONICALIZE-AND-EXPAND-EQ))
(setf (callers-list '$SYMBNUM :setters) '(MAKE-NEW-VARIABLE))
(setf (callers-list '#:LIS22608 :setters) '(IS-HOMOGENEOUS-TERM))
(setf (callers-list 'RETURN-SUBST-LIST :setters) '(CONTINUE-MAPPING))
(setf (callers-list '#:LIS21864 :setters) '(SPLIT-ALIST))
(setf (callers-list 'NOT-FIRST :setters) '(POLY-MATCH-ONE-TO-* POLY-MATCH-*))
(setf (callers-list '#:COLL21856 :setters) '(CTX-BAD-LUCK))
(setf (callers-list '#:COLL20740 :setters) '(BLOCK-CHECK))
(setf (callers-list '#:LIS21753 :setters) '(DECOMPOSE-TERMS))
(setf (callers-list '#:LIS23577 :setters) '(GROUNDP))
(setf (callers-list 'SUBST :setters) '(PRIMITIVE-SUBST SUBST-PREMISES POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* DETACHMENT-SUPER PRED-CRITICAL-PAIR PRED-SUPER PURE-REWRITE-AT-ROOT PURE-REDUCE-BY-ONE-AT-ROOT ADD-TO-ARGS REDUCE-AT-ROOT-ONE-RULE TRY-ONE-RULE REDUCE-AT-ROOT CHANGE-VARS PARA-SUP-TERM2 SYMMETRY-TERMS PURE-SUP-TERM2 SUP-TERM2 TWO-UNIFIER))
(setf (callers-list 'ARGS2 :setters) '(RPL-BY-TERMS2 POLY-MATCH-FIND-REST-*-ARGS POLY-MATCH-TEST-REST-*-ARGS POLY-MATCH-ONE-TO-* POLY-MATCH-* MATCH-BOOL-NEW MATCH-BOOL-XOR MATCH-SET-NONAC SET-UNIFICATION))
(setf (callers-list '$FAST-MATCH :setters) '(BOOL-MATCH-STR PRE-INIT))
(setf (callers-list '#:COLL23426 :setters) '(SUB-QUASI-REDUCIBLE))
(setf (callers-list '#:POIN22124 :setters) '(NORM-WITH-BIN))
(setf (callers-list '#:VAL21515 :setters) '(EQN-INSTANCE))
(setf (callers-list '#:LIS22328 :setters) '(TOTAL-ORDER-RES))
(setf (callers-list 'C2 :setters) '(IS-SUBSEQ-LIST))
(setf (callers-list '#:COLL22715 :setters) '(NOFALSE-PREMISES))
(setf (callers-list '#:VAL20273 :setters) '(MULTI-COM))
(setf (callers-list '#:VAL20213 :setters) '(SUBST-EQN))
(setf (callers-list '#:COLL22202 :setters) '(NON-CONSTANTS))
(setf (callers-list 'PRES22 :setters) '(SUBSUMED-PREMISES))
(setf (callers-list '#:COLL23137 :setters) '(REMOVE-DUP-VARS))
(setf (callers-list '#:LIS21202 :setters) '(NEW-AC-SUPER-AT-ROOTS))
(setf (callers-list '#:LIS21960 :setters) '(COMMON-ELEMENTS))
(setf (callers-list 'OPS1 :setters) '(CLEAN-OPS))
(setf (callers-list 'SORT :setters) '(REDUCE-BY-P-COMMUT2 REDUCE-BY-P-COMMUT))
(setf (callers-list '#:POIN23698 :setters) '(INDUC-SUBGOAL-PROOFS))
(setf (callers-list 'ITEM :setters) '(LCASE))
(setf (callers-list '#:LIS22081 :setters) '(SIMPLIFY-MY-EQ-TERM))
(setf (callers-list '#:LIS20928 :setters) '(INDUC-REDUCE-OTHER-RULES))
(setf (callers-list '#:LIS22635 :setters) '(REDUCE-MONO))
(setf (callers-list '#:LIS21447 :setters) '(MY-COPYLIST))
(setf (callers-list '#:LIS23718 :setters) '(STRUCTURE-INDUC-ON))
(setf (callers-list '*INNER-SLOOP* :setters) '(SLOOP-SLOOP-MACRO PARSE-LOOP))
(setf (callers-list 'LAST-ARG :setters) '(POLY-SUPER-AT-*-1 POLY-SUPER-AT-*))
(setf (callers-list '#:LIS23305 :setters) '(ONE-EXTENSIBLE-TYPE-POINT))
(setf (callers-list '$TYPE-TESTSET :setters) '(GET-TESTSET IS-PARTIAL-OP))
(setf (callers-list '#:POIN22004 :setters) '(MULT-DIFF2))
(setf (callers-list 'AVOID-TERMS :setters) '(CHOOSE-BEST-SCHEMES))
(setf (callers-list '#:POIN20918 :setters) '(GET-SKO-FUNC))
(setf (callers-list '#:VAL22612 :setters) '(POLY-ADD-HOMO-RULES))
(setf (callers-list 'POLY-ARGS :setters) '(M-AND-P))
(setf (callers-list '#:COLL20793 :setters) '(CANONICALIZE))
(setf (callers-list '#:VAL23044 :setters) '(SET-DEPEND-SCORES))
(setf (callers-list '#:LIS20776 :setters) '(POST-FOR-WHILE))
(setf (callers-list '#:LIM20289 :setters) '(ALL-ONES))
(setf (callers-list '#:POIN23273 :setters) '(GET-DEFINING-DOMAINS))
(setf (callers-list 'AND-TERM :setters) '(NORM-AND-ARGS))
(setf (callers-list '#:POIN23194 :setters) '(NORM-SUB))
(setf (callers-list '#:LIS21126 :setters) '(HANDLE-FACTOR))
(setf (callers-list '#:COLL23583 :setters) '(ONE-TYPE-ALL-VARS))
(setf (callers-list '#:LIS20784 :setters) '(AUTO-ADD-STATUS))
(setf (callers-list 'STR :setters) '(PRINT_STR DISP_STRINGS))
(setf (callers-list '#:LIS22483 :setters) '(P-*-P))
(setf (callers-list 'CTX :setters) '(SET-RIGHT-HYPO-ARGS REMAKE-PREMISES FIRST-PROCESS-PREMISES FIRST-CTX-TRANS MY-FIRST-CTX-TRANS POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* WRITE-F-RHS WRITE-RHS MAKE-NEW-RULE FIRST-PROCESS-EQN APPLYSUBST-EQN IS-PREMISE-SET MAKE-RULE CHANGE-CTX CHANGE-LHS-RHS-CTX NULL-CTX TRUEP NOT-FALSEP FALSEP PROCESS-AC-CRITICAL-PAIR SUP-TERM2 HAS-HINT-TERM NEW-FIRST-CTX-TRANS FLATTEN-PREMISES SUBST-EQN HANDLE-AND WRITE-COMMENT-RHS))
(setf (callers-list '#:LIS20747 :setters) '(DISPLAY-UNIFY))
(setf (callers-list 'UNI1 :setters) '(LESSP-SIZE-BINDINGS))
(setf (callers-list '#:LIS22231 :setters) '(CRIT-STRATEGY-OPTIONS))
(setf (callers-list '#:COLL23090 :setters) '(FORM-PATTERNS-SINGLE))
(setf (callers-list '#:VAL20958 :setters) '(ELIMINABLE-TERMS))
(setf (callers-list '#:COLL21043 :setters) '(BUILD-EQUATION-FROM-PREMS))
(setf (callers-list '$X_INDEQN :setters) '(X_COVER-PROOF-PROCESS2))
(setf (callers-list '#:POIN22526 :setters) '(FIRST-N-ELEMENTS))
(setf (callers-list '#:LIS23738 :setters) '(X_REAL_VARS))
(setf (callers-list '#:VAL21065 :setters) '(OPS-IN-PRES-OF-RULES))
(setf (callers-list '#:LIS22244 :setters) '(ADD-STATUS))
(setf (callers-list '#:LIS22673 :setters) '(STATUS-CANDIDATES))
(setf (callers-list 'QUANT :setters) '(SKOLEMIZE-AWAY-QUANTS))
(setf (callers-list '$CRIT-WITH-STR :setters) '(PICK-STRATEGY WITH-STRATEGY RESTORE-REST-GLOBALS))
(setf (callers-list 'VN :setters) '(ADD-OLD-VARS))
(setf (callers-list 'NO-DETROY :setters) '(OPEN-WRITE-FILE))
(setf (callers-list '#:LIS22116 :setters) '(PURE-NORM-INN))
(setf (callers-list '#:LIS21412 :setters) '(PARA-SUP-TERM2))
(setf (callers-list 'TYPE-OPS :setters) '(DISPLAY-CONSTRUCTORS))
(setf (callers-list 'FIRST-HALF :setters) '(HALF-ONES))
(setf (callers-list '#:COLL23272 :setters) '(GET-DEFINING-DOMAINS))
(setf (callers-list '#:LIS21880 :setters) '(NON-DECREASING-SEQ))
(setf (callers-list '#:LIS21877 :setters) '(IS-SUBSEQ-LIST))
(setf (callers-list 'L3 :setters) '(GET-DEFINING-DOMAINS GET-INSTANCE-SEEDS SUGG-PREC TRY-SUGG-PREC PRINT-SUGG-INFO MANUAL-ORIENT ASK-USER MULT-DIFF EQUIV-LIST DELETE-EQN LOOK-AT-PAIRS INDUC-IDEM-SUPERPOSITION PURE-CRITPAIRS CRITPAIRS))
(setf (callers-list '#:LIS21649 :setters) '(PROCESS-EQUATION))
(setf (callers-list 'TWO :setters) '(TRACE-FACTOR HANDLE-FACTOR))
(setf (callers-list 'RES :setters) '(COMPLETE-TEST START-TEST HAS-NONLINEAR-VARS DECIDE-MERGE-CONJ CHOOSE-BEST-SCHEMES SUBS-OF-SAME-ROOT COLLECT-CDR-WITH-SAME-CAR REDUCE-BY-HOMO-RULES POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* POLY-MATCH-+ REDUCE-*-TERM REDUCE-+-TERM MERGE-SORT-ARGS P-*-P SIMPLIFY-* SIMPLIFY-+ MINI-HALF-CANONICALIZE-AND-EXPAND-EQ REDUCE-AND-TERM DEMULT-FORM COMMON-ELEMENTS LONGEST-LIST INCREMENT-POS DISPLAY-OPS SPLIT-LHS-OR REDUCE-EQ-TERM RELATED-VARS JUSTIFY-EQN COVER-UNCONDI-NORM DIVISIBLE-RIGHT-CHECK DIVISIBLE-LEFT-CHECK DIVISIBLE-NONAC-CHECK ORDER-ONLY SIMP-XOR SIMP-AND P-AND-P MERGE-AND-REMOVE-DUPS MERGE-AND-REMOVE-PAIRS TWO-UNIFIER COMBINATE SUB-NONVARS2))
(setf (callers-list 'LTREE :setters) '(SEARCH_BY_EQN SEARCH_BY_ID BREADTH-SEARCH))
(setf (callers-list '#:LIS21302 :setters) '(CYCLE-REDUCE-TERM))
(setf (callers-list 'SEC :setters) '(DATE))
(setf (callers-list '#:COLL23187 :setters) '(COMPOSE))
(setf (callers-list '#:LIS22746 :setters) '(NEGATE-PREMISES))
(setf (callers-list '#:COLL21091 :setters) '(REMOVE-IRRELEVANT3))
(setf (callers-list '#:COLL20680 :setters) '(ACUNI))
(setf (callers-list '#:COLL23697 :setters) '(INDUC-SUBGOAL-PROOFS))
(setf (callers-list '#:POIN20717 :setters) '(CONTINUE-MAPPING))
(setf (callers-list 'NTERM :setters) '(REDUCE-BY-PREMISES-AT-ROOT))
(setf (callers-list '#:COLL21886 :setters) '(PICKOUT))
(setf (callers-list '#:LIS21736 :setters) '(MAKE-RULE-SIZE-ORDER))
(setf (callers-list '#:COLL22285 :setters) '(HALF-CANONICALIZE-AND-EXPAND-EQ))
(setf (callers-list 'DEP :setters) '(BASE-DEPTH NEW-TOP-TERMS))
(setf (callers-list 'NRULE :setters) '(MAKE-NEW-RULE))
(setf (callers-list 'NEWPATTERNS :setters) '(ADD-PATTERNS))
(setf (callers-list 'CSET :setters) '(GET-COVER-SETS))
(setf (callers-list '#:VAL20886 :setters) '(SUBSTVARFOR))
(setf (callers-list '#:LIS20813 :setters) '(SIMPLIFY-ALMOST-FLAT))
(setf (callers-list 'MIN2 :setters) '(PREC-CONSISTENT))
(setf (callers-list '#:POIN23495 :setters) '(RPLNTHSUBT-IN-BY))
(setf (callers-list 'OPTION :setters) '(X_GET_INDUC_TERM X_MANUAL_INDUC MENU_FOR_CURSOR MOVE_CURSOR X_PROVER X_ONE_RULE X_NORMAL MENU_FOR_NORMAL MENU_FOR_MANUAL_REDUCE MANUAL_REDUCE))
(setf (callers-list '#:LIS22794 :setters) '(FAIL-END-INDUC))
(setf (callers-list '#:VAL21894 :setters) '(PRODUCT-LISTS))
(setf (callers-list '#:VAL20366 :setters) '(HALF-ONES))
(setf (callers-list 'PORT :setters) '(DISPLAY-ONE-ARITY2 DISPLAY-ARITY2 DISPLAY-TYPE-ARITY WRITE-DETAIL-RULE WRITE-ONE-PRE WRITE-F-PREMISES WRITE-PREMISES WRITE-DISJUNCTIONS WRITE-VARIABLE WRITE-TERM-SIMPLE WRITE-TERM-BOOL WRITE-TERM WRITE-ASSERTION WRITE-ASSERTIONS LIST-ASSERTIONS WRITE-F-RHS WRITE-RHS WRITE-GOAL-EQN WRITE-EQN WRITE-F-EQN WRITE-GOAL-RULE WRITE-RULE WRITE-F-RULE WRITE-EQNS LIST-EQUATIONS WRITE-RULES LIST-RULES OPEN-WRITE-FILE WRITEF-SYS DISPLAY DISPLAY-CONSTRUCTORS RUN-KB CLEAN-LINE GET-ATOM2 GET-ATOM SKIP-EOLN MAKE-BUFFER READFEQNS OPEN-READ-FILE DISPLAY-OP-STATS DISPLAY-KB-STAT GIVE-STAT TYIPEEK TYI TAB READC DRAIN DRAIN-IT MY-UNTYI MY-TYO MY-TYI MY-TYIPEEK TRACE-INCONSISTENCY WRITE-COMMENT-PREMISES WRITE-COMMENT-RHS WRITE-COMMENT-EQN))
(setf (callers-list '#:VAL20910 :setters) '(SPECIAL-SUBST))
(setf (callers-list '#:COLL23166 :setters) '(MERGE-TWO-TUPLES))
(setf (callers-list 'CANDICATES :setters) '(EXTEND-SCHEMES))
(setf (callers-list '#:LIS20868 :setters) '(PROCESS-ASS))
(setf (callers-list '$NEWRULE-MAX :setters) '(NEW-RULE-STRA RRL-AUX))
(setf (callers-list '#:VAL21028 :setters) '(NORM-BUT-ROOT))
(setf (callers-list '#:LIS22739 :setters) '(SEPARATE-XOR-ARGS))
(setf (callers-list 'LIS :setters) '(IN-CAREFULLY-SLOOP-FOR PARSE-LOOP-FOR ELES-MORE-THAN-1 MULT-FORM N-TUPLES INS-LIS PICKOUT ADD-AT-END IS-AN-INSTANCE OCCUR-NUM DIVIDED-BY SEE REM-DUPS APPEND1 DELETE0 REMOVE0 INSERT1 OP-POSITION))
(setf (callers-list 'SOURCE :setters) '(ADD_CHILD SHOW-TREE REFUTED-RESULT POLY-SUPER-AT-*-1 POLY-SUPER-AT-*-0 POLY-SUPER-AT-* DETACHMENT-SUPER WRITE-DETAIL-RULE ORDER-ASS CHECK-MISMATCH MAKE-RULE-SIZE-ORDER MAKE-RULE-FROM-ASS UNKNOWN-SIZE BODY-PREMISES-SIZE SPECIAL-SIZE MAKE-NEW-RULE FLATTEN-WITNESS GET-CLAUSE GET-EQUATION MAKE-RULE ASS2EQN MAKE-EQN AC-SUP-TERM PROCESS-NEW-AC-CP2 PROCESS-NEW-AC-CP RULE-NUMS-FROM-SOURCE SUBST-QUANT-FORM SUBSTVARFOR BREAK-ASS PROCESS-ASS PROCESS-ASS1 PROCESS-ASS2 PROCESS-ASS-SIMPLE FLATTEN-RULES2 FLATTEN-RULES))