(trace cover-normal-proof)
(trace cover-normalize)
(trace cover-condi-norm)
(trace simplify-all-premises)
(trace simplify-one-pre)
(trace norm-one-pre)
(trace cover-norm-term)
(trace norm-bool-innermost)

(defclass rrl-system ()
  ((rules                   :initform $rule-set :accessor rules)
   (equations               :initform $eqn-set  :accessor equations)
   (depth-of-simplification :initform $over-rewrite :accessor depth-of-simplification)
   (premises                :initform $premises-set :accessor premises)
   (var-premises            :initform $var-premises :accessor var-premises)
   ))

(defun make-rrl-system ()
  (make-instance 'rrl-system))

(defvar *rrl-system* (make-rrl-system))

(defun get-rrl-system ()
  *rrl-system*)

(defmethod show ((rrl-system rrl-system) &optional (stream t))
  (format stream "RRL-SYSTEM~%")
  (format stream "~%")
  (format stream "rules :~%")
  (write-rules (rules rrl-system) stream)
  (format stream "~%")
  (format stream "depth of simplification : ~A~%" (depth-of-simplification rrl-system))
  (format stream "~%")
  (format stream "premises :~%")
  (write-premises (premises rrl-system ) stream)
  (format stream "~%")
  (format stream "var-premises :~%")
  (write-premises (var-premises rrl-system) stream)
  )

(defun show-rrl (&optional (stream t))
  (show (get-rrl-system) stream))
